
PSSI_GPDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009364  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e7  0800959c  0800959c  0001959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  08009794  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  200000c0  08009844  000200c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  200003d4  08009844  000203d4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015016  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002901  00000000  00000000  000350fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001018  00000000  00000000  00037a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f10  00000000  00000000  00038a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033526  00000000  00000000  00039928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000151c8  00000000  00000000  0006ce4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001433ee  00000000  00000000  00082016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c5404  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a64  00000000  00000000  001c5454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000c0 	.word	0x200000c0
 8000254:	00000000 	.word	0x00000000
 8000258:	08009584 	.word	0x08009584

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000c4 	.word	0x200000c4
 8000274:	08009584 	.word	0x08009584

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b982 	b.w	80005a4 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002be:	4604      	mov	r4, r0
 80002c0:	460f      	mov	r7, r1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0xa0>
 80002c6:	428a      	cmp	r2, r1
 80002c8:	4694      	mov	ip, r2
 80002ca:	d961      	bls.n	8000390 <__udivmoddi4+0xd8>
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	b143      	cbz	r3, 80002e4 <__udivmoddi4+0x2c>
 80002d2:	f1c3 0120 	rsb	r1, r3, #32
 80002d6:	409f      	lsls	r7, r3
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	409c      	lsls	r4, r3
 80002de:	fa20 f101 	lsr.w	r1, r0, r1
 80002e2:	430f      	orrs	r7, r1
 80002e4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002e8:	fa1f fe8c 	uxth.w	lr, ip
 80002ec:	0c22      	lsrs	r2, r4, #16
 80002ee:	fbb7 f6f1 	udiv	r6, r7, r1
 80002f2:	fb01 7716 	mls	r7, r1, r6, r7
 80002f6:	fb06 f00e 	mul.w	r0, r6, lr
 80002fa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fe:	4290      	cmp	r0, r2
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x5c>
 8000302:	eb1c 0202 	adds.w	r2, ip, r2
 8000306:	f106 37ff 	add.w	r7, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x5a>
 800030c:	4290      	cmp	r0, r2
 800030e:	f200 8137 	bhi.w	8000580 <__udivmoddi4+0x2c8>
 8000312:	463e      	mov	r6, r7
 8000314:	1a12      	subs	r2, r2, r0
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb2 f0f1 	udiv	r0, r2, r1
 800031c:	fb01 2210 	mls	r2, r1, r0, r2
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000328:	45a6      	cmp	lr, r4
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x86>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 32ff 	add.w	r2, r0, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x84>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f200 811c 	bhi.w	8000574 <__udivmoddi4+0x2bc>
 800033c:	4610      	mov	r0, r2
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	eba4 040e 	sub.w	r4, r4, lr
 8000346:	2600      	movs	r6, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0x9a>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c5 4300 	strd	r4, r3, [r5]
 8000352:	4631      	mov	r1, r6
 8000354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000358:	428b      	cmp	r3, r1
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0xb8>
 800035c:	2d00      	cmp	r5, #0
 800035e:	f000 80fd 	beq.w	800055c <__udivmoddi4+0x2a4>
 8000362:	2600      	movs	r6, #0
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	4630      	mov	r0, r6
 800036a:	4631      	mov	r1, r6
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f683 	clz	r6, r3
 8000374:	2e00      	cmp	r6, #0
 8000376:	d14b      	bne.n	8000410 <__udivmoddi4+0x158>
 8000378:	428b      	cmp	r3, r1
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4630      	mov	r0, r6
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0e3      	beq.n	8000352 <__udivmoddi4+0x9a>
 800038a:	e9c5 4700 	strd	r4, r7, [r5]
 800038e:	e7e0      	b.n	8000352 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xdc>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809d 	bne.w	80004d8 <__udivmoddi4+0x220>
 800039e:	1a89      	subs	r1, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b297      	uxth	r7, r2
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f2fe 	udiv	r2, r1, lr
 80003ae:	fb0e 1112 	mls	r1, lr, r2, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb07 f002 	mul.w	r0, r7, r2
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4288      	cmp	r0, r1
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80cf 	beq.w	800057a <__udivmoddi4+0x2c2>
 80003dc:	4642      	mov	r2, r8
 80003de:	1a09      	subs	r1, r1, r0
 80003e0:	b2a4      	uxth	r4, r4
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f2:	42a7      	cmp	r7, r4
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x150>
 80003f6:	eb1c 0404 	adds.w	r4, ip, r4
 80003fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14e>
 8000400:	42a7      	cmp	r7, r4
 8000402:	f200 80b4 	bhi.w	800056e <__udivmoddi4+0x2b6>
 8000406:	4608      	mov	r0, r1
 8000408:	1be4      	subs	r4, r4, r7
 800040a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800040e:	e79b      	b.n	8000348 <__udivmoddi4+0x90>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa01 f406 	lsl.w	r4, r1, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	40f9      	lsrs	r1, r7
 8000420:	40b2      	lsls	r2, r6
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa20 f307 	lsr.w	r3, r0, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	431c      	orrs	r4, r3
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	0c20      	lsrs	r0, r4, #16
 800043a:	fbb1 f8f9 	udiv	r8, r1, r9
 800043e:	fb09 1118 	mls	r1, r9, r8, r1
 8000442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000446:	fb08 f00e 	mul.w	r0, r8, lr
 800044a:	4288      	cmp	r0, r1
 800044c:	d90f      	bls.n	800046e <__udivmoddi4+0x1b6>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f108 3aff 	add.w	sl, r8, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	4288      	cmp	r0, r1
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ce>
 800046c:	46d0      	mov	r8, sl
 800046e:	1a09      	subs	r1, r1, r0
 8000470:	b2a4      	uxth	r4, r4
 8000472:	fbb1 f0f9 	udiv	r0, r1, r9
 8000476:	fb09 1110 	mls	r1, r9, r0, r1
 800047a:	fb00 fe0e 	mul.w	lr, r0, lr
 800047e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000482:	458e      	cmp	lr, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1de>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d201      	bcs.n	8000494 <__udivmoddi4+0x1dc>
 8000490:	458e      	cmp	lr, r1
 8000492:	d87f      	bhi.n	8000594 <__udivmoddi4+0x2dc>
 8000494:	4620      	mov	r0, r4
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	fba0 9802 	umull	r9, r8, r0, r2
 80004a2:	4541      	cmp	r1, r8
 80004a4:	464c      	mov	r4, r9
 80004a6:	46c6      	mov	lr, r8
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0x1f8>
 80004aa:	d106      	bne.n	80004ba <__udivmoddi4+0x202>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d204      	bcs.n	80004ba <__udivmoddi4+0x202>
 80004b0:	3801      	subs	r0, #1
 80004b2:	ebb9 0402 	subs.w	r4, r9, r2
 80004b6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	d070      	beq.n	80005a0 <__udivmoddi4+0x2e8>
 80004be:	1b1a      	subs	r2, r3, r4
 80004c0:	eb61 010e 	sbc.w	r1, r1, lr
 80004c4:	fa22 f306 	lsr.w	r3, r2, r6
 80004c8:	fa01 f707 	lsl.w	r7, r1, r7
 80004cc:	40f1      	lsrs	r1, r6
 80004ce:	2600      	movs	r6, #0
 80004d0:	431f      	orrs	r7, r3
 80004d2:	e9c5 7100 	strd	r7, r1, [r5]
 80004d6:	e73c      	b.n	8000352 <__udivmoddi4+0x9a>
 80004d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004dc:	f1c3 0020 	rsb	r0, r3, #32
 80004e0:	fa01 f203 	lsl.w	r2, r1, r3
 80004e4:	fa21 f600 	lsr.w	r6, r1, r0
 80004e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ec:	fa24 f100 	lsr.w	r1, r4, r0
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	409c      	lsls	r4, r3
 80004f6:	4311      	orrs	r1, r2
 80004f8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004fc:	0c0a      	lsrs	r2, r1, #16
 80004fe:	fb0e 6610 	mls	r6, lr, r0, r6
 8000502:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000506:	fb00 f607 	mul.w	r6, r0, r7
 800050a:	4296      	cmp	r6, r2
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x274>
 800050e:	eb1c 0202 	adds.w	r2, ip, r2
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	4296      	cmp	r6, r2
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x272>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d6>
 800052a:	4640      	mov	r0, r8
 800052c:	1b92      	subs	r2, r2, r6
 800052e:	b289      	uxth	r1, r1
 8000530:	fbb2 f6fe 	udiv	r6, r2, lr
 8000534:	fb0e 2216 	mls	r2, lr, r6, r2
 8000538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800053c:	fb06 f207 	mul.w	r2, r6, r7
 8000540:	428a      	cmp	r2, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x29c>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f106 38ff 	add.w	r8, r6, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x29a>
 800054e:	428a      	cmp	r2, r1
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2e2>
 8000552:	4646      	mov	r6, r8
 8000554:	1a89      	subs	r1, r1, r2
 8000556:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055a:	e725      	b.n	80003a8 <__udivmoddi4+0xf0>
 800055c:	462e      	mov	r6, r5
 800055e:	4628      	mov	r0, r5
 8000560:	e6f7      	b.n	8000352 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb61 0303 	sbc.w	r3, r1, r3
 8000568:	2001      	movs	r0, #1
 800056a:	461f      	mov	r7, r3
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xce>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e749      	b.n	8000408 <__udivmoddi4+0x150>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e1      	b.n	800033e <__udivmoddi4+0x86>
 800057a:	3a02      	subs	r2, #2
 800057c:	4461      	add	r1, ip
 800057e:	e72e      	b.n	80003de <__udivmoddi4+0x126>
 8000580:	3e02      	subs	r6, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c6      	b.n	8000314 <__udivmoddi4+0x5c>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b6>
 800058e:	3802      	subs	r0, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x274>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	e77d      	b.n	8000496 <__udivmoddi4+0x1de>
 800059a:	3e02      	subs	r6, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x29c>
 80005a0:	462e      	mov	r6, r5
 80005a2:	e6d6      	b.n	8000352 <__udivmoddi4+0x9a>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_PSSIRXQueue_Config>:
  * @brief  DMA Linked-list PSSIRXQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_PSSIRXQueue_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	; 0x70
 80005ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 80005b4:	2322      	movs	r3, #34	; 0x22
 80005b6:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 80005b8:	2356      	movs	r3, #86	; 0x56
 80005ba:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80005c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005cc:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80005d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005d6:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80005e4:	2300      	movs	r3, #0
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80005fc:	2300      	movs	r3, #0
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build PSSIRXNode1 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &PSSIRXNode1);
 8000614:	463b      	mov	r3, r7
 8000616:	491f      	ldr	r1, [pc, #124]	; (8000694 <MX_PSSIRXQueue_Config+0xec>)
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fd0b 	bl	8002034 <HAL_DMAEx_List_BuildNode>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000626:	4313      	orrs	r3, r2
 8000628:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert PSSIRXNode1 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&PSSIRXQueue, &PSSIRXNode1);
 800062c:	4919      	ldr	r1, [pc, #100]	; (8000694 <MX_PSSIRXQueue_Config+0xec>)
 800062e:	481a      	ldr	r0, [pc, #104]	; (8000698 <MX_PSSIRXQueue_Config+0xf0>)
 8000630:	f001 fd16 	bl	8002060 <HAL_DMAEx_List_InsertNode_Tail>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800063c:	4313      	orrs	r3, r2
 800063e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build PSSIRXNode2 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &PSSIRXNode2);
 8000642:	463b      	mov	r3, r7
 8000644:	4915      	ldr	r1, [pc, #84]	; (800069c <MX_PSSIRXQueue_Config+0xf4>)
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fcf4 	bl	8002034 <HAL_DMAEx_List_BuildNode>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000654:	4313      	orrs	r3, r2
 8000656:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert PSSIRXNode2 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&PSSIRXQueue, &PSSIRXNode2);
 800065a:	4910      	ldr	r1, [pc, #64]	; (800069c <MX_PSSIRXQueue_Config+0xf4>)
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <MX_PSSIRXQueue_Config+0xf0>)
 800065e:	f001 fcff 	bl	8002060 <HAL_DMAEx_List_InsertNode_Tail>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800066a:	4313      	orrs	r3, r2
 800066c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&PSSIRXQueue, &PSSIRXNode1);
 8000670:	4908      	ldr	r1, [pc, #32]	; (8000694 <MX_PSSIRXQueue_Config+0xec>)
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_PSSIRXQueue_Config+0xf0>)
 8000674:	f001 fd6c 	bl	8002150 <HAL_DMAEx_List_SetCircularModeConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000680:	4313      	orrs	r3, r2
 8000682:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8000686:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800068a:	4618      	mov	r0, r3
 800068c:	3770      	adds	r7, #112	; 0x70
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000dc 	.word	0x200000dc
 8000698:	20000100 	.word	0x20000100
 800069c:	20000118 	.word	0x20000118

080006a0 <MX_PSSITXQueue_Config>:
  * @brief  DMA Linked-list PSSITXQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_PSSITXQueue_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09c      	sub	sp, #112	; 0x70
 80006a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 80006ac:	2322      	movs	r3, #34	; 0x22
 80006ae:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 80006b0:	2356      	movs	r3, #86	; 0x56
 80006b2:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80006c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006c4:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80006ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006ce:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80006dc:	2300      	movs	r3, #0
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80006f4:	2300      	movs	r3, #0
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build PSSITXNode1 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &PSSITXNode1);
 800070c:	463b      	mov	r3, r7
 800070e:	491f      	ldr	r1, [pc, #124]	; (800078c <MX_PSSITXQueue_Config+0xec>)
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fc8f 	bl	8002034 <HAL_DMAEx_List_BuildNode>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800071e:	4313      	orrs	r3, r2
 8000720:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert PSSITXNode1 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&PSSITXQueue, &PSSITXNode1);
 8000724:	4919      	ldr	r1, [pc, #100]	; (800078c <MX_PSSITXQueue_Config+0xec>)
 8000726:	481a      	ldr	r0, [pc, #104]	; (8000790 <MX_PSSITXQueue_Config+0xf0>)
 8000728:	f001 fc9a 	bl	8002060 <HAL_DMAEx_List_InsertNode_Tail>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000734:	4313      	orrs	r3, r2
 8000736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build PSSITXNode2 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &PSSITXNode2);
 800073a:	463b      	mov	r3, r7
 800073c:	4915      	ldr	r1, [pc, #84]	; (8000794 <MX_PSSITXQueue_Config+0xf4>)
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fc78 	bl	8002034 <HAL_DMAEx_List_BuildNode>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800074c:	4313      	orrs	r3, r2
 800074e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert PSSITXNode2 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&PSSITXQueue, &PSSITXNode2);
 8000752:	4910      	ldr	r1, [pc, #64]	; (8000794 <MX_PSSITXQueue_Config+0xf4>)
 8000754:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_PSSITXQueue_Config+0xf0>)
 8000756:	f001 fc83 	bl	8002060 <HAL_DMAEx_List_InsertNode_Tail>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000762:	4313      	orrs	r3, r2
 8000764:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&PSSITXQueue, &PSSITXNode1);
 8000768:	4908      	ldr	r1, [pc, #32]	; (800078c <MX_PSSITXQueue_Config+0xec>)
 800076a:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_PSSITXQueue_Config+0xf0>)
 800076c:	f001 fcf0 	bl	8002150 <HAL_DMAEx_List_SetCircularModeConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000778:	4313      	orrs	r3, r2
 800077a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 800077e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000782:	4618      	mov	r0, r3
 8000784:	3770      	adds	r7, #112	; 0x70
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000013c 	.word	0x2000013c
 8000790:	20000160 	.word	0x20000160
 8000794:	20000178 	.word	0x20000178

08000798 <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <_write+0x28>)
 80007b0:	f007 f9a8 	bl	8007b04 <HAL_UART_Transmit>
  return len;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000328 	.word	0x20000328

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fe56 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f8a6 	bl	800091c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007d0:	f000 f900 	bl	80009d4 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  MX_PSSIRXQueue_Config();
 80007d4:	f7ff fee8 	bl	80005a8 <MX_PSSIRXQueue_Config>
  MX_PSSITXQueue_Config();
 80007d8:	f7ff ff62 	bl	80006a0 <MX_PSSITXQueue_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 fa0a 	bl	8000bf4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80007e0:	f000 f908 	bl	80009f4 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 80007e4:	f000 f980 	bl	8000ae8 <MX_ICACHE_Init>
  MX_PSSI_Init();
 80007e8:	f000 f992 	bl	8000b10 <MX_PSSI_Init>
  MX_USART1_UART_Init();
 80007ec:	f000 f9b6 	bl	8000b5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &PSSITXQueue);
 80007f0:	493b      	ldr	r1, [pc, #236]	; (80008e0 <main+0x11c>)
 80007f2:	483c      	ldr	r0, [pc, #240]	; (80008e4 <main+0x120>)
 80007f4:	f001 fd1a 	bl	800222c <HAL_DMAEx_List_LinkQ>
  __HAL_LINKDMA(&hpssi, hdmatx, handle_GPDMA1_Channel13);
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <main+0x124>)
 80007fa:	4a3a      	ldr	r2, [pc, #232]	; (80008e4 <main+0x120>)
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <main+0x120>)
 8000800:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <main+0x124>)
 8000802:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &PSSIRXQueue);
 8000804:	4939      	ldr	r1, [pc, #228]	; (80008ec <main+0x128>)
 8000806:	483a      	ldr	r0, [pc, #232]	; (80008f0 <main+0x12c>)
 8000808:	f001 fd10 	bl	800222c <HAL_DMAEx_List_LinkQ>
  __HAL_LINKDMA(&hpssi, hdmarx, handle_GPDMA1_Channel12);
 800080c:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <main+0x124>)
 800080e:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <main+0x12c>)
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <main+0x12c>)
 8000814:	4a34      	ldr	r2, [pc, #208]	; (80008e8 <main+0x124>)
 8000816:	65da      	str	r2, [r3, #92]	; 0x5c


  }
#else
  /*PSSI slave Part*/
  printf("Hello this is the slave board \n\r");
 8000818:	4836      	ldr	r0, [pc, #216]	; (80008f4 <main+0x130>)
 800081a:	f007 ff01 	bl	8008620 <iprintf>
    HAL_Delay(500);
 800081e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000822:	f000 fead 	bl	8001580 <HAL_Delay>
  /* Start transmitting the data */
  if(HAL_PSSI_Transmit_DMA(&hpssi, (uint32_t*)(pData8_S_TRSMT), sizeof(pData8_S_TRSMT))!= HAL_OK)
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4933      	ldr	r1, [pc, #204]	; (80008f8 <main+0x134>)
 800082a:	482f      	ldr	r0, [pc, #188]	; (80008e8 <main+0x124>)
 800082c:	f002 fc20 	bl	8003070 <HAL_PSSI_Transmit_DMA>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <main+0x76>
  {
    Error_Handler();
 8000836:	f000 fb23 	bl	8000e80 <Error_Handler>
  }

  while(PSSI_HAL_PSSI_TransmitComplete_count != 1)
 800083a:	bf00      	nop
 800083c:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <main+0x138>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d1fb      	bne.n	800083c <main+0x78>
    /* wait until transmit data is complete */
  }



  HAL_Delay(2);
 8000844:	2002      	movs	r0, #2
 8000846:	f000 fe9b 	bl	8001580 <HAL_Delay>
  /* Start receiving the data */
  if(HAL_PSSI_Receive_DMA(&hpssi, (uint32_t*)(pData8_S_RCV), sizeof(pData8_S_RCV)/4)!= HAL_OK)
 800084a:	2210      	movs	r2, #16
 800084c:	492c      	ldr	r1, [pc, #176]	; (8000900 <main+0x13c>)
 800084e:	4826      	ldr	r0, [pc, #152]	; (80008e8 <main+0x124>)
 8000850:	f002 fd2c 	bl	80032ac <HAL_PSSI_Receive_DMA>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <main+0x9a>
  {
    Error_Handler();
 800085a:	f000 fb11 	bl	8000e80 <Error_Handler>
  }

  while(PSSI_HAL_PSSI_ReceiveComplete_count != 1)
 800085e:	bf00      	nop
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <main+0x140>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d1fb      	bne.n	8000860 <main+0x9c>


  /*********************************************************************************************/

  /* Check first that the transmitted data is received */
  for(i = 0; i < strlen(pData8_S_TRSMT) ;i++)
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <main+0x144>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e014      	b.n	800089a <main+0xd6>
  {
    if(pData8_S_TRSMT[i] != pData8_S_RCV[i])
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <main+0x144>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <main+0x134>)
 8000876:	5cd2      	ldrb	r2, [r2, r3]
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <main+0x144>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4920      	ldr	r1, [pc, #128]	; (8000900 <main+0x13c>)
 800087e:	5ccb      	ldrb	r3, [r1, r3]
 8000880:	429a      	cmp	r2, r3
 8000882:	d005      	beq.n	8000890 <main+0xcc>
    {
      data_cmp++;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <main+0x148>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <main+0x148>)
 800088c:	6013      	str	r3, [r2, #0]
	  break;
 800088e:	e00c      	b.n	80008aa <main+0xe6>
  for(i = 0; i < strlen(pData8_S_TRSMT) ;i++)
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <main+0x144>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <main+0x144>)
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	4817      	ldr	r0, [pc, #92]	; (80008f8 <main+0x134>)
 800089c:	f7ff fcec 	bl	8000278 <strlen>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <main+0x144>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d8e2      	bhi.n	8000870 <main+0xac>
    }
  }

  /*if OK , check then, that the Master has modified the transmitted data*/
  if((data_cmp == 0) && (strstr(pData8_S_RCV," Master") != 0))
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <main+0x148>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d112      	bne.n	80008d8 <main+0x114>
 80008b2:	4917      	ldr	r1, [pc, #92]	; (8000910 <main+0x14c>)
 80008b4:	4812      	ldr	r0, [pc, #72]	; (8000900 <main+0x13c>)
 80008b6:	f007 fecb 	bl	8008650 <strstr>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00b      	beq.n	80008d8 <main+0x114>
  { /* Infinite loop */
    while (1)
    {
    	printf("data has been modified\n\r");
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <main+0x150>)
 80008c2:	f007 fead 	bl	8008620 <iprintf>
    	printf("%s\n\r",pData8_S_RCV);
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <main+0x13c>)
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <main+0x154>)
 80008ca:	f007 fea9 	bl	8008620 <iprintf>
    	HAL_Delay(1000);
 80008ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d2:	f000 fe55 	bl	8001580 <HAL_Delay>
    	printf("data has been modified\n\r");
 80008d6:	e7f3      	b.n	80008c0 <main+0xfc>
    }
  }
  else /*KO*/
  {
    Error_Handler();
 80008d8:	f000 fad2 	bl	8000e80 <Error_Handler>
#endif /*MASTER_BOARD*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x118>
 80008de:	bf00      	nop
 80008e0:	20000160 	.word	0x20000160
 80008e4:	20000200 	.word	0x20000200
 80008e8:	200002f0 	.word	0x200002f0
 80008ec:	20000100 	.word	0x20000100
 80008f0:	20000278 	.word	0x20000278
 80008f4:	0800959c 	.word	0x0800959c
 80008f8:	20000000 	.word	0x20000000
 80008fc:	200001a4 	.word	0x200001a4
 8000900:	200001c0 	.word	0x200001c0
 8000904:	200001a8 	.word	0x200001a8
 8000908:	200001a0 	.word	0x200001a0
 800090c:	2000019c 	.word	0x2000019c
 8000910:	080095c0 	.word	0x080095c0
 8000914:	080095c8 	.word	0x080095c8
 8000918:	080095e4 	.word	0x080095e4

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09e      	sub	sp, #120	; 0x78
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2260      	movs	r2, #96	; 0x60
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f007 fe70 	bl	8008610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000940:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000944:	f002 ffd6 	bl	80038f4 <HAL_PWREx_ControlVoltageScaling>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800094e:	f000 fa97 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000952:	2310      	movs	r3, #16
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000956:	2301      	movs	r3, #1
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800095e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000968:	2301      	movs	r3, #1
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000970:	2301      	movs	r3, #1
 8000972:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000974:	2350      	movs	r3, #80	; 0x50
 8000976:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000984:	2300      	movs	r3, #0
 8000986:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f8ab 	bl	8003aec <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800099c:	f000 fa70 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	231f      	movs	r3, #31
 80009a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	2104      	movs	r1, #4
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 ff71 	bl	80048a4 <HAL_RCC_ClockConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009c8:	f000 fa5a 	bl	8000e80 <Error_Handler>
  }
}
 80009cc:	bf00      	nop
 80009ce:	3778      	adds	r7, #120	; 0x78
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80009d8:	f003 f868 	bl	8003aac <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009dc:	f003 f876 	bl	8003acc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80009e0:	2002      	movs	r0, #2
 80009e2:	f003 f813 	bl	8003a0c <HAL_PWREx_ConfigSupply>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80009ec:	f000 fa48 	bl	8000e80 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <MX_GPDMA1_Init+0xe0>)
 80009fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a00:	4a34      	ldr	r2, [pc, #208]	; (8000ad4 <MX_GPDMA1_Init+0xe0>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_GPDMA1_Init+0xe0>)
 8000a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2054      	movs	r0, #84	; 0x54
 8000a1e:	f000 feae 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8000a22:	2054      	movs	r0, #84	; 0x54
 8000a24:	f000 fec5 	bl	80017b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2055      	movs	r0, #85	; 0x55
 8000a2e:	f000 fea6 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 8000a32:	2055      	movs	r0, #85	; 0x55
 8000a34:	f000 febd 	bl	80017b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <MX_GPDMA1_Init+0xe8>)
 8000a3c:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a58:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a5c:	2281      	movs	r2, #129	; 0x81
 8000a5e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8000a60:	481d      	ldr	r0, [pc, #116]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a62:	f001 f925 	bl	8001cb0 <HAL_DMAEx_List_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 8000a6c:	f000 fa08 	bl	8000e80 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a70:	2110      	movs	r1, #16
 8000a72:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <MX_GPDMA1_Init+0xe4>)
 8000a74:	f001 f8ba 	bl	8001bec <HAL_DMA_ConfigChannelAttributes>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_GPDMA1_Init+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 f9ff 	bl	8000e80 <Error_Handler>
  }
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <MX_GPDMA1_Init+0xf0>)
 8000a86:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a9a:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000aa2:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000aa6:	2281      	movs	r2, #129	; 0x81
 8000aa8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000aac:	f001 f900 	bl	8001cb0 <HAL_DMAEx_List_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_GPDMA1_Init+0xc6>
  {
    Error_Handler();
 8000ab6:	f000 f9e3 	bl	8000e80 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000aba:	2110      	movs	r1, #16
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_GPDMA1_Init+0xec>)
 8000abe:	f001 f895 	bl	8001bec <HAL_DMA_ConfigChannelAttributes>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_GPDMA1_Init+0xd8>
  {
    Error_Handler();
 8000ac8:	f000 f9da 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	46020c00 	.word	0x46020c00
 8000ad8:	20000200 	.word	0x20000200
 8000adc:	400206d0 	.word	0x400206d0
 8000ae0:	20000278 	.word	0x20000278
 8000ae4:	40020650 	.word	0x40020650

08000ae8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000aec:	2000      	movs	r0, #0
 8000aee:	f002 fa09 	bl	8002f04 <HAL_ICACHE_ConfigAssociativityMode>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000af8:	f000 f9c2 	bl	8000e80 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000afc:	f002 fa22 	bl	8002f44 <HAL_ICACHE_Enable>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b06:	f000 f9bb 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_PSSI_Init>:
  * @brief PSSI Initialization Function
  * @param None
  * @retval None
  */
static void MX_PSSI_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END PSSI_Init 0 */

  /* USER CODE BEGIN PSSI_Init 1 */

  /* USER CODE END PSSI_Init 1 */
  hpssi.Instance = PSSI;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <MX_PSSI_Init+0x48>)
 8000b18:	601a      	str	r2, [r3, #0]
  hpssi.Init.DataWidth = HAL_PSSI_32BITS;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
  hpssi.Init.BusWidth = HAL_PSSI_8LINES;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hpssi.Init.ControlSignal = HAL_PSSI_DE_RDY_ALT_ENABLE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b28:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b2c:	60da      	str	r2, [r3, #12]
  hpssi.Init.ClockPolarity = HAL_PSSI_FALLING_EDGE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hpssi.Init.DataEnablePolarity = HAL_PSSI_DEPOL_ACTIVE_LOW;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hpssi.Init.ReadyPolarity = HAL_PSSI_RDYPOL_ACTIVE_LOW;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_PSSI_Init(&hpssi) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_PSSI_Init+0x44>)
 8000b42:	f002 fa51 	bl	8002fe8 <HAL_PSSI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_PSSI_Init+0x40>
  {
    Error_Handler();
 8000b4c:	f000 f998 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN PSSI_Init 2 */

  /* USER CODE END PSSI_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200002f0 	.word	0x200002f0
 8000b58:	4202c400 	.word	0x4202c400

08000b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <MX_USART1_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba6:	f006 ff5d 	bl	8007a64 <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f966 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bb8:	f007 fc36 	bl	8008428 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f000 f95d 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bca:	f007 fc6b 	bl	80084a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f954 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bda:	f007 fbec 	bl	80083b6 <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f94c 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000328 	.word	0x20000328
 8000bf0:	40013800 	.word	0x40013800

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b7c      	ldr	r3, [pc, #496]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c10:	4a7a      	ldr	r2, [pc, #488]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c1a:	4b78      	ldr	r3, [pc, #480]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	4b74      	ldr	r3, [pc, #464]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c2e:	4a73      	ldr	r2, [pc, #460]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c38:	4b70      	ldr	r3, [pc, #448]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b6d      	ldr	r3, [pc, #436]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c4c:	4a6b      	ldr	r2, [pc, #428]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c56:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b65      	ldr	r3, [pc, #404]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c6a:	4a64      	ldr	r2, [pc, #400]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c74:	4b61      	ldr	r3, [pc, #388]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c88:	4a5c      	ldr	r2, [pc, #368]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c92:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca0:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ca6:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cb0:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	484f      	ldr	r0, [pc, #316]	; (8000e00 <MX_GPIO_Init+0x20c>)
 8000cc4:	f002 f906 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	484d      	ldr	r0, [pc, #308]	; (8000e04 <MX_GPIO_Init+0x210>)
 8000cce:	f002 f901 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	484c      	ldr	r0, [pc, #304]	; (8000e08 <MX_GPIO_Init+0x214>)
 8000cd8:	f002 f8fc 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <MX_GPIO_Init+0x218>)
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4844      	ldr	r0, [pc, #272]	; (8000e04 <MX_GPIO_Init+0x210>)
 8000cf2:	f001 ff17 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	483e      	ldr	r0, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x210>)
 8000d0a:	f001 ff0b 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4839      	ldr	r0, [pc, #228]	; (8000e10 <MX_GPIO_Init+0x21c>)
 8000d2a:	f001 fefb 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4831      	ldr	r0, [pc, #196]	; (8000e08 <MX_GPIO_Init+0x214>)
 8000d44:	f001 feee 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	482a      	ldr	r0, [pc, #168]	; (8000e08 <MX_GPIO_Init+0x214>)
 8000d5e:	f001 fee1 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000d62:	2304      	movs	r3, #4
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4821      	ldr	r0, [pc, #132]	; (8000e00 <MX_GPIO_Init+0x20c>)
 8000d7a:	f001 fed3 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	481b      	ldr	r0, [pc, #108]	; (8000e04 <MX_GPIO_Init+0x210>)
 8000d96:	f001 fec5 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000dac:	230a      	movs	r3, #10
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4816      	ldr	r0, [pc, #88]	; (8000e10 <MX_GPIO_Init+0x21c>)
 8000db8:	f001 feb4 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <MX_GPIO_Init+0x21c>)
 8000dd2:	f001 fea7 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_GPIO_Init+0x214>)
 8000dee:	f001 fe99 	bl	8002b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	46020c00 	.word	0x46020c00
 8000e00:	42021800 	.word	0x42021800
 8000e04:	42020800 	.word	0x42020800
 8000e08:	42020400 	.word	0x42020400
 8000e0c:	10110000 	.word	0x10110000
 8000e10:	42020000 	.word	0x42020000

08000e14 <HAL_PSSI_TxCpltCallback>:
#endif /* MASTER_BOARD */



void HAL_PSSI_TxCpltCallback(PSSI_HandleTypeDef *hpssi)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  PSSI_HAL_PSSI_TransmitComplete_count++;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_PSSI_TxCpltCallback+0x20>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_PSSI_TxCpltCallback+0x20>)
 8000e24:	6013      	str	r3, [r2, #0]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	200001a4 	.word	0x200001a4

08000e38 <HAL_PSSI_RxCpltCallback>:
  * @brief PSSI receive complete callback
  * @par hppsi: PSSI HAL handle
  * @retval None
  */
 void HAL_PSSI_RxCpltCallback(PSSI_HandleTypeDef *hpssi)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  PSSI_HAL_PSSI_ReceiveComplete_count++;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_PSSI_RxCpltCallback+0x20>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_PSSI_RxCpltCallback+0x20>)
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200001a8 	.word	0x200001a8

08000e5c <HAL_PSSI_ErrorCallback>:
  * @brief PSSI transfer error callback
  * @par hppsi: PSSI HAL handle
  * @retval None
  */
void HAL_PSSI_ErrorCallback(PSSI_HandleTypeDef *hpssi)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  PSSI_HAL_PSSI_ErrorCallback_count++;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_PSSI_ErrorCallback+0x20>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_PSSI_ErrorCallback+0x20>)
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200001ac 	.word	0x200001ac

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fc59 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	206b      	movs	r0, #107	; 0x6b
 8000ebc:	f000 fc5f 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 8000ec0:	206b      	movs	r0, #107	; 0x6b
 8000ec2:	f000 fc76 	bl	80017b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	46020c00 	.word	0x46020c00

08000ed4 <HAL_PSSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hpssi: PSSI handle pointer
* @retval None
*/
void HAL_PSSI_MspInit(PSSI_HandleTypeDef* hpssi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hpssi->Instance==PSSI)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a76      	ldr	r2, [pc, #472]	; (80010cc <HAL_PSSI_MspInit+0x1f8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 80e5 	bne.w	80010c2 <HAL_PSSI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN PSSI_MspInit 0 */

  /* USER CODE END PSSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8000ef8:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000efe:	4a74      	ldr	r2, [pc, #464]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f08:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f16:	4b6e      	ldr	r3, [pc, #440]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f1c:	4a6c      	ldr	r2, [pc, #432]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f26:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f44:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f58:	4a5d      	ldr	r2, [pc, #372]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f62:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f70:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f76:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_PSSI_MspInit+0x1fc>)
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> PSSI_D3
    PA10     ------> PSSI_D1
    PD3     ------> PSSI_D5
    PB7     ------> PSSI_RDY
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fac:	2370      	movs	r3, #112	; 0x70
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_PSSI;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4843      	ldr	r0, [pc, #268]	; (80010d4 <HAL_PSSI_MspInit+0x200>)
 8000fc8:	f001 fdac 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_PSSI;
 8000fdc:	230a      	movs	r3, #10
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	483c      	ldr	r0, [pc, #240]	; (80010d8 <HAL_PSSI_MspInit+0x204>)
 8000fe8:	f001 fd9c 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_PSSI;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4834      	ldr	r0, [pc, #208]	; (80010d8 <HAL_PSSI_MspInit+0x204>)
 8001008:	f001 fd8c 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800100c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_PSSI;
 800101e:	230a      	movs	r3, #10
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	482c      	ldr	r0, [pc, #176]	; (80010dc <HAL_PSSI_MspInit+0x208>)
 800102a:	f001 fd7b 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_PSSI;
 8001040:	2304      	movs	r3, #4
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <HAL_PSSI_MspInit+0x208>)
 800104c:	f001 fd6a 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_PSSI;
 8001062:	2305      	movs	r3, #5
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	481a      	ldr	r0, [pc, #104]	; (80010d8 <HAL_PSSI_MspInit+0x204>)
 800106e:	f001 fd59 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001072:	2308      	movs	r3, #8
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_PSSI;
 8001082:	2304      	movs	r3, #4
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	4814      	ldr	r0, [pc, #80]	; (80010e0 <HAL_PSSI_MspInit+0x20c>)
 800108e:	f001 fd49 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_PSSI;
 80010a2:	230a      	movs	r3, #10
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <HAL_PSSI_MspInit+0x210>)
 80010ae:	f001 fd39 	bl	8002b24 <HAL_GPIO_Init>

    /* PSSI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2077      	movs	r0, #119	; 0x77
 80010b8:	f000 fb61 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80010bc:	2077      	movs	r0, #119	; 0x77
 80010be:	f000 fb78 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN PSSI_MspInit 1 */

  /* USER CODE END PSSI_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3738      	adds	r7, #56	; 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	4202c400 	.word	0x4202c400
 80010d0:	46020c00 	.word	0x46020c00
 80010d4:	42021000 	.word	0x42021000
 80010d8:	42020000 	.word	0x42020000
 80010dc:	42020800 	.word	0x42020800
 80010e0:	42020c00 	.word	0x42020c00
 80010e4:	42020400 	.word	0x42020400

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0be      	sub	sp, #248	; 0xf8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	22c8      	movs	r2, #200	; 0xc8
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f007 fa81 	bl	8008610 <memset>
  if(huart->Instance==USART1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a39      	ldr	r2, [pc, #228]	; (80011f8 <HAL_UART_MspInit+0x110>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d16a      	bne.n	80011ee <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001118:	f04f 0201 	mov.w	r2, #1
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001124:	2300      	movs	r3, #0
 8001126:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4618      	mov	r0, r3
 800112e:	f003 ff8f 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001138:	f7ff fea2 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_UART_MspInit+0x114>)
 800113e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001142:	4a2e      	ldr	r2, [pc, #184]	; (80011fc <HAL_UART_MspInit+0x114>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_UART_MspInit+0x114>)
 800114e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <HAL_UART_MspInit+0x114>)
 800115c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001160:	4a26      	ldr	r2, [pc, #152]	; (80011fc <HAL_UART_MspInit+0x114>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_UART_MspInit+0x114>)
 800116c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_UART_MspInit+0x114>)
 800117a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <HAL_UART_MspInit+0x114>)
 8001180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001184:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_UART_MspInit+0x114>)
 800118a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b0:	2307      	movs	r3, #7
 80011b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <HAL_UART_MspInit+0x118>)
 80011be:	f001 fcb1 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <HAL_UART_MspInit+0x11c>)
 80011ea:	f001 fc9b 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	37f8      	adds	r7, #248	; 0xf8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40013800 	.word	0x40013800
 80011fc:	46020c00 	.word	0x46020c00
 8001200:	42020000 	.word	0x42020000
 8001204:	42021800 	.word	0x42021800

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f974 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <GPDMA1_Channel12_IRQHandler+0x10>)
 8001262:	f000 fb49 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000278 	.word	0x20000278

08001270 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <GPDMA1_Channel13_IRQHandler+0x10>)
 8001276:	f000 fb3f 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000200 	.word	0x20000200

08001284 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8001288:	f001 fe6c 	bl	8002f64 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_PSSI_IRQHandler(&hpssi);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DCMI_PSSI_IRQHandler+0x10>)
 8001296:	f002 f927 	bl	80034e8 <HAL_PSSI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200002f0 	.word	0x200002f0

080012a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e00a      	b.n	80012cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012b6:	e000      	b.n	80012ba <_read+0x16>
 80012b8:	bf00      	nop
 80012ba:	4601      	mov	r1, r0
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf0      	blt.n	80012b6 <_read+0x12>
  }

  return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_close>:
  }
  return len;
}

int _close(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001306:	605a      	str	r2, [r3, #4]
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_isatty>:

int _isatty(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f007 f920 	bl	80085bc <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200c0000 	.word	0x200c0000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200003bc 	.word	0x200003bc
 80013b0:	200003d8 	.word	0x200003d8

080013b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <SystemInit+0x68>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <SystemInit+0x68>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <SystemInit+0x6c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <SystemInit+0x6c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <SystemInit+0x6c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <SystemInit+0x6c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <SystemInit+0x6c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <SystemInit+0x6c>)
 80013e6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013ea:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <SystemInit+0x6c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <SystemInit+0x6c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <SystemInit+0x6c>)
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <SystemInit+0x6c>)
 8001404:	2200      	movs	r2, #0
 8001406:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <SystemInit+0x68>)
 800140a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800140e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	46020c00 	.word	0x46020c00

08001424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001428:	f7ff ffc4 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800142c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800142e:	e003      	b.n	8001438 <LoopCopyDataInit>

08001430 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001432:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001434:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001436:	3104      	adds	r1, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <LoopForever+0xa>)
	ldr	r3, =_edata
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <LoopForever+0xe>)
	adds	r2, r0, r1
 800143c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800143e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001440:	d3f6      	bcc.n	8001430 <CopyDataInit>
	ldr	r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001444:	e002      	b.n	800144c <LoopFillZerobss>

08001446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001446:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001448:	f842 3b04 	str.w	r3, [r2], #4

0800144c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LoopForever+0x16>)
	cmp	r2, r3
 800144e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001450:	d3f9      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f007 f8b9 	bl	80085c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001456:	f7ff f9b5 	bl	80007c4 <main>

0800145a <LoopForever>:

LoopForever:
    b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800145c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001460:	08009794 	.word	0x08009794
	ldr	r0, =_sdata
 8001464:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001468:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 800146c:	200000c0 	.word	0x200000c0
	ldr	r3, = _ebss
 8001470:	200003d4 	.word	0x200003d4

08001474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_IRQHandler>
	...

08001478 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_Init+0x4c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_Init+0x4c>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f96d 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800148e:	f003 fbfb 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8001492:	4602      	mov	r2, r0
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_Init+0x50>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	490b      	ldr	r1, [pc, #44]	; (80014cc <HAL_Init+0x54>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x58>)
 80014a6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f813 	bl	80014d4 <HAL_InitTick>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e002      	b.n	80014be <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fce8 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000
 80014c8:	46020c00 	.word	0x46020c00
 80014cc:	080095ec 	.word	0x080095ec
 80014d0:	20000040 	.word	0x20000040

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_InitTick+0x60>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e021      	b.n	800152c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_InitTick+0x64>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_InitTick+0x60>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f965 	bl	80017ce <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f000 f92f 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_InitTick+0x68>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000048 	.word	0x20000048
 8001538:	20000040 	.word	0x20000040
 800153c:	20000044 	.word	0x20000044

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000048 	.word	0x20000048
 8001564:	200003c0 	.word	0x200003c0

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200003c0 	.word	0x200003c0

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000048 	.word	0x20000048

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff29 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff40 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff33 	bl	800162c <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa4 	bl	8001724 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e04f      	b.n	800189e <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_DMA_Start_IT+0x26>
 8001808:	2302      	movs	r3, #2
 800180a:	e048      	b.n	800189e <HAL_DMA_Start_IT+0xb8>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d136      	bne.n	800188e <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 fa15 	bl	8001c64 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8001848:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001860:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001878:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e007      	b.n	800189e <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e019      	b.n	80018ec <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d004      	beq.n	80018ce <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2204      	movs	r2, #4
 80018d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001908:	f023 030f 	bic.w	r3, r3, #15
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	3b50      	subs	r3, #80	; 0x50
 8001918:	09db      	lsrs	r3, r3, #7
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	2201      	movs	r2, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8154 	beq.w	8001be0 <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d011      	beq.n	800196a <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001974:	2b00      	cmp	r3, #0
 8001976:	d011      	beq.n	800199c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800198e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	f043 0202 	orr.w	r2, r3, #2
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d011      	beq.n	80019ce <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f043 0204 	orr.w	r2, r3, #4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d011      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	f043 0208 	orr.w	r2, r3, #8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d013      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00c      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d059      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d052      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5a:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d13b      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a76:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0202 	orr.w	r2, r2, #2
 8001a86:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001a9e:	e003      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	2201      	movs	r2, #1
 8001aba:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8087 	beq.w	8001be4 <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
        }

        return;
 8001ade:	e081      	b.n	8001be4 <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2205      	movs	r2, #5
 8001ae4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d039      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d032      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d012      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d111      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b40:	2201      	movs	r2, #1
 8001b42:	731a      	strb	r2, [r3, #12]
 8001b44:	e008      	b.n	8001b58 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b60:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d031      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0202 	orr.w	r2, r2, #2
 8001b90:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001ba8:	e003      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
 8001bde:	e002      	b.n	8001be6 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <HAL_DMA_IRQHandler+0x2ee>
        return;
 8001be4:	bf00      	nop
    }
  }
}
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e02b      	b.n	8001c58 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c08:	f023 030f 	bic.w	r3, r3, #15
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c16:	3b50      	subs	r3, #80	; 0x50
 8001c18:	09db      	lsrs	r3, r3, #7
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2201      	movs	r2, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d012      	beq.n	8001c56 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f003 0311 	and.w	r3, r3, #17
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	d106      	bne.n	8001c48 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e006      	b.n	8001c56 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	401a      	ands	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	041b      	lsls	r3, r3, #16
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b291      	uxth	r1, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001c90:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff fc56 	bl	8001568 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0dc      	b.n	8001e82 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6f      	ldr	r2, [pc, #444]	; (8001e8c <HAL_DMAEx_List_Init+0x1dc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	f000 809f 	beq.w	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6d      	ldr	r2, [pc, #436]	; (8001e90 <HAL_DMAEx_List_Init+0x1e0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	f000 8099 	beq.w	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6b      	ldr	r2, [pc, #428]	; (8001e94 <HAL_DMAEx_List_Init+0x1e4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f000 8093 	beq.w	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a69      	ldr	r2, [pc, #420]	; (8001e98 <HAL_DMAEx_List_Init+0x1e8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	f000 808d 	beq.w	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a67      	ldr	r2, [pc, #412]	; (8001e9c <HAL_DMAEx_List_Init+0x1ec>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	f000 8087 	beq.w	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_DMAEx_List_Init+0x1f0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	f000 8081 	beq.w	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a63      	ldr	r2, [pc, #396]	; (8001ea4 <HAL_DMAEx_List_Init+0x1f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d07b      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a62      	ldr	r2, [pc, #392]	; (8001ea8 <HAL_DMAEx_List_Init+0x1f8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d076      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a60      	ldr	r2, [pc, #384]	; (8001eac <HAL_DMAEx_List_Init+0x1fc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d071      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5f      	ldr	r2, [pc, #380]	; (8001eb0 <HAL_DMAEx_List_Init+0x200>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d06c      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_DMAEx_List_Init+0x204>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d067      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <HAL_DMAEx_List_Init+0x208>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d062      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a5a      	ldr	r2, [pc, #360]	; (8001ebc <HAL_DMAEx_List_Init+0x20c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d05d      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a59      	ldr	r2, [pc, #356]	; (8001ec0 <HAL_DMAEx_List_Init+0x210>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <HAL_DMAEx_List_Init+0x214>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d053      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_DMAEx_List_Init+0x218>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04e      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <HAL_DMAEx_List_Init+0x21c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d049      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a53      	ldr	r2, [pc, #332]	; (8001ed0 <HAL_DMAEx_List_Init+0x220>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d044      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a51      	ldr	r2, [pc, #324]	; (8001ed4 <HAL_DMAEx_List_Init+0x224>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d03f      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a50      	ldr	r2, [pc, #320]	; (8001ed8 <HAL_DMAEx_List_Init+0x228>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d03a      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <HAL_DMAEx_List_Init+0x22c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d035      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <HAL_DMAEx_List_Init+0x230>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d030      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_DMAEx_List_Init+0x234>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <HAL_DMAEx_List_Init+0x238>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d026      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_DMAEx_List_Init+0x23c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d021      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <HAL_DMAEx_List_Init+0x240>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d01c      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a45      	ldr	r2, [pc, #276]	; (8001ef4 <HAL_DMAEx_List_Init+0x244>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d017      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a44      	ldr	r2, [pc, #272]	; (8001ef8 <HAL_DMAEx_List_Init+0x248>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d012      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a42      	ldr	r2, [pc, #264]	; (8001efc <HAL_DMAEx_List_Init+0x24c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <HAL_DMAEx_List_Init+0x250>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <HAL_DMAEx_List_Init+0x254>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <HAL_DMAEx_List_Init+0x162>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3e      	ldr	r2, [pc, #248]	; (8001f08 <HAL_DMAEx_List_Init+0x258>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0206 	orr.w	r2, r2, #6
 8001e32:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001e34:	e00f      	b.n	8001e56 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001e36:	f7ff fb97 	bl	8001568 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d908      	bls.n	8001e56 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2210      	movs	r2, #16
 8001e48:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e015      	b.n	8001e82 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e8      	bne.n	8001e36 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fa77 	bl	8002358 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40020050 	.word	0x40020050
 8001e90:	50020050 	.word	0x50020050
 8001e94:	400200d0 	.word	0x400200d0
 8001e98:	500200d0 	.word	0x500200d0
 8001e9c:	40020150 	.word	0x40020150
 8001ea0:	50020150 	.word	0x50020150
 8001ea4:	400201d0 	.word	0x400201d0
 8001ea8:	500201d0 	.word	0x500201d0
 8001eac:	40020250 	.word	0x40020250
 8001eb0:	50020250 	.word	0x50020250
 8001eb4:	400202d0 	.word	0x400202d0
 8001eb8:	500202d0 	.word	0x500202d0
 8001ebc:	40020350 	.word	0x40020350
 8001ec0:	50020350 	.word	0x50020350
 8001ec4:	400203d0 	.word	0x400203d0
 8001ec8:	500203d0 	.word	0x500203d0
 8001ecc:	40020450 	.word	0x40020450
 8001ed0:	50020450 	.word	0x50020450
 8001ed4:	400204d0 	.word	0x400204d0
 8001ed8:	500204d0 	.word	0x500204d0
 8001edc:	40020550 	.word	0x40020550
 8001ee0:	50020550 	.word	0x50020550
 8001ee4:	400205d0 	.word	0x400205d0
 8001ee8:	500205d0 	.word	0x500205d0
 8001eec:	40020650 	.word	0x40020650
 8001ef0:	50020650 	.word	0x50020650
 8001ef4:	400206d0 	.word	0x400206d0
 8001ef8:	500206d0 	.word	0x500206d0
 8001efc:	40020750 	.word	0x40020750
 8001f00:	50020750 	.word	0x50020750
 8001f04:	400207d0 	.word	0x400207d0
 8001f08:	500207d0 	.word	0x500207d0

08001f0c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_DMAEx_List_Start_IT+0x16>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e082      	b.n	800202c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f2c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d005      	beq.n	8001f4c <HAL_DMAEx_List_Start_IT+0x40>
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d16a      	bne.n	800201c <HAL_DMAEx_List_Start_IT+0x110>
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d067      	beq.n	800201c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d157      	bne.n	8002008 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_DMAEx_List_Start_IT+0x5a>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e062      	b.n	800202c <HAL_DMAEx_List_Start_IT+0x120>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8001f9a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fca:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f107 010c 	add.w	r1, r7, #12
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fcd3 	bl	8002984 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	0c0b      	lsrs	r3, r1, #16
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	68f9      	ldr	r1, [r7, #12]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	e007      	b.n	800202c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_DMAEx_List_BuildNode+0x16>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e004      	b.n	8002058 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fad9 	bl	8002608 <DMA_List_BuildNode>

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e066      	b.n	8002148 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d104      	bne.n	800208c <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e05d      	b.n	8002148 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	6839      	ldr	r1, [r7, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fc09 	bl	80028ac <DMA_List_CheckNodesBaseAddresses>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2205      	movs	r2, #5
 80020a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e04e      	b.n	8002148 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fc2a 	bl	800290c <DMA_List_CheckNodesTypes>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2204      	movs	r2, #4
 80020c2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e03f      	b.n	8002148 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d103      	bne.n	80020d8 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e02b      	b.n	8002130 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80020d8:	f107 0220 	add.w	r2, r7, #32
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f000 fc4e 	bl	8002984 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	461a      	mov	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fc75 	bl	80029e4 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800210c:	4013      	ands	r3, r2
 800210e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002110:	6a3a      	ldr	r2, [r7, #32]
 8002112:	4319      	orrs	r1, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002120:	4013      	ands	r3, r2
 8002122:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4610      	mov	r0, r2
 8002128:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800212a:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800212c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e05c      	b.n	8002224 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d104      	bne.n	800217c <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e053      	b.n	8002224 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d101      	bne.n	8002192 <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e048      	b.n	8002224 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e043      	b.n	8002224 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d104      	bne.n	80021ae <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e03a      	b.n	8002224 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 80021ba:	f107 0220 	add.w	r2, r7, #32
 80021be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c2:	4619      	mov	r1, r3
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f000 fbdd 	bl	8002984 <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	461a      	mov	r2, r3
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fc04 	bl	80029e4 <DMA_List_FindNode>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11c      	bne.n	800221c <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	461a      	mov	r2, r3
 80021e8:	2100      	movs	r1, #0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fbfa 	bl	80029e4 <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80021f6:	4013      	ands	r3, r2
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4610      	mov	r0, r2
 80021fe:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8002200:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002202:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	e003      	b.n	8002224 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2206      	movs	r2, #6
 8002220:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_DMAEx_List_LinkQ+0x16>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e072      	b.n	800232c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800224c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d002      	beq.n	8002260 <HAL_DMAEx_List_LinkQ+0x34>
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b05      	cmp	r3, #5
 800225e:	d108      	bne.n	8002272 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e05c      	b.n	800232c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7b1b      	ldrb	r3, [r3, #12]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d104      	bne.n	8002286 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2201      	movs	r2, #1
 8002280:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e052      	b.n	800232c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <HAL_DMAEx_List_LinkQ+0x10c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d022      	beq.n	80022d6 <HAL_DMAEx_List_LinkQ+0xaa>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a29      	ldr	r2, [pc, #164]	; (800233c <HAL_DMAEx_List_LinkQ+0x110>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01d      	beq.n	80022d6 <HAL_DMAEx_List_LinkQ+0xaa>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_DMAEx_List_LinkQ+0x114>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a26      	ldr	r2, [pc, #152]	; (8002344 <HAL_DMAEx_List_LinkQ+0x118>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_DMAEx_List_LinkQ+0x11c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a23      	ldr	r2, [pc, #140]	; (800234c <HAL_DMAEx_List_LinkQ+0x120>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_DMAEx_List_LinkQ+0x124>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a20      	ldr	r2, [pc, #128]	; (8002354 <HAL_DMAEx_List_LinkQ+0x128>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_DMAEx_List_LinkQ+0xae>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_DMAEx_List_LinkQ+0xb0>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2203      	movs	r2, #3
 80022f2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e019      	b.n	800232c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	2b81      	cmp	r3, #129	; 0x81
 80022fe:	d108      	bne.n	8002312 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2204      	movs	r2, #4
 800230c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00c      	b.n	800232c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2204      	movs	r2, #4
 800231e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e003      	b.n	800232c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40020650 	.word	0x40020650
 800233c:	50020650 	.word	0x50020650
 8002340:	400206d0 	.word	0x400206d0
 8002344:	500206d0 	.word	0x500206d0
 8002348:	40020750 	.word	0x40020750
 800234c:	50020750 	.word	0x50020750
 8002350:	400207d0 	.word	0x400207d0
 8002354:	500207d0 	.word	0x500207d0

08002358 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a85      	ldr	r2, [pc, #532]	; (8002588 <DMA_List_Init+0x230>)
 8002372:	4293      	cmp	r3, r2
 8002374:	f000 80a0 	beq.w	80024b8 <DMA_List_Init+0x160>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a83      	ldr	r2, [pc, #524]	; (800258c <DMA_List_Init+0x234>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f000 809a 	beq.w	80024b8 <DMA_List_Init+0x160>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a81      	ldr	r2, [pc, #516]	; (8002590 <DMA_List_Init+0x238>)
 800238a:	4293      	cmp	r3, r2
 800238c:	f000 8094 	beq.w	80024b8 <DMA_List_Init+0x160>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7f      	ldr	r2, [pc, #508]	; (8002594 <DMA_List_Init+0x23c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f000 808e 	beq.w	80024b8 <DMA_List_Init+0x160>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7d      	ldr	r2, [pc, #500]	; (8002598 <DMA_List_Init+0x240>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	f000 8088 	beq.w	80024b8 <DMA_List_Init+0x160>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7b      	ldr	r2, [pc, #492]	; (800259c <DMA_List_Init+0x244>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f000 8082 	beq.w	80024b8 <DMA_List_Init+0x160>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a79      	ldr	r2, [pc, #484]	; (80025a0 <DMA_List_Init+0x248>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d07c      	beq.n	80024b8 <DMA_List_Init+0x160>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a78      	ldr	r2, [pc, #480]	; (80025a4 <DMA_List_Init+0x24c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d077      	beq.n	80024b8 <DMA_List_Init+0x160>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a76      	ldr	r2, [pc, #472]	; (80025a8 <DMA_List_Init+0x250>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d072      	beq.n	80024b8 <DMA_List_Init+0x160>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <DMA_List_Init+0x254>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d06d      	beq.n	80024b8 <DMA_List_Init+0x160>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a73      	ldr	r2, [pc, #460]	; (80025b0 <DMA_List_Init+0x258>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d068      	beq.n	80024b8 <DMA_List_Init+0x160>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a72      	ldr	r2, [pc, #456]	; (80025b4 <DMA_List_Init+0x25c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d063      	beq.n	80024b8 <DMA_List_Init+0x160>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a70      	ldr	r2, [pc, #448]	; (80025b8 <DMA_List_Init+0x260>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d05e      	beq.n	80024b8 <DMA_List_Init+0x160>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6f      	ldr	r2, [pc, #444]	; (80025bc <DMA_List_Init+0x264>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d059      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6d      	ldr	r2, [pc, #436]	; (80025c0 <DMA_List_Init+0x268>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d054      	beq.n	80024b8 <DMA_List_Init+0x160>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <DMA_List_Init+0x26c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d04f      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <DMA_List_Init+0x270>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d04a      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a69      	ldr	r2, [pc, #420]	; (80025cc <DMA_List_Init+0x274>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d045      	beq.n	80024b8 <DMA_List_Init+0x160>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a67      	ldr	r2, [pc, #412]	; (80025d0 <DMA_List_Init+0x278>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d040      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a66      	ldr	r2, [pc, #408]	; (80025d4 <DMA_List_Init+0x27c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d03b      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a64      	ldr	r2, [pc, #400]	; (80025d8 <DMA_List_Init+0x280>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d036      	beq.n	80024b8 <DMA_List_Init+0x160>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a63      	ldr	r2, [pc, #396]	; (80025dc <DMA_List_Init+0x284>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d031      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a61      	ldr	r2, [pc, #388]	; (80025e0 <DMA_List_Init+0x288>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02c      	beq.n	80024b8 <DMA_List_Init+0x160>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <DMA_List_Init+0x28c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d027      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a5e      	ldr	r2, [pc, #376]	; (80025e8 <DMA_List_Init+0x290>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d022      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5d      	ldr	r2, [pc, #372]	; (80025ec <DMA_List_Init+0x294>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d01d      	beq.n	80024b8 <DMA_List_Init+0x160>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5b      	ldr	r2, [pc, #364]	; (80025f0 <DMA_List_Init+0x298>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d018      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a5a      	ldr	r2, [pc, #360]	; (80025f4 <DMA_List_Init+0x29c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <DMA_List_Init+0x160>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <DMA_List_Init+0x2a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <DMA_List_Init+0x160>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a57      	ldr	r2, [pc, #348]	; (80025fc <DMA_List_Init+0x2a4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <DMA_List_Init+0x160>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a55      	ldr	r2, [pc, #340]	; (8002600 <DMA_List_Init+0x2a8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <DMA_List_Init+0x160>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a54      	ldr	r2, [pc, #336]	; (8002604 <DMA_List_Init+0x2ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <DMA_List_Init+0x164>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <DMA_List_Init+0x166>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	430a      	orrs	r2, r1
 80024de:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <DMA_List_Init+0x290>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <DMA_List_Init+0x202>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a34      	ldr	r2, [pc, #208]	; (80025ec <DMA_List_Init+0x294>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01d      	beq.n	800255a <DMA_List_Init+0x202>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <DMA_List_Init+0x298>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d018      	beq.n	800255a <DMA_List_Init+0x202>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <DMA_List_Init+0x29c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <DMA_List_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <DMA_List_Init+0x2a0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00e      	beq.n	800255a <DMA_List_Init+0x202>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2e      	ldr	r2, [pc, #184]	; (80025fc <DMA_List_Init+0x2a4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d009      	beq.n	800255a <DMA_List_Init+0x202>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <DMA_List_Init+0x2a8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <DMA_List_Init+0x202>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <DMA_List_Init+0x2ac>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <DMA_List_Init+0x206>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <DMA_List_Init+0x208>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2200      	movs	r2, #0
 8002572:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40020050 	.word	0x40020050
 800258c:	50020050 	.word	0x50020050
 8002590:	400200d0 	.word	0x400200d0
 8002594:	500200d0 	.word	0x500200d0
 8002598:	40020150 	.word	0x40020150
 800259c:	50020150 	.word	0x50020150
 80025a0:	400201d0 	.word	0x400201d0
 80025a4:	500201d0 	.word	0x500201d0
 80025a8:	40020250 	.word	0x40020250
 80025ac:	50020250 	.word	0x50020250
 80025b0:	400202d0 	.word	0x400202d0
 80025b4:	500202d0 	.word	0x500202d0
 80025b8:	40020350 	.word	0x40020350
 80025bc:	50020350 	.word	0x50020350
 80025c0:	400203d0 	.word	0x400203d0
 80025c4:	500203d0 	.word	0x500203d0
 80025c8:	40020450 	.word	0x40020450
 80025cc:	50020450 	.word	0x50020450
 80025d0:	400204d0 	.word	0x400204d0
 80025d4:	500204d0 	.word	0x500204d0
 80025d8:	40020550 	.word	0x40020550
 80025dc:	50020550 	.word	0x50020550
 80025e0:	400205d0 	.word	0x400205d0
 80025e4:	500205d0 	.word	0x500205d0
 80025e8:	40020650 	.word	0x40020650
 80025ec:	50020650 	.word	0x50020650
 80025f0:	400206d0 	.word	0x400206d0
 80025f4:	500206d0 	.word	0x500206d0
 80025f8:	40020750 	.word	0x40020750
 80025fc:	50020750 	.word	0x50020750
 8002600:	400207d0 	.word	0x400207d0
 8002604:	500207d0 	.word	0x500207d0

08002608 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800261a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8002620:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002626:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800262c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d017      	beq.n	800266e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	3b01      	subs	r3, #1
 8002652:	051b      	lsls	r3, r3, #20
 8002654:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002658:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8002666:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8002668:	431a      	orrs	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	f240 237f 	movw	r3, #639	; 0x27f
 800267a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800267c:	431a      	orrs	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d10c      	bne.n	80026a6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d011      	beq.n	80026bc <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	e00a      	b.n	80026bc <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ae:	d105      	bne.n	80026bc <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00f      	beq.n	80026e4 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80026dc:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80026de:	431a      	orrs	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04e      	beq.n	8002798 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	3b01      	subs	r3, #1
 8002704:	0419      	lsls	r1, r3, #16
 8002706:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <DMA_List_BuildNode+0x29c>)
 8002708:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800270a:	431a      	orrs	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002714:	2b00      	cmp	r3, #0
 8002716:	da06      	bge.n	8002726 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	e005      	b.n	8002732 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	2b00      	cmp	r3, #0
 8002738:	da06      	bge.n	8002748 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	e005      	b.n	8002754 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	2b00      	cmp	r3, #0
 800275a:	da06      	bge.n	800276a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e005      	b.n	8002776 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2b00      	cmp	r3, #0
 800277c:	da06      	bge.n	800278c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	e005      	b.n	8002798 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d059      	beq.n	8002868 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	da09      	bge.n	80027d0 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	425b      	negs	r3, r3
 80027c2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	615a      	str	r2, [r3, #20]
 80027ce:	e005      	b.n	80027dc <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d4:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da0d      	bge.n	8002800 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	425b      	negs	r3, r3
 80027ea:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	0419      	lsls	r1, r3, #16
 80027f4:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <DMA_List_BuildNode+0x2a0>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	615a      	str	r2, [r3, #20]
 80027fe:	e009      	b.n	8002814 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	0419      	lsls	r1, r3, #16
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <DMA_List_BuildNode+0x2a0>)
 800280c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800280e:	431a      	orrs	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	2b00      	cmp	r3, #0
 800281a:	da08      	bge.n	800282e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	425b      	negs	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	b29a      	uxth	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	619a      	str	r2, [r3, #24]
 800282c:	e004      	b.n	8002838 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	2b00      	cmp	r3, #0
 800283e:	da0b      	bge.n	8002858 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	425b      	negs	r3, r3
 8002846:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002850:	431a      	orrs	r2, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	619a      	str	r2, [r3, #24]
 8002856:	e007      	b.n	8002868 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002862:	431a      	orrs	r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8002888:	e005      	b.n	8002896 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	07ff0000 	.word	0x07ff0000
 80028a8:	1fff0000 	.word	0x1fff0000

080028ac <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e00a      	b.n	80028ee <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e004      	b.n	80028ee <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	041b      	lsls	r3, r3, #16
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e00e      	b.n	800294a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e006      	b.n	800294a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800295c:	2302      	movs	r3, #2
 800295e:	e00b      	b.n	8002978 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8002972:	2303      	movs	r3, #3
 8002974:	e000      	b.n	8002978 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00c      	beq.n	80029b6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <DMA_List_GetCLLRNodeInfo+0x58>)
 80029a6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00f      	beq.n	80029ce <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80029b4:	e00b      	b.n	80029ce <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80029c0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2205      	movs	r2, #5
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	fe010000 	.word	0xfe010000
 80029e0:	f8010000 	.word	0xf8010000

080029e4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d142      	bne.n	8002a8e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8002a08:	e01d      	b.n	8002a46 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e00f      	b.n	8002a40 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8002a38:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	3301      	adds	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3dc      	bcc.n	8002a0a <DMA_List_FindNode+0x26>
 8002a50:	e029      	b.n	8002aa6 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e00f      	b.n	8002a88 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8002a80:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d206      	bcs.n	8002aa6 <DMA_List_FindNode+0xc2>
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d1d5      	bne.n	8002a52 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d001      	beq.n	8002abe <DMA_List_FindNode+0xda>
    {
      return 1U;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02b      	b.n	8002b16 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	461a      	mov	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b00:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8002b04:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b36:	e1ba      	b.n	8002eae <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 81aa 	beq.w	8002ea8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a55      	ldr	r2, [pc, #340]	; (8002cac <HAL_GPIO_Init+0x188>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d15d      	bne.n	8002c18 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002b62:	2201      	movs	r2, #1
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002b8c:	4a48      	ldr	r2, [pc, #288]	; (8002cb0 <HAL_GPIO_Init+0x18c>)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b94:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002b96:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_GPIO_Init+0x18c>)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220b      	movs	r2, #11
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	3208      	adds	r2, #8
 8002be2:	69f9      	ldr	r1, [r7, #28]
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2202      	movs	r2, #2
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e067      	b.n	8002ce8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x104>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b12      	cmp	r3, #18
 8002c26:	d145      	bne.n	8002cb4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 020f 	and.w	r2, r3, #15
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	69f9      	ldr	r1, [r7, #28]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e01e      	b.n	8002ce8 <HAL_GPIO_Init+0x1c4>
 8002caa:	bf00      	nop
 8002cac:	46020000 	.word	0x46020000
 8002cb0:	08009644 	.word	0x08009644
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d00b      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cfc:	2b11      	cmp	r3, #17
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b12      	cmp	r3, #18
 8002d06:	d130      	bne.n	8002d6a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002d3e:	2201      	movs	r2, #1
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 0201 	and.w	r2, r3, #1
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d017      	beq.n	8002da2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d07c      	beq.n	8002ea8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002dae:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3318      	adds	r3, #24
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0a9a      	lsrs	r2, r3, #10
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	; (8002ed0 <HAL_GPIO_Init+0x3ac>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	f002 0203 	and.w	r2, r2, #3
 8002de0:	00d2      	lsls	r2, r2, #3
 8002de2:	4093      	lsls	r3, r2
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002dea:	4938      	ldr	r1, [pc, #224]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3318      	adds	r3, #24
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002e1c:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e52:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002e72:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e80:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <HAL_GPIO_Init+0x3a8>)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f47f ae3d 	bne.w	8002b38 <HAL_GPIO_Init+0x14>
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
 8002ec2:	3724      	adds	r7, #36	; 0x24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	46022000 	.word	0x46022000
 8002ed0:	002f7f7f 	.word	0x002f7f7f

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e007      	b.n	8002f32 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 0204 	bic.w	r2, r3, #4
 8002f2a:	4905      	ldr	r1, [pc, #20]	; (8002f40 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40030400 	.word	0x40030400

08002f44 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_ICACHE_Enable+0x1c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <HAL_ICACHE_Enable+0x1c>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40030400 	.word	0x40030400

08002f64 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a0f      	ldr	r2, [pc, #60]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002f8a:	f023 0304 	bic.w	r3, r3, #4
 8002f8e:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002f92:	2204      	movs	r2, #4
 8002f94:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 8002f96:	f000 f820 	bl	8002fda <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002fae:	f023 0302 	bic.w	r3, r3, #2
 8002fb2:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <HAL_ICACHE_IRQHandler+0x64>)
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 8002fba:	f000 f807 	bl	8002fcc <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40030400 	.word	0x40030400

08002fcc <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_PSSI_Init>:
  * @param  hpssi Pointer to a PSSI_HandleTypeDef structure that contains
  *                the configuration information for the specified PSSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PSSI_Init(PSSI_HandleTypeDef *hpssi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the PSSI handle allocation */
  if (hpssi == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_PSSI_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e036      	b.n	8003068 <HAL_PSSI_Init+0x80>
  assert_param(IS_PSSI_BUSWIDTH(hpssi->Init.BusWidth));
  assert_param(IS_PSSI_CLOCK_POLARITY(hpssi->Init.ClockPolarity));
  assert_param(IS_PSSI_DE_POLARITY(hpssi->Init.DataEnablePolarity));
  assert_param(IS_PSSI_RDY_POLARITY(hpssi->Init.ReadyPolarity));

  if (hpssi->State == HAL_PSSI_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_PSSI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpssi->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hpssi->MspInitCallback(hpssi);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_PSSI_MspInit(hpssi);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd ff60 	bl	8000ed4 <HAL_PSSI_MspInit>
#endif /*USE_HAL_PSSI_REGISTER_CALLBACKS*/
  }

  hpssi->State = HAL_PSSI_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the selected PSSI peripheral */
  HAL_PSSI_DISABLE(hpssi);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800302a:	601a      	str	r2, [r3, #0]

  /*---------------------------- PSSIx CR Configuration ----------------------*/
  /* Configure PSSIx: Control Signal and Bus Width*/

  MODIFY_REG(hpssi->Instance->CR, PSSI_CR_DERDYCFG | PSSI_CR_EDM | PSSI_CR_DEPOL | PSSI_CR_RDYPOL,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003036:	f423 6354 	bic.w	r3, r3, #3392	; 0xd40
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d1      	ldr	r1, [r2, #12]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6952      	ldr	r2, [r2, #20]
 8003042:	4311      	orrs	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6992      	ldr	r2, [r2, #24]
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	4311      	orrs	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	430b      	orrs	r3, r1
 8003056:	6013      	str	r3, [r2, #0]
             hpssi->Init.ControlSignal | hpssi->Init.DataEnablePolarity |
             hpssi->Init.ReadyPolarity | hpssi->Init.BusWidth);

  hpssi->ErrorCode = HAL_PSSI_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	; 0x34
  hpssi->State = HAL_PSSI_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_PSSI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent (in bytes)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PSSI_Transmit_DMA(PSSI_HandleTypeDef *hpssi, uint32_t *pData, uint32_t Size)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef dmaxferstatus;

  if (hpssi->State == HAL_PSSI_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	f040 8106 	bne.w	8003296 <HAL_PSSI_Transmit_DMA+0x226>
  {

    /* Process Locked */
    __HAL_LOCK(hpssi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_PSSI_Transmit_DMA+0x28>
 8003094:	2302      	movs	r3, #2
 8003096:	e0ff      	b.n	8003298 <HAL_PSSI_Transmit_DMA+0x228>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    hpssi->State       = HAL_PSSI_STATE_BUSY_TX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2203      	movs	r2, #3
 80030a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    hpssi->ErrorCode   = HAL_PSSI_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the selected PSSI peripheral */
    HAL_PSSI_DISABLE(hpssi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030bc:	601a      	str	r2, [r3, #0]

    /* Prepare transfer parameters */
    hpssi->pBuffPtr    = pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	61da      	str	r2, [r3, #28]
    hpssi->XferCount   = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	621a      	str	r2, [r3, #32]

    if (hpssi->XferCount > PSSI_MAX_NBYTE_SIZE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d904      	bls.n	80030de <HAL_PSSI_Transmit_DMA+0x6e>
    {
      hpssi->XferSize = PSSI_MAX_NBYTE_SIZE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
 80030dc:	e003      	b.n	80030e6 <HAL_PSSI_Transmit_DMA+0x76>
    }
    else
    {
      hpssi->XferSize = hpssi->XferCount;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (hpssi->XferSize > 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80c5 	beq.w	800327a <HAL_PSSI_Transmit_DMA+0x20a>
    {
      if (hpssi->hdmatx != NULL)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d079      	beq.n	80031ec <HAL_PSSI_Transmit_DMA+0x17c>
      {

        /* Configure BusWidth */
        if (hpssi->hdmatx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d113      	bne.n	800312a <HAL_PSSI_Transmit_DMA+0xba>
        {
          MODIFY_REG(hpssi->Instance->CR, PSSI_CR_DMAEN | PSSI_CR_OUTEN | PSSI_CR_CKPOL,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800310c:	f023 0320 	bic.w	r3, r3, #32
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	6912      	ldr	r2, [r2, #16]
 8003114:	2a01      	cmp	r2, #1
 8003116:	d102      	bne.n	800311e <HAL_PSSI_Transmit_DMA+0xae>
 8003118:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800311c:	e000      	b.n	8003120 <HAL_PSSI_Transmit_DMA+0xb0>
 800311e:	4960      	ldr	r1, [pc, #384]	; (80032a0 <HAL_PSSI_Transmit_DMA+0x230>)
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e016      	b.n	8003158 <HAL_PSSI_Transmit_DMA+0xe8>
                     PSSI_CR_DMA_ENABLE | PSSI_CR_OUTEN_OUTPUT |
                     ((hpssi->Init.ClockPolarity == HAL_PSSI_RISING_EDGE) ? 0U : PSSI_CR_CKPOL));
        }
        else
        {
          MODIFY_REG(hpssi->Instance->CR, PSSI_CR_DMAEN | PSSI_CR_OUTEN | PSSI_CR_CKPOL,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003134:	f023 0320 	bic.w	r3, r3, #32
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	6909      	ldr	r1, [r1, #16]
 8003140:	2901      	cmp	r1, #1
 8003142:	d101      	bne.n	8003148 <HAL_PSSI_Transmit_DMA+0xd8>
 8003144:	2100      	movs	r1, #0
 8003146:	e000      	b.n	800314a <HAL_PSSI_Transmit_DMA+0xda>
 8003148:	2120      	movs	r1, #32
 800314a:	430a      	orrs	r2, r1
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003156:	601a      	str	r2, [r3, #0]
                     PSSI_CR_DMA_ENABLE | hpssi->Init.BusWidth | PSSI_CR_OUTEN_OUTPUT |
                     ((hpssi->Init.ClockPolarity == HAL_PSSI_RISING_EDGE) ? 0U : PSSI_CR_CKPOL));
        }

        /* Set the PSSI DMA transfer complete callback */
        hpssi->hdmatx->XferCpltCallback = PSSI_DMATransmitCplt;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	4a51      	ldr	r2, [pc, #324]	; (80032a4 <HAL_PSSI_Transmit_DMA+0x234>)
 800315e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Set the DMA error callback */
        hpssi->hdmatx->XferErrorCallback = PSSI_DMAError;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	4a50      	ldr	r2, [pc, #320]	; (80032a8 <HAL_PSSI_Transmit_DMA+0x238>)
 8003166:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the unused DMA callbacks to NULL */
        hpssi->hdmatx->XferHalfCpltCallback = NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	2200      	movs	r2, #0
 800316e:	665a      	str	r2, [r3, #100]	; 0x64
        hpssi->hdmatx->XferAbortCallback = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	2200      	movs	r2, #0
 8003176:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Enable the DMA  */
        if ((hpssi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d024      	beq.n	80031d0 <HAL_PSSI_Transmit_DMA+0x160>
        {
          if (hpssi->hdmatx->LinkedListQueue != NULL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01d      	beq.n	80031cc <HAL_PSSI_Transmit_DMA+0x15c>
          {
            /* Enable the DMA channel */
            /* Set DMA data size */
            hpssi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hpssi->XferSize;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319c:	609a      	str	r2, [r3, #8]
            /* Set DMA source address */
            hpssi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	60da      	str	r2, [r3, #12]
            /* Set DMA destination address */
            hpssi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
              (uint32_t)&hpssi->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f103 0228 	add.w	r2, r3, #40	; 0x28
            hpssi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	611a      	str	r2, [r3, #16]

            dmaxferstatus = HAL_DMAEx_List_Start_IT(hpssi->hdmatx);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fea3 	bl	8001f0c <HAL_DMAEx_List_Start_IT>
 80031c6:	4603      	mov	r3, r0
 80031c8:	75fb      	strb	r3, [r7, #23]
 80031ca:	e01f      	b.n	800320c <HAL_PSSI_Transmit_DMA+0x19c>
          }
          else
          {
            /* Return error status */
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e063      	b.n	8003298 <HAL_PSSI_Transmit_DMA+0x228>
          }
        }
        else
        {
          dmaxferstatus = HAL_DMA_Start_IT(hpssi->hdmatx, (uint32_t)pData, (uint32_t)&hpssi->Instance->DR,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3328      	adds	r3, #40	; 0x28
 80031dc:	461a      	mov	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f7fe fb00 	bl	80017e6 <HAL_DMA_Start_IT>
 80031e6:	4603      	mov	r3, r0
 80031e8:	75fb      	strb	r3, [r7, #23]
 80031ea:	e00f      	b.n	800320c <HAL_PSSI_Transmit_DMA+0x19c>
        }
      }
      else
      {
        /* Update PSSI state */
        hpssi->State     = HAL_PSSI_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        /* Update PSSI error code */
        hpssi->ErrorCode |= HAL_PSSI_ERROR_DMA;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	f043 0208 	orr.w	r2, r3, #8
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e045      	b.n	8003298 <HAL_PSSI_Transmit_DMA+0x228>
      }

      if (dmaxferstatus == HAL_OK)
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d123      	bne.n	800325a <HAL_PSSI_Transmit_DMA+0x1ea>
      {
        /* Update XferCount value */
        hpssi->XferCount -= hpssi->XferSize;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	621a      	str	r2, [r3, #32]

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        /* Note : The PSSI interrupts must be enabled after unlocking current process
                  to avoid the risk of PSSI interrupt handle execution before current
                  process unlock */
        /* Enable ERR interrupt */
        HAL_PSSI_ENABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0202 	orr.w	r2, r2, #2
 8003236:	60da      	str	r2, [r3, #12]

        /* Enable DMA Request */
        hpssi->Instance->CR |= PSSI_CR_DMA_ENABLE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003246:	601a      	str	r2, [r3, #0]
        /* Enable the selected PSSI peripheral */
        HAL_PSSI_ENABLE(hpssi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e01b      	b.n	8003292 <HAL_PSSI_Transmit_DMA+0x222>
      }
      else
      {
        /* Update PSSI state */
        hpssi->State     = HAL_PSSI_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        /* Update PSSI error code */
        hpssi->ErrorCode |= HAL_PSSI_ERROR_DMA;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	f043 0208 	orr.w	r2, r3, #8
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00e      	b.n	8003298 <HAL_PSSI_Transmit_DMA+0x228>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hpssi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                to avoid the risk of PSSI interrupt handle execution before current
                process unlock */
      /* Enable ERRinterrupt */
      /* possible to enable all of these */

      HAL_PSSI_ENABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0202 	orr.w	r2, r2, #2
 8003290:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <HAL_PSSI_Transmit_DMA+0x228>
  }
  else
  {
    return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
  }
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	c0000020 	.word	0xc0000020
 80032a4:	08003771 	.word	0x08003771
 80032a8:	08003881 	.word	0x08003881

080032ac <HAL_PSSI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received (in bytes)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PSSI_Receive_DMA(PSSI_HandleTypeDef *hpssi, uint32_t *pData, uint32_t Size)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]

  HAL_StatusTypeDef dmaxferstatus;

  if (hpssi->State == HAL_PSSI_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 8106 	bne.w	80034d2 <HAL_PSSI_Receive_DMA+0x226>
  {

    /* Disable the selected PSSI peripheral */
    HAL_PSSI_DISABLE(hpssi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032d4:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_LOCK(hpssi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_PSSI_Receive_DMA+0x38>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e0f7      	b.n	80034d4 <HAL_PSSI_Receive_DMA+0x228>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    hpssi->State       = HAL_PSSI_STATE_BUSY_RX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2204      	movs	r2, #4
 80032f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    hpssi->ErrorCode   = HAL_PSSI_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Prepare transfer parameters */
    hpssi->pBuffPtr    = pData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	61da      	str	r2, [r3, #28]
    hpssi->XferCount   = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]

    if (hpssi->XferCount > PSSI_MAX_NBYTE_SIZE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330e:	d904      	bls.n	800331a <HAL_PSSI_Receive_DMA+0x6e>
    {
      hpssi->XferSize = PSSI_MAX_NBYTE_SIZE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
 8003318:	e003      	b.n	8003322 <HAL_PSSI_Receive_DMA+0x76>
    }
    else
    {
      hpssi->XferSize = hpssi->XferCount;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (hpssi->XferSize > 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80c5 	beq.w	80034b6 <HAL_PSSI_Receive_DMA+0x20a>
    {
      if (hpssi->hdmarx != NULL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d079      	beq.n	8003428 <HAL_PSSI_Receive_DMA+0x17c>
      {
        /* Configure BusWidth */
        if (hpssi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d113      	bne.n	8003366 <HAL_PSSI_Receive_DMA+0xba>
        {
          MODIFY_REG(hpssi->Instance->CR, PSSI_CR_DMAEN | PSSI_CR_OUTEN | PSSI_CR_CKPOL, PSSI_CR_DMA_ENABLE |
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003348:	f023 0320 	bic.w	r3, r3, #32
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	6912      	ldr	r2, [r2, #16]
 8003350:	2a01      	cmp	r2, #1
 8003352:	d101      	bne.n	8003358 <HAL_PSSI_Receive_DMA+0xac>
 8003354:	4961      	ldr	r1, [pc, #388]	; (80034dc <HAL_PSSI_Receive_DMA+0x230>)
 8003356:	e001      	b.n	800335c <HAL_PSSI_Receive_DMA+0xb0>
 8003358:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e016      	b.n	8003394 <HAL_PSSI_Receive_DMA+0xe8>
                     ((hpssi->Init.ClockPolarity == HAL_PSSI_RISING_EDGE) ? PSSI_CR_CKPOL : 0U));
        }
        else
        {
          MODIFY_REG(hpssi->Instance->CR, PSSI_CR_DMAEN | PSSI_CR_OUTEN | PSSI_CR_CKPOL,
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003370:	f023 0320 	bic.w	r3, r3, #32
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	6892      	ldr	r2, [r2, #8]
 8003378:	68f9      	ldr	r1, [r7, #12]
 800337a:	6909      	ldr	r1, [r1, #16]
 800337c:	2901      	cmp	r1, #1
 800337e:	d101      	bne.n	8003384 <HAL_PSSI_Receive_DMA+0xd8>
 8003380:	2120      	movs	r1, #32
 8003382:	e000      	b.n	8003386 <HAL_PSSI_Receive_DMA+0xda>
 8003384:	2100      	movs	r1, #0
 8003386:	430a      	orrs	r2, r1
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003392:	601a      	str	r2, [r3, #0]
                     PSSI_CR_DMA_ENABLE | hpssi->Init.BusWidth |
                     ((hpssi->Init.ClockPolarity == HAL_PSSI_RISING_EDGE) ? PSSI_CR_CKPOL : 0U));
        }

        /* Set the PSSI DMA transfer complete callback */
        hpssi->hdmarx->XferCpltCallback = PSSI_DMAReceiveCplt;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_PSSI_Receive_DMA+0x234>)
 800339a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Set the DMA error callback */
        hpssi->hdmarx->XferErrorCallback = PSSI_DMAError;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_PSSI_Receive_DMA+0x238>)
 80033a2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the unused DMA callbacks to NULL */
        hpssi->hdmarx->XferHalfCpltCallback = NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	2200      	movs	r2, #0
 80033aa:	665a      	str	r2, [r3, #100]	; 0x64
        hpssi->hdmarx->XferAbortCallback = NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	2200      	movs	r2, #0
 80033b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Enable the DMA  */
        if ((hpssi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d024      	beq.n	800340c <HAL_PSSI_Receive_DMA+0x160>
        {
          if (hpssi->hdmarx->LinkedListQueue != NULL)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01d      	beq.n	8003408 <HAL_PSSI_Receive_DMA+0x15c>
          {
            /* Enable the DMA channel */
            /* Set DMA data size */
            hpssi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hpssi->XferSize;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d8:	609a      	str	r2, [r3, #8]
            /* Set DMA source address */
            hpssi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
              (uint32_t)&hpssi->Instance->DR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f103 0228 	add.w	r2, r3, #40	; 0x28
            hpssi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60da      	str	r2, [r3, #12]
            /* Set DMA destination address */
            hpssi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	611a      	str	r2, [r3, #16]

            dmaxferstatus = HAL_DMAEx_List_Start_IT(hpssi->hdmarx);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe fd85 	bl	8001f0c <HAL_DMAEx_List_Start_IT>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]
 8003406:	e01f      	b.n	8003448 <HAL_PSSI_Receive_DMA+0x19c>
          }
          else
          {
            /* Return error status */
            return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e063      	b.n	80034d4 <HAL_PSSI_Receive_DMA+0x228>
          }
        }
        else
        {
          dmaxferstatus = HAL_DMA_Start_IT(hpssi->hdmarx, (uint32_t)&hpssi->Instance->DR, (uint32_t)pData,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3328      	adds	r3, #40	; 0x28
 8003416:	4619      	mov	r1, r3
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f7fe f9e2 	bl	80017e6 <HAL_DMA_Start_IT>
 8003422:	4603      	mov	r3, r0
 8003424:	75fb      	strb	r3, [r7, #23]
 8003426:	e00f      	b.n	8003448 <HAL_PSSI_Receive_DMA+0x19c>
        }
      }
      else
      {
        /* Update PSSI state */
        hpssi->State     = HAL_PSSI_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        /* Update PSSI error code */
        hpssi->ErrorCode |= HAL_PSSI_ERROR_DMA;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	f043 0208 	orr.w	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e045      	b.n	80034d4 <HAL_PSSI_Receive_DMA+0x228>
      }

      if (dmaxferstatus == HAL_OK)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d123      	bne.n	8003496 <HAL_PSSI_Receive_DMA+0x1ea>
      {
        /* Update XferCount value */
        hpssi->XferCount -= hpssi->XferSize;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1a      	ldr	r2, [r3, #32]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1ad2      	subs	r2, r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	621a      	str	r2, [r3, #32]

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        /* Note : The PSSI interrupts must be enabled after unlocking current process
                  to avoid the risk of PSSI interrupt handle execution before current
                  process unlock */
        /* Enable ERR  interrupt */
        HAL_PSSI_ENABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0202 	orr.w	r2, r2, #2
 8003472:	60da      	str	r2, [r3, #12]

        /* Enable DMA Request */
        hpssi->Instance->CR |= PSSI_CR_DMA_ENABLE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003482:	601a      	str	r2, [r3, #0]
        /* Enable the selected PSSI peripheral */
        HAL_PSSI_ENABLE(hpssi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e01b      	b.n	80034ce <HAL_PSSI_Receive_DMA+0x222>
      }
      else
      {
        /* Update PSSI state */
        hpssi->State     = HAL_PSSI_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        /* Update PSSI error code */
        hpssi->ErrorCode |= HAL_PSSI_ERROR_DMA;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	f043 0208 	orr.w	r2, r3, #8
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00e      	b.n	80034d4 <HAL_PSSI_Receive_DMA+0x228>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hpssi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Enable ERR,interrupt */
      HAL_PSSI_ENABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0202 	orr.w	r2, r2, #2
 80034cc:	60da      	str	r2, [r3, #12]
    }

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_PSSI_Receive_DMA+0x228>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40000020 	.word	0x40000020
 80034e0:	080037d5 	.word	0x080037d5
 80034e4:	08003881 	.word	0x08003881

080034e8 <HAL_PSSI_IRQHandler>:
  * @param  hpssi Pointer to a PSSI_HandleTypeDef structure that contains
  *                the configuration information for the specified PSSI.
  * @retval None
  */
void HAL_PSSI_IRQHandler(PSSI_HandleTypeDef *hpssi)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Overrun/ Underrun Errors */
  if (HAL_PSSI_GET_FLAG(hpssi, PSSI_FLAG_OVR_MIS) != 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8093 	beq.w	8003626 <HAL_PSSI_IRQHandler+0x13e>
  {
    /* Reset handle parameters */
    hpssi->XferCount     = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	621a      	str	r2, [r3, #32]

    /* Disable all interrupts */
    HAL_PSSI_DISABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0202 	bic.w	r2, r2, #2
 8003514:	60da      	str	r2, [r3, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Abort DMA TX transfer if any */
    if ((hpssi->Instance->CR & PSSI_CR_DMAEN) == PSSI_CR_DMAEN)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d162      	bne.n	80035ec <HAL_PSSI_IRQHandler+0x104>
    {
      if (hpssi->State == HAL_PSSI_STATE_BUSY_TX)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b03      	cmp	r3, #3
 8003530:	d129      	bne.n	8003586 <HAL_PSSI_IRQHandler+0x9e>
      {
        /* Set new error code */
        hpssi->ErrorCode |= HAL_PSSI_ERROR_UNDER_RUN;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	f043 0202 	orr.w	r2, r3, #2
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	635a      	str	r2, [r3, #52]	; 0x34

        hpssi->Instance->CR &= ~PSSI_CR_DMAEN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800354c:	601a      	str	r2, [r3, #0]

        if (hpssi->hdmatx != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d04a      	beq.n	80035ec <HAL_PSSI_IRQHandler+0x104>
        {
          /* Set the PSSI DMA Abort callback :
          will lead to call HAL_PSSI_ErrorCallback() at end of DMA abort procedure */
          hpssi->hdmatx->XferAbortCallback = PSSI_DMAAbort;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	4a35      	ldr	r2, [pc, #212]	; (8003630 <HAL_PSSI_IRQHandler+0x148>)
 800355c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Process Unlocked */
          __HAL_UNLOCK(hpssi);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hpssi->hdmatx) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe f99b 	bl	80018a6 <HAL_DMA_Abort_IT>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d03a      	beq.n	80035ec <HAL_PSSI_IRQHandler+0x104>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hpssi->hdmatx->XferAbortCallback(hpssi->hdmatx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003580:	4610      	mov	r0, r2
 8003582:	4798      	blx	r3
 8003584:	e032      	b.n	80035ec <HAL_PSSI_IRQHandler+0x104>
          }
        }
      }
      /* Abort DMA RX transfer if any */
      else if (hpssi->State == HAL_PSSI_STATE_BUSY_RX)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b04      	cmp	r3, #4
 8003590:	d129      	bne.n	80035e6 <HAL_PSSI_IRQHandler+0xfe>
      {
        /* Set new error code */
        hpssi->ErrorCode |= HAL_PSSI_ERROR_OVER_RUN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	f043 0204 	orr.w	r2, r3, #4
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	635a      	str	r2, [r3, #52]	; 0x34

        hpssi->Instance->CR &= ~PSSI_CR_DMAEN;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80035ac:	601a      	str	r2, [r3, #0]

        if (hpssi->hdmarx != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01a      	beq.n	80035ec <HAL_PSSI_IRQHandler+0x104>
        {
          /* Set the PSSI DMA Abort callback :
          will lead to call HAL_PSSI_ErrorCallback() at end of DMA abort procedure */
          hpssi->hdmarx->XferAbortCallback = PSSI_DMAAbort;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_PSSI_IRQHandler+0x148>)
 80035bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Process Unlocked */
          __HAL_UNLOCK(hpssi);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hpssi->hdmarx) != HAL_OK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f96b 	bl	80018a6 <HAL_DMA_Abort_IT>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_PSSI_IRQHandler+0x104>
          {
            /* Call Directly hpssi->hdma->XferAbortCallback function in case of error */
            hpssi->hdmarx->XferAbortCallback(hpssi->hdmarx);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035e0:	4610      	mov	r0, r2
 80035e2:	4798      	blx	r3
 80035e4:	e002      	b.n	80035ec <HAL_PSSI_IRQHandler+0x104>
      {
#if (USE_HAL_PSSI_REGISTER_CALLBACKS == 1)
        /* Call the corresponding callback to inform upper layer of the error */
        hpssi->ErrorCallback(hpssi);
#else
        HAL_PSSI_ErrorCallback(hpssi);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fc38 	bl	8000e5c <HAL_PSSI_ErrorCallback>
      }
    }
#endif /*HAL_DMA_MODULE_ENABLED*/

    /* If state is an abort treatment on going, don't change state */
    if (hpssi->State == HAL_PSSI_STATE_ABORT)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	d10b      	bne.n	8003610 <HAL_PSSI_IRQHandler+0x128>
    {
      hpssi->State = HAL_PSSI_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

      /* Process Unlocked */
      __HAL_UNLOCK(hpssi);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

#if (USE_HAL_PSSI_REGISTER_CALLBACKS == 1)
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      hpssi->AbortCpltCallback(hpssi);
#else
      HAL_PSSI_AbortCpltCallback(hpssi);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f813 	bl	8003634 <HAL_PSSI_AbortCpltCallback>
#else
      HAL_PSSI_ErrorCallback(hpssi);
#endif /* USE_HAL_PSSI_REGISTER_CALLBACKS */
    }
  }
}
 800360e:	e00a      	b.n	8003626 <HAL_PSSI_IRQHandler+0x13e>
      hpssi->State         = HAL_PSSI_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      __HAL_UNLOCK(hpssi);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      HAL_PSSI_ErrorCallback(hpssi);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd fc1b 	bl	8000e5c <HAL_PSSI_ErrorCallback>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	08003839 	.word	0x08003839

08003634 <HAL_PSSI_AbortCpltCallback>:
  * @param  hpssi Pointer to a PSSI_HandleTypeDef structure that contains
  *                the configuration information for the specified PSSI.
  * @retval None
  */
__weak void HAL_PSSI_AbortCpltCallback(PSSI_HandleTypeDef *hpssi)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hpssi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PSSI_AbortCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <PSSI_Error>:
  * @param  hpssi PSSI handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void PSSI_Error(PSSI_HandleTypeDef *hpssi, uint32_t ErrorCode)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hpssi->XferCount     = 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]

  /* Set new error code */
  hpssi->ErrorCode |= ErrorCode;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  HAL_PSSI_DISABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0202 	bic.w	r2, r2, #2
 8003672:	60da      	str	r2, [r3, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  if ((hpssi->Instance->CR & PSSI_CR_DMAEN) == PSSI_CR_DMAEN)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d152      	bne.n	800372a <PSSI_Error+0xe2>
  {
    if (hpssi->State == HAL_PSSI_STATE_BUSY_TX)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b03      	cmp	r3, #3
 800368e:	d123      	bne.n	80036d8 <PSSI_Error+0x90>
    {
      hpssi->Instance->CR &= ~PSSI_CR_DMAEN;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800369e:	601a      	str	r2, [r3, #0]

      if (hpssi->hdmatx != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d040      	beq.n	800372a <PSSI_Error+0xe2>
      {
        /* Set the PSSI DMA Abort callback :
        will lead to call HAL_PSSI_ErrorCallback() at end of DMA abort procedure */
        hpssi->hdmatx->XferAbortCallback = PSSI_DMAAbort;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	4a2f      	ldr	r2, [pc, #188]	; (800376c <PSSI_Error+0x124>)
 80036ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hpssi->hdmatx) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe f8f2 	bl	80018a6 <HAL_DMA_Abort_IT>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d030      	beq.n	800372a <PSSI_Error+0xe2>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hpssi->hdmatx->XferAbortCallback(hpssi->hdmatx);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036d2:	4610      	mov	r0, r2
 80036d4:	4798      	blx	r3
 80036d6:	e028      	b.n	800372a <PSSI_Error+0xe2>
        }
      }
    }
    /* Abort DMA RX transfer if any */
    else if (hpssi->State == HAL_PSSI_STATE_BUSY_RX)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d122      	bne.n	800372a <PSSI_Error+0xe2>
    {
      hpssi->Instance->CR &= ~PSSI_CR_DMAEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80036f2:	601a      	str	r2, [r3, #0]

      if (hpssi->hdmarx != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <PSSI_Error+0xe2>
      {
        /* Set the PSSI DMA Abort callback :
        will lead to call HAL_PSSI_ErrorCallback() at end of DMA abort procedure */
        hpssi->hdmarx->XferAbortCallback = PSSI_DMAAbort;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	4a1a      	ldr	r2, [pc, #104]	; (800376c <PSSI_Error+0x124>)
 8003702:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Process Unlocked */
        __HAL_UNLOCK(hpssi);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hpssi->hdmarx) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe f8c8 	bl	80018a6 <HAL_DMA_Abort_IT>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d006      	beq.n	800372a <PSSI_Error+0xe2>
        {
          /* Call Directly hpssi->hdma->XferAbortCallback function in case of error */
          hpssi->hdmarx->XferAbortCallback(hpssi->hdmarx);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003726:	4610      	mov	r0, r2
 8003728:	4798      	blx	r3
    }
  }
#endif /*HAL_DMA_MODULE_ENABLED*/

  /* If state is an abort treatment on going, don't change state */
  if (hpssi->State == HAL_PSSI_STATE_ABORT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b07      	cmp	r3, #7
 8003734:	d10b      	bne.n	800374e <PSSI_Error+0x106>
  {
    hpssi->State = HAL_PSSI_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hpssi);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_PSSI_REGISTER_CALLBACKS == 1)
    hpssi->AbortCpltCallback(hpssi);
#else
    HAL_PSSI_AbortCpltCallback(hpssi);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ff74 	bl	8003634 <HAL_PSSI_AbortCpltCallback>
    hpssi->ErrorCallback(hpssi);
#else
    HAL_PSSI_ErrorCallback(hpssi);
#endif /* USE_HAL_PSSI_REGISTER_CALLBACKS */
  }
}
 800374c:	e00a      	b.n	8003764 <PSSI_Error+0x11c>
    hpssi->State = HAL_PSSI_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    __HAL_UNLOCK(hpssi);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    HAL_PSSI_ErrorCallback(hpssi);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fb7c 	bl	8000e5c <HAL_PSSI_ErrorCallback>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	08003839 	.word	0x08003839

08003770 <PSSI_DMATransmitCplt>:
  * @brief  DMA PSSI slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
void PSSI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  PSSI_HandleTypeDef *hpssi = (PSSI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	60fb      	str	r3, [r7, #12]

  uint32_t tmperror;

  /* Disable Interrupts */
  HAL_PSSI_DISABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0202 	bic.w	r2, r2, #2
 800378c:	60da      	str	r2, [r3, #12]

  /* Store current volatile hpssi->ErrorCode, misra rule */
  tmperror = hpssi->ErrorCode;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	60bb      	str	r3, [r7, #8]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hpssi->State == HAL_PSSI_STATE_ABORT) || (tmperror != HAL_PSSI_ERROR_NONE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b07      	cmp	r3, #7
 800379e:	d002      	beq.n	80037a6 <PSSI_DMATransmitCplt+0x36>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <PSSI_DMATransmitCplt+0x44>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    PSSI_Error(hpssi, hpssi->ErrorCode);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	4619      	mov	r1, r3
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff ff4b 	bl	8003648 <PSSI_Error>
 80037b2:	e00b      	b.n	80037cc <PSSI_DMATransmitCplt+0x5c>
  }
  /* hpssi->State == HAL_PSSI_STATE_BUSY_TX */
  else
  {
    hpssi->State = HAL_PSSI_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hpssi);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_PSSI_REGISTER_CALLBACKS == 1)
    hpssi->TxCpltCallback(hpssi);
#else
    HAL_PSSI_TxCpltCallback(hpssi);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7fd fb25 	bl	8000e14 <HAL_PSSI_TxCpltCallback>
#endif /* USE_HAL_PSSI_REGISTER_CALLBACKS */
  }
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <PSSI_DMAReceiveCplt>:
  * @brief DMA PSSI master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
void PSSI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  PSSI_HandleTypeDef *hpssi = (PSSI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmperror;

  /* Disable Interrupts */
  HAL_PSSI_DISABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0202 	bic.w	r2, r2, #2
 80037f0:	60da      	str	r2, [r3, #12]

  /* Store current volatile hpssi->ErrorCode, misra rule */
  tmperror = hpssi->ErrorCode;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	60bb      	str	r3, [r7, #8]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hpssi->State == HAL_PSSI_STATE_ABORT) || (tmperror != HAL_PSSI_ERROR_NONE))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b07      	cmp	r3, #7
 8003802:	d002      	beq.n	800380a <PSSI_DMAReceiveCplt+0x36>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d006      	beq.n	8003818 <PSSI_DMAReceiveCplt+0x44>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    PSSI_Error(hpssi, hpssi->ErrorCode);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	4619      	mov	r1, r3
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff ff19 	bl	8003648 <PSSI_Error>
 8003816:	e00b      	b.n	8003830 <PSSI_DMAReceiveCplt+0x5c>
  }
  /* hpssi->State == HAL_PSSI_STATE_BUSY_RX */
  else
  {
    hpssi->State = HAL_PSSI_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hpssi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_PSSI_REGISTER_CALLBACKS == 1)
    hpssi->RxCpltCallback(hpssi);
#else
    HAL_PSSI_RxCpltCallback(hpssi);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7fd fb05 	bl	8000e38 <HAL_PSSI_RxCpltCallback>
#endif /* USE_HAL_PSSI_REGISTER_CALLBACKS */
  }
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <PSSI_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
void PSSI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  PSSI_HandleTypeDef *hpssi = (PSSI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hpssi->hdmatx->XferAbortCallback = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	2200      	movs	r2, #0
 800384c:	66da      	str	r2, [r3, #108]	; 0x6c
  hpssi->hdmarx->XferAbortCallback = NULL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	2200      	movs	r2, #0
 8003854:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if come from abort from user */
  if (hpssi->State == HAL_PSSI_STATE_ABORT)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b07      	cmp	r3, #7
 8003860:	d107      	bne.n	8003872 <PSSI_DMAAbort+0x3a>
  {
    hpssi->State = HAL_PSSI_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_PSSI_REGISTER_CALLBACKS == 1)
    hpssi->AbortCpltCallback(hpssi);
#else
    HAL_PSSI_AbortCpltCallback(hpssi);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff fee2 	bl	8003634 <HAL_PSSI_AbortCpltCallback>
    hpssi->ErrorCallback(hpssi);
#else
    HAL_PSSI_ErrorCallback(hpssi);
#endif /* USE_HAL_PSSI_REGISTER_CALLBACKS */
  }
}
 8003870:	e002      	b.n	8003878 <PSSI_DMAAbort+0x40>
    HAL_PSSI_ErrorCallback(hpssi);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7fd faf2 	bl	8000e5c <HAL_PSSI_ErrorCallback>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <PSSI_DMAError>:
  return HAL_OK;
}

#if defined(HAL_DMA_MODULE_ENABLED)
void PSSI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  PSSI_HandleTypeDef *hpssi = (PSSI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	60fb      	str	r3, [r7, #12]

  uint32_t tmperror;

  /* Disable the selected PSSI peripheral */
  HAL_PSSI_DISABLE(hpssi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800389c:	601a      	str	r2, [r3, #0]

  /* Disable Interrupts */
  HAL_PSSI_DISABLE_IT(hpssi, PSSI_FLAG_OVR_RIS);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0202 	bic.w	r2, r2, #2
 80038ac:	60da      	str	r2, [r3, #12]

  /* Store current volatile hpssi->ErrorCode, misra rule */
  tmperror = hpssi->ErrorCode;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	60bb      	str	r3, [r7, #8]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hpssi->State == HAL_PSSI_STATE_ABORT) || (tmperror != HAL_PSSI_ERROR_NONE))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b07      	cmp	r3, #7
 80038be:	d002      	beq.n	80038c6 <PSSI_DMAError+0x46>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <PSSI_DMAError+0x54>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    PSSI_Error(hpssi, hpssi->ErrorCode);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	4619      	mov	r1, r3
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff febb 	bl	8003648 <PSSI_Error>
 80038d2:	e00b      	b.n	80038ec <PSSI_DMAError+0x6c>
  }
  else
  {
    hpssi->State = HAL_PSSI_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hpssi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_PSSI_REGISTER_CALLBACKS == 1)
    hpssi->ErrorCallback(hpssi);
#else
    HAL_PSSI_ErrorCallback(hpssi);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7fd fab9 	bl	8000e5c <HAL_PSSI_ErrorCallback>
#endif /* USE_HAL_PSSI_REGISTER_CALLBACKS */
  }
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80038fc:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003904:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d10b      	bne.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d905      	bls.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003916:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a32      	ldr	r2, [pc, #200]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003920:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e057      	b.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d90a      	bls.n	8003944 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4313      	orrs	r3, r2
 800393a:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800393c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003940:	60d3      	str	r3, [r2, #12]
 8003942:	e007      	b.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800394c:	4925      	ldr	r1, [pc, #148]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	2232      	movs	r2, #50	; 0x32
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003972:	e002      	b.n	800397a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b01      	subs	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800397a:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f3      	bne.n	8003974 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01b      	beq.n	80039ca <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a15      	ldr	r2, [pc, #84]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	2232      	movs	r2, #50	; 0x32
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	3301      	adds	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80039b0:	e002      	b.n	80039b8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <HAL_PWREx_ControlVoltageScaling+0xd6>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f3      	bne.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e000      	b.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	46020800 	.word	0x46020800
 80039e8:	20000040 	.word	0x20000040
 80039ec:	10624dd3 	.word	0x10624dd3

080039f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	46020800 	.word	0x46020800

08003a0c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003a14:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <HAL_PWREx_ConfigSupply+0x94>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_PWREx_ConfigSupply+0x98>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2232      	movs	r2, #50	; 0x32
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <HAL_PWREx_ConfigSupply+0x98>)
 8003a28:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2c:	099b      	lsrs	r3, r3, #6
 8003a2e:	3301      	adds	r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003a38:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a3e:	f023 0302 	bic.w	r3, r3, #2
 8003a42:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a44:	e002      	b.n	8003a4c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d116      	bne.n	8003a86 <HAL_PWREx_ConfigSupply+0x7a>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f3      	bne.n	8003a46 <HAL_PWREx_ConfigSupply+0x3a>
 8003a5e:	e012      	b.n	8003a86 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a6c:	e002      	b.n	8003a74 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <HAL_PWREx_ConfigSupply+0x7a>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f3      	bne.n	8003a6e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e000      	b.n	8003a92 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000040 	.word	0x20000040
 8003aa4:	10624dd3 	.word	0x10624dd3
 8003aa8:	46020800 	.word	0x46020800

08003aac <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aba:	6113      	str	r3, [r2, #16]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	46020800 	.word	0x46020800

08003acc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	46020800 	.word	0x46020800

08003aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	; 0x38
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f000 bec8 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b06:	4b99      	ldr	r3, [pc, #612]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b10:	4b96      	ldr	r3, [pc, #600]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 816c 	beq.w	8003e00 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_RCC_OscConfig+0x52>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2b0c      	cmp	r3, #12
 8003b32:	f040 80de 	bne.w	8003cf2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	f040 80da 	bne.w	8003cf2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f000 bea5 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b50:	4b86      	ldr	r3, [pc, #536]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_RCC_OscConfig+0x7a>
 8003b5c:	4b83      	ldr	r3, [pc, #524]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b64:	e005      	b.n	8003b72 <HAL_RCC_OscConfig+0x86>
 8003b66:	4b81      	ldr	r3, [pc, #516]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d255      	bcs.n	8003c22 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f9df 	bl	8004f44 <RCC_SetFlashLatencyFromMSIRange>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f000 be82 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b92:	4b76      	ldr	r3, [pc, #472]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4a75      	ldr	r2, [pc, #468]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b9c:	6093      	str	r3, [r2, #8]
 8003b9e:	4b73      	ldr	r3, [pc, #460]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	4970      	ldr	r1, [pc, #448]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003bb8:	d309      	bcc.n	8003bce <HAL_RCC_OscConfig+0xe2>
 8003bba:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 021f 	bic.w	r2, r3, #31
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4969      	ldr	r1, [pc, #420]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60cb      	str	r3, [r1, #12]
 8003bcc:	e07e      	b.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	da0a      	bge.n	8003bec <HAL_RCC_OscConfig+0x100>
 8003bd6:	4b65      	ldr	r3, [pc, #404]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	015b      	lsls	r3, r3, #5
 8003be4:	4961      	ldr	r1, [pc, #388]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60cb      	str	r3, [r1, #12]
 8003bea:	e06f      	b.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d30a      	bcc.n	8003c0c <HAL_RCC_OscConfig+0x120>
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	4959      	ldr	r1, [pc, #356]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60cb      	str	r3, [r1, #12]
 8003c0a:	e05f      	b.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
 8003c0c:	4b57      	ldr	r3, [pc, #348]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	03db      	lsls	r3, r3, #15
 8003c1a:	4954      	ldr	r1, [pc, #336]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60cb      	str	r3, [r1, #12]
 8003c20:	e054      	b.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003c22:	4b52      	ldr	r3, [pc, #328]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c2c:	6093      	str	r3, [r2, #8]
 8003c2e:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	494c      	ldr	r1, [pc, #304]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003c48:	d309      	bcc.n	8003c5e <HAL_RCC_OscConfig+0x172>
 8003c4a:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f023 021f 	bic.w	r2, r3, #31
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4945      	ldr	r1, [pc, #276]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
 8003c5c:	e028      	b.n	8003cb0 <HAL_RCC_OscConfig+0x1c4>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da0a      	bge.n	8003c7c <HAL_RCC_OscConfig+0x190>
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	015b      	lsls	r3, r3, #5
 8003c74:	493d      	ldr	r1, [pc, #244]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60cb      	str	r3, [r1, #12]
 8003c7a:	e019      	b.n	8003cb0 <HAL_RCC_OscConfig+0x1c4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d30a      	bcc.n	8003c9c <HAL_RCC_OscConfig+0x1b0>
 8003c86:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	029b      	lsls	r3, r3, #10
 8003c94:	4935      	ldr	r1, [pc, #212]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60cb      	str	r3, [r1, #12]
 8003c9a:	e009      	b.n	8003cb0 <HAL_RCC_OscConfig+0x1c4>
 8003c9c:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	03db      	lsls	r3, r3, #15
 8003caa:	4930      	ldr	r1, [pc, #192]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f942 	bl	8004f44 <RCC_SetFlashLatencyFromMSIRange>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f000 bde5 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003ccc:	f001 f8e4 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x284>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fd fbfd 	bl	80014d4 <HAL_InitTick>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 808a 	beq.w	8003dfe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cee:	f000 bdd2 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d066      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d06:	f7fd fc2f 	bl	8001568 <HAL_GetTick>
 8003d0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003d0c:	e009      	b.n	8003d22 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d0e:	f7fd fc2b 	bl	8001568 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d902      	bls.n	8003d22 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	f000 bdba 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ef      	beq.n	8003d0e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d38:	6093      	str	r3, [r2, #8]
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	4909      	ldr	r1, [pc, #36]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d54:	d30e      	bcc.n	8003d74 <HAL_RCC_OscConfig+0x288>
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 021f 	bic.w	r2, r3, #31
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4902      	ldr	r1, [pc, #8]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
 8003d68:	e04a      	b.n	8003e00 <HAL_RCC_OscConfig+0x314>
 8003d6a:	bf00      	nop
 8003d6c:	46020c00 	.word	0x46020c00
 8003d70:	20000044 	.word	0x20000044
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	da0a      	bge.n	8003d92 <HAL_RCC_OscConfig+0x2a6>
 8003d7c:	4b98      	ldr	r3, [pc, #608]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	015b      	lsls	r3, r3, #5
 8003d8a:	4995      	ldr	r1, [pc, #596]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60cb      	str	r3, [r1, #12]
 8003d90:	e036      	b.n	8003e00 <HAL_RCC_OscConfig+0x314>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d30a      	bcc.n	8003db2 <HAL_RCC_OscConfig+0x2c6>
 8003d9c:	4b90      	ldr	r3, [pc, #576]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	029b      	lsls	r3, r3, #10
 8003daa:	498d      	ldr	r1, [pc, #564]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
 8003db0:	e026      	b.n	8003e00 <HAL_RCC_OscConfig+0x314>
 8003db2:	4b8b      	ldr	r3, [pc, #556]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	03db      	lsls	r3, r3, #15
 8003dc0:	4987      	ldr	r1, [pc, #540]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60cb      	str	r3, [r1, #12]
 8003dc6:	e01b      	b.n	8003e00 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003dc8:	4b85      	ldr	r3, [pc, #532]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a84      	ldr	r2, [pc, #528]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dd4:	f7fd fbc8 	bl	8001568 <HAL_GetTick>
 8003dd8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003dda:	e009      	b.n	8003df0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fbc4 	bl	8001568 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d902      	bls.n	8003df0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	f000 bd53 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003df0:	4b7b      	ldr	r3, [pc, #492]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ef      	bne.n	8003ddc <HAL_RCC_OscConfig+0x2f0>
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003dfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 808b 	beq.w	8003f24 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_OscConfig+0x334>
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d17d      	bne.n	8003f24 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f000 bd34 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x35a>
 8003e38:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a68      	ldr	r2, [pc, #416]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e041      	b.n	8003eca <HAL_RCC_OscConfig+0x3de>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4e:	d112      	bne.n	8003e76 <HAL_RCC_OscConfig+0x38a>
 8003e50:	4b63      	ldr	r3, [pc, #396]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a62      	ldr	r2, [pc, #392]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b60      	ldr	r3, [pc, #384]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a5f      	ldr	r2, [pc, #380]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b5d      	ldr	r3, [pc, #372]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5c      	ldr	r2, [pc, #368]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e029      	b.n	8003eca <HAL_RCC_OscConfig+0x3de>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003e7e:	d112      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x3ba>
 8003e80:	4b57      	ldr	r3, [pc, #348]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a56      	ldr	r2, [pc, #344]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b54      	ldr	r3, [pc, #336]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a53      	ldr	r2, [pc, #332]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b51      	ldr	r3, [pc, #324]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e011      	b.n	8003eca <HAL_RCC_OscConfig+0x3de>
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a4d      	ldr	r2, [pc, #308]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4a      	ldr	r2, [pc, #296]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4b48      	ldr	r3, [pc, #288]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a47      	ldr	r2, [pc, #284]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ec4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ec8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d014      	beq.n	8003efc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fb49 	bl	8001568 <HAL_GetTick>
 8003ed6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed8:	e009      	b.n	8003eee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eda:	f7fd fb45 	bl	8001568 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b64      	cmp	r3, #100	; 0x64
 8003ee6:	d902      	bls.n	8003eee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	f000 bcd4 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eee:	4b3c      	ldr	r3, [pc, #240]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ef      	beq.n	8003eda <HAL_RCC_OscConfig+0x3ee>
 8003efa:	e013      	b.n	8003f24 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003efc:	f7fd fb34 	bl	8001568 <HAL_GetTick>
 8003f00:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f02:	e009      	b.n	8003f18 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd fb30 	bl	8001568 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d902      	bls.n	8003f18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	f000 bcbf 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ef      	bne.n	8003f04 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05f      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d005      	beq.n	8003f42 <HAL_RCC_OscConfig+0x456>
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d114      	bne.n	8003f66 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d111      	bne.n	8003f66 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f000 bca3 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	4920      	ldr	r1, [pc, #128]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f64:	e044      	b.n	8003ff0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d024      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f7a:	f7fd faf5 	bl	8001568 <HAL_GetTick>
 8003f7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f80:	e009      	b.n	8003f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fd faf1 	bl	8001568 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d902      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	f000 bc80 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ef      	beq.n	8003f82 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	490b      	ldr	r1, [pc, #44]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]
 8003fb6:	e01b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fc4:	f7fd fad0 	bl	8001568 <HAL_GetTick>
 8003fc8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fd facc 	bl	8001568 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d904      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	f000 bc5b 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
 8003fe0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe4:	4baf      	ldr	r3, [pc, #700]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1ed      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80c8 	beq.w	800418e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004004:	4ba7      	ldr	r3, [pc, #668]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d111      	bne.n	8004036 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	4ba4      	ldr	r3, [pc, #656]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004018:	4aa2      	ldr	r2, [pc, #648]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004022:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004036:	4b9c      	ldr	r3, [pc, #624]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d119      	bne.n	8004076 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004042:	4b99      	ldr	r3, [pc, #612]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	4a98      	ldr	r2, [pc, #608]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404e:	f7fd fa8b 	bl	8001568 <HAL_GetTick>
 8004052:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004054:	e009      	b.n	800406a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fd fa87 	bl	8001568 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d902      	bls.n	800406a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	f000 bc16 	b.w	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800406a:	4b8f      	ldr	r3, [pc, #572]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ef      	beq.n	8004056 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d05f      	beq.n	800413e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800407e:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004084:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	429a      	cmp	r2, r3
 8004092:	d037      	beq.n	8004104 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e3f4      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01b      	beq.n	80040ee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80040b6:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80040b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040bc:	4a79      	ldr	r2, [pc, #484]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80040be:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80040c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80040c6:	f7fd fa4f 	bl	8001568 <HAL_GetTick>
 80040ca:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fd fa4b 	bl	8001568 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e3da      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040e0:	4b70      	ldr	r3, [pc, #448]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80040e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ef      	bne.n	80040ce <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80040ee:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80040f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4969      	ldr	r1, [pc, #420]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004104:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800410a:	4a66      	ldr	r2, [pc, #408]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 800410c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004110:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004114:	f7fd fa28 	bl	8001568 <HAL_GetTick>
 8004118:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411c:	f7fd fa24 	bl	8001568 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b05      	cmp	r3, #5
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e3b3      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800412e:	4b5d      	ldr	r3, [pc, #372]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ef      	beq.n	800411c <HAL_RCC_OscConfig+0x630>
 800413c:	e01b      	b.n	8004176 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800413e:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004144:	4a57      	ldr	r2, [pc, #348]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004146:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800414a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800414e:	f7fd fa0b 	bl	8001568 <HAL_GetTick>
 8004152:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004156:	f7fd fa07 	bl	8001568 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b05      	cmp	r3, #5
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e396      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004168:	4b4e      	ldr	r3, [pc, #312]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 800416a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800416e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ef      	bne.n	8004156 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004176:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417e:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004184:	4a47      	ldr	r2, [pc, #284]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004186:	f023 0304 	bic.w	r3, r3, #4
 800418a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8111 	beq.w	80043be <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800419c:	2300      	movs	r3, #0
 800419e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d111      	bne.n	80041d4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80041b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b6:	4a3b      	ldr	r2, [pc, #236]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041c0:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041d4:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d118      	bne.n	8004212 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80041e0:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	4a30      	ldr	r2, [pc, #192]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ec:	f7fd f9bc 	bl	8001568 <HAL_GetTick>
 80041f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fd f9b8 	bl	8001568 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e347      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004206:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <HAL_RCC_OscConfig+0x7bc>)
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01f      	beq.n	800425e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d010      	beq.n	800424c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 800422c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004232:	f043 0304 	orr.w	r3, r3, #4
 8004236:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 800423c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800424a:	e018      	b.n	800427e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 800424e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004252:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800425c:	e00f      	b.n	800427e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004264:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004274:	4a0b      	ldr	r2, [pc, #44]	; (80042a4 <HAL_RCC_OscConfig+0x7b8>)
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d057      	beq.n	8004336 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004286:	f7fd f96f 	bl	8001568 <HAL_GetTick>
 800428a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428c:	e00e      	b.n	80042ac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fd f96b 	bl	8001568 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d905      	bls.n	80042ac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e2f8      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
 80042a4:	46020c00 	.word	0x46020c00
 80042a8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ac:	4b9c      	ldr	r3, [pc, #624]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80042ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0e9      	beq.n	800428e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01b      	beq.n	80042fe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042c6:	4b96      	ldr	r3, [pc, #600]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80042c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042cc:	4a94      	ldr	r2, [pc, #592]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80042ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fd f946 	bl	8001568 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e2d3      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80042ee:	4b8c      	ldr	r3, [pc, #560]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80042f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ed      	beq.n	80042d8 <HAL_RCC_OscConfig+0x7ec>
 80042fc:	e053      	b.n	80043a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042fe:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004304:	4a86      	ldr	r2, [pc, #536]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fd f92a 	bl	8001568 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e2b7      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004326:	4b7e      	ldr	r3, [pc, #504]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800432c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ed      	bne.n	8004310 <HAL_RCC_OscConfig+0x824>
 8004334:	e037      	b.n	80043a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004336:	f7fd f917 	bl	8001568 <HAL_GetTick>
 800433a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fd f913 	bl	8001568 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e2a0      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004354:	4b72      	ldr	r3, [pc, #456]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ed      	bne.n	800433e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004362:	4b6f      	ldr	r3, [pc, #444]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01a      	beq.n	80043a6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004370:	4b6b      	ldr	r3, [pc, #428]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004376:	4a6a      	ldr	r2, [pc, #424]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fd f8f1 	bl	8001568 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e27e      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004398:	4b61      	ldr	r3, [pc, #388]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 800439a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800439e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ed      	bne.n	8004382 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d107      	bne.n	80043be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ae:	4b5c      	ldr	r3, [pc, #368]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b4:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80043b6:	f023 0304 	bic.w	r3, r3, #4
 80043ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d036      	beq.n	8004438 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d019      	beq.n	8004406 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80043d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043de:	f7fd f8c3 	bl	8001568 <HAL_GetTick>
 80043e2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e6:	f7fd f8bf 	bl	8001568 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e24e      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043f8:	4b49      	ldr	r3, [pc, #292]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x8fa>
 8004404:	e018      	b.n	8004438 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004406:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a45      	ldr	r2, [pc, #276]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 800440c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004410:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004412:	f7fd f8a9 	bl	8001568 <HAL_GetTick>
 8004416:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441a:	f7fd f8a5 	bl	8001568 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e234      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800442c:	4b3c      	ldr	r3, [pc, #240]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d036      	beq.n	80044b2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	2b00      	cmp	r3, #0
 800444a:	d019      	beq.n	8004480 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800444c:	4b34      	ldr	r3, [pc, #208]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a33      	ldr	r2, [pc, #204]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004456:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004458:	f7fd f886 	bl	8001568 <HAL_GetTick>
 800445c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004460:	f7fd f882 	bl	8001568 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e211      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004472:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x974>
 800447e:	e018      	b.n	80044b2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a26      	ldr	r2, [pc, #152]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 8004486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800448c:	f7fd f86c 	bl	8001568 <HAL_GetTick>
 8004490:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004494:	f7fd f868 	bl	8001568 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1f7      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d07f      	beq.n	80045be <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d062      	beq.n	800458c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80044cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044d0:	6093      	str	r3, [r2, #8]
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	4910      	ldr	r1, [pc, #64]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80044ec:	d309      	bcc.n	8004502 <HAL_RCC_OscConfig+0xa16>
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 021f 	bic.w	r2, r3, #31
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	4909      	ldr	r1, [pc, #36]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
 8004500:	e02a      	b.n	8004558 <HAL_RCC_OscConfig+0xa6c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	da0c      	bge.n	8004524 <HAL_RCC_OscConfig+0xa38>
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	015b      	lsls	r3, r3, #5
 8004518:	4901      	ldr	r1, [pc, #4]	; (8004520 <HAL_RCC_OscConfig+0xa34>)
 800451a:	4313      	orrs	r3, r2
 800451c:	60cb      	str	r3, [r1, #12]
 800451e:	e01b      	b.n	8004558 <HAL_RCC_OscConfig+0xa6c>
 8004520:	46020c00 	.word	0x46020c00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d30a      	bcc.n	8004544 <HAL_RCC_OscConfig+0xa58>
 800452e:	4ba1      	ldr	r3, [pc, #644]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	499d      	ldr	r1, [pc, #628]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800453e:	4313      	orrs	r3, r2
 8004540:	60cb      	str	r3, [r1, #12]
 8004542:	e009      	b.n	8004558 <HAL_RCC_OscConfig+0xa6c>
 8004544:	4b9b      	ldr	r3, [pc, #620]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	03db      	lsls	r3, r3, #15
 8004552:	4998      	ldr	r1, [pc, #608]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004558:	4b96      	ldr	r3, [pc, #600]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a95      	ldr	r2, [pc, #596]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800455e:	f043 0310 	orr.w	r3, r3, #16
 8004562:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004564:	f7fd f800 	bl	8001568 <HAL_GetTick>
 8004568:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800456c:	f7fc fffc 	bl	8001568 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e18b      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800457e:	4b8d      	ldr	r3, [pc, #564]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0xa80>
 800458a:	e018      	b.n	80045be <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800458c:	4b89      	ldr	r3, [pc, #548]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a88      	ldr	r2, [pc, #544]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004598:	f7fc ffe6 	bl	8001568 <HAL_GetTick>
 800459c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80045a0:	f7fc ffe2 	bl	8001568 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e171      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80045b2:	4b80      	ldr	r3, [pc, #512]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8166 	beq.w	8004894 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ce:	4b79      	ldr	r3, [pc, #484]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	f000 80f2 	beq.w	80047c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	f040 80c5 	bne.w	8004770 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	4b73      	ldr	r3, [pc, #460]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a72      	ldr	r2, [pc, #456]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80045ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045f2:	f7fc ffb9 	bl	8001568 <HAL_GetTick>
 80045f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fc ffb5 	bl	8001568 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e144      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800460c:	4b69      	ldr	r3, [pc, #420]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004618:	4b66      	ldr	r3, [pc, #408]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d111      	bne.n	800464a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462c:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800462e:	f043 0304 	orr.w	r3, r3, #4
 8004632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004636:	4b5f      	ldr	r3, [pc, #380]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800464a:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <HAL_RCC_OscConfig+0xccc>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004656:	d102      	bne.n	800465e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800465e:	4b56      	ldr	r3, [pc, #344]	; (80047b8 <HAL_RCC_OscConfig+0xccc>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	4a55      	ldr	r2, [pc, #340]	; (80047b8 <HAL_RCC_OscConfig+0xccc>)
 8004664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004668:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800466a:	4b52      	ldr	r3, [pc, #328]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800467e:	3a01      	subs	r2, #1
 8004680:	0212      	lsls	r2, r2, #8
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004688:	430a      	orrs	r2, r1
 800468a:	494a      	ldr	r1, [pc, #296]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	628b      	str	r3, [r1, #40]	; 0x28
 8004690:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	4b49      	ldr	r3, [pc, #292]	; (80047bc <HAL_RCC_OscConfig+0xcd0>)
 8004696:	4013      	ands	r3, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800469c:	3a01      	subs	r2, #1
 800469e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046a6:	3a01      	subs	r2, #1
 80046a8:	0252      	lsls	r2, r2, #9
 80046aa:	b292      	uxth	r2, r2
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046b2:	3a01      	subs	r2, #1
 80046b4:	0412      	lsls	r2, r2, #16
 80046b6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0612      	lsls	r2, r2, #24
 80046c4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80046c8:	430a      	orrs	r2, r1
 80046ca:	493a      	ldr	r1, [pc, #232]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80046d0:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	4a34      	ldr	r2, [pc, #208]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80046e6:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80046ec:	f043 0310 	orr.w	r3, r3, #16
 80046f0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80046f2:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	f023 020c 	bic.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	492d      	ldr	r1, [pc, #180]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004700:	4313      	orrs	r3, r2
 8004702:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800470c:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <HAL_RCC_OscConfig+0xccc>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <HAL_RCC_OscConfig+0xccc>)
 8004712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004716:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004718:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800471c:	2b01      	cmp	r3, #1
 800471e:	d107      	bne.n	8004730 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004726:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004730:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004746:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004748:	f7fc ff0e 	bl	8001568 <HAL_GetTick>
 800474c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fc ff0a 	bl	8001568 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e099      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0xc64>
 800476e:	e091      	b.n	8004894 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800477c:	f7fc fef4 	bl	8001568 <HAL_GetTick>
 8004780:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fc fef0 	bl	8001568 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e07f      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	4a03      	ldr	r2, [pc, #12]	; (80047b4 <HAL_RCC_OscConfig+0xcc8>)
 80047a8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80047ac:	f023 0303 	bic.w	r3, r3, #3
 80047b0:	6293      	str	r3, [r2, #40]	; 0x28
 80047b2:	e06f      	b.n	8004894 <HAL_RCC_OscConfig+0xda8>
 80047b4:	46020c00 	.word	0x46020c00
 80047b8:	46020800 	.word	0x46020800
 80047bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80047c0:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d039      	beq.n	8004848 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0203 	and.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d132      	bne.n	8004848 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d129      	bne.n	8004848 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d122      	bne.n	8004848 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d11a      	bne.n	8004848 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	0a5b      	lsrs	r3, r3, #9
 8004816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d111      	bne.n	8004848 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004830:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d108      	bne.n	8004848 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	0e1b      	lsrs	r3, r3, #24
 800483a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e024      	b.n	8004896 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800485a:	429a      	cmp	r2, r3
 800485c:	d01a      	beq.n	8004894 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	4a0f      	ldr	r2, [pc, #60]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 8004864:	f023 0310 	bic.w	r3, r3, #16
 8004868:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fc fe7d 	bl	8001568 <HAL_GetTick>
 800486e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004870:	bf00      	nop
 8004872:	f7fc fe79 	bl	8001568 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	4293      	cmp	r3, r2
 800487c:	d0f9      	beq.n	8004872 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <HAL_RCC_OscConfig+0xdb4>)
 800488e:	f043 0310 	orr.w	r3, r3, #16
 8004892:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3738      	adds	r7, #56	; 0x38
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	46020c00 	.word	0x46020c00

080048a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e1d9      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b8:	4b9b      	ldr	r3, [pc, #620]	; (8004b28 <HAL_RCC_ClockConfig+0x284>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d910      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b98      	ldr	r3, [pc, #608]	; (8004b28 <HAL_RCC_ClockConfig+0x284>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 020f 	bic.w	r2, r3, #15
 80048ce:	4996      	ldr	r1, [pc, #600]	; (8004b28 <HAL_RCC_ClockConfig+0x284>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b94      	ldr	r3, [pc, #592]	; (8004b28 <HAL_RCC_ClockConfig+0x284>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e1c1      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	4b8c      	ldr	r3, [pc, #560]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004900:	429a      	cmp	r2, r3
 8004902:	d908      	bls.n	8004916 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004904:	4b89      	ldr	r3, [pc, #548]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	4986      	ldr	r1, [pc, #536]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004912:	4313      	orrs	r3, r2
 8004914:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d012      	beq.n	8004948 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004930:	429a      	cmp	r2, r3
 8004932:	d909      	bls.n	8004948 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004934:	4b7d      	ldr	r3, [pc, #500]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	497a      	ldr	r1, [pc, #488]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004944:	4313      	orrs	r3, r2
 8004946:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	4b74      	ldr	r3, [pc, #464]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004960:	429a      	cmp	r2, r3
 8004962:	d908      	bls.n	8004976 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b71      	ldr	r3, [pc, #452]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	496e      	ldr	r1, [pc, #440]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004972:	4313      	orrs	r3, r2
 8004974:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d010      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	4b69      	ldr	r3, [pc, #420]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	429a      	cmp	r2, r3
 8004990:	d908      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004992:	4b66      	ldr	r3, [pc, #408]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f023 020f 	bic.w	r2, r3, #15
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4963      	ldr	r1, [pc, #396]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80d2 	beq.w	8004b56 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d143      	bne.n	8004a46 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049be:	4b5b      	ldr	r3, [pc, #364]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 80049c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d110      	bne.n	80049ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80049cc:	4b57      	ldr	r3, [pc, #348]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d2:	4a56      	ldr	r2, [pc, #344]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80049dc:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80049ee:	f7fc fdbb 	bl	8001568 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80049f4:	4b4e      	ldr	r3, [pc, #312]	; (8004b30 <HAL_RCC_ClockConfig+0x28c>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00f      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004a02:	f7fc fdb1 	bl	8001568 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e12b      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004a14:	4b46      	ldr	r3, [pc, #280]	; (8004b30 <HAL_RCC_ClockConfig+0x28c>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2c:	4a3f      	ldr	r2, [pc, #252]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a2e:	f023 0304 	bic.w	r3, r3, #4
 8004a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a36:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d121      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e112      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d115      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e106      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a66:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0fa      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a76:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e0f2      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4926      	ldr	r1, [pc, #152]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004a98:	f7fc fd66 	bl	8001568 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d112      	bne.n	8004acc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fc fd5e 	bl	8001568 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0d6      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d1ee      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x204>
 8004aca:	e044      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d112      	bne.n	8004afa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad6:	f7fc fd47 	bl	8001568 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0bf      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0x232>
 8004af8:	e02d      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d123      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b04:	f7fc fd30 	bl	8001568 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0a8      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_RCC_ClockConfig+0x288>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ee      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x260>
 8004b26:	e016      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2b2>
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	46020c00 	.word	0x46020c00
 8004b30:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fc fd18 	bl	8001568 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e090      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d1ee      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d010      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d208      	bcs.n	8004b84 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004b72:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 020f 	bic.w	r2, r3, #15
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	493d      	ldr	r1, [pc, #244]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b84:	4b3c      	ldr	r3, [pc, #240]	; (8004c78 <HAL_RCC_ClockConfig+0x3d4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d210      	bcs.n	8004bb4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_ClockConfig+0x3d4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 020f 	bic.w	r2, r3, #15
 8004b9a:	4937      	ldr	r1, [pc, #220]	; (8004c78 <HAL_RCC_ClockConfig+0x3d4>)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b35      	ldr	r3, [pc, #212]	; (8004c78 <HAL_RCC_ClockConfig+0x3d4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e05b      	b.n	8004c6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d208      	bcs.n	8004be2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4925      	ldr	r1, [pc, #148]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d209      	bcs.n	8004c14 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004c00:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	4919      	ldr	r1, [pc, #100]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d208      	bcs.n	8004c42 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	490d      	ldr	r1, [pc, #52]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c42:	f000 f821 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8004c46:	4602      	mov	r2, r0
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_RCC_ClockConfig+0x3d0>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	490a      	ldr	r1, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x3d8>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <HAL_RCC_ClockConfig+0x3dc>)
 8004c5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_ClockConfig+0x3e0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc fc37 	bl	80014d4 <HAL_InitTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	73fb      	strb	r3, [r7, #15]

  return status;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	46020c00 	.word	0x46020c00
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	080095ec 	.word	0x080095ec
 8004c80:	20000040 	.word	0x20000040
 8004c84:	20000044 	.word	0x20000044

08004c88 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b08b      	sub	sp, #44	; 0x2c
 8004c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c96:	4b7b      	ldr	r3, [pc, #492]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca0:	4b78      	ldr	r3, [pc, #480]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x34>
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d121      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d11e      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004cbc:	4b71      	ldr	r3, [pc, #452]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004cc8:	4b6e      	ldr	r3, [pc, #440]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cce:	0b1b      	lsrs	r3, r3, #12
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd6:	e005      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	0f1b      	lsrs	r3, r3, #28
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ce4:	4a68      	ldr	r2, [pc, #416]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d110      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cf8:	e00d      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfa:	4b62      	ldr	r3, [pc, #392]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d102      	bne.n	8004d0c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d06:	4b61      	ldr	r3, [pc, #388]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	e004      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d101      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d12:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d14:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	f040 80ac 	bne.w	8004e76 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004d1e:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004d28:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004d36:	4b53      	ldr	r3, [pc, #332]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d42:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	08db      	lsrs	r3, r3, #3
 8004d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0xec>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d022      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x130>
 8004d72:	e043      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004e90 <HAL_RCC_GetSysClockFreq+0x208>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b3f      	ldr	r3, [pc, #252]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d96:	ed97 6a01 	vldr	s12, [r7, #4]
 8004d9a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004e94 <HAL_RCC_GetSysClockFreq+0x20c>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004db6:	e046      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004e90 <HAL_RCC_GetSysClockFreq+0x208>
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004dda:	ed97 6a01 	vldr	s12, [r7, #4]
 8004dde:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004e94 <HAL_RCC_GetSysClockFreq+0x20c>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004dfa:	e024      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e24:	ed97 6a01 	vldr	s12, [r7, #4]
 8004e28:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004e94 <HAL_RCC_GetSysClockFreq+0x20c>
 8004e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e40:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004e44:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	0e1b      	lsrs	r3, r3, #24
 8004e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e50:	3301      	adds	r3, #1
 8004e52:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6a:	ee17 3a90 	vmov	r3, s15
 8004e6e:	623b      	str	r3, [r7, #32]
 8004e70:	e001      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004e76:	6a3b      	ldr	r3, [r7, #32]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	372c      	adds	r7, #44	; 0x2c
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	46020c00 	.word	0x46020c00
 8004e88:	08009604 	.word	0x08009604
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	4b742400 	.word	0x4b742400
 8004e94:	46000000 	.word	0x46000000

08004e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e9c:	f7ff fef4 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x28>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	4906      	ldr	r1, [pc, #24]	; (8004ec4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004eac:	5ccb      	ldrb	r3, [r1, r3]
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004eb4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004eb6:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	46020c00 	.word	0x46020c00
 8004ec4:	080095ec 	.word	0x080095ec
 8004ec8:	20000040 	.word	0x20000040

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004ed0:	f7ff ffe2 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	46020c00 	.word	0x46020c00
 8004ef0:	080095fc 	.word	0x080095fc

08004ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004ef8:	f7ff ffce 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4903      	ldr	r1, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	46020c00 	.word	0x46020c00
 8004f18:	080095fc 	.word	0x080095fc

08004f1c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004f20:	f7ff ffba 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCC_GetPCLK3Freq+0x20>)
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4903      	ldr	r1, [pc, #12]	; (8004f40 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	46020c00 	.word	0x46020c00
 8004f40:	080095fc 	.word	0x080095fc

08004f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f4c:	4b3e      	ldr	r3, [pc, #248]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f5a:	f7fe fd49 	bl	80039f0 <HAL_PWREx_GetVoltageRange>
 8004f5e:	6178      	str	r0, [r7, #20]
 8004f60:	e019      	b.n	8004f96 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	4b39      	ldr	r3, [pc, #228]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f68:	4a37      	ldr	r2, [pc, #220]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f6a:	f043 0304 	orr.w	r3, r3, #4
 8004f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004f72:	4b35      	ldr	r3, [pc, #212]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f80:	f7fe fd36 	bl	80039f0 <HAL_PWREx_GetVoltageRange>
 8004f84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f86:	4b30      	ldr	r3, [pc, #192]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8c:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f8e:	f023 0304 	bic.w	r3, r3, #4
 8004f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f9c:	d003      	beq.n	8004fa6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fa4:	d109      	bne.n	8004fba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fac:	d202      	bcs.n	8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004fae:	2301      	movs	r3, #1
 8004fb0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004fb2:	e033      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004fb8:	e030      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc0:	d208      	bcs.n	8004fd4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d102      	bne.n	8004fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004fca:	2303      	movs	r3, #3
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	e025      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e035      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fda:	d90f      	bls.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fe8:	d902      	bls.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	e015      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e012      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	e00f      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005002:	d109      	bne.n	8005018 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d102      	bne.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800500c:	2301      	movs	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	e004      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005012:	2302      	movs	r3, #2
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e001      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005018:	2301      	movs	r3, #1
 800501a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 020f 	bic.w	r2, r3, #15
 8005024:	4909      	ldr	r1, [pc, #36]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	d001      	beq.n	800503e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	46020c00 	.word	0x46020c00
 800504c:	40022000 	.word	0x40022000

08005050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b0ba      	sub	sp, #232	; 0xe8
 8005056:	af00      	add	r7, sp, #0
 8005058:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800505c:	2300      	movs	r3, #0
 800505e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005062:	2300      	movs	r3, #0
 8005064:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f002 0401 	and.w	r4, r2, #1
 8005074:	2500      	movs	r5, #0
 8005076:	ea54 0305 	orrs.w	r3, r4, r5
 800507a:	d00b      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800507c:	4bcb      	ldr	r3, [pc, #812]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005082:	f023 0103 	bic.w	r1, r3, #3
 8005086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508c:	4ac7      	ldr	r2, [pc, #796]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800508e:	430b      	orrs	r3, r1
 8005090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 0802 	and.w	r8, r2, #2
 80050a0:	f04f 0900 	mov.w	r9, #0
 80050a4:	ea58 0309 	orrs.w	r3, r8, r9
 80050a8:	d00b      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80050aa:	4bc0      	ldr	r3, [pc, #768]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b0:	f023 010c 	bic.w	r1, r3, #12
 80050b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	4abc      	ldr	r2, [pc, #752]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f002 0a04 	and.w	sl, r2, #4
 80050ce:	f04f 0b00 	mov.w	fp, #0
 80050d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80050d6:	d00b      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80050d8:	4bb4      	ldr	r3, [pc, #720]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050de:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80050e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	4ab0      	ldr	r2, [pc, #704]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050ea:	430b      	orrs	r3, r1
 80050ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f002 0308 	and.w	r3, r2, #8
 80050fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005106:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800510a:	460b      	mov	r3, r1
 800510c:	4313      	orrs	r3, r2
 800510e:	d00b      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005110:	4ba6      	ldr	r3, [pc, #664]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005116:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	4aa2      	ldr	r2, [pc, #648]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005122:	430b      	orrs	r3, r1
 8005124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f002 0310 	and.w	r3, r2, #16
 8005134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800513e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d00b      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005148:	4b98      	ldr	r3, [pc, #608]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800514a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800514e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005158:	4a94      	ldr	r2, [pc, #592]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800515a:	430b      	orrs	r3, r1
 800515c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005160:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f002 0320 	and.w	r3, r2, #32
 800516c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005176:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800517a:	460b      	mov	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	d00b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005180:	4b8a      	ldr	r3, [pc, #552]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005186:	f023 0107 	bic.w	r1, r3, #7
 800518a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005190:	4a86      	ldr	r2, [pc, #536]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005192:	430b      	orrs	r3, r1
 8005194:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80051a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4313      	orrs	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80051b8:	4b7c      	ldr	r3, [pc, #496]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051be:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c8:	4a78      	ldr	r2, [pc, #480]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80051dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051e6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d00b      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80051f0:	4b6e      	ldr	r3, [pc, #440]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005200:	4a6a      	ldr	r2, [pc, #424]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005202:	430b      	orrs	r3, r1
 8005204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005214:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800521e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d00b      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005228:	4b60      	ldr	r3, [pc, #384]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800522a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800522e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	4a5c      	ldr	r2, [pc, #368]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800523a:	430b      	orrs	r3, r1
 800523c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800524c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005256:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d00b      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005260:	4b52      	ldr	r3, [pc, #328]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005266:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800526a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005270:	4a4e      	ldr	r2, [pc, #312]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005272:	430b      	orrs	r3, r1
 8005274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800528e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d00b      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005298:	4b44      	ldr	r3, [pc, #272]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800529a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800529e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80052a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a8:	4a40      	ldr	r2, [pc, #256]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052aa:	430b      	orrs	r3, r1
 80052ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80052bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80052ca:	460b      	mov	r3, r1
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80052d0:	4b36      	ldr	r3, [pc, #216]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80052da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e0:	4a32      	ldr	r2, [pc, #200]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052e2:	430b      	orrs	r3, r1
 80052e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80052e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80052f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f8:	2300      	movs	r3, #0
 80052fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005302:	460b      	mov	r3, r1
 8005304:	4313      	orrs	r3, r2
 8005306:	d00c      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005308:	4b28      	ldr	r3, [pc, #160]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800530e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531a:	4a24      	ldr	r2, [pc, #144]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800531c:	430b      	orrs	r3, r1
 800531e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800532e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005330:	2300      	movs	r3, #0
 8005332:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005334:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d04f      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800533e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d02d      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d827      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800534e:	2b60      	cmp	r3, #96	; 0x60
 8005350:	d02e      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005352:	2b60      	cmp	r3, #96	; 0x60
 8005354:	d823      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d006      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d81f      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005362:	2b20      	cmp	r3, #32
 8005364:	d011      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005366:	e01a      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	4a0f      	ldr	r2, [pc, #60]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005372:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005374:	e01d      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800537a:	3308      	adds	r3, #8
 800537c:	4618      	mov	r0, r3
 800537e:	f002 fa41 	bl	8007804 <RCCEx_PLL2_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005388:	e013      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800538a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800538e:	332c      	adds	r3, #44	; 0x2c
 8005390:	4618      	mov	r0, r3
 8005392:	f002 facf 	bl	8007934 <RCCEx_PLL3_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800539c:	e009      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80053a4:	e005      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80053a6:	bf00      	nop
 80053a8:	e003      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80053aa:	bf00      	nop
 80053ac:	46020c00 	.word	0x46020c00
        break;
 80053b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80053ba:	4bb6      	ldr	r3, [pc, #728]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053c0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80053c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	4ab1      	ldr	r2, [pc, #708]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053ce:	430b      	orrs	r3, r1
 80053d0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80053da:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80053ea:	673b      	str	r3, [r7, #112]	; 0x70
 80053ec:	2300      	movs	r3, #0
 80053ee:	677b      	str	r3, [r7, #116]	; 0x74
 80053f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80053f4:	460b      	mov	r3, r1
 80053f6:	4313      	orrs	r3, r2
 80053f8:	d053      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005406:	d033      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d82c      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800540e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005412:	d02f      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005418:	d826      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800541a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541e:	d008      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005424:	d820      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d011      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005430:	e01a      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005432:	4b98      	ldr	r3, [pc, #608]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	4a97      	ldr	r2, [pc, #604]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800543e:	e01a      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005444:	3308      	adds	r3, #8
 8005446:	4618      	mov	r0, r3
 8005448:	f002 f9dc 	bl	8007804 <RCCEx_PLL2_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005452:	e010      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005454:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005458:	332c      	adds	r3, #44	; 0x2c
 800545a:	4618      	mov	r0, r3
 800545c:	f002 fa6a 	bl	8007934 <RCCEx_PLL3_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005466:	e006      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800546e:	e002      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005470:	bf00      	nop
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005476:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800547e:	4b85      	ldr	r3, [pc, #532]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005484:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800548c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005490:	4a80      	ldr	r2, [pc, #512]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005492:	430b      	orrs	r3, r1
 8005494:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005498:	e003      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800549e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80054a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80054ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b0:	2300      	movs	r3, #0
 80054b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80054b8:	460b      	mov	r3, r1
 80054ba:	4313      	orrs	r3, r2
 80054bc:	d046      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80054be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054c6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80054ca:	d028      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80054cc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80054d0:	d821      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80054d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d6:	d022      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80054d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054dc:	d81b      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80054de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e2:	d01c      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80054e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e8:	d815      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	d008      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f4:	d80f      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d011      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d00e      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005500:	e009      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005506:	3308      	adds	r3, #8
 8005508:	4618      	mov	r0, r3
 800550a:	f002 f97b 	bl	8007804 <RCCEx_PLL2_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005514:	e004      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800551c:	e000      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800551e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005520:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005528:	4b5a      	ldr	r3, [pc, #360]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800552a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800552e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800553a:	4a56      	ldr	r2, [pc, #344]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800553c:	430b      	orrs	r3, r1
 800553e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005542:	e003      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005544:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005548:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800554c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
 800555a:	2300      	movs	r3, #0
 800555c:	667b      	str	r3, [r7, #100]	; 0x64
 800555e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005562:	460b      	mov	r3, r1
 8005564:	4313      	orrs	r3, r2
 8005566:	d03f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	2b04      	cmp	r3, #4
 8005572:	d81e      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055bb 	.word	0x080055bb
 8005580:	08005591 	.word	0x08005591
 8005584:	0800559f 	.word	0x0800559f
 8005588:	080055bb 	.word	0x080055bb
 800558c:	080055bb 	.word	0x080055bb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005590:	4b40      	ldr	r3, [pc, #256]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	4a3f      	ldr	r2, [pc, #252]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800559c:	e00e      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055a2:	332c      	adds	r3, #44	; 0x2c
 80055a4:	4618      	mov	r0, r3
 80055a6:	f002 f9c5 	bl	8007934 <RCCEx_PLL3_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055b0:	e004      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80055ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80055c4:	4b33      	ldr	r3, [pc, #204]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055ca:	f023 0107 	bic.w	r1, r3, #7
 80055ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055d8:	430b      	orrs	r3, r1
 80055da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055e4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80055e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80055f6:	2300      	movs	r3, #0
 80055f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	d04d      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005610:	d028      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005612:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005616:	d821      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800561c:	d024      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800561e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005622:	d81b      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005628:	d00e      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800562a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800562e:	d815      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01b      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005638:	d110      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800563a:	4b16      	ldr	r3, [pc, #88]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005644:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005646:	e012      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800564c:	332c      	adds	r3, #44	; 0x2c
 800564e:	4618      	mov	r0, r3
 8005650:	f002 f970 	bl	8007934 <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800565a:	e008      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800566c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800566e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d110      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005676:	4b07      	ldr	r3, [pc, #28]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800567c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005688:	4a02      	ldr	r2, [pc, #8]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800568a:	430b      	orrs	r3, r1
 800568c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005692:	bf00      	nop
 8005694:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800569c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80056ac:	653b      	str	r3, [r7, #80]	; 0x50
 80056ae:	2300      	movs	r3, #0
 80056b0:	657b      	str	r3, [r7, #84]	; 0x54
 80056b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80056b6:	460b      	mov	r3, r1
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f000 80b5 	beq.w	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056be:	2300      	movs	r3, #0
 80056c0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c4:	4b9d      	ldr	r3, [pc, #628]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d113      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	4b9a      	ldr	r3, [pc, #616]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d8:	4a98      	ldr	r2, [pc, #608]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056da:	f043 0304 	orr.w	r3, r3, #4
 80056de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80056e2:	4b96      	ldr	r3, [pc, #600]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80056fa:	4b91      	ldr	r3, [pc, #580]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	4a90      	ldr	r2, [pc, #576]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005706:	f7fb ff2f 	bl	8001568 <HAL_GetTick>
 800570a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800570e:	e00b      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005710:	f7fb ff2a 	bl	8001568 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d903      	bls.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005726:	e005      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005728:	4b85      	ldr	r3, [pc, #532]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0ed      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005734:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d165      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800573c:	4b7f      	ldr	r3, [pc, #508]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800573e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d023      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005756:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	4293      	cmp	r3, r2
 8005760:	d01b      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005762:	4b76      	ldr	r3, [pc, #472]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005770:	4b72      	ldr	r3, [pc, #456]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005776:	4a71      	ldr	r2, [pc, #452]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005780:	4b6e      	ldr	r3, [pc, #440]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005786:	4a6d      	ldr	r2, [pc, #436]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005790:	4a6a      	ldr	r2, [pc, #424]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d019      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fb fedf 	bl	8001568 <HAL_GetTick>
 80057aa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ae:	e00d      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fb feda 	bl	8001568 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ba:	1ad2      	subs	r2, r2, r3
 80057bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d903      	bls.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80057ca:	e006      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057cc:	4b5b      	ldr	r3, [pc, #364]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ea      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80057da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80057e2:	4b56      	ldr	r3, [pc, #344]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057f4:	4a51      	ldr	r2, [pc, #324]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80057fc:	e008      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005802:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005806:	e003      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800580c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005810:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005818:	4b48      	ldr	r3, [pc, #288]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800581a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581e:	4a47      	ldr	r2, [pc, #284]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005834:	64bb      	str	r3, [r7, #72]	; 0x48
 8005836:	2300      	movs	r3, #0
 8005838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d042      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005848:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800584c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005850:	d022      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005852:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005856:	d81b      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800585c:	d011      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800585e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005862:	d815      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d019      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800586c:	d110      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005872:	3308      	adds	r3, #8
 8005874:	4618      	mov	r0, r3
 8005876:	f001 ffc5 	bl	8007804 <RCCEx_PLL2_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005880:	e00d      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005882:	4b2e      	ldr	r3, [pc, #184]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	4a2d      	ldr	r2, [pc, #180]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800588e:	e006      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005896:	e002      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800589c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800589e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10d      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80058a6:	4b25      	ldr	r3, [pc, #148]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058ac:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80058b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058b8:	4a20      	ldr	r2, [pc, #128]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058ba:	430b      	orrs	r3, r1
 80058bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058c0:	e003      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058c6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
 80058d8:	2300      	movs	r3, #0
 80058da:	647b      	str	r3, [r7, #68]	; 0x44
 80058dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80058e0:	460b      	mov	r3, r1
 80058e2:	4313      	orrs	r3, r2
 80058e4:	d032      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80058e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d00b      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80058f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f8:	d804      	bhi.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005902:	d007      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800590a:	e004      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800590c:	bf00      	nop
 800590e:	e002      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005910:	bf00      	nop
 8005912:	e000      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005914:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005916:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d112      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005924:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005930:	4a02      	ldr	r2, [pc, #8]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005932:	430b      	orrs	r3, r1
 8005934:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005938:	e008      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800593a:	bf00      	nop
 800593c:	46020c00 	.word	0x46020c00
 8005940:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005948:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800594c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38
 800595a:	2300      	movs	r3, #0
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800595e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005962:	460b      	mov	r3, r1
 8005964:	4313      	orrs	r3, r2
 8005966:	d00c      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005968:	4b98      	ldr	r3, [pc, #608]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800596a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800596e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800597a:	4a94      	ldr	r2, [pc, #592]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800597c:	430b      	orrs	r3, r1
 800597e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800598e:	633b      	str	r3, [r7, #48]	; 0x30
 8005990:	2300      	movs	r3, #0
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
 8005994:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d019      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800599e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059aa:	d105      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059ac:	4b87      	ldr	r3, [pc, #540]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	4a86      	ldr	r2, [pc, #536]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80059b8:	4b84      	ldr	r3, [pc, #528]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059be:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80059c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059ca:	4a80      	ldr	r2, [pc, #512]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80059d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e0:	2300      	movs	r3, #0
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d00c      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80059ee:	4b77      	ldr	r3, [pc, #476]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a00:	4972      	ldr	r1, [pc, #456]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	2300      	movs	r3, #0
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d00c      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005a24:	4b69      	ldr	r3, [pc, #420]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a36:	4965      	ldr	r1, [pc, #404]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a54:	460b      	mov	r3, r1
 8005a56:	4313      	orrs	r3, r2
 8005a58:	d00c      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005a5a:	4b5c      	ldr	r3, [pc, #368]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a60:	f023 0218 	bic.w	r2, r3, #24
 8005a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a6c:	4957      	ldr	r1, [pc, #348]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	d032      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a9c:	d105      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9e:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	4a4a      	ldr	r2, [pc, #296]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ab6:	d108      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ab8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005abc:	3308      	adds	r3, #8
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fea0 	bl	8007804 <RCCEx_PLL2_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005aca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10d      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005ad2:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ad4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ae4:	4939      	ldr	r1, [pc, #228]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005aec:	e003      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005af2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	d03a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1e:	d00e      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b24:	d815      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d017      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b2e:	d110      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b30:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b3c:	e00e      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b42:	3308      	adds	r3, #8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fe5d 	bl	8007804 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b50:	e004      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005b58:	e000      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005b5a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10d      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005b64:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	4915      	ldr	r1, [pc, #84]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005b7e:	e003      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b84:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d00c      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005baa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bb6:	4905      	ldr	r1, [pc, #20]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005bbe:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	37e8      	adds	r7, #232	; 0xe8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bcc:	46020c00 	.word	0x46020c00

08005bd0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005bd8:	4bad      	ldr	r3, [pc, #692]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005be2:	4bab      	ldr	r3, [pc, #684]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bec:	4ba8      	ldr	r3, [pc, #672]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005bfa:	4ba5      	ldr	r3, [pc, #660]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c06:	4ba2      	ldr	r3, [pc, #648]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8123 	beq.w	8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d062      	beq.n	8005cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	f200 8081 	bhi.w	8005d3a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d024      	beq.n	8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d17a      	bne.n	8005d3a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b8e      	ldr	r3, [pc, #568]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c6a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c86:	e08f      	b.n	8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c88:	4b81      	ldr	r3, [pc, #516]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8005c94:	4b7e      	ldr	r3, [pc, #504]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	0f1b      	lsrs	r3, r3, #28
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	e006      	b.n	8005cae <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8005ca0:	4b7b      	ldr	r3, [pc, #492]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	0f1b      	lsrs	r3, r3, #28
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	4a7b      	ldr	r2, [pc, #492]	; (8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8005cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cd8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf4:	e058      	b.n	8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d00:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d08:	4b61      	ldr	r3, [pc, #388]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d18:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d38:	e036      	b.n	8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d3a:	4b55      	ldr	r3, [pc, #340]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8005d46:	4b52      	ldr	r3, [pc, #328]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	0f1b      	lsrs	r3, r3, #28
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	e006      	b.n	8005d60 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8005d52:	4b4f      	ldr	r3, [pc, #316]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	0f1b      	lsrs	r3, r3, #28
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	4a4e      	ldr	r2, [pc, #312]	; (8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8005d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	ee07 3a90 	vmov	s15, r3
 8005d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d8a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005da8:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d017      	beq.n	8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005db4:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	0a5b      	lsrs	r3, r3, #9
 8005dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dda:	ee17 2a90 	vmov	r2, s15
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	e002      	b.n	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005dea:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d017      	beq.n	8005e26 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005df6:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfa:	0c1b      	lsrs	r3, r3, #16
 8005dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1c:	ee17 2a90 	vmov	r2, s15
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	605a      	str	r2, [r3, #4]
 8005e24:	e002      	b.n	8005e2c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005e2c:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d017      	beq.n	8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	0e1b      	lsrs	r3, r3, #24
 8005e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e5e:	ee17 2a90 	vmov	r2, s15
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e66:	e00c      	b.n	8005e82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	e008      	b.n	8005e82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	bf00      	nop
 8005e84:	3724      	adds	r7, #36	; 0x24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	46020c00 	.word	0x46020c00
 8005e94:	4b742400 	.word	0x4b742400
 8005e98:	46000000 	.word	0x46000000
 8005e9c:	08009604 	.word	0x08009604

08005ea0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	; 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005ea8:	4bad      	ldr	r3, [pc, #692]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005eb2:	4bab      	ldr	r3, [pc, #684]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005ebc:	4ba8      	ldr	r3, [pc, #672]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005eca:	4ba5      	ldr	r3, [pc, #660]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005ed6:	4ba2      	ldr	r3, [pc, #648]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8123 	beq.w	8006140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d062      	beq.n	8005fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	f200 8081 	bhi.w	800600a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d024      	beq.n	8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d17a      	bne.n	800600a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b8e      	ldr	r3, [pc, #568]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f56:	e08f      	b.n	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f58:	4b81      	ldr	r3, [pc, #516]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8005f64:	4b7e      	ldr	r3, [pc, #504]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	0f1b      	lsrs	r3, r3, #28
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	e006      	b.n	8005f7e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8005f70:	4b7b      	ldr	r3, [pc, #492]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	0f1b      	lsrs	r3, r3, #28
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	4a7b      	ldr	r2, [pc, #492]	; (800616c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8005f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc4:	e058      	b.n	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd8:	4b61      	ldr	r3, [pc, #388]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fe8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fec:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006008:	e036      	b.n	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800600a:	4b55      	ldr	r3, [pc, #340]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8006016:	4b52      	ldr	r3, [pc, #328]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	0f1b      	lsrs	r3, r3, #28
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8006022:	4b4f      	ldr	r3, [pc, #316]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	0f1b      	lsrs	r3, r3, #28
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	4a4e      	ldr	r2, [pc, #312]	; (800616c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8006032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a02 	vldr	s12, [r7, #8]
 800605a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006076:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006078:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d017      	beq.n	80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	0a5b      	lsrs	r3, r3, #9
 800608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800609a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800609e:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060aa:	ee17 2a90 	vmov	r2, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	e002      	b.n	80060ba <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80060ba:	4b29      	ldr	r3, [pc, #164]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d017      	beq.n	80060f6 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060c6:	4b26      	ldr	r3, [pc, #152]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	0c1b      	lsrs	r3, r3, #16
 80060cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80060d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060dc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ec:	ee17 2a90 	vmov	r2, s15
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	e002      	b.n	80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80060fc:	4b18      	ldr	r3, [pc, #96]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d017      	beq.n	8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006108:	4b15      	ldr	r3, [pc, #84]	; (8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	0e1b      	lsrs	r3, r3, #24
 800610e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800611a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800611e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006122:	edd7 6a07 	vldr	s13, [r7, #28]
 8006126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800612a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612e:	ee17 2a90 	vmov	r2, s15
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006136:	e00c      	b.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	609a      	str	r2, [r3, #8]
}
 800613e:	e008      	b.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	609a      	str	r2, [r3, #8]
}
 8006152:	bf00      	nop
 8006154:	3724      	adds	r7, #36	; 0x24
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	46020c00 	.word	0x46020c00
 8006164:	4b742400 	.word	0x4b742400
 8006168:	46000000 	.word	0x46000000
 800616c:	08009604 	.word	0x08009604

08006170 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006170:	b480      	push	{r7}
 8006172:	b089      	sub	sp, #36	; 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006178:	4bad      	ldr	r3, [pc, #692]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006180:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006182:	4bab      	ldr	r3, [pc, #684]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800618c:	4ba8      	ldr	r3, [pc, #672]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	3301      	adds	r3, #1
 8006198:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800619a:	4ba5      	ldr	r3, [pc, #660]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80061a6:	4ba2      	ldr	r3, [pc, #648]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061aa:	08db      	lsrs	r3, r3, #3
 80061ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	fb02 f303 	mul.w	r3, r2, r3
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061be:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8123 	beq.w	8006410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d062      	beq.n	8006296 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	f200 8081 	bhi.w	80062da <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d024      	beq.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d17a      	bne.n	80062da <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eddf 6a91 	vldr	s13, [pc, #580]	; 8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80061f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f6:	4b8e      	ldr	r3, [pc, #568]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006206:	ed97 6a02 	vldr	s12, [r7, #8]
 800620a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006212:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006222:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006226:	e08f      	b.n	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006228:	4b81      	ldr	r3, [pc, #516]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8006234:	4b7e      	ldr	r3, [pc, #504]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	0f1b      	lsrs	r3, r3, #28
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	e006      	b.n	800624e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8006240:	4b7b      	ldr	r3, [pc, #492]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	0f1b      	lsrs	r3, r3, #28
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	4a7b      	ldr	r2, [pc, #492]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8006250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006274:	ed97 6a02 	vldr	s12, [r7, #8]
 8006278:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800627c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006288:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006294:	e058      	b.n	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80062a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a8:	4b61      	ldr	r3, [pc, #388]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80062b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80062bc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80062c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80062c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062d8:	e036      	b.n	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062da:	4b55      	ldr	r3, [pc, #340]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80062e6:	4b52      	ldr	r3, [pc, #328]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	0f1b      	lsrs	r3, r3, #28
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 80062f2:	4b4f      	ldr	r3, [pc, #316]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	0f1b      	lsrs	r3, r3, #28
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	4a4e      	ldr	r2, [pc, #312]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8006302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006326:	ed97 6a02 	vldr	s12, [r7, #8]
 800632a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006346:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006348:	4b39      	ldr	r3, [pc, #228]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006354:	4b36      	ldr	r3, [pc, #216]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006358:	0a5b      	lsrs	r3, r3, #9
 800635a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800636a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800636e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800637a:	ee17 2a90 	vmov	r2, s15
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e002      	b.n	800638a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800638a:	4b29      	ldr	r3, [pc, #164]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d017      	beq.n	80063c6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006396:	4b26      	ldr	r3, [pc, #152]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	0c1b      	lsrs	r3, r3, #16
 800639c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80063a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063bc:	ee17 2a90 	vmov	r2, s15
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	605a      	str	r2, [r3, #4]
 80063c4:	e002      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80063cc:	4b18      	ldr	r3, [pc, #96]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d017      	beq.n	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063d8:	4b15      	ldr	r3, [pc, #84]	; (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	0e1b      	lsrs	r3, r3, #24
 80063de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80063ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ee:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fe:	ee17 2a90 	vmov	r2, s15
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006406:	e00c      	b.n	8006422 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
}
 800640e:	e008      	b.n	8006422 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
}
 8006422:	bf00      	nop
 8006424:	3724      	adds	r7, #36	; 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	46020c00 	.word	0x46020c00
 8006434:	4b742400 	.word	0x4b742400
 8006438:	46000000 	.word	0x46000000
 800643c:	08009604 	.word	0x08009604

08006440 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	; 0x38
 8006444:	af00      	add	r7, sp, #0
 8006446:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800644a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8006452:	430b      	orrs	r3, r1
 8006454:	d145      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006456:	4ba7      	ldr	r3, [pc, #668]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800645c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006460:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006462:	4ba4      	ldr	r3, [pc, #656]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b02      	cmp	r3, #2
 800646e:	d108      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d104      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
 800647e:	f001 b9b3 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006482:	4b9c      	ldr	r3, [pc, #624]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800648c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006490:	d114      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006498:	d110      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800649a:	4b96      	ldr	r3, [pc, #600]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800649c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a8:	d103      	bne.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80064aa:	23fa      	movs	r3, #250	; 0xfa
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064ae:	f001 b99b 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80064b2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064b8:	f001 b996 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80064bc:	4b8d      	ldr	r3, [pc, #564]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c8:	d107      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d0:	d103      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80064d2:	4b89      	ldr	r3, [pc, #548]	; (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	f001 b987 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
 80064de:	f001 b983 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80064ea:	430b      	orrs	r3, r1
 80064ec:	d151      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80064ee:	4b81      	ldr	r3, [pc, #516]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80064f4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d035      	beq.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d841      	bhi.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2b60      	cmp	r3, #96	; 0x60
 800650a:	d02a      	beq.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2b60      	cmp	r3, #96	; 0x60
 8006510:	d83b      	bhi.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d009      	beq.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d835      	bhi.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00c      	beq.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	2b20      	cmp	r3, #32
 8006528:	d012      	beq.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800652a:	e02e      	b.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800652c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fb4d 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800653a:	f001 b955 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff fcac 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800654c:	f001 b94c 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006550:	f107 030c 	add.w	r3, r7, #12
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fe0b 	bl	8006170 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800655e:	f001 b943 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006562:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006568:	f001 b93e 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800656c:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006578:	d103      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800657a:	4b60      	ldr	r3, [pc, #384]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800657e:	f001 b933 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006586:	f001 b92f 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800658e:	f001 b92b 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006596:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800659a:	430b      	orrs	r3, r1
 800659c:	d158      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800659e:	4b55      	ldr	r3, [pc, #340]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b0:	d03b      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d846      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c0:	d02e      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c8:	d83e      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d00b      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d8:	d836      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00d      	beq.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d012      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80065e8:	e02e      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff faee 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065f8:	f001 b8f6 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fc:	f107 0318 	add.w	r3, r7, #24
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fc4d 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800660a:	f001 b8ed 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fdac 	bl	8006170 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800661c:	f001 b8e4 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006620:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006626:	f001 b8df 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800662a:	4b32      	ldr	r3, [pc, #200]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006636:	d103      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006638:	4b30      	ldr	r3, [pc, #192]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800663c:	f001 b8d4 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006644:	f001 b8d0 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800664c:	f001 b8cc 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006654:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006658:	430b      	orrs	r3, r1
 800665a:	d126      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800665c:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800665e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006666:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006668:	4b22      	ldr	r3, [pc, #136]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006674:	d106      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800667c:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	f001 b8b2 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006690:	d107      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006698:	d103      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800669a:	4b19      	ldr	r3, [pc, #100]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
 800669e:	f001 b8a3 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
 80066a6:	f001 b89f 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80066aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ae:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80066b2:	430b      	orrs	r3, r1
 80066b4:	d16e      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066bc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80066c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066c8:	d03d      	beq.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066d0:	d85c      	bhi.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d8:	d014      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e0:	d854      	bhi.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01f      	beq.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ee:	d012      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80066f0:	e04c      	b.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80066f2:	bf00      	nop
 80066f4:	46020c00 	.word	0x46020c00
 80066f8:	0007a120 	.word	0x0007a120
 80066fc:	00f42400 	.word	0x00f42400
 8006700:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff fa61 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006712:	f001 b869 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006716:	f107 0318 	add.w	r3, r7, #24
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fbc0 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006724:	f001 b860 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006728:	4ba7      	ldr	r3, [pc, #668]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006734:	d103      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006736:	4ba5      	ldr	r3, [pc, #660]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006738:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800673a:	f001 b855 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006742:	f001 b851 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006746:	4ba0      	ldr	r3, [pc, #640]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b20      	cmp	r3, #32
 8006750:	d118      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006752:	4b9d      	ldr	r3, [pc, #628]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800675e:	4b9a      	ldr	r3, [pc, #616]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	0e1b      	lsrs	r3, r3, #24
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	e006      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800676a:	4b97      	ldr	r3, [pc, #604]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800676c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006770:	041b      	lsls	r3, r3, #16
 8006772:	0e1b      	lsrs	r3, r3, #24
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	4a95      	ldr	r2, [pc, #596]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800677a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006780:	f001 b832 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006788:	f001 b82e 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006790:	f001 b82a 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006798:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800679c:	430b      	orrs	r3, r1
 800679e:	d17f      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80067a0:	4b89      	ldr	r3, [pc, #548]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d165      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80067b2:	4b85      	ldr	r3, [pc, #532]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067b8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80067bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067c4:	d034      	beq.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067cc:	d853      	bhi.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d4:	d00b      	beq.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067dc:	d84b      	bhi.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d016      	beq.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067ea:	d009      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80067ec:	e043      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff f9ec 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067fc:	f000 bff4 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006800:	f107 0318 	add.w	r3, r7, #24
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fb4b 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800680e:	f000 bfeb 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006812:	4b6d      	ldr	r3, [pc, #436]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800681a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681e:	d103      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006820:	4b6a      	ldr	r3, [pc, #424]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006824:	f000 bfe0 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800682c:	f000 bfdc 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006830:	4b65      	ldr	r3, [pc, #404]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b20      	cmp	r3, #32
 800683a:	d118      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800683c:	4b62      	ldr	r3, [pc, #392]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006848:	4b5f      	ldr	r3, [pc, #380]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	0e1b      	lsrs	r3, r3, #24
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	e006      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006854:	4b5c      	ldr	r3, [pc, #368]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	0e1b      	lsrs	r3, r3, #24
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	4a5b      	ldr	r2, [pc, #364]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800686a:	f000 bfbd 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006872:	f000 bfb9 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800687a:	f000 bfb5 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006884:	d108      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff f9a0 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
 8006894:	f000 bfa8 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
 800689c:	f000 bfa4 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80068a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a4:	1e51      	subs	r1, r2, #1
 80068a6:	430b      	orrs	r3, r1
 80068a8:	d136      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80068aa:	4b47      	ldr	r3, [pc, #284]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80068ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80068bc:	f7fe fb1a 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 80068c0:	6378      	str	r0, [r7, #52]	; 0x34
 80068c2:	f000 bf91 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d104      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068cc:	f7fe f9dc 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80068d0:	6378      	str	r0, [r7, #52]	; 0x34
 80068d2:	f000 bf89 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80068d6:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e2:	d106      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d103      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80068ea:	4b3a      	ldr	r3, [pc, #232]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
 80068ee:	f000 bf7b 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80068f2:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80068f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d107      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	2b03      	cmp	r3, #3
 8006904:	d104      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
 800690c:	f000 bf6c 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	637b      	str	r3, [r7, #52]	; 0x34
 8006914:	f000 bf68 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691c:	1e91      	subs	r1, r2, #2
 800691e:	430b      	orrs	r3, r1
 8006920:	d136      	bne.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006922:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006928:	f003 030c 	and.w	r3, r3, #12
 800692c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006934:	f7fe faca 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8006938:	6378      	str	r0, [r7, #52]	; 0x34
 800693a:	f000 bf55 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2b04      	cmp	r3, #4
 8006942:	d104      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006944:	f7fe f9a0 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006948:	6378      	str	r0, [r7, #52]	; 0x34
 800694a:	f000 bf4d 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800694e:	4b1e      	ldr	r3, [pc, #120]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695a:	d106      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	2b08      	cmp	r3, #8
 8006960:	d103      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006964:	637b      	str	r3, [r7, #52]	; 0x34
 8006966:	f000 bf3f 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800696a:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800696c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b02      	cmp	r3, #2
 8006976:	d107      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2b0c      	cmp	r3, #12
 800697c:	d104      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800697e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
 8006984:	f000 bf30 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
 800698c:	f000 bf2c 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006994:	1f11      	subs	r1, r2, #4
 8006996:	430b      	orrs	r3, r1
 8006998:	d13f      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800699c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069ac:	f7fe fa8e 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 80069b0:	6378      	str	r0, [r7, #52]	; 0x34
 80069b2:	f000 bf19 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d10d      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069bc:	f7fe f964 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80069c0:	6378      	str	r0, [r7, #52]	; 0x34
 80069c2:	f000 bf11 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80069c6:	bf00      	nop
 80069c8:	46020c00 	.word	0x46020c00
 80069cc:	02dc6c00 	.word	0x02dc6c00
 80069d0:	08009604 	.word	0x08009604
 80069d4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80069d8:	4ba6      	ldr	r3, [pc, #664]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e4:	d106      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d103      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80069ec:	4ba2      	ldr	r3, [pc, #648]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
 80069f0:	f000 befa 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80069f4:	4b9f      	ldr	r3, [pc, #636]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d107      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	2b30      	cmp	r3, #48	; 0x30
 8006a06:	d104      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0e:	f000 beeb 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	f000 bee7 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1e:	f1a2 0108 	sub.w	r1, r2, #8
 8006a22:	430b      	orrs	r3, r1
 8006a24:	d136      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006a26:	4b93      	ldr	r3, [pc, #588]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fe fa48 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8006a3c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a3e:	f000 bed3 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d104      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a48:	f7fe f91e 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006a4c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a4e:	f000 becb 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006a52:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	2b80      	cmp	r3, #128	; 0x80
 8006a64:	d103      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006a66:	4b84      	ldr	r3, [pc, #528]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6a:	f000 bebd 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006a6e:	4b81      	ldr	r3, [pc, #516]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a80:	d104      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
 8006a88:	f000 beae 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a90:	f000 beaa 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a98:	f1a2 0110 	sub.w	r1, r2, #16
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	d139      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006aa0:	4b74      	ldr	r3, [pc, #464]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ab2:	f7fe fa0b 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8006ab6:	6378      	str	r0, [r7, #52]	; 0x34
 8006ab8:	f000 be96 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac2:	d104      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ac4:	f7fe f8e0 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006ac8:	6378      	str	r0, [r7, #52]	; 0x34
 8006aca:	f000 be8d 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006ace:	4b69      	ldr	r3, [pc, #420]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ada:	d107      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae2:	d103      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006ae4:	4b64      	ldr	r3, [pc, #400]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae8:	f000 be7e 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006aec:	4b61      	ldr	r3, [pc, #388]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d108      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b00:	d104      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
 8006b08:	f000 be6e 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	f000 be6a 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b18:	f1a2 0120 	sub.w	r1, r2, #32
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	d158      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b20:	4b54      	ldr	r3, [pc, #336]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006b32:	f7fe f9f3 	bl	8004f1c <HAL_RCC_GetPCLK3Freq>
 8006b36:	6378      	str	r0, [r7, #52]	; 0x34
 8006b38:	f000 be56 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d104      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b42:	f7fe f8a1 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006b46:	6378      	str	r0, [r7, #52]	; 0x34
 8006b48:	f000 be4e 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006b4c:	4b49      	ldr	r3, [pc, #292]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d106      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d103      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006b60:	4b45      	ldr	r3, [pc, #276]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
 8006b64:	f000 be40 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b68:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d107      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d104      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8006b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
 8006b82:	f000 be31 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006b86:	4b3b      	ldr	r3, [pc, #236]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d11b      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d118      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b98:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006ba4:	4b33      	ldr	r3, [pc, #204]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	0e1b      	lsrs	r3, r3, #24
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	e006      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006bb0:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	0e1b      	lsrs	r3, r3, #24
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	4a2f      	ldr	r2, [pc, #188]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	f000 be0f 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bce:	f000 be0b 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd6:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	d172      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006bde:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006be4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d104      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fe f849 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006bf6:	6378      	str	r0, [r7, #52]	; 0x34
 8006bf8:	f000 bdf6 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c02:	d108      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c04:	f107 0318 	add.w	r3, r7, #24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff f949 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
 8006c12:	f000 bde9 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006c1c:	f7fe f93c 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8006c20:	6378      	str	r0, [r7, #52]	; 0x34
 8006c22:	f000 bde1 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c2c:	d128      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c2e:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d118      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	0e1b      	lsrs	r3, r3, #24
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	e006      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c58:	041b      	lsls	r3, r3, #16
 8006c5a:	0e1b      	lsrs	r3, r3, #24
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	4a06      	ldr	r2, [pc, #24]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
 8006c68:	f000 bdbe 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c70:	f000 bdba 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006c74:	46020c00 	.word	0x46020c00
 8006c78:	00f42400 	.word	0x00f42400
 8006c7c:	08009604 	.word	0x08009604
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006c80:	4baf      	ldr	r3, [pc, #700]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c94:	d103      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8006c96:	4bab      	ldr	r3, [pc, #684]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9a:	f000 bda5 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006c9e:	4ba8      	ldr	r3, [pc, #672]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d107      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb2:	d103      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8006cb4:	4ba3      	ldr	r3, [pc, #652]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb8:	f000 bd96 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc0:	f000 bd92 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	d158      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006cd0:	4b9b      	ldr	r3, [pc, #620]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006cd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d84b      	bhi.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d21 	.word	0x08006d21
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d0f 	.word	0x08006d0f
 8006cf4:	08006d2b 	.word	0x08006d2b
 8006cf8:	08006d35 	.word	0x08006d35
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fe ff65 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d0a:	f000 bd6d 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d0e:	f107 030c 	add.w	r3, r7, #12
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fa2c 	bl	8006170 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d1c:	f000 bd64 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d20:	f7fe f8ba 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8006d24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d26:	f000 bd5f 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d30:	f000 bd5a 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d34:	4b82      	ldr	r3, [pc, #520]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d118      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d40:	4b7f      	ldr	r3, [pc, #508]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006d4c:	4b7c      	ldr	r3, [pc, #496]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	0e1b      	lsrs	r3, r3, #24
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	e006      	b.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006d58:	4b79      	ldr	r3, [pc, #484]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d5e:	041b      	lsls	r3, r3, #16
 8006d60:	0e1b      	lsrs	r3, r3, #24
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	4a78      	ldr	r2, [pc, #480]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d6e:	f000 bd3b 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d76:	f000 bd37 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d7e:	f000 bd33 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d86:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	d167      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006d8e:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d94:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006d98:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006da0:	d036      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006da8:	d855      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db0:	d029      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db8:	d84d      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc0:	d013      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc8:	d845      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d015      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd6:	d13e      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fef7 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006de6:	f000 bcff 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dea:	f107 030c 	add.w	r3, r7, #12
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff f9be 	bl	8006170 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df8:	f000 bcf6 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006dfc:	f7fe f84c 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8006e00:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e02:	f000 bcf1 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e0c:	f000 bcec 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e10:	4b4b      	ldr	r3, [pc, #300]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d118      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e1c:	4b48      	ldr	r3, [pc, #288]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006e28:	4b45      	ldr	r3, [pc, #276]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	0e1b      	lsrs	r3, r3, #24
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	e006      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e34:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	0e1b      	lsrs	r3, r3, #24
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	4a41      	ldr	r2, [pc, #260]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e4a:	f000 bccd 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e52:	f000 bcc9 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e5a:	f000 bcc5 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e62:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006e66:	430b      	orrs	r3, r1
 8006e68:	d14c      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e6a:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e7c:	f7fe f826 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8006e80:	6378      	str	r0, [r7, #52]	; 0x34
 8006e82:	f000 bcb1 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8c:	d104      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7fd fefb 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006e92:	6378      	str	r0, [r7, #52]	; 0x34
 8006e94:	f000 bca8 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006e98:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eac:	d103      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006eae:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb2:	f000 bc99 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006eb6:	4b22      	ldr	r3, [pc, #136]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d11c      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ec8:	d118      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	e006      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006ee2:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ee8:	041b      	lsls	r3, r3, #16
 8006eea:	0e1b      	lsrs	r3, r3, #24
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef8:	f000 bc76 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
 8006f00:	f000 bc72 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f08:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	d153      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f1a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d104      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f22:	f7fd ffd3 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8006f26:	6378      	str	r0, [r7, #52]	; 0x34
 8006f28:	f000 bc5e 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f32:	d10b      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f34:	f7fd fea8 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006f38:	6378      	str	r0, [r7, #52]	; 0x34
 8006f3a:	f000 bc55 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006f3e:	bf00      	nop
 8006f40:	46020c00 	.word	0x46020c00
 8006f44:	00f42400 	.word	0x00f42400
 8006f48:	08009604 	.word	0x08009604
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006f4c:	4ba1      	ldr	r3, [pc, #644]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f60:	d103      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8006f62:	4b9d      	ldr	r3, [pc, #628]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
 8006f66:	f000 bc3f 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006f6a:	4b9a      	ldr	r3, [pc, #616]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d11c      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f7c:	d118      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f7e:	4b95      	ldr	r3, [pc, #596]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006f8a:	4b92      	ldr	r3, [pc, #584]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	0e1b      	lsrs	r3, r3, #24
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	e006      	b.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006f96:	4b8f      	ldr	r3, [pc, #572]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	0e1b      	lsrs	r3, r3, #24
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	4a8d      	ldr	r2, [pc, #564]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
 8006fac:	f000 bc1c 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb4:	f000 bc18 	b.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	d151      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006fc4:	4b83      	ldr	r3, [pc, #524]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8006fd4:	d024      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	2bc0      	cmp	r3, #192	; 0xc0
 8006fda:	d842      	bhi.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2b80      	cmp	r3, #128	; 0x80
 8006fe0:	d00d      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	2b80      	cmp	r3, #128	; 0x80
 8006fe6:	d83c      	bhi.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2b40      	cmp	r3, #64	; 0x40
 8006ff2:	d011      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006ff4:	e035      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006ff6:	f7fd ff91 	bl	8004f1c <HAL_RCC_GetPCLK3Freq>
 8006ffa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ffc:	e3f4      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ffe:	4b75      	ldr	r3, [pc, #468]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700a:	d102      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800700c:	4b72      	ldr	r3, [pc, #456]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007010:	e3ea      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007016:	e3e7      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007018:	f7fd fe36 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 800701c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800701e:	e3e3      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007020:	4b6c      	ldr	r3, [pc, #432]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0320 	and.w	r3, r3, #32
 8007028:	2b20      	cmp	r3, #32
 800702a:	d117      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800702c:	4b69      	ldr	r3, [pc, #420]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8007038:	4b66      	ldr	r3, [pc, #408]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	0e1b      	lsrs	r3, r3, #24
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	e006      	b.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007044:	4b63      	ldr	r3, [pc, #396]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800704a:	041b      	lsls	r3, r3, #16
 800704c:	0e1b      	lsrs	r3, r3, #24
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	4a62      	ldr	r2, [pc, #392]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800705a:	e3c5      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007060:	e3c2      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007066:	e3bf      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800706c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007070:	430b      	orrs	r3, r1
 8007072:	d147      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007074:	4b57      	ldr	r3, [pc, #348]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800707a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800707e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007086:	f7fd ff21 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 800708a:	6378      	str	r0, [r7, #52]	; 0x34
 800708c:	e3ac      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007094:	d103      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007096:	f7fd fdf7 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 800709a:	6378      	str	r0, [r7, #52]	; 0x34
 800709c:	e3a4      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800709e:	4b4d      	ldr	r3, [pc, #308]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070aa:	d106      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b2:	d102      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80070b4:	4b48      	ldr	r3, [pc, #288]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
 80070b8:	e396      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80070ba:	4b46      	ldr	r3, [pc, #280]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	d11b      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070cc:	d117      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070ce:	4b41      	ldr	r3, [pc, #260]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80070da:	4b3e      	ldr	r3, [pc, #248]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	0e1b      	lsrs	r3, r3, #24
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	e006      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80070e6:	4b3b      	ldr	r3, [pc, #236]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80070e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	4a39      	ldr	r2, [pc, #228]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80070f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
 80070fc:	e374      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
 8007102:	e371      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007108:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800710c:	430b      	orrs	r3, r1
 800710e:	d16a      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007110:	4b30      	ldr	r3, [pc, #192]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	2b00      	cmp	r3, #0
 8007120:	d120      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007122:	4b2c      	ldr	r3, [pc, #176]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b20      	cmp	r3, #32
 800712c:	d117      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800712e:	4b29      	ldr	r3, [pc, #164]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800713a:	4b26      	ldr	r3, [pc, #152]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	0e1b      	lsrs	r3, r3, #24
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	e006      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007146:	4b23      	ldr	r3, [pc, #140]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800714c:	041b      	lsls	r3, r3, #16
 800714e:	0e1b      	lsrs	r3, r3, #24
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
 800715c:	e344      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
 8007162:	e341      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007164:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800716a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800716e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007172:	d112      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717a:	d10e      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800717c:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800717e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718a:	d102      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800718c:	23fa      	movs	r3, #250	; 0xfa
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007190:	e32a      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007192:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007198:	e326      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800719a:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a6:	d106      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ae:	d102      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80071b0:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
 80071b4:	e318      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80071b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d10d      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80071cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
 80071d2:	e309      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80071d4:	46020c00 	.word	0x46020c00
 80071d8:	00f42400 	.word	0x00f42400
 80071dc:	08009604 	.word	0x08009604
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	637b      	str	r3, [r7, #52]	; 0x34
 80071e4:	e300      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80071e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ea:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80071ee:	430b      	orrs	r3, r1
 80071f0:	d164      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80071f2:	4ba2      	ldr	r3, [pc, #648]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80071f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	2b00      	cmp	r3, #0
 8007202:	d120      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007204:	4b9d      	ldr	r3, [pc, #628]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b20      	cmp	r3, #32
 800720e:	d117      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007210:	4b9a      	ldr	r3, [pc, #616]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800721c:	4b97      	ldr	r3, [pc, #604]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	0e1b      	lsrs	r3, r3, #24
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	e006      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8007228:	4b94      	ldr	r3, [pc, #592]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800722a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	0e1b      	lsrs	r3, r3, #24
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	4a92      	ldr	r2, [pc, #584]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
 800723e:	e2d3      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
 8007244:	e2d0      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007246:	4b8d      	ldr	r3, [pc, #564]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800724c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007254:	d112      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725c:	d10e      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800725e:	4b87      	ldr	r3, [pc, #540]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800726c:	d102      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800726e:	23fa      	movs	r3, #250	; 0xfa
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007272:	e2b9      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007274:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800727a:	e2b5      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800727c:	4b7f      	ldr	r3, [pc, #508]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007288:	d106      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007290:	d102      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8007292:	4b7c      	ldr	r3, [pc, #496]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
 8007296:	e2a7      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007298:	4b78      	ldr	r3, [pc, #480]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800729a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d107      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ac:	d103      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80072ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072b2:	637b      	str	r3, [r7, #52]	; 0x34
 80072b4:	e298      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ba:	e295      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80072bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80072c4:	430b      	orrs	r3, r1
 80072c6:	d147      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072c8:	4b6c      	ldr	r3, [pc, #432]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80072ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80072d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072da:	f7fd fdf7 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 80072de:	6378      	str	r0, [r7, #52]	; 0x34
 80072e0:	e282      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80072e2:	4b66      	ldr	r3, [pc, #408]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80072e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072f0:	d112      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072f8:	d10e      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072fa:	4b60      	ldr	r3, [pc, #384]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80072fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007304:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007308:	d102      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800730a:	23fa      	movs	r3, #250	; 0xfa
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800730e:	e26b      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007310:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007314:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007316:	e267      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007318:	4b58      	ldr	r3, [pc, #352]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007324:	d106      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800732c:	d102      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800732e:	4b55      	ldr	r3, [pc, #340]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
 8007332:	e259      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007334:	4b51      	ldr	r3, [pc, #324]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b02      	cmp	r3, #2
 8007340:	d107      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007348:	d103      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800734a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800734e:	637b      	str	r3, [r7, #52]	; 0x34
 8007350:	e24a      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
 8007356:	e247      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800735c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007360:	430b      	orrs	r3, r1
 8007362:	d12d      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800736a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800736e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007370:	4b42      	ldr	r3, [pc, #264]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800737c:	d105      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007384:	4b3f      	ldr	r3, [pc, #252]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
 8007388:	e22e      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007390:	d107      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fc1a 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
 80073a0:	e222      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a8:	d107      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073aa:	f107 0318 	add.w	r3, r7, #24
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fd76 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
 80073b8:	e216      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
 80073be:	e213      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80073c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80073c8:	430b      	orrs	r3, r1
 80073ca:	d15d      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80073cc:	4b2b      	ldr	r3, [pc, #172]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80073ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80073d6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073de:	d028      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073e6:	d845      	bhi.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ee:	d013      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073f6:	d83d      	bhi.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007404:	d004      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007406:	e035      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007408:	f7fd fd74 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 800740c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800740e:	e1eb      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007410:	f7fd fc3a 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8007414:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007416:	e1e7      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007418:	4b18      	ldr	r3, [pc, #96]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007424:	d102      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007426:	4b17      	ldr	r3, [pc, #92]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800742a:	e1dd      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007430:	e1da      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b20      	cmp	r3, #32
 800743c:	d117      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800743e:	4b0f      	ldr	r3, [pc, #60]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800744a:	4b0c      	ldr	r3, [pc, #48]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	0e1b      	lsrs	r3, r3, #24
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	e006      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	0e1b      	lsrs	r3, r3, #24
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	4a06      	ldr	r2, [pc, #24]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800746c:	e1bc      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007472:	e1b9      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007478:	e1b6      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800747a:	bf00      	nop
 800747c:	46020c00 	.word	0x46020c00
 8007480:	08009604 	.word	0x08009604
 8007484:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007490:	430b      	orrs	r3, r1
 8007492:	d156      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007494:	4ba5      	ldr	r3, [pc, #660]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800749a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800749e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074a6:	d028      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074ae:	d845      	bhi.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074b6:	d013      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074be:	d83d      	bhi.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074cc:	d004      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80074ce:	e035      	b.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80074d0:	f7fd fcfc 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 80074d4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074d6:	e187      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80074d8:	f7fd fbd6 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80074dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074de:	e183      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074e0:	4b92      	ldr	r3, [pc, #584]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ec:	d102      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80074ee:	4b90      	ldr	r3, [pc, #576]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074f2:	e179      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074f8:	e176      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074fa:	4b8c      	ldr	r3, [pc, #560]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b20      	cmp	r3, #32
 8007504:	d117      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007506:	4b89      	ldr	r3, [pc, #548]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007512:	4b86      	ldr	r3, [pc, #536]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	0e1b      	lsrs	r3, r3, #24
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	e006      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800751e:	4b83      	ldr	r3, [pc, #524]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	0e1b      	lsrs	r3, r3, #24
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	4a81      	ldr	r2, [pc, #516]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800752e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007532:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007534:	e158      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800753a:	e155      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007540:	e152      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007546:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800754a:	430b      	orrs	r3, r1
 800754c:	d177      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800754e:	4b77      	ldr	r3, [pc, #476]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007554:	f003 0318 	and.w	r3, r3, #24
 8007558:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	2b18      	cmp	r3, #24
 800755e:	d86b      	bhi.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	080075cd 	.word	0x080075cd
 800756c:	08007639 	.word	0x08007639
 8007570:	08007639 	.word	0x08007639
 8007574:	08007639 	.word	0x08007639
 8007578:	08007639 	.word	0x08007639
 800757c:	08007639 	.word	0x08007639
 8007580:	08007639 	.word	0x08007639
 8007584:	08007639 	.word	0x08007639
 8007588:	080075d5 	.word	0x080075d5
 800758c:	08007639 	.word	0x08007639
 8007590:	08007639 	.word	0x08007639
 8007594:	08007639 	.word	0x08007639
 8007598:	08007639 	.word	0x08007639
 800759c:	08007639 	.word	0x08007639
 80075a0:	08007639 	.word	0x08007639
 80075a4:	08007639 	.word	0x08007639
 80075a8:	080075dd 	.word	0x080075dd
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	08007639 	.word	0x08007639
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007639 	.word	0x08007639
 80075c8:	080075f7 	.word	0x080075f7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80075cc:	f7fd fca6 	bl	8004f1c <HAL_RCC_GetPCLK3Freq>
 80075d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80075d2:	e109      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80075d4:	f7fd fb58 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80075d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80075da:	e105      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075dc:	4b53      	ldr	r3, [pc, #332]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e8:	d102      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80075ea:	4b51      	ldr	r3, [pc, #324]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075ee:	e0fb      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075f4:	e0f8      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075f6:	4b4d      	ldr	r3, [pc, #308]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d117      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007602:	4b4a      	ldr	r3, [pc, #296]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800760e:	4b47      	ldr	r3, [pc, #284]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	0e1b      	lsrs	r3, r3, #24
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800761a:	4b44      	ldr	r3, [pc, #272]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800761c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007620:	041b      	lsls	r3, r3, #16
 8007622:	0e1b      	lsrs	r3, r3, #24
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	4a42      	ldr	r2, [pc, #264]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800762a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007630:	e0da      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007636:	e0d7      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800763c:	e0d4      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800763e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007642:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007646:	430b      	orrs	r3, r1
 8007648:	d155      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800764a:	4b38      	ldr	r3, [pc, #224]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800764c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007650:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007654:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800765c:	d013      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007664:	d844      	bhi.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800766c:	d013      	beq.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007674:	d83c      	bhi.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d014      	beq.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007682:	d014      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007684:	e034      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007686:	f107 0318 	add.w	r3, r7, #24
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fc08 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007694:	e0a8      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fa98 	bl	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076a4:	e0a0      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fd faef 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80076aa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80076ac:	e09c      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076ae:	4b1f      	ldr	r3, [pc, #124]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d117      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076ba:	4b1c      	ldr	r3, [pc, #112]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	0e1b      	lsrs	r3, r3, #24
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	e006      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80076d2:	4b16      	ldr	r3, [pc, #88]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80076d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	0e1b      	lsrs	r3, r3, #24
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	4a14      	ldr	r2, [pc, #80]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80076e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076e8:	e07e      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ee:	e07b      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076f4:	e078      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80076f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fa:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80076fe:	430b      	orrs	r3, r1
 8007700:	d138      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800770c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800770e:	4b07      	ldr	r3, [pc, #28]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d10d      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
 8007728:	e05e      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800772a:	bf00      	nop
 800772c:	46020c00 	.word	0x46020c00
 8007730:	00f42400 	.word	0x00f42400
 8007734:	08009604 	.word	0x08009604
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007738:	4b2e      	ldr	r3, [pc, #184]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800773a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800773e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007746:	d112      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800774e:	d10e      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007750:	4b28      	ldr	r3, [pc, #160]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775e:	d102      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007760:	23fa      	movs	r3, #250	; 0xfa
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007764:	e040      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007766:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800776c:	e03c      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
 8007772:	e039      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007778:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800777c:	430b      	orrs	r3, r1
 800777e:	d131      	bne.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007780:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007782:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007786:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800778a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800778c:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007798:	d105      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 80077a0:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80077a2:	637b      	str	r3, [r7, #52]	; 0x34
 80077a4:	e020      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b2:	d106      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	d102      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 80077bc:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
 80077c0:	e012      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80077c2:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ce:	d106      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d6:	d102      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80077d8:	4b09      	ldr	r3, [pc, #36]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80077da:	637b      	str	r3, [r7, #52]	; 0x34
 80077dc:	e004      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	637b      	str	r3, [r7, #52]	; 0x34
 80077e2:	e001      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3738      	adds	r7, #56	; 0x38
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	46020c00 	.word	0x46020c00
 80077f8:	02dc6c00 	.word	0x02dc6c00
 80077fc:	016e3600 	.word	0x016e3600
 8007800:	00f42400 	.word	0x00f42400

08007804 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800780c:	4b47      	ldr	r3, [pc, #284]	; (800792c <RCCEx_PLL2_Config+0x128>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a46      	ldr	r2, [pc, #280]	; (800792c <RCCEx_PLL2_Config+0x128>)
 8007812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007816:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007818:	f7f9 fea6 	bl	8001568 <HAL_GetTick>
 800781c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800781e:	e008      	b.n	8007832 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007820:	f7f9 fea2 	bl	8001568 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e077      	b.n	8007922 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007832:	4b3e      	ldr	r3, [pc, #248]	; (800792c <RCCEx_PLL2_Config+0x128>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f0      	bne.n	8007820 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800783e:	4b3b      	ldr	r3, [pc, #236]	; (800792c <RCCEx_PLL2_Config+0x128>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6811      	ldr	r1, [r2, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6852      	ldr	r2, [r2, #4]
 8007852:	3a01      	subs	r2, #1
 8007854:	0212      	lsls	r2, r2, #8
 8007856:	430a      	orrs	r2, r1
 8007858:	4934      	ldr	r1, [pc, #208]	; (800792c <RCCEx_PLL2_Config+0x128>)
 800785a:	4313      	orrs	r3, r2
 800785c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800785e:	4b33      	ldr	r3, [pc, #204]	; (800792c <RCCEx_PLL2_Config+0x128>)
 8007860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007862:	4b33      	ldr	r3, [pc, #204]	; (8007930 <RCCEx_PLL2_Config+0x12c>)
 8007864:	4013      	ands	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6892      	ldr	r2, [r2, #8]
 800786a:	3a01      	subs	r2, #1
 800786c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	68d2      	ldr	r2, [r2, #12]
 8007874:	3a01      	subs	r2, #1
 8007876:	0252      	lsls	r2, r2, #9
 8007878:	b292      	uxth	r2, r2
 800787a:	4311      	orrs	r1, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6912      	ldr	r2, [r2, #16]
 8007880:	3a01      	subs	r2, #1
 8007882:	0412      	lsls	r2, r2, #16
 8007884:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007888:	4311      	orrs	r1, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6952      	ldr	r2, [r2, #20]
 800788e:	3a01      	subs	r2, #1
 8007890:	0612      	lsls	r2, r2, #24
 8007892:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007896:	430a      	orrs	r2, r1
 8007898:	4924      	ldr	r1, [pc, #144]	; (800792c <RCCEx_PLL2_Config+0x128>)
 800789a:	4313      	orrs	r3, r2
 800789c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800789e:	4b23      	ldr	r3, [pc, #140]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	f023 020c 	bic.w	r2, r3, #12
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	4920      	ldr	r1, [pc, #128]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80078b0:	4b1e      	ldr	r3, [pc, #120]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	491c      	ldr	r1, [pc, #112]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80078be:	4b1b      	ldr	r3, [pc, #108]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a1a      	ldr	r2, [pc, #104]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078c4:	f023 0310 	bic.w	r3, r3, #16
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078ca:	4b18      	ldr	r3, [pc, #96]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	69d2      	ldr	r2, [r2, #28]
 80078da:	00d2      	lsls	r2, r2, #3
 80078dc:	4913      	ldr	r1, [pc, #76]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	4a11      	ldr	r2, [pc, #68]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078e8:	f043 0310 	orr.w	r3, r3, #16
 80078ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a0e      	ldr	r2, [pc, #56]	; (800792c <RCCEx_PLL2_Config+0x128>)
 80078f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078fa:	f7f9 fe35 	bl	8001568 <HAL_GetTick>
 80078fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007900:	e008      	b.n	8007914 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007902:	f7f9 fe31 	bl	8001568 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e006      	b.n	8007922 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <RCCEx_PLL2_Config+0x128>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007920:	2300      	movs	r3, #0

}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	46020c00 	.word	0x46020c00
 8007930:	80800000 	.word	0x80800000

08007934 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800793c:	4b47      	ldr	r3, [pc, #284]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a46      	ldr	r2, [pc, #280]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007946:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007948:	f7f9 fe0e 	bl	8001568 <HAL_GetTick>
 800794c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800794e:	e008      	b.n	8007962 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007950:	f7f9 fe0a 	bl	8001568 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e077      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007962:	4b3e      	ldr	r3, [pc, #248]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f0      	bne.n	8007950 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800796e:	4b3b      	ldr	r3, [pc, #236]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6811      	ldr	r1, [r2, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6852      	ldr	r2, [r2, #4]
 8007982:	3a01      	subs	r2, #1
 8007984:	0212      	lsls	r2, r2, #8
 8007986:	430a      	orrs	r2, r1
 8007988:	4934      	ldr	r1, [pc, #208]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 800798a:	4313      	orrs	r3, r2
 800798c:	630b      	str	r3, [r1, #48]	; 0x30
 800798e:	4b33      	ldr	r3, [pc, #204]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007992:	4b33      	ldr	r3, [pc, #204]	; (8007a60 <RCCEx_PLL3_Config+0x12c>)
 8007994:	4013      	ands	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6892      	ldr	r2, [r2, #8]
 800799a:	3a01      	subs	r2, #1
 800799c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	68d2      	ldr	r2, [r2, #12]
 80079a4:	3a01      	subs	r2, #1
 80079a6:	0252      	lsls	r2, r2, #9
 80079a8:	b292      	uxth	r2, r2
 80079aa:	4311      	orrs	r1, r2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6912      	ldr	r2, [r2, #16]
 80079b0:	3a01      	subs	r2, #1
 80079b2:	0412      	lsls	r2, r2, #16
 80079b4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80079b8:	4311      	orrs	r1, r2
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6952      	ldr	r2, [r2, #20]
 80079be:	3a01      	subs	r2, #1
 80079c0:	0612      	lsls	r2, r2, #24
 80079c2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80079c6:	430a      	orrs	r2, r1
 80079c8:	4924      	ldr	r1, [pc, #144]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80079ce:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f023 020c 	bic.w	r2, r3, #12
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	4920      	ldr	r1, [pc, #128]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80079e0:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	491c      	ldr	r1, [pc, #112]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80079ee:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	4a1a      	ldr	r2, [pc, #104]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079f4:	f023 0310 	bic.w	r3, r3, #16
 80079f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079fa:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 80079fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	69d2      	ldr	r2, [r2, #28]
 8007a0a:	00d2      	lsls	r2, r2, #3
 8007a0c:	4913      	ldr	r1, [pc, #76]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007a12:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	4a11      	ldr	r2, [pc, #68]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007a18:	f043 0310 	orr.w	r3, r3, #16
 8007a1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007a1e:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a0e      	ldr	r2, [pc, #56]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a2a:	f7f9 fd9d 	bl	8001568 <HAL_GetTick>
 8007a2e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a30:	e008      	b.n	8007a44 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a32:	f7f9 fd99 	bl	8001568 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d901      	bls.n	8007a44 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e006      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <RCCEx_PLL3_Config+0x128>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0f0      	beq.n	8007a32 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	46020c00 	.word	0x46020c00
 8007a60:	80800000 	.word	0x80800000

08007a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e042      	b.n	8007afc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7f9 fb2d 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2224      	movs	r2, #36	; 0x24
 8007a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0201 	bic.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f8ca 	bl	8007c40 <UART_SetConfig>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e022      	b.n	8007afc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa60 	bl	8007f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fae7 	bl	80080c8 <UART_CheckIdleState>
 8007afa:	4603      	mov	r3, r0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08a      	sub	sp, #40	; 0x28
 8007b08:	af02      	add	r7, sp, #8
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	603b      	str	r3, [r7, #0]
 8007b10:	4613      	mov	r3, r2
 8007b12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	f040 808b 	bne.w	8007c36 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_UART_Transmit+0x28>
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e083      	b.n	8007c38 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d107      	bne.n	8007b4e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b4c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2221      	movs	r2, #33	; 0x21
 8007b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b5e:	f7f9 fd03 	bl	8001568 <HAL_GetTick>
 8007b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	88fa      	ldrh	r2, [r7, #6]
 8007b68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	88fa      	ldrh	r2, [r7, #6]
 8007b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d108      	bne.n	8007b90 <HAL_UART_Transmit+0x8c>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	e003      	b.n	8007b98 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b98:	e030      	b.n	8007bfc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2180      	movs	r1, #128	; 0x80
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fb39 	bl	800821c <UART_WaitOnFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e03d      	b.n	8007c38 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	61bb      	str	r3, [r7, #24]
 8007bd8:	e007      	b.n	8007bea <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	781a      	ldrb	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3301      	adds	r3, #1
 8007be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1c8      	bne.n	8007b9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2140      	movs	r1, #64	; 0x40
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 fb02 	bl	800821c <UART_WaitOnFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e006      	b.n	8007c38 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e000      	b.n	8007c38 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007c36:	2302      	movs	r3, #2
  }
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3720      	adds	r7, #32
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c44:	b094      	sub	sp, #80	; 0x50
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4b7e      	ldr	r3, [pc, #504]	; (8007e50 <UART_SetConfig+0x210>)
 8007c56:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4977      	ldr	r1, [pc, #476]	; (8007e54 <UART_SetConfig+0x214>)
 8007c78:	4019      	ands	r1, r3
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c80:	430b      	orrs	r3, r1
 8007c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	68d9      	ldr	r1, [r3, #12]
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	ea40 0301 	orr.w	r3, r0, r1
 8007c9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4b6a      	ldr	r3, [pc, #424]	; (8007e50 <UART_SetConfig+0x210>)
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d009      	beq.n	8007cc0 <UART_SetConfig+0x80>
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	4b69      	ldr	r3, [pc, #420]	; (8007e58 <UART_SetConfig+0x218>)
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d004      	beq.n	8007cc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007cca:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	f023 000f 	bic.w	r0, r3, #15
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	ea40 0301 	orr.w	r3, r0, r1
 8007cee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	4b59      	ldr	r3, [pc, #356]	; (8007e5c <UART_SetConfig+0x21c>)
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d102      	bne.n	8007d00 <UART_SetConfig+0xc0>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cfe:	e029      	b.n	8007d54 <UART_SetConfig+0x114>
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b56      	ldr	r3, [pc, #344]	; (8007e60 <UART_SetConfig+0x220>)
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d102      	bne.n	8007d10 <UART_SetConfig+0xd0>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d0e:	e021      	b.n	8007d54 <UART_SetConfig+0x114>
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4b53      	ldr	r3, [pc, #332]	; (8007e64 <UART_SetConfig+0x224>)
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d102      	bne.n	8007d20 <UART_SetConfig+0xe0>
 8007d1a:	2304      	movs	r3, #4
 8007d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d1e:	e019      	b.n	8007d54 <UART_SetConfig+0x114>
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b50      	ldr	r3, [pc, #320]	; (8007e68 <UART_SetConfig+0x228>)
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d102      	bne.n	8007d30 <UART_SetConfig+0xf0>
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d2e:	e011      	b.n	8007d54 <UART_SetConfig+0x114>
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b4d      	ldr	r3, [pc, #308]	; (8007e6c <UART_SetConfig+0x22c>)
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d102      	bne.n	8007d40 <UART_SetConfig+0x100>
 8007d3a:	2310      	movs	r3, #16
 8007d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d3e:	e009      	b.n	8007d54 <UART_SetConfig+0x114>
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	4b42      	ldr	r3, [pc, #264]	; (8007e50 <UART_SetConfig+0x210>)
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d102      	bne.n	8007d50 <UART_SetConfig+0x110>
 8007d4a:	2320      	movs	r3, #32
 8007d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d4e:	e001      	b.n	8007d54 <UART_SetConfig+0x114>
 8007d50:	2300      	movs	r3, #0
 8007d52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	4b3d      	ldr	r3, [pc, #244]	; (8007e50 <UART_SetConfig+0x210>)
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d005      	beq.n	8007d6a <UART_SetConfig+0x12a>
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b3d      	ldr	r3, [pc, #244]	; (8007e58 <UART_SetConfig+0x218>)
 8007d64:	429a      	cmp	r2, r3
 8007d66:	f040 8085 	bne.w	8007e74 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	623b      	str	r3, [r7, #32]
 8007d70:	627a      	str	r2, [r7, #36]	; 0x24
 8007d72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007d76:	f7fe fb63 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d7a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80e8 	beq.w	8007f54 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	4a39      	ldr	r2, [pc, #228]	; (8007e70 <UART_SetConfig+0x230>)
 8007d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	4413      	add	r3, r2
 8007da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d305      	bcc.n	8007db4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d903      	bls.n	8007dbc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007dba:	e048      	b.n	8007e4e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	61fa      	str	r2, [r7, #28]
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	4a29      	ldr	r2, [pc, #164]	; (8007e70 <UART_SetConfig+0x230>)
 8007dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	617a      	str	r2, [r7, #20]
 8007dd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007dda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007dde:	f7f8 fa53 	bl	8000288 <__aeabi_uldivmod>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	020b      	lsls	r3, r1, #8
 8007df4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007df8:	0202      	lsls	r2, r0, #8
 8007dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dfc:	6849      	ldr	r1, [r1, #4]
 8007dfe:	0849      	lsrs	r1, r1, #1
 8007e00:	2000      	movs	r0, #0
 8007e02:	460c      	mov	r4, r1
 8007e04:	4605      	mov	r5, r0
 8007e06:	eb12 0804 	adds.w	r8, r2, r4
 8007e0a:	eb43 0905 	adc.w	r9, r3, r5
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	60fa      	str	r2, [r7, #12]
 8007e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4649      	mov	r1, r9
 8007e20:	f7f8 fa32 	bl	8000288 <__aeabi_uldivmod>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4613      	mov	r3, r2
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e32:	d308      	bcc.n	8007e46 <UART_SetConfig+0x206>
 8007e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3a:	d204      	bcs.n	8007e46 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e42:	60da      	str	r2, [r3, #12]
 8007e44:	e003      	b.n	8007e4e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007e4c:	e082      	b.n	8007f54 <UART_SetConfig+0x314>
 8007e4e:	e081      	b.n	8007f54 <UART_SetConfig+0x314>
 8007e50:	46002400 	.word	0x46002400
 8007e54:	cfff69f3 	.word	0xcfff69f3
 8007e58:	56002400 	.word	0x56002400
 8007e5c:	40013800 	.word	0x40013800
 8007e60:	40004400 	.word	0x40004400
 8007e64:	40004800 	.word	0x40004800
 8007e68:	40004c00 	.word	0x40004c00
 8007e6c:	40005000 	.word	0x40005000
 8007e70:	080096c4 	.word	0x080096c4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7c:	d13c      	bne.n	8007ef8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e80:	2200      	movs	r2, #0
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e8a:	f7fe fad9 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e8e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d05e      	beq.n	8007f54 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	4a39      	ldr	r2, [pc, #228]	; (8007f80 <UART_SetConfig+0x340>)
 8007e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea8:	005a      	lsls	r2, r3, #1
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	085b      	lsrs	r3, r3, #1
 8007eb0:	441a      	add	r2, r3
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebe:	2b0f      	cmp	r3, #15
 8007ec0:	d916      	bls.n	8007ef0 <UART_SetConfig+0x2b0>
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec8:	d212      	bcs.n	8007ef0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f023 030f 	bic.w	r3, r3, #15
 8007ed2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007eec:	60da      	str	r2, [r3, #12]
 8007eee:	e031      	b.n	8007f54 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ef6:	e02d      	b.n	8007f54 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007efa:	2200      	movs	r2, #0
 8007efc:	469a      	mov	sl, r3
 8007efe:	4693      	mov	fp, r2
 8007f00:	4650      	mov	r0, sl
 8007f02:	4659      	mov	r1, fp
 8007f04:	f7fe fa9c 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f08:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d021      	beq.n	8007f54 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	4a1a      	ldr	r2, [pc, #104]	; (8007f80 <UART_SetConfig+0x340>)
 8007f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	441a      	add	r2, r3
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d909      	bls.n	8007f4e <UART_SetConfig+0x30e>
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f40:	d205      	bcs.n	8007f4e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60da      	str	r2, [r3, #12]
 8007f4c:	e002      	b.n	8007f54 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	2201      	movs	r2, #1
 8007f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	2200      	movs	r2, #0
 8007f68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3750      	adds	r7, #80	; 0x50
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f7e:	bf00      	nop
 8007f80:	080096c4 	.word	0x080096c4

08007f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00a      	beq.n	8008036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01a      	beq.n	800809a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008082:	d10a      	bne.n	800809a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  }
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b098      	sub	sp, #96	; 0x60
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080d8:	f7f9 fa46 	bl	8001568 <HAL_GetTick>
 80080dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d12f      	bne.n	800814c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f4:	2200      	movs	r2, #0
 80080f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f88e 	bl	800821c <UART_WaitOnFlagUntilTimeout>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d022      	beq.n	800814c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800811a:	653b      	str	r3, [r7, #80]	; 0x50
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008124:	647b      	str	r3, [r7, #68]	; 0x44
 8008126:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800812a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e063      	b.n	8008214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b04      	cmp	r3, #4
 8008158:	d149      	bne.n	80081ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800815a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008162:	2200      	movs	r2, #0
 8008164:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f857 	bl	800821c <UART_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d03c      	beq.n	80081ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	623b      	str	r3, [r7, #32]
   return(result);
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008192:	633b      	str	r3, [r7, #48]	; 0x30
 8008194:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e6      	bne.n	8008174 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081c6:	61fa      	str	r2, [r7, #28]
 80081c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	69b9      	ldr	r1, [r7, #24]
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	617b      	str	r3, [r7, #20]
   return(result);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e012      	b.n	8008214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3758      	adds	r7, #88	; 0x58
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	4613      	mov	r3, r2
 800822a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800822c:	e049      	b.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008234:	d045      	beq.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008236:	f7f9 f997 	bl	8001568 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	429a      	cmp	r2, r3
 8008244:	d302      	bcc.n	800824c <UART_WaitOnFlagUntilTimeout+0x30>
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e048      	b.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	2b00      	cmp	r3, #0
 800825c:	d031      	beq.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b08      	cmp	r3, #8
 800826a:	d110      	bne.n	800828e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2208      	movs	r2, #8
 8008272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f838 	bl	80082ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2208      	movs	r2, #8
 800827e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e029      	b.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829c:	d111      	bne.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f81e 	bl	80082ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e00f      	b.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	4013      	ands	r3, r2
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	bf0c      	ite	eq
 80082d2:	2301      	moveq	r3, #1
 80082d4:	2300      	movne	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d0a6      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b095      	sub	sp, #84	; 0x54
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008310:	643b      	str	r3, [r7, #64]	; 0x40
 8008312:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e6      	bne.n	80082f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3308      	adds	r3, #8
 800832a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	e853 3f00 	ldrex	r3, [r3]
 8008332:	61fb      	str	r3, [r7, #28]
   return(result);
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800833a:	f023 0301 	bic.w	r3, r3, #1
 800833e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800834a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008350:	e841 2300 	strex	r3, r2, [r1]
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1e3      	bne.n	8008324 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008360:	2b01      	cmp	r3, #1
 8008362:	d118      	bne.n	8008396 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	60bb      	str	r3, [r7, #8]
   return(result);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f023 0310 	bic.w	r3, r3, #16
 8008378:	647b      	str	r3, [r7, #68]	; 0x44
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6979      	ldr	r1, [r7, #20]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	613b      	str	r3, [r7, #16]
   return(result);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e6      	bne.n	8008364 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80083aa:	bf00      	nop
 80083ac:	3754      	adds	r7, #84	; 0x54
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <HAL_UARTEx_DisableFifoMode+0x16>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e027      	b.n	800841c <HAL_UARTEx_DisableFifoMode+0x66>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2224      	movs	r2, #36	; 0x24
 80083d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0201 	bic.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800843c:	2302      	movs	r3, #2
 800843e:	e02d      	b.n	800849c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2224      	movs	r2, #36	; 0x24
 800844c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f84f 	bl	8008520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e02d      	b.n	8008518 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2224      	movs	r2, #36	; 0x24
 80084c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0201 	bic.w	r2, r2, #1
 80084e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f811 	bl	8008520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852c:	2b00      	cmp	r3, #0
 800852e:	d108      	bne.n	8008542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008540:	e031      	b.n	80085a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008542:	2308      	movs	r3, #8
 8008544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008546:	2308      	movs	r3, #8
 8008548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	0e5b      	lsrs	r3, r3, #25
 8008552:	b2db      	uxtb	r3, r3
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	0f5b      	lsrs	r3, r3, #29
 8008562:	b2db      	uxtb	r3, r3
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	7b3a      	ldrb	r2, [r7, #12]
 800856e:	4911      	ldr	r1, [pc, #68]	; (80085b4 <UARTEx_SetNbDataToProcess+0x94>)
 8008570:	5c8a      	ldrb	r2, [r1, r2]
 8008572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008576:	7b3a      	ldrb	r2, [r7, #12]
 8008578:	490f      	ldr	r1, [pc, #60]	; (80085b8 <UARTEx_SetNbDataToProcess+0x98>)
 800857a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800857c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008580:	b29a      	uxth	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	7b7a      	ldrb	r2, [r7, #13]
 800858c:	4909      	ldr	r1, [pc, #36]	; (80085b4 <UARTEx_SetNbDataToProcess+0x94>)
 800858e:	5c8a      	ldrb	r2, [r1, r2]
 8008590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008594:	7b7a      	ldrb	r2, [r7, #13]
 8008596:	4908      	ldr	r1, [pc, #32]	; (80085b8 <UARTEx_SetNbDataToProcess+0x98>)
 8008598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800859a:	fb93 f3f2 	sdiv	r3, r3, r2
 800859e:	b29a      	uxth	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085a6:	bf00      	nop
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	080096dc 	.word	0x080096dc
 80085b8:	080096e4 	.word	0x080096e4

080085bc <__errno>:
 80085bc:	4b01      	ldr	r3, [pc, #4]	; (80085c4 <__errno+0x8>)
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	2000004c 	.word	0x2000004c

080085c8 <__libc_init_array>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4d0d      	ldr	r5, [pc, #52]	; (8008600 <__libc_init_array+0x38>)
 80085cc:	2600      	movs	r6, #0
 80085ce:	4c0d      	ldr	r4, [pc, #52]	; (8008604 <__libc_init_array+0x3c>)
 80085d0:	1b64      	subs	r4, r4, r5
 80085d2:	10a4      	asrs	r4, r4, #2
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	d109      	bne.n	80085ec <__libc_init_array+0x24>
 80085d8:	4d0b      	ldr	r5, [pc, #44]	; (8008608 <__libc_init_array+0x40>)
 80085da:	2600      	movs	r6, #0
 80085dc:	4c0b      	ldr	r4, [pc, #44]	; (800860c <__libc_init_array+0x44>)
 80085de:	f000 ffd1 	bl	8009584 <_init>
 80085e2:	1b64      	subs	r4, r4, r5
 80085e4:	10a4      	asrs	r4, r4, #2
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	d105      	bne.n	80085f6 <__libc_init_array+0x2e>
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f0:	3601      	adds	r6, #1
 80085f2:	4798      	blx	r3
 80085f4:	e7ee      	b.n	80085d4 <__libc_init_array+0xc>
 80085f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fa:	3601      	adds	r6, #1
 80085fc:	4798      	blx	r3
 80085fe:	e7f2      	b.n	80085e6 <__libc_init_array+0x1e>
 8008600:	0800978c 	.word	0x0800978c
 8008604:	0800978c 	.word	0x0800978c
 8008608:	0800978c 	.word	0x0800978c
 800860c:	08009790 	.word	0x08009790

08008610 <memset>:
 8008610:	4402      	add	r2, r0
 8008612:	4603      	mov	r3, r0
 8008614:	4293      	cmp	r3, r2
 8008616:	d100      	bne.n	800861a <memset+0xa>
 8008618:	4770      	bx	lr
 800861a:	f803 1b01 	strb.w	r1, [r3], #1
 800861e:	e7f9      	b.n	8008614 <memset+0x4>

08008620 <iprintf>:
 8008620:	b40f      	push	{r0, r1, r2, r3}
 8008622:	4b0a      	ldr	r3, [pc, #40]	; (800864c <iprintf+0x2c>)
 8008624:	b513      	push	{r0, r1, r4, lr}
 8008626:	681c      	ldr	r4, [r3, #0]
 8008628:	b124      	cbz	r4, 8008634 <iprintf+0x14>
 800862a:	69a3      	ldr	r3, [r4, #24]
 800862c:	b913      	cbnz	r3, 8008634 <iprintf+0x14>
 800862e:	4620      	mov	r0, r4
 8008630:	f000 f87c 	bl	800872c <__sinit>
 8008634:	ab05      	add	r3, sp, #20
 8008636:	9a04      	ldr	r2, [sp, #16]
 8008638:	68a1      	ldr	r1, [r4, #8]
 800863a:	4620      	mov	r0, r4
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	f000 f9d3 	bl	80089e8 <_vfiprintf_r>
 8008642:	b002      	add	sp, #8
 8008644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008648:	b004      	add	sp, #16
 800864a:	4770      	bx	lr
 800864c:	2000004c 	.word	0x2000004c

08008650 <strstr>:
 8008650:	780a      	ldrb	r2, [r1, #0]
 8008652:	b570      	push	{r4, r5, r6, lr}
 8008654:	b96a      	cbnz	r2, 8008672 <strstr+0x22>
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	429a      	cmp	r2, r3
 800865a:	d109      	bne.n	8008670 <strstr+0x20>
 800865c:	460c      	mov	r4, r1
 800865e:	4605      	mov	r5, r0
 8008660:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0f6      	beq.n	8008656 <strstr+0x6>
 8008668:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800866c:	429e      	cmp	r6, r3
 800866e:	d0f7      	beq.n	8008660 <strstr+0x10>
 8008670:	3001      	adds	r0, #1
 8008672:	7803      	ldrb	r3, [r0, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1ef      	bne.n	8008658 <strstr+0x8>
 8008678:	4618      	mov	r0, r3
 800867a:	e7ec      	b.n	8008656 <strstr+0x6>

0800867c <std>:
 800867c:	2300      	movs	r3, #0
 800867e:	b510      	push	{r4, lr}
 8008680:	4604      	mov	r4, r0
 8008682:	6083      	str	r3, [r0, #8]
 8008684:	8181      	strh	r1, [r0, #12]
 8008686:	4619      	mov	r1, r3
 8008688:	6643      	str	r3, [r0, #100]	; 0x64
 800868a:	81c2      	strh	r2, [r0, #14]
 800868c:	2208      	movs	r2, #8
 800868e:	6183      	str	r3, [r0, #24]
 8008690:	e9c0 3300 	strd	r3, r3, [r0]
 8008694:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008698:	305c      	adds	r0, #92	; 0x5c
 800869a:	f7ff ffb9 	bl	8008610 <memset>
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <std+0x38>)
 80086a0:	6224      	str	r4, [r4, #32]
 80086a2:	6263      	str	r3, [r4, #36]	; 0x24
 80086a4:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <std+0x3c>)
 80086a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <std+0x40>)
 80086aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <std+0x44>)
 80086ae:	6323      	str	r3, [r4, #48]	; 0x30
 80086b0:	bd10      	pop	{r4, pc}
 80086b2:	bf00      	nop
 80086b4:	08008f95 	.word	0x08008f95
 80086b8:	08008fb7 	.word	0x08008fb7
 80086bc:	08008fef 	.word	0x08008fef
 80086c0:	08009013 	.word	0x08009013

080086c4 <_cleanup_r>:
 80086c4:	4901      	ldr	r1, [pc, #4]	; (80086cc <_cleanup_r+0x8>)
 80086c6:	f000 b8af 	b.w	8008828 <_fwalk_reent>
 80086ca:	bf00      	nop
 80086cc:	080092e9 	.word	0x080092e9

080086d0 <__sfmoreglue>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	2268      	movs	r2, #104	; 0x68
 80086d4:	1e4d      	subs	r5, r1, #1
 80086d6:	460e      	mov	r6, r1
 80086d8:	4355      	muls	r5, r2
 80086da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086de:	f000 f8e5 	bl	80088ac <_malloc_r>
 80086e2:	4604      	mov	r4, r0
 80086e4:	b140      	cbz	r0, 80086f8 <__sfmoreglue+0x28>
 80086e6:	2100      	movs	r1, #0
 80086e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086ec:	e9c0 1600 	strd	r1, r6, [r0]
 80086f0:	300c      	adds	r0, #12
 80086f2:	60a0      	str	r0, [r4, #8]
 80086f4:	f7ff ff8c 	bl	8008610 <memset>
 80086f8:	4620      	mov	r0, r4
 80086fa:	bd70      	pop	{r4, r5, r6, pc}

080086fc <__sfp_lock_acquire>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__sfp_lock_acquire+0x8>)
 80086fe:	f000 b8b3 	b.w	8008868 <__retarget_lock_acquire_recursive>
 8008702:	bf00      	nop
 8008704:	200003c5 	.word	0x200003c5

08008708 <__sfp_lock_release>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__sfp_lock_release+0x8>)
 800870a:	f000 b8ae 	b.w	800886a <__retarget_lock_release_recursive>
 800870e:	bf00      	nop
 8008710:	200003c5 	.word	0x200003c5

08008714 <__sinit_lock_acquire>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__sinit_lock_acquire+0x8>)
 8008716:	f000 b8a7 	b.w	8008868 <__retarget_lock_acquire_recursive>
 800871a:	bf00      	nop
 800871c:	200003c6 	.word	0x200003c6

08008720 <__sinit_lock_release>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__sinit_lock_release+0x8>)
 8008722:	f000 b8a2 	b.w	800886a <__retarget_lock_release_recursive>
 8008726:	bf00      	nop
 8008728:	200003c6 	.word	0x200003c6

0800872c <__sinit>:
 800872c:	b510      	push	{r4, lr}
 800872e:	4604      	mov	r4, r0
 8008730:	f7ff fff0 	bl	8008714 <__sinit_lock_acquire>
 8008734:	69a3      	ldr	r3, [r4, #24]
 8008736:	b11b      	cbz	r3, 8008740 <__sinit+0x14>
 8008738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800873c:	f7ff bff0 	b.w	8008720 <__sinit_lock_release>
 8008740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008744:	6523      	str	r3, [r4, #80]	; 0x50
 8008746:	4620      	mov	r0, r4
 8008748:	4b12      	ldr	r3, [pc, #72]	; (8008794 <__sinit+0x68>)
 800874a:	4a13      	ldr	r2, [pc, #76]	; (8008798 <__sinit+0x6c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	62a2      	str	r2, [r4, #40]	; 0x28
 8008750:	42a3      	cmp	r3, r4
 8008752:	bf04      	itt	eq
 8008754:	2301      	moveq	r3, #1
 8008756:	61a3      	streq	r3, [r4, #24]
 8008758:	f000 f820 	bl	800879c <__sfp>
 800875c:	6060      	str	r0, [r4, #4]
 800875e:	4620      	mov	r0, r4
 8008760:	f000 f81c 	bl	800879c <__sfp>
 8008764:	60a0      	str	r0, [r4, #8]
 8008766:	4620      	mov	r0, r4
 8008768:	f000 f818 	bl	800879c <__sfp>
 800876c:	2200      	movs	r2, #0
 800876e:	2104      	movs	r1, #4
 8008770:	60e0      	str	r0, [r4, #12]
 8008772:	6860      	ldr	r0, [r4, #4]
 8008774:	f7ff ff82 	bl	800867c <std>
 8008778:	2201      	movs	r2, #1
 800877a:	2109      	movs	r1, #9
 800877c:	68a0      	ldr	r0, [r4, #8]
 800877e:	f7ff ff7d 	bl	800867c <std>
 8008782:	2202      	movs	r2, #2
 8008784:	2112      	movs	r1, #18
 8008786:	68e0      	ldr	r0, [r4, #12]
 8008788:	f7ff ff78 	bl	800867c <std>
 800878c:	2301      	movs	r3, #1
 800878e:	61a3      	str	r3, [r4, #24]
 8008790:	e7d2      	b.n	8008738 <__sinit+0xc>
 8008792:	bf00      	nop
 8008794:	080096ec 	.word	0x080096ec
 8008798:	080086c5 	.word	0x080086c5

0800879c <__sfp>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	4607      	mov	r7, r0
 80087a0:	f7ff ffac 	bl	80086fc <__sfp_lock_acquire>
 80087a4:	4b1e      	ldr	r3, [pc, #120]	; (8008820 <__sfp+0x84>)
 80087a6:	681e      	ldr	r6, [r3, #0]
 80087a8:	69b3      	ldr	r3, [r6, #24]
 80087aa:	b913      	cbnz	r3, 80087b2 <__sfp+0x16>
 80087ac:	4630      	mov	r0, r6
 80087ae:	f7ff ffbd 	bl	800872c <__sinit>
 80087b2:	3648      	adds	r6, #72	; 0x48
 80087b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	d503      	bpl.n	80087c4 <__sfp+0x28>
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	b30b      	cbz	r3, 8008804 <__sfp+0x68>
 80087c0:	6836      	ldr	r6, [r6, #0]
 80087c2:	e7f7      	b.n	80087b4 <__sfp+0x18>
 80087c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087c8:	b9d5      	cbnz	r5, 8008800 <__sfp+0x64>
 80087ca:	4b16      	ldr	r3, [pc, #88]	; (8008824 <__sfp+0x88>)
 80087cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087d0:	6665      	str	r5, [r4, #100]	; 0x64
 80087d2:	60e3      	str	r3, [r4, #12]
 80087d4:	f000 f847 	bl	8008866 <__retarget_lock_init_recursive>
 80087d8:	f7ff ff96 	bl	8008708 <__sfp_lock_release>
 80087dc:	2208      	movs	r2, #8
 80087de:	4629      	mov	r1, r5
 80087e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087e4:	6025      	str	r5, [r4, #0]
 80087e6:	61a5      	str	r5, [r4, #24]
 80087e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087f0:	f7ff ff0e 	bl	8008610 <memset>
 80087f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087fc:	4620      	mov	r0, r4
 80087fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008800:	3468      	adds	r4, #104	; 0x68
 8008802:	e7d9      	b.n	80087b8 <__sfp+0x1c>
 8008804:	2104      	movs	r1, #4
 8008806:	4638      	mov	r0, r7
 8008808:	f7ff ff62 	bl	80086d0 <__sfmoreglue>
 800880c:	4604      	mov	r4, r0
 800880e:	6030      	str	r0, [r6, #0]
 8008810:	2800      	cmp	r0, #0
 8008812:	d1d5      	bne.n	80087c0 <__sfp+0x24>
 8008814:	f7ff ff78 	bl	8008708 <__sfp_lock_release>
 8008818:	230c      	movs	r3, #12
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	e7ee      	b.n	80087fc <__sfp+0x60>
 800881e:	bf00      	nop
 8008820:	080096ec 	.word	0x080096ec
 8008824:	ffff0001 	.word	0xffff0001

08008828 <_fwalk_reent>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	4606      	mov	r6, r0
 800882e:	4688      	mov	r8, r1
 8008830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008834:	2700      	movs	r7, #0
 8008836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800883a:	f1b9 0901 	subs.w	r9, r9, #1
 800883e:	d505      	bpl.n	800884c <_fwalk_reent+0x24>
 8008840:	6824      	ldr	r4, [r4, #0]
 8008842:	2c00      	cmp	r4, #0
 8008844:	d1f7      	bne.n	8008836 <_fwalk_reent+0xe>
 8008846:	4638      	mov	r0, r7
 8008848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884c:	89ab      	ldrh	r3, [r5, #12]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d907      	bls.n	8008862 <_fwalk_reent+0x3a>
 8008852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008856:	3301      	adds	r3, #1
 8008858:	d003      	beq.n	8008862 <_fwalk_reent+0x3a>
 800885a:	4629      	mov	r1, r5
 800885c:	4630      	mov	r0, r6
 800885e:	47c0      	blx	r8
 8008860:	4307      	orrs	r7, r0
 8008862:	3568      	adds	r5, #104	; 0x68
 8008864:	e7e9      	b.n	800883a <_fwalk_reent+0x12>

08008866 <__retarget_lock_init_recursive>:
 8008866:	4770      	bx	lr

08008868 <__retarget_lock_acquire_recursive>:
 8008868:	4770      	bx	lr

0800886a <__retarget_lock_release_recursive>:
 800886a:	4770      	bx	lr

0800886c <sbrk_aligned>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4e0e      	ldr	r6, [pc, #56]	; (80088a8 <sbrk_aligned+0x3c>)
 8008870:	460c      	mov	r4, r1
 8008872:	4605      	mov	r5, r0
 8008874:	6831      	ldr	r1, [r6, #0]
 8008876:	b911      	cbnz	r1, 800887e <sbrk_aligned+0x12>
 8008878:	f000 fb7c 	bl	8008f74 <_sbrk_r>
 800887c:	6030      	str	r0, [r6, #0]
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 fb77 	bl	8008f74 <_sbrk_r>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d00a      	beq.n	80088a0 <sbrk_aligned+0x34>
 800888a:	1cc4      	adds	r4, r0, #3
 800888c:	f024 0403 	bic.w	r4, r4, #3
 8008890:	42a0      	cmp	r0, r4
 8008892:	d007      	beq.n	80088a4 <sbrk_aligned+0x38>
 8008894:	1a21      	subs	r1, r4, r0
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fb6c 	bl	8008f74 <_sbrk_r>
 800889c:	3001      	adds	r0, #1
 800889e:	d101      	bne.n	80088a4 <sbrk_aligned+0x38>
 80088a0:	f04f 34ff 	mov.w	r4, #4294967295
 80088a4:	4620      	mov	r0, r4
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	200003cc 	.word	0x200003cc

080088ac <_malloc_r>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	1ccd      	adds	r5, r1, #3
 80088b2:	4607      	mov	r7, r0
 80088b4:	f025 0503 	bic.w	r5, r5, #3
 80088b8:	3508      	adds	r5, #8
 80088ba:	2d0c      	cmp	r5, #12
 80088bc:	bf38      	it	cc
 80088be:	250c      	movcc	r5, #12
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	db01      	blt.n	80088c8 <_malloc_r+0x1c>
 80088c4:	42a9      	cmp	r1, r5
 80088c6:	d905      	bls.n	80088d4 <_malloc_r+0x28>
 80088c8:	230c      	movs	r3, #12
 80088ca:	2600      	movs	r6, #0
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	4630      	mov	r0, r6
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	4e2e      	ldr	r6, [pc, #184]	; (8008990 <_malloc_r+0xe4>)
 80088d6:	f000 fdc9 	bl	800946c <__malloc_lock>
 80088da:	6833      	ldr	r3, [r6, #0]
 80088dc:	461c      	mov	r4, r3
 80088de:	bb34      	cbnz	r4, 800892e <_malloc_r+0x82>
 80088e0:	4629      	mov	r1, r5
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7ff ffc2 	bl	800886c <sbrk_aligned>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	4604      	mov	r4, r0
 80088ec:	d14d      	bne.n	800898a <_malloc_r+0xde>
 80088ee:	6834      	ldr	r4, [r6, #0]
 80088f0:	4626      	mov	r6, r4
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	d140      	bne.n	8008978 <_malloc_r+0xcc>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	4631      	mov	r1, r6
 80088fa:	4638      	mov	r0, r7
 80088fc:	eb04 0803 	add.w	r8, r4, r3
 8008900:	f000 fb38 	bl	8008f74 <_sbrk_r>
 8008904:	4580      	cmp	r8, r0
 8008906:	d13a      	bne.n	800897e <_malloc_r+0xd2>
 8008908:	6821      	ldr	r1, [r4, #0]
 800890a:	3503      	adds	r5, #3
 800890c:	4638      	mov	r0, r7
 800890e:	1a6d      	subs	r5, r5, r1
 8008910:	f025 0503 	bic.w	r5, r5, #3
 8008914:	3508      	adds	r5, #8
 8008916:	2d0c      	cmp	r5, #12
 8008918:	bf38      	it	cc
 800891a:	250c      	movcc	r5, #12
 800891c:	4629      	mov	r1, r5
 800891e:	f7ff ffa5 	bl	800886c <sbrk_aligned>
 8008922:	3001      	adds	r0, #1
 8008924:	d02b      	beq.n	800897e <_malloc_r+0xd2>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	442b      	add	r3, r5
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	e00e      	b.n	800894c <_malloc_r+0xa0>
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	1b52      	subs	r2, r2, r5
 8008932:	d41e      	bmi.n	8008972 <_malloc_r+0xc6>
 8008934:	2a0b      	cmp	r2, #11
 8008936:	d916      	bls.n	8008966 <_malloc_r+0xba>
 8008938:	1961      	adds	r1, r4, r5
 800893a:	42a3      	cmp	r3, r4
 800893c:	6025      	str	r5, [r4, #0]
 800893e:	bf18      	it	ne
 8008940:	6059      	strne	r1, [r3, #4]
 8008942:	6863      	ldr	r3, [r4, #4]
 8008944:	bf08      	it	eq
 8008946:	6031      	streq	r1, [r6, #0]
 8008948:	5162      	str	r2, [r4, r5]
 800894a:	604b      	str	r3, [r1, #4]
 800894c:	f104 060b 	add.w	r6, r4, #11
 8008950:	4638      	mov	r0, r7
 8008952:	f000 fd91 	bl	8009478 <__malloc_unlock>
 8008956:	1d23      	adds	r3, r4, #4
 8008958:	f026 0607 	bic.w	r6, r6, #7
 800895c:	1af2      	subs	r2, r6, r3
 800895e:	d0b6      	beq.n	80088ce <_malloc_r+0x22>
 8008960:	1b9b      	subs	r3, r3, r6
 8008962:	50a3      	str	r3, [r4, r2]
 8008964:	e7b3      	b.n	80088ce <_malloc_r+0x22>
 8008966:	6862      	ldr	r2, [r4, #4]
 8008968:	42a3      	cmp	r3, r4
 800896a:	bf0c      	ite	eq
 800896c:	6032      	streq	r2, [r6, #0]
 800896e:	605a      	strne	r2, [r3, #4]
 8008970:	e7ec      	b.n	800894c <_malloc_r+0xa0>
 8008972:	4623      	mov	r3, r4
 8008974:	6864      	ldr	r4, [r4, #4]
 8008976:	e7b2      	b.n	80088de <_malloc_r+0x32>
 8008978:	4634      	mov	r4, r6
 800897a:	6876      	ldr	r6, [r6, #4]
 800897c:	e7b9      	b.n	80088f2 <_malloc_r+0x46>
 800897e:	230c      	movs	r3, #12
 8008980:	4638      	mov	r0, r7
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	f000 fd78 	bl	8009478 <__malloc_unlock>
 8008988:	e7a1      	b.n	80088ce <_malloc_r+0x22>
 800898a:	6025      	str	r5, [r4, #0]
 800898c:	e7de      	b.n	800894c <_malloc_r+0xa0>
 800898e:	bf00      	nop
 8008990:	200003c8 	.word	0x200003c8

08008994 <__sfputc_r>:
 8008994:	6893      	ldr	r3, [r2, #8]
 8008996:	3b01      	subs	r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	6093      	str	r3, [r2, #8]
 800899c:	b410      	push	{r4}
 800899e:	da08      	bge.n	80089b2 <__sfputc_r+0x1e>
 80089a0:	6994      	ldr	r4, [r2, #24]
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	db01      	blt.n	80089aa <__sfputc_r+0x16>
 80089a6:	290a      	cmp	r1, #10
 80089a8:	d103      	bne.n	80089b2 <__sfputc_r+0x1e>
 80089aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ae:	f000 bb35 	b.w	800901c <__swbuf_r>
 80089b2:	6813      	ldr	r3, [r2, #0]
 80089b4:	1c58      	adds	r0, r3, #1
 80089b6:	6010      	str	r0, [r2, #0]
 80089b8:	4608      	mov	r0, r1
 80089ba:	7019      	strb	r1, [r3, #0]
 80089bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <__sfputs_r>:
 80089c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c4:	4606      	mov	r6, r0
 80089c6:	460f      	mov	r7, r1
 80089c8:	4614      	mov	r4, r2
 80089ca:	18d5      	adds	r5, r2, r3
 80089cc:	42ac      	cmp	r4, r5
 80089ce:	d101      	bne.n	80089d4 <__sfputs_r+0x12>
 80089d0:	2000      	movs	r0, #0
 80089d2:	e007      	b.n	80089e4 <__sfputs_r+0x22>
 80089d4:	463a      	mov	r2, r7
 80089d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ffda 	bl	8008994 <__sfputc_r>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d1f3      	bne.n	80089cc <__sfputs_r+0xa>
 80089e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089e8 <_vfiprintf_r>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	460d      	mov	r5, r1
 80089ee:	b09d      	sub	sp, #116	; 0x74
 80089f0:	4614      	mov	r4, r2
 80089f2:	4698      	mov	r8, r3
 80089f4:	4606      	mov	r6, r0
 80089f6:	b118      	cbz	r0, 8008a00 <_vfiprintf_r+0x18>
 80089f8:	6983      	ldr	r3, [r0, #24]
 80089fa:	b90b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x18>
 80089fc:	f7ff fe96 	bl	800872c <__sinit>
 8008a00:	4b89      	ldr	r3, [pc, #548]	; (8008c28 <_vfiprintf_r+0x240>)
 8008a02:	429d      	cmp	r5, r3
 8008a04:	d11b      	bne.n	8008a3e <_vfiprintf_r+0x56>
 8008a06:	6875      	ldr	r5, [r6, #4]
 8008a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a0a:	07d9      	lsls	r1, r3, #31
 8008a0c:	d405      	bmi.n	8008a1a <_vfiprintf_r+0x32>
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	059a      	lsls	r2, r3, #22
 8008a12:	d402      	bmi.n	8008a1a <_vfiprintf_r+0x32>
 8008a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a16:	f7ff ff27 	bl	8008868 <__retarget_lock_acquire_recursive>
 8008a1a:	89ab      	ldrh	r3, [r5, #12]
 8008a1c:	071b      	lsls	r3, r3, #28
 8008a1e:	d501      	bpl.n	8008a24 <_vfiprintf_r+0x3c>
 8008a20:	692b      	ldr	r3, [r5, #16]
 8008a22:	b9eb      	cbnz	r3, 8008a60 <_vfiprintf_r+0x78>
 8008a24:	4629      	mov	r1, r5
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 fb5c 	bl	80090e4 <__swsetup_r>
 8008a2c:	b1c0      	cbz	r0, 8008a60 <_vfiprintf_r+0x78>
 8008a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a30:	07dc      	lsls	r4, r3, #31
 8008a32:	d50e      	bpl.n	8008a52 <_vfiprintf_r+0x6a>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	b01d      	add	sp, #116	; 0x74
 8008a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3e:	4b7b      	ldr	r3, [pc, #492]	; (8008c2c <_vfiprintf_r+0x244>)
 8008a40:	429d      	cmp	r5, r3
 8008a42:	d101      	bne.n	8008a48 <_vfiprintf_r+0x60>
 8008a44:	68b5      	ldr	r5, [r6, #8]
 8008a46:	e7df      	b.n	8008a08 <_vfiprintf_r+0x20>
 8008a48:	4b79      	ldr	r3, [pc, #484]	; (8008c30 <_vfiprintf_r+0x248>)
 8008a4a:	429d      	cmp	r5, r3
 8008a4c:	bf08      	it	eq
 8008a4e:	68f5      	ldreq	r5, [r6, #12]
 8008a50:	e7da      	b.n	8008a08 <_vfiprintf_r+0x20>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	0598      	lsls	r0, r3, #22
 8008a56:	d4ed      	bmi.n	8008a34 <_vfiprintf_r+0x4c>
 8008a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a5a:	f7ff ff06 	bl	800886a <__retarget_lock_release_recursive>
 8008a5e:	e7e9      	b.n	8008a34 <_vfiprintf_r+0x4c>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a66:	f04f 0901 	mov.w	r9, #1
 8008a6a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8008c34 <_vfiprintf_r+0x24c>
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a70:	2320      	movs	r3, #32
 8008a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a76:	2330      	movs	r3, #48	; 0x30
 8008a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	469a      	mov	sl, r3
 8008a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a84:	b10a      	cbz	r2, 8008a8a <_vfiprintf_r+0xa2>
 8008a86:	2a25      	cmp	r2, #37	; 0x25
 8008a88:	d1f9      	bne.n	8008a7e <_vfiprintf_r+0x96>
 8008a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a8e:	d00b      	beq.n	8008aa8 <_vfiprintf_r+0xc0>
 8008a90:	465b      	mov	r3, fp
 8008a92:	4622      	mov	r2, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff ff93 	bl	80089c2 <__sfputs_r>
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f000 80aa 	beq.w	8008bf6 <_vfiprintf_r+0x20e>
 8008aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aa4:	445a      	add	r2, fp
 8008aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8008aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80a2 	beq.w	8008bf6 <_vfiprintf_r+0x20e>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab8:	f10a 0a01 	add.w	sl, sl, #1
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ac4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aca:	4654      	mov	r4, sl
 8008acc:	2205      	movs	r2, #5
 8008ace:	4859      	ldr	r0, [pc, #356]	; (8008c34 <_vfiprintf_r+0x24c>)
 8008ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad4:	f000 fcbc 	bl	8009450 <memchr>
 8008ad8:	9a04      	ldr	r2, [sp, #16]
 8008ada:	b9d8      	cbnz	r0, 8008b14 <_vfiprintf_r+0x12c>
 8008adc:	06d1      	lsls	r1, r2, #27
 8008ade:	bf44      	itt	mi
 8008ae0:	2320      	movmi	r3, #32
 8008ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ae6:	0713      	lsls	r3, r2, #28
 8008ae8:	bf44      	itt	mi
 8008aea:	232b      	movmi	r3, #43	; 0x2b
 8008aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af0:	f89a 3000 	ldrb.w	r3, [sl]
 8008af4:	2b2a      	cmp	r3, #42	; 0x2a
 8008af6:	d015      	beq.n	8008b24 <_vfiprintf_r+0x13c>
 8008af8:	9a07      	ldr	r2, [sp, #28]
 8008afa:	4654      	mov	r4, sl
 8008afc:	2000      	movs	r0, #0
 8008afe:	f04f 0c0a 	mov.w	ip, #10
 8008b02:	4621      	mov	r1, r4
 8008b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b08:	3b30      	subs	r3, #48	; 0x30
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	d94e      	bls.n	8008bac <_vfiprintf_r+0x1c4>
 8008b0e:	b1b0      	cbz	r0, 8008b3e <_vfiprintf_r+0x156>
 8008b10:	9207      	str	r2, [sp, #28]
 8008b12:	e014      	b.n	8008b3e <_vfiprintf_r+0x156>
 8008b14:	eba0 0308 	sub.w	r3, r0, r8
 8008b18:	46a2      	mov	sl, r4
 8008b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	e7d2      	b.n	8008aca <_vfiprintf_r+0xe2>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	1d19      	adds	r1, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	9103      	str	r1, [sp, #12]
 8008b2e:	bfbb      	ittet	lt
 8008b30:	425b      	neglt	r3, r3
 8008b32:	f042 0202 	orrlt.w	r2, r2, #2
 8008b36:	9307      	strge	r3, [sp, #28]
 8008b38:	9307      	strlt	r3, [sp, #28]
 8008b3a:	bfb8      	it	lt
 8008b3c:	9204      	strlt	r2, [sp, #16]
 8008b3e:	7823      	ldrb	r3, [r4, #0]
 8008b40:	2b2e      	cmp	r3, #46	; 0x2e
 8008b42:	d10c      	bne.n	8008b5e <_vfiprintf_r+0x176>
 8008b44:	7863      	ldrb	r3, [r4, #1]
 8008b46:	2b2a      	cmp	r3, #42	; 0x2a
 8008b48:	d135      	bne.n	8008bb6 <_vfiprintf_r+0x1ce>
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	3402      	adds	r4, #2
 8008b4e:	1d1a      	adds	r2, r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	9203      	str	r2, [sp, #12]
 8008b56:	bfb8      	it	lt
 8008b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b5c:	9305      	str	r3, [sp, #20]
 8008b5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c44 <_vfiprintf_r+0x25c>
 8008b62:	2203      	movs	r2, #3
 8008b64:	7821      	ldrb	r1, [r4, #0]
 8008b66:	4650      	mov	r0, sl
 8008b68:	f000 fc72 	bl	8009450 <memchr>
 8008b6c:	b140      	cbz	r0, 8008b80 <_vfiprintf_r+0x198>
 8008b6e:	2340      	movs	r3, #64	; 0x40
 8008b70:	eba0 000a 	sub.w	r0, r0, sl
 8008b74:	3401      	adds	r4, #1
 8008b76:	fa03 f000 	lsl.w	r0, r3, r0
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	4303      	orrs	r3, r0
 8008b7e:	9304      	str	r3, [sp, #16]
 8008b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b84:	2206      	movs	r2, #6
 8008b86:	482c      	ldr	r0, [pc, #176]	; (8008c38 <_vfiprintf_r+0x250>)
 8008b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b8c:	f000 fc60 	bl	8009450 <memchr>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d03f      	beq.n	8008c14 <_vfiprintf_r+0x22c>
 8008b94:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <_vfiprintf_r+0x254>)
 8008b96:	bb1b      	cbnz	r3, 8008be0 <_vfiprintf_r+0x1f8>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	3307      	adds	r3, #7
 8008b9c:	f023 0307 	bic.w	r3, r3, #7
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	9303      	str	r3, [sp, #12]
 8008ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba6:	443b      	add	r3, r7
 8008ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8008baa:	e767      	b.n	8008a7c <_vfiprintf_r+0x94>
 8008bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	e7a5      	b.n	8008b02 <_vfiprintf_r+0x11a>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	3401      	adds	r4, #1
 8008bba:	f04f 0c0a 	mov.w	ip, #10
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bc8:	3a30      	subs	r2, #48	; 0x30
 8008bca:	2a09      	cmp	r2, #9
 8008bcc:	d903      	bls.n	8008bd6 <_vfiprintf_r+0x1ee>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0c5      	beq.n	8008b5e <_vfiprintf_r+0x176>
 8008bd2:	9105      	str	r1, [sp, #20]
 8008bd4:	e7c3      	b.n	8008b5e <_vfiprintf_r+0x176>
 8008bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bda:	4604      	mov	r4, r0
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e7f0      	b.n	8008bc2 <_vfiprintf_r+0x1da>
 8008be0:	ab03      	add	r3, sp, #12
 8008be2:	462a      	mov	r2, r5
 8008be4:	a904      	add	r1, sp, #16
 8008be6:	4630      	mov	r0, r6
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <_vfiprintf_r+0x258>)
 8008bec:	e000      	b.n	8008bf0 <_vfiprintf_r+0x208>
 8008bee:	bf00      	nop
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	1c78      	adds	r0, r7, #1
 8008bf4:	d1d6      	bne.n	8008ba4 <_vfiprintf_r+0x1bc>
 8008bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bf8:	07d9      	lsls	r1, r3, #31
 8008bfa:	d405      	bmi.n	8008c08 <_vfiprintf_r+0x220>
 8008bfc:	89ab      	ldrh	r3, [r5, #12]
 8008bfe:	059a      	lsls	r2, r3, #22
 8008c00:	d402      	bmi.n	8008c08 <_vfiprintf_r+0x220>
 8008c02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c04:	f7ff fe31 	bl	800886a <__retarget_lock_release_recursive>
 8008c08:	89ab      	ldrh	r3, [r5, #12]
 8008c0a:	065b      	lsls	r3, r3, #25
 8008c0c:	f53f af12 	bmi.w	8008a34 <_vfiprintf_r+0x4c>
 8008c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c12:	e711      	b.n	8008a38 <_vfiprintf_r+0x50>
 8008c14:	ab03      	add	r3, sp, #12
 8008c16:	462a      	mov	r2, r5
 8008c18:	a904      	add	r1, sp, #16
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	4b08      	ldr	r3, [pc, #32]	; (8008c40 <_vfiprintf_r+0x258>)
 8008c20:	f000 f882 	bl	8008d28 <_printf_i>
 8008c24:	e7e4      	b.n	8008bf0 <_vfiprintf_r+0x208>
 8008c26:	bf00      	nop
 8008c28:	08009710 	.word	0x08009710
 8008c2c:	08009730 	.word	0x08009730
 8008c30:	080096f0 	.word	0x080096f0
 8008c34:	08009750 	.word	0x08009750
 8008c38:	0800975a 	.word	0x0800975a
 8008c3c:	00000000 	.word	0x00000000
 8008c40:	080089c3 	.word	0x080089c3
 8008c44:	08009756 	.word	0x08009756

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	4699      	mov	r9, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	4607      	mov	r7, r0
 8008c54:	690b      	ldr	r3, [r1, #16]
 8008c56:	460c      	mov	r4, r1
 8008c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	bfb8      	it	lt
 8008c60:	4613      	movlt	r3, r2
 8008c62:	6033      	str	r3, [r6, #0]
 8008c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c68:	b10a      	cbz	r2, 8008c6e <_printf_common+0x26>
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	6833      	ldrmi	r3, [r6, #0]
 8008c76:	3302      	addmi	r3, #2
 8008c78:	6033      	strmi	r3, [r6, #0]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d106      	bne.n	8008c90 <_printf_common+0x48>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	6832      	ldr	r2, [r6, #0]
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dc29      	bgt.n	8008ce4 <_printf_common+0x9c>
 8008c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c94:	1e13      	subs	r3, r2, #0
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d42e      	bmi.n	8008cfe <_printf_common+0xb6>
 8008ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d021      	beq.n	8008cf2 <_printf_common+0xaa>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	341a      	adds	r4, #26
 8008cb2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8008cb6:	f003 0306 	and.w	r3, r3, #6
 8008cba:	6832      	ldr	r2, [r6, #0]
 8008cbc:	2600      	movs	r6, #0
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cc4:	bf08      	it	eq
 8008cc6:	1aad      	subeq	r5, r5, r2
 8008cc8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008ccc:	bf14      	ite	ne
 8008cce:	2500      	movne	r5, #0
 8008cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	bfc4      	itt	gt
 8008cd8:	1a9b      	subgt	r3, r3, r2
 8008cda:	18ed      	addgt	r5, r5, r3
 8008cdc:	42b5      	cmp	r5, r6
 8008cde:	d11a      	bne.n	8008d16 <_printf_common+0xce>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	e008      	b.n	8008cf6 <_printf_common+0xae>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	4652      	mov	r2, sl
 8008ce8:	4649      	mov	r1, r9
 8008cea:	4638      	mov	r0, r7
 8008cec:	47c0      	blx	r8
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d103      	bne.n	8008cfa <_printf_common+0xb2>
 8008cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfa:	3501      	adds	r5, #1
 8008cfc:	e7c3      	b.n	8008c86 <_printf_common+0x3e>
 8008cfe:	18e1      	adds	r1, r4, r3
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	2030      	movs	r0, #48	; 0x30
 8008d04:	3302      	adds	r3, #2
 8008d06:	4422      	add	r2, r4
 8008d08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d14:	e7c4      	b.n	8008ca0 <_printf_common+0x58>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	47c0      	blx	r8
 8008d20:	3001      	adds	r0, #1
 8008d22:	d0e6      	beq.n	8008cf2 <_printf_common+0xaa>
 8008d24:	3601      	adds	r6, #1
 8008d26:	e7d9      	b.n	8008cdc <_printf_common+0x94>

08008d28 <_printf_i>:
 8008d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2c:	7e0f      	ldrb	r7, [r1, #24]
 8008d2e:	4691      	mov	r9, r2
 8008d30:	4680      	mov	r8, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	2f78      	cmp	r7, #120	; 0x78
 8008d36:	469a      	mov	sl, r3
 8008d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d3e:	d807      	bhi.n	8008d50 <_printf_i+0x28>
 8008d40:	2f62      	cmp	r7, #98	; 0x62
 8008d42:	d80a      	bhi.n	8008d5a <_printf_i+0x32>
 8008d44:	2f00      	cmp	r7, #0
 8008d46:	f000 80d8 	beq.w	8008efa <_printf_i+0x1d2>
 8008d4a:	2f58      	cmp	r7, #88	; 0x58
 8008d4c:	f000 80a3 	beq.w	8008e96 <_printf_i+0x16e>
 8008d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d58:	e03a      	b.n	8008dd0 <_printf_i+0xa8>
 8008d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d5e:	2b15      	cmp	r3, #21
 8008d60:	d8f6      	bhi.n	8008d50 <_printf_i+0x28>
 8008d62:	a101      	add	r1, pc, #4	; (adr r1, 8008d68 <_printf_i+0x40>)
 8008d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d68:	08008dc1 	.word	0x08008dc1
 8008d6c:	08008dd5 	.word	0x08008dd5
 8008d70:	08008d51 	.word	0x08008d51
 8008d74:	08008d51 	.word	0x08008d51
 8008d78:	08008d51 	.word	0x08008d51
 8008d7c:	08008d51 	.word	0x08008d51
 8008d80:	08008dd5 	.word	0x08008dd5
 8008d84:	08008d51 	.word	0x08008d51
 8008d88:	08008d51 	.word	0x08008d51
 8008d8c:	08008d51 	.word	0x08008d51
 8008d90:	08008d51 	.word	0x08008d51
 8008d94:	08008ee1 	.word	0x08008ee1
 8008d98:	08008e05 	.word	0x08008e05
 8008d9c:	08008ec3 	.word	0x08008ec3
 8008da0:	08008d51 	.word	0x08008d51
 8008da4:	08008d51 	.word	0x08008d51
 8008da8:	08008f03 	.word	0x08008f03
 8008dac:	08008d51 	.word	0x08008d51
 8008db0:	08008e05 	.word	0x08008e05
 8008db4:	08008d51 	.word	0x08008d51
 8008db8:	08008d51 	.word	0x08008d51
 8008dbc:	08008ecb 	.word	0x08008ecb
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	1d1a      	adds	r2, r3, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	602a      	str	r2, [r5, #0]
 8008dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0a3      	b.n	8008f1c <_printf_i+0x1f4>
 8008dd4:	6820      	ldr	r0, [r4, #0]
 8008dd6:	6829      	ldr	r1, [r5, #0]
 8008dd8:	0606      	lsls	r6, r0, #24
 8008dda:	f101 0304 	add.w	r3, r1, #4
 8008dde:	d50a      	bpl.n	8008df6 <_printf_i+0xce>
 8008de0:	680e      	ldr	r6, [r1, #0]
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	2e00      	cmp	r6, #0
 8008de6:	da03      	bge.n	8008df0 <_printf_i+0xc8>
 8008de8:	232d      	movs	r3, #45	; 0x2d
 8008dea:	4276      	negs	r6, r6
 8008dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df0:	485e      	ldr	r0, [pc, #376]	; (8008f6c <_printf_i+0x244>)
 8008df2:	230a      	movs	r3, #10
 8008df4:	e019      	b.n	8008e2a <_printf_i+0x102>
 8008df6:	680e      	ldr	r6, [r1, #0]
 8008df8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	bf18      	it	ne
 8008e00:	b236      	sxthne	r6, r6
 8008e02:	e7ef      	b.n	8008de4 <_printf_i+0xbc>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	6820      	ldr	r0, [r4, #0]
 8008e08:	1d19      	adds	r1, r3, #4
 8008e0a:	6029      	str	r1, [r5, #0]
 8008e0c:	0601      	lsls	r1, r0, #24
 8008e0e:	d501      	bpl.n	8008e14 <_printf_i+0xec>
 8008e10:	681e      	ldr	r6, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <_printf_i+0xf2>
 8008e14:	0646      	lsls	r6, r0, #25
 8008e16:	d5fb      	bpl.n	8008e10 <_printf_i+0xe8>
 8008e18:	881e      	ldrh	r6, [r3, #0]
 8008e1a:	2f6f      	cmp	r7, #111	; 0x6f
 8008e1c:	4853      	ldr	r0, [pc, #332]	; (8008f6c <_printf_i+0x244>)
 8008e1e:	bf0c      	ite	eq
 8008e20:	2308      	moveq	r3, #8
 8008e22:	230a      	movne	r3, #10
 8008e24:	2100      	movs	r1, #0
 8008e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e2a:	6865      	ldr	r5, [r4, #4]
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	60a5      	str	r5, [r4, #8]
 8008e30:	bfa2      	ittt	ge
 8008e32:	6821      	ldrge	r1, [r4, #0]
 8008e34:	f021 0104 	bicge.w	r1, r1, #4
 8008e38:	6021      	strge	r1, [r4, #0]
 8008e3a:	b90e      	cbnz	r6, 8008e40 <_printf_i+0x118>
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	d04d      	beq.n	8008edc <_printf_i+0x1b4>
 8008e40:	4615      	mov	r5, r2
 8008e42:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e46:	fb03 6711 	mls	r7, r3, r1, r6
 8008e4a:	5dc7      	ldrb	r7, [r0, r7]
 8008e4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e50:	4637      	mov	r7, r6
 8008e52:	460e      	mov	r6, r1
 8008e54:	42bb      	cmp	r3, r7
 8008e56:	d9f4      	bls.n	8008e42 <_printf_i+0x11a>
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d10b      	bne.n	8008e74 <_printf_i+0x14c>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	07de      	lsls	r6, r3, #31
 8008e60:	d508      	bpl.n	8008e74 <_printf_i+0x14c>
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	6861      	ldr	r1, [r4, #4]
 8008e66:	4299      	cmp	r1, r3
 8008e68:	bfde      	ittt	le
 8008e6a:	2330      	movle	r3, #48	; 0x30
 8008e6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e74:	1b52      	subs	r2, r2, r5
 8008e76:	6122      	str	r2, [r4, #16]
 8008e78:	464b      	mov	r3, r9
 8008e7a:	aa03      	add	r2, sp, #12
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f8cd a000 	str.w	sl, [sp]
 8008e84:	f7ff fee0 	bl	8008c48 <_printf_common>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d14c      	bne.n	8008f26 <_printf_i+0x1fe>
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	b004      	add	sp, #16
 8008e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e96:	4835      	ldr	r0, [pc, #212]	; (8008f6c <_printf_i+0x244>)
 8008e98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e9c:	6829      	ldr	r1, [r5, #0]
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ea4:	6029      	str	r1, [r5, #0]
 8008ea6:	061d      	lsls	r5, r3, #24
 8008ea8:	d514      	bpl.n	8008ed4 <_printf_i+0x1ac>
 8008eaa:	07df      	lsls	r7, r3, #31
 8008eac:	bf44      	itt	mi
 8008eae:	f043 0320 	orrmi.w	r3, r3, #32
 8008eb2:	6023      	strmi	r3, [r4, #0]
 8008eb4:	b91e      	cbnz	r6, 8008ebe <_printf_i+0x196>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	f023 0320 	bic.w	r3, r3, #32
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	2310      	movs	r3, #16
 8008ec0:	e7b0      	b.n	8008e24 <_printf_i+0xfc>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	f043 0320 	orr.w	r3, r3, #32
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	2378      	movs	r3, #120	; 0x78
 8008ecc:	4828      	ldr	r0, [pc, #160]	; (8008f70 <_printf_i+0x248>)
 8008ece:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ed2:	e7e3      	b.n	8008e9c <_printf_i+0x174>
 8008ed4:	0659      	lsls	r1, r3, #25
 8008ed6:	bf48      	it	mi
 8008ed8:	b2b6      	uxthmi	r6, r6
 8008eda:	e7e6      	b.n	8008eaa <_printf_i+0x182>
 8008edc:	4615      	mov	r5, r2
 8008ede:	e7bb      	b.n	8008e58 <_printf_i+0x130>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	6826      	ldr	r6, [r4, #0]
 8008ee4:	1d18      	adds	r0, r3, #4
 8008ee6:	6961      	ldr	r1, [r4, #20]
 8008ee8:	6028      	str	r0, [r5, #0]
 8008eea:	0635      	lsls	r5, r6, #24
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	d501      	bpl.n	8008ef4 <_printf_i+0x1cc>
 8008ef0:	6019      	str	r1, [r3, #0]
 8008ef2:	e002      	b.n	8008efa <_printf_i+0x1d2>
 8008ef4:	0670      	lsls	r0, r6, #25
 8008ef6:	d5fb      	bpl.n	8008ef0 <_printf_i+0x1c8>
 8008ef8:	8019      	strh	r1, [r3, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	4615      	mov	r5, r2
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	e7ba      	b.n	8008e78 <_printf_i+0x150>
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	2100      	movs	r1, #0
 8008f06:	1d1a      	adds	r2, r3, #4
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	681d      	ldr	r5, [r3, #0]
 8008f0c:	6862      	ldr	r2, [r4, #4]
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 fa9e 	bl	8009450 <memchr>
 8008f14:	b108      	cbz	r0, 8008f1a <_printf_i+0x1f2>
 8008f16:	1b40      	subs	r0, r0, r5
 8008f18:	6060      	str	r0, [r4, #4]
 8008f1a:	6863      	ldr	r3, [r4, #4]
 8008f1c:	6123      	str	r3, [r4, #16]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f24:	e7a8      	b.n	8008e78 <_printf_i+0x150>
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	462a      	mov	r2, r5
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	47d0      	blx	sl
 8008f30:	3001      	adds	r0, #1
 8008f32:	d0ab      	beq.n	8008e8c <_printf_i+0x164>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	079b      	lsls	r3, r3, #30
 8008f38:	d413      	bmi.n	8008f62 <_printf_i+0x23a>
 8008f3a:	68e0      	ldr	r0, [r4, #12]
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	4298      	cmp	r0, r3
 8008f40:	bfb8      	it	lt
 8008f42:	4618      	movlt	r0, r3
 8008f44:	e7a4      	b.n	8008e90 <_printf_i+0x168>
 8008f46:	2301      	movs	r3, #1
 8008f48:	4632      	mov	r2, r6
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	47d0      	blx	sl
 8008f50:	3001      	adds	r0, #1
 8008f52:	d09b      	beq.n	8008e8c <_printf_i+0x164>
 8008f54:	3501      	adds	r5, #1
 8008f56:	68e3      	ldr	r3, [r4, #12]
 8008f58:	9903      	ldr	r1, [sp, #12]
 8008f5a:	1a5b      	subs	r3, r3, r1
 8008f5c:	42ab      	cmp	r3, r5
 8008f5e:	dcf2      	bgt.n	8008f46 <_printf_i+0x21e>
 8008f60:	e7eb      	b.n	8008f3a <_printf_i+0x212>
 8008f62:	2500      	movs	r5, #0
 8008f64:	f104 0619 	add.w	r6, r4, #25
 8008f68:	e7f5      	b.n	8008f56 <_printf_i+0x22e>
 8008f6a:	bf00      	nop
 8008f6c:	08009761 	.word	0x08009761
 8008f70:	08009772 	.word	0x08009772

08008f74 <_sbrk_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	2300      	movs	r3, #0
 8008f78:	4d05      	ldr	r5, [pc, #20]	; (8008f90 <_sbrk_r+0x1c>)
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	602b      	str	r3, [r5, #0]
 8008f80:	f7f8 f9e2 	bl	8001348 <_sbrk>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_sbrk_r+0x1a>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_sbrk_r+0x1a>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	200003d0 	.word	0x200003d0

08008f94 <__sread>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	460c      	mov	r4, r1
 8008f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9c:	f000 fabe 	bl	800951c <_read_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	bfab      	itete	ge
 8008fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fa8:	181b      	addge	r3, r3, r0
 8008faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fae:	bfac      	ite	ge
 8008fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fb2:	81a3      	strhlt	r3, [r4, #12]
 8008fb4:	bd10      	pop	{r4, pc}

08008fb6 <__swrite>:
 8008fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fba:	461f      	mov	r7, r3
 8008fbc:	898b      	ldrh	r3, [r1, #12]
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	05db      	lsls	r3, r3, #23
 8008fc4:	4616      	mov	r6, r2
 8008fc6:	d505      	bpl.n	8008fd4 <__swrite+0x1e>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd0:	f000 f9c6 	bl	8009360 <_lseek_r>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	463b      	mov	r3, r7
 8008fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	f000 b869 	b.w	80090c0 <_write_r>

08008fee <__sseek>:
 8008fee:	b510      	push	{r4, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff6:	f000 f9b3 	bl	8009360 <_lseek_r>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	bf15      	itete	ne
 8009000:	6560      	strne	r0, [r4, #84]	; 0x54
 8009002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800900a:	81a3      	strheq	r3, [r4, #12]
 800900c:	bf18      	it	ne
 800900e:	81a3      	strhne	r3, [r4, #12]
 8009010:	bd10      	pop	{r4, pc}

08009012 <__sclose>:
 8009012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009016:	f000 b8d3 	b.w	80091c0 <_close_r>
	...

0800901c <__swbuf_r>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	460e      	mov	r6, r1
 8009020:	4614      	mov	r4, r2
 8009022:	4605      	mov	r5, r0
 8009024:	b118      	cbz	r0, 800902e <__swbuf_r+0x12>
 8009026:	6983      	ldr	r3, [r0, #24]
 8009028:	b90b      	cbnz	r3, 800902e <__swbuf_r+0x12>
 800902a:	f7ff fb7f 	bl	800872c <__sinit>
 800902e:	4b21      	ldr	r3, [pc, #132]	; (80090b4 <__swbuf_r+0x98>)
 8009030:	429c      	cmp	r4, r3
 8009032:	d12b      	bne.n	800908c <__swbuf_r+0x70>
 8009034:	686c      	ldr	r4, [r5, #4]
 8009036:	69a3      	ldr	r3, [r4, #24]
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	071a      	lsls	r2, r3, #28
 800903e:	d52f      	bpl.n	80090a0 <__swbuf_r+0x84>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	b36b      	cbz	r3, 80090a0 <__swbuf_r+0x84>
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	b2f6      	uxtb	r6, r6
 8009048:	6820      	ldr	r0, [r4, #0]
 800904a:	4637      	mov	r7, r6
 800904c:	1ac0      	subs	r0, r0, r3
 800904e:	6963      	ldr	r3, [r4, #20]
 8009050:	4283      	cmp	r3, r0
 8009052:	dc04      	bgt.n	800905e <__swbuf_r+0x42>
 8009054:	4621      	mov	r1, r4
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f946 	bl	80092e8 <_fflush_r>
 800905c:	bb30      	cbnz	r0, 80090ac <__swbuf_r+0x90>
 800905e:	68a3      	ldr	r3, [r4, #8]
 8009060:	3001      	adds	r0, #1
 8009062:	3b01      	subs	r3, #1
 8009064:	60a3      	str	r3, [r4, #8]
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	701e      	strb	r6, [r3, #0]
 800906e:	6963      	ldr	r3, [r4, #20]
 8009070:	4283      	cmp	r3, r0
 8009072:	d004      	beq.n	800907e <__swbuf_r+0x62>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	07db      	lsls	r3, r3, #31
 8009078:	d506      	bpl.n	8009088 <__swbuf_r+0x6c>
 800907a:	2e0a      	cmp	r6, #10
 800907c:	d104      	bne.n	8009088 <__swbuf_r+0x6c>
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f931 	bl	80092e8 <_fflush_r>
 8009086:	b988      	cbnz	r0, 80090ac <__swbuf_r+0x90>
 8009088:	4638      	mov	r0, r7
 800908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800908c:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <__swbuf_r+0x9c>)
 800908e:	429c      	cmp	r4, r3
 8009090:	d101      	bne.n	8009096 <__swbuf_r+0x7a>
 8009092:	68ac      	ldr	r4, [r5, #8]
 8009094:	e7cf      	b.n	8009036 <__swbuf_r+0x1a>
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <__swbuf_r+0xa0>)
 8009098:	429c      	cmp	r4, r3
 800909a:	bf08      	it	eq
 800909c:	68ec      	ldreq	r4, [r5, #12]
 800909e:	e7ca      	b.n	8009036 <__swbuf_r+0x1a>
 80090a0:	4621      	mov	r1, r4
 80090a2:	4628      	mov	r0, r5
 80090a4:	f000 f81e 	bl	80090e4 <__swsetup_r>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d0cb      	beq.n	8009044 <__swbuf_r+0x28>
 80090ac:	f04f 37ff 	mov.w	r7, #4294967295
 80090b0:	e7ea      	b.n	8009088 <__swbuf_r+0x6c>
 80090b2:	bf00      	nop
 80090b4:	08009710 	.word	0x08009710
 80090b8:	08009730 	.word	0x08009730
 80090bc:	080096f0 	.word	0x080096f0

080090c0 <_write_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4604      	mov	r4, r0
 80090c4:	4d06      	ldr	r5, [pc, #24]	; (80090e0 <_write_r+0x20>)
 80090c6:	4608      	mov	r0, r1
 80090c8:	4611      	mov	r1, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f7f7 fb62 	bl	8000798 <_write>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_write_r+0x1e>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_write_r+0x1e>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	200003d0 	.word	0x200003d0

080090e4 <__swsetup_r>:
 80090e4:	4b32      	ldr	r3, [pc, #200]	; (80091b0 <__swsetup_r+0xcc>)
 80090e6:	b570      	push	{r4, r5, r6, lr}
 80090e8:	681d      	ldr	r5, [r3, #0]
 80090ea:	4606      	mov	r6, r0
 80090ec:	460c      	mov	r4, r1
 80090ee:	b125      	cbz	r5, 80090fa <__swsetup_r+0x16>
 80090f0:	69ab      	ldr	r3, [r5, #24]
 80090f2:	b913      	cbnz	r3, 80090fa <__swsetup_r+0x16>
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7ff fb19 	bl	800872c <__sinit>
 80090fa:	4b2e      	ldr	r3, [pc, #184]	; (80091b4 <__swsetup_r+0xd0>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	d10f      	bne.n	8009120 <__swsetup_r+0x3c>
 8009100:	686c      	ldr	r4, [r5, #4]
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009108:	0719      	lsls	r1, r3, #28
 800910a:	d42c      	bmi.n	8009166 <__swsetup_r+0x82>
 800910c:	06dd      	lsls	r5, r3, #27
 800910e:	d411      	bmi.n	8009134 <__swsetup_r+0x50>
 8009110:	2309      	movs	r3, #9
 8009112:	6033      	str	r3, [r6, #0]
 8009114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009118:	f04f 30ff 	mov.w	r0, #4294967295
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	e03e      	b.n	800919e <__swsetup_r+0xba>
 8009120:	4b25      	ldr	r3, [pc, #148]	; (80091b8 <__swsetup_r+0xd4>)
 8009122:	429c      	cmp	r4, r3
 8009124:	d101      	bne.n	800912a <__swsetup_r+0x46>
 8009126:	68ac      	ldr	r4, [r5, #8]
 8009128:	e7eb      	b.n	8009102 <__swsetup_r+0x1e>
 800912a:	4b24      	ldr	r3, [pc, #144]	; (80091bc <__swsetup_r+0xd8>)
 800912c:	429c      	cmp	r4, r3
 800912e:	bf08      	it	eq
 8009130:	68ec      	ldreq	r4, [r5, #12]
 8009132:	e7e6      	b.n	8009102 <__swsetup_r+0x1e>
 8009134:	0758      	lsls	r0, r3, #29
 8009136:	d512      	bpl.n	800915e <__swsetup_r+0x7a>
 8009138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800913a:	b141      	cbz	r1, 800914e <__swsetup_r+0x6a>
 800913c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009140:	4299      	cmp	r1, r3
 8009142:	d002      	beq.n	800914a <__swsetup_r+0x66>
 8009144:	4630      	mov	r0, r6
 8009146:	f000 f99d 	bl	8009484 <_free_r>
 800914a:	2300      	movs	r3, #0
 800914c:	6363      	str	r3, [r4, #52]	; 0x34
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	2300      	movs	r3, #0
 8009158:	6063      	str	r3, [r4, #4]
 800915a:	6923      	ldr	r3, [r4, #16]
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f043 0308 	orr.w	r3, r3, #8
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	b94b      	cbnz	r3, 800917e <__swsetup_r+0x9a>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009174:	d003      	beq.n	800917e <__swsetup_r+0x9a>
 8009176:	4621      	mov	r1, r4
 8009178:	4630      	mov	r0, r6
 800917a:	f000 f929 	bl	80093d0 <__smakebuf_r>
 800917e:	89a0      	ldrh	r0, [r4, #12]
 8009180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009184:	f010 0301 	ands.w	r3, r0, #1
 8009188:	d00a      	beq.n	80091a0 <__swsetup_r+0xbc>
 800918a:	2300      	movs	r3, #0
 800918c:	60a3      	str	r3, [r4, #8]
 800918e:	6963      	ldr	r3, [r4, #20]
 8009190:	425b      	negs	r3, r3
 8009192:	61a3      	str	r3, [r4, #24]
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	b943      	cbnz	r3, 80091aa <__swsetup_r+0xc6>
 8009198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800919c:	d1ba      	bne.n	8009114 <__swsetup_r+0x30>
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	0781      	lsls	r1, r0, #30
 80091a2:	bf58      	it	pl
 80091a4:	6963      	ldrpl	r3, [r4, #20]
 80091a6:	60a3      	str	r3, [r4, #8]
 80091a8:	e7f4      	b.n	8009194 <__swsetup_r+0xb0>
 80091aa:	2000      	movs	r0, #0
 80091ac:	e7f7      	b.n	800919e <__swsetup_r+0xba>
 80091ae:	bf00      	nop
 80091b0:	2000004c 	.word	0x2000004c
 80091b4:	08009710 	.word	0x08009710
 80091b8:	08009730 	.word	0x08009730
 80091bc:	080096f0 	.word	0x080096f0

080091c0 <_close_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	2300      	movs	r3, #0
 80091c4:	4d05      	ldr	r5, [pc, #20]	; (80091dc <_close_r+0x1c>)
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	f7f8 f887 	bl	80012de <_close>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_close_r+0x1a>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_close_r+0x1a>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	200003d0 	.word	0x200003d0

080091e0 <__sflush_r>:
 80091e0:	898a      	ldrh	r2, [r1, #12]
 80091e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e6:	4605      	mov	r5, r0
 80091e8:	0710      	lsls	r0, r2, #28
 80091ea:	460c      	mov	r4, r1
 80091ec:	d458      	bmi.n	80092a0 <__sflush_r+0xc0>
 80091ee:	684b      	ldr	r3, [r1, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dc05      	bgt.n	8009200 <__sflush_r+0x20>
 80091f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dc02      	bgt.n	8009200 <__sflush_r+0x20>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009202:	2e00      	cmp	r6, #0
 8009204:	d0f9      	beq.n	80091fa <__sflush_r+0x1a>
 8009206:	2300      	movs	r3, #0
 8009208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800920c:	682f      	ldr	r7, [r5, #0]
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	d032      	beq.n	8009278 <__sflush_r+0x98>
 8009212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	075a      	lsls	r2, r3, #29
 8009218:	d505      	bpl.n	8009226 <__sflush_r+0x46>
 800921a:	6863      	ldr	r3, [r4, #4]
 800921c:	1ac0      	subs	r0, r0, r3
 800921e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009220:	b10b      	cbz	r3, 8009226 <__sflush_r+0x46>
 8009222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009224:	1ac0      	subs	r0, r0, r3
 8009226:	2300      	movs	r3, #0
 8009228:	4602      	mov	r2, r0
 800922a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922c:	4628      	mov	r0, r5
 800922e:	6a21      	ldr	r1, [r4, #32]
 8009230:	47b0      	blx	r6
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	d106      	bne.n	8009246 <__sflush_r+0x66>
 8009238:	6829      	ldr	r1, [r5, #0]
 800923a:	291d      	cmp	r1, #29
 800923c:	d82c      	bhi.n	8009298 <__sflush_r+0xb8>
 800923e:	4a29      	ldr	r2, [pc, #164]	; (80092e4 <__sflush_r+0x104>)
 8009240:	40ca      	lsrs	r2, r1
 8009242:	07d6      	lsls	r6, r2, #31
 8009244:	d528      	bpl.n	8009298 <__sflush_r+0xb8>
 8009246:	2200      	movs	r2, #0
 8009248:	04d9      	lsls	r1, r3, #19
 800924a:	6062      	str	r2, [r4, #4]
 800924c:	6922      	ldr	r2, [r4, #16]
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	d504      	bpl.n	800925c <__sflush_r+0x7c>
 8009252:	1c42      	adds	r2, r0, #1
 8009254:	d101      	bne.n	800925a <__sflush_r+0x7a>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b903      	cbnz	r3, 800925c <__sflush_r+0x7c>
 800925a:	6560      	str	r0, [r4, #84]	; 0x54
 800925c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925e:	602f      	str	r7, [r5, #0]
 8009260:	2900      	cmp	r1, #0
 8009262:	d0ca      	beq.n	80091fa <__sflush_r+0x1a>
 8009264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009268:	4299      	cmp	r1, r3
 800926a:	d002      	beq.n	8009272 <__sflush_r+0x92>
 800926c:	4628      	mov	r0, r5
 800926e:	f000 f909 	bl	8009484 <_free_r>
 8009272:	2000      	movs	r0, #0
 8009274:	6360      	str	r0, [r4, #52]	; 0x34
 8009276:	e7c1      	b.n	80091fc <__sflush_r+0x1c>
 8009278:	6a21      	ldr	r1, [r4, #32]
 800927a:	2301      	movs	r3, #1
 800927c:	4628      	mov	r0, r5
 800927e:	47b0      	blx	r6
 8009280:	1c41      	adds	r1, r0, #1
 8009282:	d1c7      	bne.n	8009214 <__sflush_r+0x34>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0c4      	beq.n	8009214 <__sflush_r+0x34>
 800928a:	2b1d      	cmp	r3, #29
 800928c:	d001      	beq.n	8009292 <__sflush_r+0xb2>
 800928e:	2b16      	cmp	r3, #22
 8009290:	d101      	bne.n	8009296 <__sflush_r+0xb6>
 8009292:	602f      	str	r7, [r5, #0]
 8009294:	e7b1      	b.n	80091fa <__sflush_r+0x1a>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	e7ad      	b.n	80091fc <__sflush_r+0x1c>
 80092a0:	690f      	ldr	r7, [r1, #16]
 80092a2:	2f00      	cmp	r7, #0
 80092a4:	d0a9      	beq.n	80091fa <__sflush_r+0x1a>
 80092a6:	0793      	lsls	r3, r2, #30
 80092a8:	680e      	ldr	r6, [r1, #0]
 80092aa:	600f      	str	r7, [r1, #0]
 80092ac:	bf0c      	ite	eq
 80092ae:	694b      	ldreq	r3, [r1, #20]
 80092b0:	2300      	movne	r3, #0
 80092b2:	eba6 0807 	sub.w	r8, r6, r7
 80092b6:	608b      	str	r3, [r1, #8]
 80092b8:	f1b8 0f00 	cmp.w	r8, #0
 80092bc:	dd9d      	ble.n	80091fa <__sflush_r+0x1a>
 80092be:	4643      	mov	r3, r8
 80092c0:	463a      	mov	r2, r7
 80092c2:	6a21      	ldr	r1, [r4, #32]
 80092c4:	4628      	mov	r0, r5
 80092c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092c8:	47b0      	blx	r6
 80092ca:	2800      	cmp	r0, #0
 80092cc:	dc06      	bgt.n	80092dc <__sflush_r+0xfc>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	e78f      	b.n	80091fc <__sflush_r+0x1c>
 80092dc:	4407      	add	r7, r0
 80092de:	eba8 0800 	sub.w	r8, r8, r0
 80092e2:	e7e9      	b.n	80092b8 <__sflush_r+0xd8>
 80092e4:	20400001 	.word	0x20400001

080092e8 <_fflush_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	690b      	ldr	r3, [r1, #16]
 80092ec:	4605      	mov	r5, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	b913      	cbnz	r3, 80092f8 <_fflush_r+0x10>
 80092f2:	2500      	movs	r5, #0
 80092f4:	4628      	mov	r0, r5
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	b118      	cbz	r0, 8009302 <_fflush_r+0x1a>
 80092fa:	6983      	ldr	r3, [r0, #24]
 80092fc:	b90b      	cbnz	r3, 8009302 <_fflush_r+0x1a>
 80092fe:	f7ff fa15 	bl	800872c <__sinit>
 8009302:	4b14      	ldr	r3, [pc, #80]	; (8009354 <_fflush_r+0x6c>)
 8009304:	429c      	cmp	r4, r3
 8009306:	d11b      	bne.n	8009340 <_fflush_r+0x58>
 8009308:	686c      	ldr	r4, [r5, #4]
 800930a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0ef      	beq.n	80092f2 <_fflush_r+0xa>
 8009312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009314:	07d0      	lsls	r0, r2, #31
 8009316:	d404      	bmi.n	8009322 <_fflush_r+0x3a>
 8009318:	0599      	lsls	r1, r3, #22
 800931a:	d402      	bmi.n	8009322 <_fflush_r+0x3a>
 800931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931e:	f7ff faa3 	bl	8008868 <__retarget_lock_acquire_recursive>
 8009322:	4628      	mov	r0, r5
 8009324:	4621      	mov	r1, r4
 8009326:	f7ff ff5b 	bl	80091e0 <__sflush_r>
 800932a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800932c:	4605      	mov	r5, r0
 800932e:	07da      	lsls	r2, r3, #31
 8009330:	d4e0      	bmi.n	80092f4 <_fflush_r+0xc>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	059b      	lsls	r3, r3, #22
 8009336:	d4dd      	bmi.n	80092f4 <_fflush_r+0xc>
 8009338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933a:	f7ff fa96 	bl	800886a <__retarget_lock_release_recursive>
 800933e:	e7d9      	b.n	80092f4 <_fflush_r+0xc>
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <_fflush_r+0x70>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d101      	bne.n	800934a <_fflush_r+0x62>
 8009346:	68ac      	ldr	r4, [r5, #8]
 8009348:	e7df      	b.n	800930a <_fflush_r+0x22>
 800934a:	4b04      	ldr	r3, [pc, #16]	; (800935c <_fflush_r+0x74>)
 800934c:	429c      	cmp	r4, r3
 800934e:	bf08      	it	eq
 8009350:	68ec      	ldreq	r4, [r5, #12]
 8009352:	e7da      	b.n	800930a <_fflush_r+0x22>
 8009354:	08009710 	.word	0x08009710
 8009358:	08009730 	.word	0x08009730
 800935c:	080096f0 	.word	0x080096f0

08009360 <_lseek_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4604      	mov	r4, r0
 8009364:	4d06      	ldr	r5, [pc, #24]	; (8009380 <_lseek_r+0x20>)
 8009366:	4608      	mov	r0, r1
 8009368:	4611      	mov	r1, r2
 800936a:	2200      	movs	r2, #0
 800936c:	602a      	str	r2, [r5, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	f7f7 ffdc 	bl	800132c <_lseek>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_lseek_r+0x1e>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_lseek_r+0x1e>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	200003d0 	.word	0x200003d0

08009384 <__swhatbuf_r>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	460e      	mov	r6, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	b096      	sub	sp, #88	; 0x58
 800938e:	4614      	mov	r4, r2
 8009390:	2900      	cmp	r1, #0
 8009392:	461d      	mov	r5, r3
 8009394:	da08      	bge.n	80093a8 <__swhatbuf_r+0x24>
 8009396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	602a      	str	r2, [r5, #0]
 800939e:	061a      	lsls	r2, r3, #24
 80093a0:	d410      	bmi.n	80093c4 <__swhatbuf_r+0x40>
 80093a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a6:	e00e      	b.n	80093c6 <__swhatbuf_r+0x42>
 80093a8:	466a      	mov	r2, sp
 80093aa:	f000 f8c9 	bl	8009540 <_fstat_r>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	dbf1      	blt.n	8009396 <__swhatbuf_r+0x12>
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093bc:	425a      	negs	r2, r3
 80093be:	415a      	adcs	r2, r3
 80093c0:	602a      	str	r2, [r5, #0]
 80093c2:	e7ee      	b.n	80093a2 <__swhatbuf_r+0x1e>
 80093c4:	2340      	movs	r3, #64	; 0x40
 80093c6:	2000      	movs	r0, #0
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	b016      	add	sp, #88	; 0x58
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080093d0 <__smakebuf_r>:
 80093d0:	898b      	ldrh	r3, [r1, #12]
 80093d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093d4:	079d      	lsls	r5, r3, #30
 80093d6:	4606      	mov	r6, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	d507      	bpl.n	80093ec <__smakebuf_r+0x1c>
 80093dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	6123      	str	r3, [r4, #16]
 80093e4:	2301      	movs	r3, #1
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	b002      	add	sp, #8
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	ab01      	add	r3, sp, #4
 80093ee:	466a      	mov	r2, sp
 80093f0:	f7ff ffc8 	bl	8009384 <__swhatbuf_r>
 80093f4:	9900      	ldr	r1, [sp, #0]
 80093f6:	4605      	mov	r5, r0
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff fa57 	bl	80088ac <_malloc_r>
 80093fe:	b948      	cbnz	r0, 8009414 <__smakebuf_r+0x44>
 8009400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009404:	059a      	lsls	r2, r3, #22
 8009406:	d4ef      	bmi.n	80093e8 <__smakebuf_r+0x18>
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	f043 0302 	orr.w	r3, r3, #2
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	e7e3      	b.n	80093dc <__smakebuf_r+0xc>
 8009414:	4b0d      	ldr	r3, [pc, #52]	; (800944c <__smakebuf_r+0x7c>)
 8009416:	62b3      	str	r3, [r6, #40]	; 0x28
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	6020      	str	r0, [r4, #0]
 800941c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009420:	6120      	str	r0, [r4, #16]
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	9b00      	ldr	r3, [sp, #0]
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	b15b      	cbz	r3, 8009444 <__smakebuf_r+0x74>
 800942c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009430:	4630      	mov	r0, r6
 8009432:	f000 f897 	bl	8009564 <_isatty_r>
 8009436:	b128      	cbz	r0, 8009444 <__smakebuf_r+0x74>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	89a0      	ldrh	r0, [r4, #12]
 8009446:	4305      	orrs	r5, r0
 8009448:	81a5      	strh	r5, [r4, #12]
 800944a:	e7cd      	b.n	80093e8 <__smakebuf_r+0x18>
 800944c:	080086c5 	.word	0x080086c5

08009450 <memchr>:
 8009450:	b2c9      	uxtb	r1, r1
 8009452:	4402      	add	r2, r0
 8009454:	b510      	push	{r4, lr}
 8009456:	4290      	cmp	r0, r2
 8009458:	4603      	mov	r3, r0
 800945a:	d101      	bne.n	8009460 <memchr+0x10>
 800945c:	2300      	movs	r3, #0
 800945e:	e003      	b.n	8009468 <memchr+0x18>
 8009460:	781c      	ldrb	r4, [r3, #0]
 8009462:	3001      	adds	r0, #1
 8009464:	428c      	cmp	r4, r1
 8009466:	d1f6      	bne.n	8009456 <memchr+0x6>
 8009468:	4618      	mov	r0, r3
 800946a:	bd10      	pop	{r4, pc}

0800946c <__malloc_lock>:
 800946c:	4801      	ldr	r0, [pc, #4]	; (8009474 <__malloc_lock+0x8>)
 800946e:	f7ff b9fb 	b.w	8008868 <__retarget_lock_acquire_recursive>
 8009472:	bf00      	nop
 8009474:	200003c4 	.word	0x200003c4

08009478 <__malloc_unlock>:
 8009478:	4801      	ldr	r0, [pc, #4]	; (8009480 <__malloc_unlock+0x8>)
 800947a:	f7ff b9f6 	b.w	800886a <__retarget_lock_release_recursive>
 800947e:	bf00      	nop
 8009480:	200003c4 	.word	0x200003c4

08009484 <_free_r>:
 8009484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009486:	2900      	cmp	r1, #0
 8009488:	d043      	beq.n	8009512 <_free_r+0x8e>
 800948a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948e:	1f0c      	subs	r4, r1, #4
 8009490:	9001      	str	r0, [sp, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	bfb8      	it	lt
 8009496:	18e4      	addlt	r4, r4, r3
 8009498:	f7ff ffe8 	bl	800946c <__malloc_lock>
 800949c:	4a1e      	ldr	r2, [pc, #120]	; (8009518 <_free_r+0x94>)
 800949e:	9801      	ldr	r0, [sp, #4]
 80094a0:	6813      	ldr	r3, [r2, #0]
 80094a2:	b933      	cbnz	r3, 80094b2 <_free_r+0x2e>
 80094a4:	6063      	str	r3, [r4, #4]
 80094a6:	6014      	str	r4, [r2, #0]
 80094a8:	b003      	add	sp, #12
 80094aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ae:	f7ff bfe3 	b.w	8009478 <__malloc_unlock>
 80094b2:	42a3      	cmp	r3, r4
 80094b4:	d908      	bls.n	80094c8 <_free_r+0x44>
 80094b6:	6825      	ldr	r5, [r4, #0]
 80094b8:	1961      	adds	r1, r4, r5
 80094ba:	428b      	cmp	r3, r1
 80094bc:	bf01      	itttt	eq
 80094be:	6819      	ldreq	r1, [r3, #0]
 80094c0:	685b      	ldreq	r3, [r3, #4]
 80094c2:	1949      	addeq	r1, r1, r5
 80094c4:	6021      	streq	r1, [r4, #0]
 80094c6:	e7ed      	b.n	80094a4 <_free_r+0x20>
 80094c8:	461a      	mov	r2, r3
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	b10b      	cbz	r3, 80094d2 <_free_r+0x4e>
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	d9fa      	bls.n	80094c8 <_free_r+0x44>
 80094d2:	6811      	ldr	r1, [r2, #0]
 80094d4:	1855      	adds	r5, r2, r1
 80094d6:	42a5      	cmp	r5, r4
 80094d8:	d10b      	bne.n	80094f2 <_free_r+0x6e>
 80094da:	6824      	ldr	r4, [r4, #0]
 80094dc:	4421      	add	r1, r4
 80094de:	1854      	adds	r4, r2, r1
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	42a3      	cmp	r3, r4
 80094e4:	d1e0      	bne.n	80094a8 <_free_r+0x24>
 80094e6:	681c      	ldr	r4, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	4421      	add	r1, r4
 80094ec:	6053      	str	r3, [r2, #4]
 80094ee:	6011      	str	r1, [r2, #0]
 80094f0:	e7da      	b.n	80094a8 <_free_r+0x24>
 80094f2:	d902      	bls.n	80094fa <_free_r+0x76>
 80094f4:	230c      	movs	r3, #12
 80094f6:	6003      	str	r3, [r0, #0]
 80094f8:	e7d6      	b.n	80094a8 <_free_r+0x24>
 80094fa:	6825      	ldr	r5, [r4, #0]
 80094fc:	1961      	adds	r1, r4, r5
 80094fe:	428b      	cmp	r3, r1
 8009500:	bf02      	ittt	eq
 8009502:	6819      	ldreq	r1, [r3, #0]
 8009504:	685b      	ldreq	r3, [r3, #4]
 8009506:	1949      	addeq	r1, r1, r5
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	bf08      	it	eq
 800950c:	6021      	streq	r1, [r4, #0]
 800950e:	6054      	str	r4, [r2, #4]
 8009510:	e7ca      	b.n	80094a8 <_free_r+0x24>
 8009512:	b003      	add	sp, #12
 8009514:	bd30      	pop	{r4, r5, pc}
 8009516:	bf00      	nop
 8009518:	200003c8 	.word	0x200003c8

0800951c <_read_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4604      	mov	r4, r0
 8009520:	4d06      	ldr	r5, [pc, #24]	; (800953c <_read_r+0x20>)
 8009522:	4608      	mov	r0, r1
 8009524:	4611      	mov	r1, r2
 8009526:	2200      	movs	r2, #0
 8009528:	602a      	str	r2, [r5, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	f7f7 feba 	bl	80012a4 <_read>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_read_r+0x1e>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_read_r+0x1e>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	200003d0 	.word	0x200003d0

08009540 <_fstat_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	2300      	movs	r3, #0
 8009544:	4d06      	ldr	r5, [pc, #24]	; (8009560 <_fstat_r+0x20>)
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	f7f7 fed2 	bl	80012f6 <_fstat>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d102      	bne.n	800955c <_fstat_r+0x1c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	b103      	cbz	r3, 800955c <_fstat_r+0x1c>
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	200003d0 	.word	0x200003d0

08009564 <_isatty_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	2300      	movs	r3, #0
 8009568:	4d05      	ldr	r5, [pc, #20]	; (8009580 <_isatty_r+0x1c>)
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f7 fed1 	bl	8001316 <_isatty>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_isatty_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_isatty_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	200003d0 	.word	0x200003d0

08009584 <_init>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr

08009590 <_fini>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr
