
DCMI_test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b260  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001728  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cbc0  0800cbc0  0001cbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cbc4  0800cbc4  0001cbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a5  20000000  0800cbc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00026590  200000a8  0800cc6d  000200a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20026638  0800cc6d  00026638  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e280  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003d55  00000000  00000000  0003e35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000017c0  00000000  00000000  000420b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001618  00000000  00000000  00043870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034ff2  00000000  00000000  00044e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c4d8  00000000  00000000  00079e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013dc8a  00000000  00000000  00096352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d3fdc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006208  00000000  00000000  001d402c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000a8 	.word	0x200000a8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b480 	.word	0x0800b480

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000ac 	.word	0x200000ac
 8000274:	0800b480 	.word	0x0800b480

08000278 <MX_DCMIQueue_Config>:
  * @brief  DMA Linked-list DCMIQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DCMIQueue_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b09c      	sub	sp, #112	; 0x70
 800027c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800027e:	2300      	movs	r3, #0
 8000280:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000284:	2322      	movs	r3, #34	; 0x22
 8000286:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8000288:	2356      	movs	r3, #86	; 0x56
 800028a:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000298:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800029c:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80002a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002a6:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80002a8:	2301      	movs	r3, #1
 80002aa:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80002b4:	2300      	movs	r3, #0
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80002cc:	2300      	movs	r3, #0
 80002ce:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80002d4:	2300      	movs	r3, #0
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMINode1 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode1);
 80002e4:	463b      	mov	r3, r7
 80002e6:	491f      	ldr	r1, [pc, #124]	; (8000364 <MX_DCMIQueue_Config+0xec>)
 80002e8:	4618      	mov	r0, r3
 80002ea:	f007 fb9d 	bl	8007a28 <HAL_DMAEx_List_BuildNode>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80002f6:	4313      	orrs	r3, r2
 80002f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode1 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode1);
 80002fc:	4919      	ldr	r1, [pc, #100]	; (8000364 <MX_DCMIQueue_Config+0xec>)
 80002fe:	481a      	ldr	r0, [pc, #104]	; (8000368 <MX_DCMIQueue_Config+0xf0>)
 8000300:	f007 fba8 	bl	8007a54 <HAL_DMAEx_List_InsertNode_Tail>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800030c:	4313      	orrs	r3, r2
 800030e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMINode2 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode2);
 8000312:	463b      	mov	r3, r7
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <MX_DCMIQueue_Config+0xf4>)
 8000316:	4618      	mov	r0, r3
 8000318:	f007 fb86 	bl	8007a28 <HAL_DMAEx_List_BuildNode>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000324:	4313      	orrs	r3, r2
 8000326:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode2 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode2);
 800032a:	4910      	ldr	r1, [pc, #64]	; (800036c <MX_DCMIQueue_Config+0xf4>)
 800032c:	480e      	ldr	r0, [pc, #56]	; (8000368 <MX_DCMIQueue_Config+0xf0>)
 800032e:	f007 fb91 	bl	8007a54 <HAL_DMAEx_List_InsertNode_Tail>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800033a:	4313      	orrs	r3, r2
 800033c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&DCMIQueue, &DCMINode1);
 8000340:	4908      	ldr	r1, [pc, #32]	; (8000364 <MX_DCMIQueue_Config+0xec>)
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <MX_DCMIQueue_Config+0xf0>)
 8000344:	f007 fbfe 	bl	8007b44 <HAL_DMAEx_List_SetCircularModeConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	461a      	mov	r2, r3
 800034c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000350:	4313      	orrs	r3, r2
 8000352:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8000356:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800035a:	4618      	mov	r0, r3
 800035c:	3770      	adds	r7, #112	; 0x70
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200000c4 	.word	0x200000c4
 8000368:	200000e8 	.word	0x200000e8
 800036c:	20000100 	.word	0x20000100

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000376:	f006 f88f 	bl	8006498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037a:	f000 f8a7 	bl	80004cc <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800037e:	f000 f901 	bl	8000584 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */


  /*##-2- LCD configuration  #################################################*/
  /* LCD initialization and display enable*/
  BSP_LCD_Init(0,LCD_ORIENTATION_LANDSCAPE);
 8000382:	2101      	movs	r1, #1
 8000384:	2000      	movs	r0, #0
 8000386:	f005 fb9b 	bl	8005ac0 <BSP_LCD_Init>
  BSP_LCD_DisplayOn(0);
 800038a:	2000      	movs	r0, #0
 800038c:	f005 fbc0 	bl	8005b10 <BSP_LCD_DisplayOn>

  Example_Description();
 8000390:	f000 fdf6 	bl	8000f80 <Example_Description>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f000 fa1e 	bl	80007d4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000398:	f000 f956 	bl	8000648 <MX_GPDMA1_Init>
  MX_DCMI_Init();
 800039c:	f000 f902 	bl	80005a4 <MX_DCMI_Init>
  MX_ICACHE_Init();
 80003a0:	f000 f99c 	bl	80006dc <MX_ICACHE_Init>
  MX_FMC_Init();
 80003a4:	f000 f9ae 	bl	8000704 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  /* Configure the MPU attributes for SRAM */
  MPU_Config();
 80003a8:	f000 fcee 	bl	8000d88 <MPU_Config>

    /*##-1- LEDs and User Button initialization  #################################################*/
  BSP_LED_Init(LED5);
 80003ac:	2000      	movs	r0, #0
 80003ae:	f004 fc2d 	bl	8004c0c <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80003b2:	2001      	movs	r0, #1
 80003b4:	f004 fc2a 	bl	8004c0c <BSP_LED_Init>
  MX_DCMIQueue_Config();
 80003b8:	f7ff ff5e 	bl	8000278 <MX_DCMIQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &DCMIQueue);
 80003bc:	4937      	ldr	r1, [pc, #220]	; (800049c <main+0x12c>)
 80003be:	4838      	ldr	r0, [pc, #224]	; (80004a0 <main+0x130>)
 80003c0:	f007 fc2e 	bl	8007c20 <HAL_DMAEx_List_LinkQ>
  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 80003c4:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <main+0x134>)
 80003c6:	4a36      	ldr	r2, [pc, #216]	; (80004a0 <main+0x130>)
 80003c8:	649a      	str	r2, [r3, #72]	; 0x48
 80003ca:	4b35      	ldr	r3, [pc, #212]	; (80004a0 <main+0x130>)
 80003cc:	4a35      	ldr	r2, [pc, #212]	; (80004a4 <main+0x134>)
 80003ce:	65da      	str	r2, [r3, #92]	; 0x5c
  /*##-4- Camera Initialization ############################*/
  /* Initialize the Camera in QVGA mode */
  if(OV5640_Config() != 0)
 80003d0:	f000 fd18 	bl	8000e04 <OV5640_Config>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <main+0x6e>
  {
    Error_Handler();
 80003da:	f000 fe6b 	bl	80010b4 <Error_Handler>
  }

  /* Wait for User button press */
  while (UserButtonPressed != SET);
 80003de:	bf00      	nop
 80003e0:	4b31      	ldr	r3, [pc, #196]	; (80004a8 <main+0x138>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d1fa      	bne.n	80003e0 <main+0x70>

  /* Reset for next operation */
  UserButtonPressed = RESET;
 80003ea:	4b2f      	ldr	r3, [pc, #188]	; (80004a8 <main+0x138>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
     The LCD frame size is therefore 320 * 240 half-words of (320*240*2) 8-bit long bytes .
     Since the unit of the DMA associated to DCMI IP is with word , the last parameter of
     HAL_DCMI_Start_DMA is set to:
     FRAME_BUFFER_SIZE = ((FRAME_WIDTH*FRAME_HEIGHT)*2)/4, that is (320 * 240 * 2)/4
   */
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)CAMERA_FRAME_BUFFER, FRAME_BUFFER_SIZE);
 80003f0:	4a2e      	ldr	r2, [pc, #184]	; (80004ac <main+0x13c>)
 80003f2:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <main+0x140>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2100      	movs	r1, #0
 80003f8:	482a      	ldr	r0, [pc, #168]	; (80004a4 <main+0x134>)
 80003fa:	f006 fb3f 	bl	8006a7c <HAL_DCMI_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* Display the continuous grap */
	UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80003fe:	482d      	ldr	r0, [pc, #180]	; (80004b4 <main+0x144>)
 8000400:	f000 fe64 	bl	80010cc <UTIL_LCD_SetFuncDriver>
    BSP_LCD_FillRGBRect(0,0,0,(uint8_t *)CAMERA_FRAME_BUFFER,FRAME_WIDTH,FRAME_HEIGHT);
 8000404:	23f0      	movs	r3, #240	; 0xf0
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	4b27      	ldr	r3, [pc, #156]	; (80004ac <main+0x13c>)
 8000410:	2200      	movs	r2, #0
 8000412:	2100      	movs	r1, #0
 8000414:	2000      	movs	r0, #0
 8000416:	f005 fc45 	bl	8005ca4 <BSP_LCD_FillRGBRect>

    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_GRAY);
 800041a:	4827      	ldr	r0, [pc, #156]	; (80004b8 <main+0x148>)
 800041c:	f000 fec0 	bl	80011a0 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8000420:	4826      	ldr	r0, [pc, #152]	; (80004bc <main+0x14c>)
 8000422:	f000 fea9 	bl	8001178 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(0, 5, (uint8_t *)"RGB Format", CENTER_MODE);
 8000426:	2301      	movs	r3, #1
 8000428:	4a25      	ldr	r2, [pc, #148]	; (80004c0 <main+0x150>)
 800042a:	2105      	movs	r1, #5
 800042c:	2000      	movs	r0, #0
 800042e:	f000 ff47 	bl	80012c0 <UTIL_LCD_DisplayStringAt>

    /* for any Press Check whether the Continuous capture should be suspended or resumed */
    while (UserButtonPressed != RESET)
 8000432:	e01f      	b.n	8000474 <main+0x104>
    {
      if(frame_suspended == 1)
 8000434:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <main+0x154>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d10b      	bne.n	8000454 <main+0xe4>
      {
        if(HAL_DCMI_Resume(&hdcmi) != HAL_OK)
 800043c:	4819      	ldr	r0, [pc, #100]	; (80004a4 <main+0x134>)
 800043e:	f006 fd17 	bl	8006e70 <HAL_DCMI_Resume>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <main+0xdc>
        {
          Error_Handler();
 8000448:	f000 fe34 	bl	80010b4 <Error_Handler>
        }
        frame_suspended=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <main+0x154>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	e00c      	b.n	800046e <main+0xfe>
      }
      else
      {
        if(HAL_DCMI_Suspend(&hdcmi) != HAL_OK)
 8000454:	4813      	ldr	r0, [pc, #76]	; (80004a4 <main+0x134>)
 8000456:	f006 fcb3 	bl	8006dc0 <HAL_DCMI_Suspend>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <main+0xf4>
        {
          Error_Handler();
 8000460:	f000 fe28 	bl	80010b4 <Error_Handler>
        }
        frame_suspended++;
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <main+0x154>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <main+0x154>)
 800046c:	6013      	str	r3, [r2, #0]
      }
      UserButtonPressed = RESET;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <main+0x138>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
    while (UserButtonPressed != RESET)
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <main+0x138>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1da      	bne.n	8000434 <main+0xc4>
    }
    /* Check each time for new frame*/
    if(frame_captured != 0)
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <main+0x158>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d006      	beq.n	8000494 <main+0x124>
    {
      frame_captured = 0;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <main+0x158>)
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
      BSP_LED_Toggle(LED5);
 800048c:	2000      	movs	r0, #0
 800048e:	f004 fc71 	bl	8004d74 <BSP_LED_Toggle>
 8000492:	e7b4      	b.n	80003fe <main+0x8e>
    }
    else
    {
      BSP_LED_Off(LED5);
 8000494:	2000      	movs	r0, #0
 8000496:	f004 fc3f 	bl	8004d18 <BSP_LED_Off>
	UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800049a:	e7b0      	b.n	80003fe <main+0x8e>
 800049c:	200000e8 	.word	0x200000e8
 80004a0:	20000174 	.word	0x20000174
 80004a4:	20000124 	.word	0x20000124
 80004a8:	20025a54 	.word	0x20025a54
 80004ac:	2000024c 	.word	0x2000024c
 80004b0:	20000000 	.word	0x20000000
 80004b4:	0800cb14 	.word	0x0800cb14
 80004b8:	ff808080 	.word	0xff808080
 80004bc:	ffff0000 	.word	0xffff0000
 80004c0:	0800b498 	.word	0x0800b498
 80004c4:	20000244 	.word	0x20000244
 80004c8:	20000248 	.word	0x20000248

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09e      	sub	sp, #120	; 0x78
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2260      	movs	r2, #96	; 0x60
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f00a ffc8 	bl	800b470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]
 80004ee:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80004f4:	f009 f9dc 	bl	80098b0 <HAL_PWREx_ControlVoltageScaling>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80004fe:	f000 fdd9 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000502:	2310      	movs	r3, #16
 8000504:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000506:	2301      	movs	r3, #1
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800050a:	2310      	movs	r3, #16
 800050c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800050e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000512:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000514:	2302      	movs	r3, #2
 8000516:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000518:	2301      	movs	r3, #1
 800051a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000520:	2301      	movs	r3, #1
 8000522:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000524:	2350      	movs	r3, #80	; 0x50
 8000526:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000528:	2304      	movs	r3, #4
 800052a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800052c:	2302      	movs	r3, #2
 800052e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000530:	2302      	movs	r3, #2
 8000532:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000534:	2300      	movs	r3, #0
 8000536:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	4618      	mov	r0, r3
 8000542:	f009 fab1 	bl	8009aa8 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800054c:	f000 fdb2 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	231f      	movs	r3, #31
 8000552:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	2303      	movs	r3, #3
 8000556:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f00a f977 	bl	800a860 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000578:	f000 fd9c 	bl	80010b4 <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3778      	adds	r7, #120	; 0x78
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000588:	f009 fa6e 	bl	8009a68 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800058c:	f009 fa7c 	bl	8009a88 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000590:	2002      	movs	r0, #2
 8000592:	f009 fa19 	bl	80099c8 <HAL_PWREx_ConfigSupply>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800059c:	f000 fd8a 	bl	80010b4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <MX_DCMI_Init+0x98>)
 80005aa:	4a25      	ldr	r2, [pc, #148]	; (8000640 <MX_DCMI_Init+0x9c>)
 80005ac:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_EMBEDDED;
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_DCMI_Init+0x98>)
 80005b0:	2210      	movs	r2, #16
 80005b2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_DCMI_Init+0x98>)
 80005b6:	2220      	movs	r2, #32
 80005b8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <MX_DCMI_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_DCMI_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.SyncroCode.FrameEndCode = 0xF3;
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_DCMI_Init+0x98>)
 80005c8:	22f3      	movs	r2, #243	; 0xf3
 80005ca:	77da      	strb	r2, [r3, #31]
  hdcmi.Init.SyncroCode.FrameStartCode = 0xF4;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_DCMI_Init+0x98>)
 80005ce:	22f4      	movs	r2, #244	; 0xf4
 80005d0:	771a      	strb	r2, [r3, #28]
  hdcmi.Init.SyncroCode.LineStartCode = 0xF2;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_DCMI_Init+0x98>)
 80005d4:	22f2      	movs	r2, #242	; 0xf2
 80005d6:	775a      	strb	r2, [r3, #29]
  hdcmi.Init.SyncroCode.LineEndCode = 0xF1;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_DCMI_Init+0x98>)
 80005da:	22f1      	movs	r2, #241	; 0xf1
 80005dc:	779a      	strb	r2, [r3, #30]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_DCMI_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_DCMI_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_DCMI_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_DCMI_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_DCMI_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <MX_DCMI_Init+0x98>)
 80005fe:	f006 f9c3 	bl	8006988 <HAL_DCMI_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_DCMI_Init+0x68>
  {
    Error_Handler();
 8000608:	f000 fd54 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */
  SyncUnmask.FrameEndUnmask    = 0xFF;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_DCMI_Init+0xa0>)
 800060e:	22ff      	movs	r2, #255	; 0xff
 8000610:	70da      	strb	r2, [r3, #3]
  SyncUnmask.FrameStartUnmask  = 0xFF;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_DCMI_Init+0xa0>)
 8000614:	22ff      	movs	r2, #255	; 0xff
 8000616:	701a      	strb	r2, [r3, #0]
  SyncUnmask.LineEndUnmask     = 0xFF;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_DCMI_Init+0xa0>)
 800061a:	22ff      	movs	r2, #255	; 0xff
 800061c:	709a      	strb	r2, [r3, #2]
  SyncUnmask.LineStartUnmask   = 0xFF;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_DCMI_Init+0xa0>)
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	705a      	strb	r2, [r3, #1]
  if(HAL_DCMI_ConfigSyncUnmask(&hdcmi,&SyncUnmask) != HAL_OK)
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <MX_DCMI_Init+0xa0>)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_DCMI_Init+0x98>)
 8000628:	f006 fcfe 	bl	8007028 <HAL_DCMI_ConfigSyncUnmask>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_DCMI_Init+0x92>
  {
    Error_Handler();
 8000632:	f000 fd3f 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE END DCMI_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000124 	.word	0x20000124
 8000640:	4202c000 	.word	0x4202c000
 8000644:	20025a50 	.word	0x20025a50

08000648 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_GPDMA1_Init+0x88>)
 8000650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <MX_GPDMA1_Init+0x88>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_GPDMA1_Init+0x88>)
 8000660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2054      	movs	r0, #84	; 0x54
 8000672:	f006 f894 	bl	800679e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8000676:	2054      	movs	r0, #84	; 0x54
 8000678:	f006 f8ab 	bl	80067d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <MX_GPDMA1_Init+0x90>)
 8000680:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 8000684:	2200      	movs	r2, #0
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 8000690:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 8000698:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800069c:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 80006a0:	2281      	movs	r2, #129	; 0x81
 80006a2:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 80006a6:	f006 fffd 	bl	80076a4 <HAL_DMAEx_List_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 80006b0:	f000 fd00 	bl	80010b4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80006b4:	2110      	movs	r1, #16
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <MX_GPDMA1_Init+0x8c>)
 80006b8:	f006 ff92 	bl	80075e0 <HAL_DMA_ConfigChannelAttributes>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 80006c2:	f000 fcf7 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	46020c00 	.word	0x46020c00
 80006d4:	20000174 	.word	0x20000174
 80006d8:	40020650 	.word	0x40020650

080006dc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80006e0:	2000      	movs	r0, #0
 80006e2:	f009 f8b5 	bl	8009850 <HAL_ICACHE_ConfigAssociativityMode>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80006ec:	f000 fce2 	bl	80010b4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006f0:	f009 f8ce 	bl	8009890 <HAL_ICACHE_Enable>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80006fa:	f000 fcdb 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f00a fead 	bl	800b470 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000718:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <MX_FMC_Init+0xc8>)
 800071a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_FMC_Init+0xc4>)
 800071e:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_FMC_Init+0xcc>)
 8000720:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <MX_FMC_Init+0xc4>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000736:	2210      	movs	r2, #16
 8000738:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_FMC_Init+0xc4>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_FMC_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_FMC_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_FMC_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_FMC_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_FMC_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 800078a:	230f      	movs	r3, #15
 800078c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800078e:	230f      	movs	r3, #15
 8000790:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000792:	23ff      	movs	r3, #255	; 0xff
 8000794:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800079a:	230f      	movs	r3, #15
 800079c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800079e:	2310      	movs	r3, #16
 80007a0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80007a2:	2311      	movs	r3, #17
 80007a4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_FMC_Init+0xc4>)
 80007b2:	f00a fc03 	bl	800afbc <HAL_SRAM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 80007bc:	f000 fc7a 	bl	80010b4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001ec 	.word	0x200001ec
 80007cc:	420d0400 	.word	0x420d0400
 80007d0:	420d0504 	.word	0x420d0504

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ea:	4bbd      	ldr	r3, [pc, #756]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80007ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f0:	4abb      	ldr	r2, [pc, #748]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80007f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007fa:	4bb9      	ldr	r3, [pc, #740]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4bb5      	ldr	r3, [pc, #724]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 800080a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800080e:	4ab4      	ldr	r2, [pc, #720]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000818:	4bb1      	ldr	r3, [pc, #708]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 800081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4bae      	ldr	r3, [pc, #696]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800082c:	4aac      	ldr	r2, [pc, #688]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000836:	4baa      	ldr	r3, [pc, #680]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000844:	4ba6      	ldr	r3, [pc, #664]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800084a:	4aa5      	ldr	r2, [pc, #660]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000854:	4ba2      	ldr	r3, [pc, #648]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b9f      	ldr	r3, [pc, #636]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000868:	4a9d      	ldr	r2, [pc, #628]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000872:	4b9b      	ldr	r3, [pc, #620]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	4b97      	ldr	r3, [pc, #604]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000886:	4a96      	ldr	r2, [pc, #600]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000890:	4b93      	ldr	r3, [pc, #588]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 8000892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	4b90      	ldr	r3, [pc, #576]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008a4:	4a8e      	ldr	r2, [pc, #568]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008ae:	4b8c      	ldr	r3, [pc, #560]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008bc:	4b88      	ldr	r3, [pc, #544]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c2:	4a87      	ldr	r2, [pc, #540]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008cc:	4b84      	ldr	r3, [pc, #528]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008da:	4b81      	ldr	r3, [pc, #516]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008e0:	4a7f      	ldr	r2, [pc, #508]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008ea:	4b7d      	ldr	r3, [pc, #500]	; (8000ae0 <MX_GPIO_Init+0x30c>)
 80008ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008f0:	f003 0320 	and.w	r3, r3, #32
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CAMERA_XSDN_Pin|CAMERA_RSTI_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	210c      	movs	r1, #12
 80008fc:	4879      	ldr	r0, [pc, #484]	; (8000ae4 <MX_GPIO_Init+0x310>)
 80008fe:	f008 f8d9 	bl	8008ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	4878      	ldr	r0, [pc, #480]	; (8000ae8 <MX_GPIO_Init+0x314>)
 8000908:	f008 f8d4 	bl	8008ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	4876      	ldr	r0, [pc, #472]	; (8000aec <MX_GPIO_Init+0x318>)
 8000912:	f008 f8cf 	bl	8008ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091c:	4874      	ldr	r0, [pc, #464]	; (8000af0 <MX_GPIO_Init+0x31c>)
 800091e:	f008 f8c9 	bl	8008ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000928:	4872      	ldr	r0, [pc, #456]	; (8000af4 <MX_GPIO_Init+0x320>)
 800092a:	f008 f8c3 	bl	8008ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC10 PC12 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 800092e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2302      	movs	r3, #2
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000940:	230c      	movs	r3, #12
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	486b      	ldr	r0, [pc, #428]	; (8000af8 <MX_GPIO_Init+0x324>)
 800094c:	f007 fde4 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 IBUS_SENSE_Pin VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|IBUS_SENSE_Pin|VBUS_SENSE_Pin;
 8000950:	f248 0321 	movw	r3, #32801	; 0x8021
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4862      	ldr	r0, [pc, #392]	; (8000af0 <MX_GPIO_Init+0x31c>)
 8000966:	f007 fdd7 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_ACC_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000970:	4b62      	ldr	r3, [pc, #392]	; (8000afc <MX_GPIO_Init+0x328>)
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	485b      	ldr	r0, [pc, #364]	; (8000aec <MX_GPIO_Init+0x318>)
 8000980:	f007 fdca 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000994:	2306      	movs	r3, #6
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4852      	ldr	r0, [pc, #328]	; (8000ae8 <MX_GPIO_Init+0x314>)
 80009a0:	f007 fdba 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80009a4:	2318      	movs	r3, #24
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80009b4:	2303      	movs	r3, #3
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	484a      	ldr	r0, [pc, #296]	; (8000ae8 <MX_GPIO_Init+0x314>)
 80009c0:	f007 fdaa 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c4:	2340      	movs	r3, #64	; 0x40
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009d4:	230d      	movs	r3, #13
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4848      	ldr	r0, [pc, #288]	; (8000b00 <MX_GPIO_Init+0x32c>)
 80009e0:	f007 fd9a 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDCARD_DETECT_Pin;
 80009e4:	2301      	movs	r3, #1
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	4b44      	ldr	r3, [pc, #272]	; (8000afc <MX_GPIO_Init+0x328>)
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDCARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	483b      	ldr	r0, [pc, #236]	; (8000ae4 <MX_GPIO_Init+0x310>)
 80009f8:	f007 fd8e 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009fc:	2310      	movs	r3, #16
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	483b      	ldr	r0, [pc, #236]	; (8000b04 <MX_GPIO_Init+0x330>)
 8000a18:	f007 fd7e 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_PLUG_Pin */
  GPIO_InitStruct.Pin = CAMERA_PLUG_Pin;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	4b36      	ldr	r3, [pc, #216]	; (8000afc <MX_GPIO_Init+0x328>)
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAMERA_PLUG_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4835      	ldr	r0, [pc, #212]	; (8000b08 <MX_GPIO_Init+0x334>)
 8000a32:	f007 fd71 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a36:	2308      	movs	r3, #8
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000a46:	2306      	movs	r3, #6
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482b      	ldr	r0, [pc, #172]	; (8000b00 <MX_GPIO_Init+0x32c>)
 8000a52:	f007 fd61 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_XSDN_Pin CAMERA_RSTI_Pin */
  GPIO_InitStruct.Pin = CAMERA_XSDN_Pin|CAMERA_RSTI_Pin;
 8000a56:	230c      	movs	r3, #12
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481d      	ldr	r0, [pc, #116]	; (8000ae4 <MX_GPIO_Init+0x310>)
 8000a6e:	f007 fd53 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_Pin MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|MFX_IRQ_OUT_Pin;
 8000a72:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_GPIO_Init+0x328>)
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_GPIO_Init+0x324>)
 8000a88:	f007 fd46 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_GPIO_Init+0x328>)
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <MX_GPIO_Init+0x314>)
 8000aa2:	f007 fd39 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <MX_GPIO_Init+0x314>)
 8000abe:	f007 fd2b 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	e016      	b.n	8000b0c <MX_GPIO_Init+0x338>
 8000ade:	bf00      	nop
 8000ae0:	46020c00 	.word	0x46020c00
 8000ae4:	42022000 	.word	0x42022000
 8000ae8:	42020400 	.word	0x42020400
 8000aec:	42021c00 	.word	0x42021c00
 8000af0:	42020000 	.word	0x42020000
 8000af4:	42021400 	.word	0x42021400
 8000af8:	42020800 	.word	0x42020800
 8000afc:	10110000 	.word	0x10110000
 8000b00:	42020c00 	.word	0x42020c00
 8000b04:	42021000 	.word	0x42021000
 8000b08:	42021800 	.word	0x42021800
 8000b0c:	4897      	ldr	r0, [pc, #604]	; (8000d6c <MX_GPIO_Init+0x598>)
 8000b0e:	f007 fd03 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	4891      	ldr	r0, [pc, #580]	; (8000d70 <MX_GPIO_Init+0x59c>)
 8000b2a:	f007 fcf5 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000b2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b40:	2307      	movs	r3, #7
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	488a      	ldr	r0, [pc, #552]	; (8000d74 <MX_GPIO_Init+0x5a0>)
 8000b4c:	f007 fce4 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000b50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b62:	230a      	movs	r3, #10
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4881      	ldr	r0, [pc, #516]	; (8000d74 <MX_GPIO_Init+0x5a0>)
 8000b6e:	f007 fcd3 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b82:	230d      	movs	r3, #13
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	487a      	ldr	r0, [pc, #488]	; (8000d78 <MX_GPIO_Init+0x5a4>)
 8000b8e:	f007 fcc3 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4872      	ldr	r0, [pc, #456]	; (8000d74 <MX_GPIO_Init+0x5a0>)
 8000bac:	f007 fcb4 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	486b      	ldr	r0, [pc, #428]	; (8000d7c <MX_GPIO_Init+0x5a8>)
 8000bce:	f007 fca3 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000bd2:	23c0      	movs	r3, #192	; 0xc0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8000be2:	2309      	movs	r3, #9
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4864      	ldr	r0, [pc, #400]	; (8000d80 <MX_GPIO_Init+0x5ac>)
 8000bee:	f007 fc93 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000c04:	2306      	movs	r3, #6
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	485a      	ldr	r0, [pc, #360]	; (8000d78 <MX_GPIO_Init+0x5a4>)
 8000c10:	f007 fc82 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c14:	2301      	movs	r3, #1
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000c24:	2303      	movs	r3, #3
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4854      	ldr	r0, [pc, #336]	; (8000d80 <MX_GPIO_Init+0x5ac>)
 8000c30:	f007 fc72 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c34:	230e      	movs	r3, #14
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000c44:	230a      	movs	r3, #10
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	484c      	ldr	r0, [pc, #304]	; (8000d80 <MX_GPIO_Init+0x5ac>)
 8000c50:	f007 fc62 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA2 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8000c54:	23cc      	movs	r3, #204	; 0xcc
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000c64:	230a      	movs	r3, #10
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4841      	ldr	r0, [pc, #260]	; (8000d74 <MX_GPIO_Init+0x5a0>)
 8000c70:	f007 fc52 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1;
 8000c74:	2307      	movs	r3, #7
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000c84:	230a      	movs	r3, #10
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	483d      	ldr	r0, [pc, #244]	; (8000d84 <MX_GPIO_Init+0x5b0>)
 8000c90:	f007 fc42 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4834      	ldr	r0, [pc, #208]	; (8000d84 <MX_GPIO_Init+0x5b0>)
 8000cb2:	f007 fc31 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482b      	ldr	r0, [pc, #172]	; (8000d80 <MX_GPIO_Init+0x5ac>)
 8000cd2:	f007 fc21 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4824      	ldr	r0, [pc, #144]	; (8000d84 <MX_GPIO_Init+0x5b0>)
 8000cf4:	f007 fc10 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481d      	ldr	r0, [pc, #116]	; (8000d84 <MX_GPIO_Init+0x5b0>)
 8000d0e:	f007 fc03 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_GPIO_Init+0x5a4>)
 8000d2c:	f007 fbf4 	bl	8008518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8000d30:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8000d42:	2309      	movs	r3, #9
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_GPIO_Init+0x5b0>)
 8000d4e:	f007 fbe3 	bl	8008518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2018      	movs	r0, #24
 8000d58:	f005 fd21 	bl	800679e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000d5c:	2018      	movs	r0, #24
 8000d5e:	f005 fd38 	bl	80067d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d62:	bf00      	nop
 8000d64:	3738      	adds	r7, #56	; 0x38
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	42020c00 	.word	0x42020c00
 8000d70:	42021c00 	.word	0x42021c00
 8000d74:	42020000 	.word	0x42020000
 8000d78:	42021400 	.word	0x42021400
 8000d7c:	42021800 	.word	0x42021800
 8000d80:	42020800 	.word	0x42020800
 8000d84:	42020400 	.word	0x42020400

08000d88 <MPU_Config>:
  * @note   The Base Address is External SRAM
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
  MPU_Attributes_InitTypeDef   attr;
  MPU_Region_InitTypeDef       region;

  /* Disable MPU before perloading and config update */
  HAL_MPU_Disable();
 8000d8e:	f005 fd5b 	bl	8006848 <HAL_MPU_Disable>

  /* Define cacheable memory via MPU */
  attr.Number             = MPU_ATTRIBUTES_NUMBER0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	753b      	strb	r3, [r7, #20]
  attr.Attributes         = 0 ;
 8000d96:	2300      	movs	r3, #0
 8000d98:	757b      	strb	r3, [r7, #21]
  HAL_MPU_ConfigMemoryAttributes(&attr);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 fd72 	bl	8006888 <HAL_MPU_ConfigMemoryAttributes>

  /* BaseAddress-LimitAddress configuration */
  region.Enable           = MPU_REGION_ENABLE;
 8000da4:	2301      	movs	r3, #1
 8000da6:	713b      	strb	r3, [r7, #4]
  region.Number           = MPU_REGION_NUMBER0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	717b      	strb	r3, [r7, #5]
  region.AttributesIndex  = MPU_ATTRIBUTES_NUMBER0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	743b      	strb	r3, [r7, #16]
  region.BaseAddress      = FMC_ADDRESS;
 8000db0:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8000db4:	60bb      	str	r3, [r7, #8]
  region.LimitAddress     = FMC_ADDRESS + REGION_SIZE - 1;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MPU_Config+0x54>)
 8000db8:	60fb      	str	r3, [r7, #12]
  region.AccessPermission = MPU_REGION_ALL_RW;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	747b      	strb	r3, [r7, #17]
  region.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	74bb      	strb	r3, [r7, #18]
  region.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	74fb      	strb	r3, [r7, #19]
  HAL_MPU_ConfigRegion(&region);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f005 fd4f 	bl	800686c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f005 fd1a 	bl	8006808 <HAL_MPU_Enable>
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	78fffffe 	.word	0x78fffffe

08000de0 <HAL_DCMI_FrameEventCallback>:

/**
  * @brief  Camera Frame Event callback.
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  frame_captured++;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_DCMI_FrameEventCallback+0x20>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_DCMI_FrameEventCallback+0x20>)
 8000df0:	6013      	str	r3, [r2, #0]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000248 	.word	0x20000248

08000e04 <OV5640_Config>:
  * @param  None
  * @retval 0   OK
  *         !=0 KO
  */
static uint32_t OV5640_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
  OV5640_IO_t              IOCtx;
  uint32_t                 id;
  uint32_t                 status = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  static OV5640_Object_t   OV5640Obj;
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the Camera driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8000e0e:	2378      	movs	r3, #120	; 0x78
 8000e10:	84bb      	strh	r3, [r7, #36]	; 0x24
  IOCtx.Init        = BSP_I2C2_Init;
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <OV5640_Config+0x158>)
 8000e14:	61fb      	str	r3, [r7, #28]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8000e16:	4b52      	ldr	r3, [pc, #328]	; (8000f60 <OV5640_Config+0x15c>)
 8000e18:	623b      	str	r3, [r7, #32]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg16;
 8000e1a:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <OV5640_Config+0x160>)
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  IOCtx.WriteReg    = BSP_I2C2_WriteReg16;
 8000e1e:	4b52      	ldr	r3, [pc, #328]	; (8000f68 <OV5640_Config+0x164>)
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  IOCtx.GetTick     = BSP_GetTick;
 8000e22:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <OV5640_Config+0x168>)
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30

  /* Reset sensor */
  gpio_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 8000e26:	230c      	movs	r3, #12
 8000e28:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Alternate  = GPIO_AF10_DCMI;
 8000e32:	230a      	movs	r3, #10
 8000e34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	484d      	ldr	r0, [pc, #308]	; (8000f70 <OV5640_Config+0x16c>)
 8000e3c:	f007 fb6c 	bl	8008518 <HAL_GPIO_Init>

  /* Camera sensor RESET sequence */
  /* Assert the camera STANDBY pin (active high)  */
  HAL_GPIO_WritePin(XSDN_PORT, XSDN_PIN, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2108      	movs	r1, #8
 8000e44:	484a      	ldr	r0, [pc, #296]	; (8000f70 <OV5640_Config+0x16c>)
 8000e46:	f007 fe35 	bl	8008ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RSTI_PORT, RSTI_PIN, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4848      	ldr	r0, [pc, #288]	; (8000f70 <OV5640_Config+0x16c>)
 8000e50:	f007 fe30 	bl	8008ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 8000e54:	2064      	movs	r0, #100	; 0x64
 8000e56:	f005 fba3 	bl	80065a0 <HAL_Delay>

  /* De-assert the camera STANDBY pin (active high) */
  HAL_GPIO_WritePin(XSDN_PORT, XSDN_PIN, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	4844      	ldr	r0, [pc, #272]	; (8000f70 <OV5640_Config+0x16c>)
 8000e60:	f007 fe28 	bl	8008ab4 <HAL_GPIO_WritePin>
  HAL_Delay(3);     /* RST de-asserted and XSDN asserted during 3ms */
 8000e64:	2003      	movs	r0, #3
 8000e66:	f005 fb9b 	bl	80065a0 <HAL_Delay>

  /* De-assert the camera RSTI pin (active low) */
  HAL_GPIO_WritePin(RSTI_PORT, RSTI_PIN, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4840      	ldr	r0, [pc, #256]	; (8000f70 <OV5640_Config+0x16c>)
 8000e70:	f007 fe20 	bl	8008ab4 <HAL_GPIO_WritePin>
  HAL_Delay(20);     /* RST de-asserted during 20ms */
 8000e74:	2014      	movs	r0, #20
 8000e76:	f005 fb93 	bl	80065a0 <HAL_Delay>

  /* Verify that the Camera module is plugged in */
  gpio_init_structure.Pin       = CAM_PLUG_PIN;
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(CAM_PLUG_PORT, &gpio_init_structure);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4839      	ldr	r0, [pc, #228]	; (8000f74 <OV5640_Config+0x170>)
 8000e8e:	f007 fb43 	bl	8008518 <HAL_GPIO_Init>

  if(((uint32_t)HAL_GPIO_ReadPin(CAM_PLUG_PORT, CAM_PLUG_PIN) & CAM_PLUG_PIN) == CAM_PLUG_PIN)
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	4837      	ldr	r0, [pc, #220]	; (8000f74 <OV5640_Config+0x170>)
 8000e98:	f007 fdf4 	bl	8008a84 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea6:	d101      	bne.n	8000eac <OV5640_Config+0xa8>
  {
    status = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /**/
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4831      	ldr	r0, [pc, #196]	; (8000f78 <OV5640_Config+0x174>)
 8000eb4:	f003 f8cc 	bl	8004050 <OV5640_RegisterBusIO>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <OV5640_Config+0xc0>
  {
    status = OV5640_ERROR;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /*Read ID*/
  if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482b      	ldr	r0, [pc, #172]	; (8000f78 <OV5640_Config+0x174>)
 8000ecc:	f003 fc4c 	bl	8004768 <OV5640_ReadID>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <OV5640_Config+0xd8>
  {
    status = OV5640_ERROR;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if(id == OV5640_ID)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	f245 6240 	movw	r2, #22080	; 0x5640
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d131      	bne.n	8000f4a <OV5640_Config+0x146>
  {
    /*Initialize*/
    if(OV5640_Init(&OV5640Obj, CAMERA_R320x240, CAMERA_PF_RGB565) != OV5640_OK)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4823      	ldr	r0, [pc, #140]	; (8000f78 <OV5640_Config+0x174>)
 8000eec:	f003 f8f2 	bl	80040d4 <OV5640_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <OV5640_Config+0xf8>
    {
      status = OV5640_ERROR;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Enable and set SynchroCodes CCIR to the camera Module */
    pSyncroCodes.FrameStartCode = 0xF4;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <OV5640_Config+0x178>)
 8000efe:	22f4      	movs	r2, #244	; 0xf4
 8000f00:	701a      	strb	r2, [r3, #0]
    pSyncroCodes.FrameEndCode   = 0xF3;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <OV5640_Config+0x178>)
 8000f04:	22f3      	movs	r2, #243	; 0xf3
 8000f06:	70da      	strb	r2, [r3, #3]
    pSyncroCodes.LineStartCode  = 0xF2;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <OV5640_Config+0x178>)
 8000f0a:	22f2      	movs	r2, #242	; 0xf2
 8000f0c:	705a      	strb	r2, [r3, #1]
    pSyncroCodes.LineEndCode    = 0xF1;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <OV5640_Config+0x178>)
 8000f10:	22f1      	movs	r2, #241	; 0xf1
 8000f12:	709a      	strb	r2, [r3, #2]

    if(OV5640_EmbeddedSynchroConfig(&OV5640Obj,&pSyncroCodes) !=OV5640_OK)
 8000f14:	4919      	ldr	r1, [pc, #100]	; (8000f7c <OV5640_Config+0x178>)
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <OV5640_Config+0x174>)
 8000f18:	f003 fd62 	bl	80049e0 <OV5640_EmbeddedSynchroConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <OV5640_Config+0x124>
    {
      status = OV5640_ERROR;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
    }

    HAL_Delay(100);
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f005 fb39 	bl	80065a0 <HAL_Delay>
    /* Disable Flip and mirror effect */
    if(OV5640_MirrorFlipConfig(&OV5640Obj, OV5640_MIRROR_FLIP_NONE)!= OV5640_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4811      	ldr	r0, [pc, #68]	; (8000f78 <OV5640_Config+0x174>)
 8000f32:	f003 fc6c 	bl	800480e <OV5640_MirrorFlipConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <OV5640_Config+0x13e>
    {
      status = OV5640_ERROR;
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
    }

    HAL_Delay(100);
 8000f42:	2064      	movs	r0, #100	; 0x64
 8000f44:	f005 fb2c 	bl	80065a0 <HAL_Delay>
 8000f48:	e002      	b.n	8000f50 <OV5640_Config+0x14c>
  }
  else
  {
    status = OV5640_ERROR;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return status;
 8000f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08004dd1 	.word	0x08004dd1
 8000f60:	08004e45 	.word	0x08004e45
 8000f64:	08005025 	.word	0x08005025
 8000f68:	08004fc9 	.word	0x08004fc9
 8000f6c:	08005081 	.word	0x08005081
 8000f70:	42022000 	.word	0x42022000
 8000f74:	42021800 	.word	0x42021800
 8000f78:	20025a58 	.word	0x20025a58
 8000f7c:	20025a4c 	.word	0x20025a4c

08000f80 <Example_Description>:
  * @brief  Display main example messages
  * @param  None
  * @retval None
  */
static void Example_Description(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af02      	add	r7, sp, #8
  /* Set GUI functions */
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000f86:	4835      	ldr	r0, [pc, #212]	; (800105c <Example_Description+0xdc>)
 8000f88:	f000 f8a0 	bl	80010cc <UTIL_LCD_SetFuncDriver>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f90:	f000 f94a 	bl	8001228 <UTIL_LCD_Clear>

  /* Set font */
  UTIL_LCD_SetFont(&Font16);
 8000f94:	4832      	ldr	r0, [pc, #200]	; (8001060 <Example_Description+0xe0>)
 8000f96:	f000 f917 	bl	80011c8 <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9e:	f000 f943 	bl	8001228 <UTIL_LCD_Clear>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa6:	f000 f8e7 	bl	8001178 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_DARKBLUE);
 8000faa:	482e      	ldr	r0, [pc, #184]	; (8001064 <Example_Description+0xe4>)
 8000fac:	f000 f8f8 	bl	80011a0 <UTIL_LCD_SetBackColor>

  /* Display LCD messages */
  UTIL_LCD_FillRect(0, 5, 320, 80, UTIL_LCD_COLOR_DARKBLUE);
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <Example_Description+0xe4>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2350      	movs	r3, #80	; 0x50
 8000fb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 fa2d 	bl	800141c <UTIL_LCD_FillRect>
  UTIL_LCD_DisplayStringAt(0, 5, (uint8_t *)" Continuous Capture in ", CENTER_MODE);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <Example_Description+0xe8>)
 8000fc6:	2105      	movs	r1, #5
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f979 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 20, (uint8_t *)"Embedded Synchronization Mode", CENTER_MODE);
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <Example_Description+0xec>)
 8000fd2:	2114      	movs	r1, #20
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 f973 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)" and Suspend-Resume ", CENTER_MODE);
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <Example_Description+0xf0>)
 8000fde:	2123      	movs	r1, #35	; 0x23
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f96d 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 50, (uint8_t *)" example: RGB Format ", CENTER_MODE);
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <Example_Description+0xf4>)
 8000fea:	2132      	movs	r1, #50	; 0x32
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 f967 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <Example_Description+0xf8>)
 8000ff4:	f000 f8e8 	bl	80011c8 <UTIL_LCD_SetFont>
  UTIL_LCD_FillRect(0, 150, 320, 50, UTIL_LCD_COLOR_DARKBLUE);
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <Example_Description+0xe4>)
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2332      	movs	r3, #50	; 0x32
 8000ffe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001002:	2196      	movs	r1, #150	; 0x96
 8001004:	2000      	movs	r0, #0
 8001006:	f000 fa09 	bl	800141c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800100a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100e:	f000 f8b3 	bl	8001178 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_DARKBLUE);
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <Example_Description+0xe4>)
 8001014:	f000 f8c4 	bl	80011a0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"Press USER push-button", CENTER_MODE);
 8001018:	2301      	movs	r3, #1
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <Example_Description+0xfc>)
 800101c:	2196      	movs	r1, #150	; 0x96
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f94e 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 165, (uint8_t *)"to start:", CENTER_MODE);
 8001024:	2301      	movs	r3, #1
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <Example_Description+0x100>)
 8001028:	21a5      	movs	r1, #165	; 0xa5
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f948 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 180, (uint8_t *)"then to Suspend/Resume ", CENTER_MODE);
 8001030:	2301      	movs	r3, #1
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <Example_Description+0x104>)
 8001034:	21b4      	movs	r1, #180	; 0xb4
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f942 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_GRAY);
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <Example_Description+0x108>)
 800103e:	f000 f8af 	bl	80011a0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ORANGE);
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <Example_Description+0x10c>)
 8001044:	f000 f898 	bl	8001178 <UTIL_LCD_SetTextColor>
  UTIL_LCD_DisplayStringAt(0, 210, (uint8_t *)"CREATED BY : JAAFER HOSNI ", CENTER_MODE);
 8001048:	2301      	movs	r3, #1
 800104a:	4a11      	ldr	r2, [pc, #68]	; (8001090 <Example_Description+0x110>)
 800104c:	21d2      	movs	r1, #210	; 0xd2
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f936 	bl	80012c0 <UTIL_LCD_DisplayStringAt>
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	0800cb14 	.word	0x0800cb14
 8001060:	20000004 	.word	0x20000004
 8001064:	ff000080 	.word	0xff000080
 8001068:	0800b4a4 	.word	0x0800b4a4
 800106c:	0800b4bc 	.word	0x0800b4bc
 8001070:	0800b4dc 	.word	0x0800b4dc
 8001074:	0800b4f4 	.word	0x0800b4f4
 8001078:	2000000c 	.word	0x2000000c
 800107c:	0800b50c 	.word	0x0800b50c
 8001080:	0800b524 	.word	0x0800b524
 8001084:	0800b530 	.word	0x0800b530
 8001088:	ff808080 	.word	0xff808080
 800108c:	ffffa500 	.word	0xffffa500
 8001090:	0800b548 	.word	0x0800b548

08001094 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  UserButtonPressed = SET;
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	20025a54 	.word	0x20025a54

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    BSP_LED_Toggle(LED6);
 80010bc:	2001      	movs	r0, #1
 80010be:	f003 fe59 	bl	8004d74 <BSP_LED_Toggle>
    HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f005 fa6c 	bl	80065a0 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 80010c8:	e7f8      	b.n	80010bc <Error_Handler+0x8>
	...

080010cc <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a22      	ldr	r2, [pc, #136]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 80010da:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 80010e2:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 80010ea:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 80010f2:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 80010fa:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 8001102:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 800110a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 8001112:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 800111a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 8001122:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 800112a:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <UTIL_LCD_SetFuncDriver+0x9c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <UTIL_LCD_SetFuncDriver+0x9c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <UTIL_LCD_SetFuncDriver+0xa0>)
 800113e:	4611      	mov	r1, r2
 8001140:	2000      	movs	r0, #0
 8001142:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a09      	ldr	r2, [pc, #36]	; (8001170 <UTIL_LCD_SetFuncDriver+0xa4>)
 800114a:	4611      	mov	r1, r2
 800114c:	2000      	movs	r0, #0
 800114e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <UTIL_LCD_SetFuncDriver+0x98>)
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <UTIL_LCD_SetFuncDriver+0xa8>)
 8001156:	4611      	mov	r1, r2
 8001158:	2000      	movs	r0, #0
 800115a:	4798      	blx	r3
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20025ac0 	.word	0x20025ac0
 8001168:	20025a80 	.word	0x20025a80
 800116c:	20025a94 	.word	0x20025a94
 8001170:	20025a98 	.word	0x20025a98
 8001174:	20025a9c 	.word	0x20025a9c

08001178 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <UTIL_LCD_SetTextColor+0x24>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <UTIL_LCD_SetTextColor+0x24>)
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	4413      	add	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20025a80 	.word	0x20025a80

080011a0 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <UTIL_LCD_SetBackColor+0x24>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <UTIL_LCD_SetBackColor+0x24>)
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	4413      	add	r3, r2
 80011b2:	3304      	adds	r3, #4
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	20025a80 	.word	0x20025a80

080011c8 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <UTIL_LCD_SetFont+0x24>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <UTIL_LCD_SetFont+0x24>)
 80011d6:	015b      	lsls	r3, r3, #5
 80011d8:	4413      	add	r3, r2
 80011da:	3308      	adds	r3, #8
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20025a80 	.word	0x20025a80

080011f0 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <UTIL_LCD_FillRGBRect+0x30>)
 8001200:	685c      	ldr	r4, [r3, #4]
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <UTIL_LCD_FillRGBRect+0x34>)
 8001204:	6918      	ldr	r0, [r3, #16]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	47a0      	blx	r4
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	20025ac0 	.word	0x20025ac0
 8001224:	20025a80 	.word	0x20025a80

08001228 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <UTIL_LCD_Clear+0x28>)
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <UTIL_LCD_Clear+0x28>)
 8001236:	6999      	ldr	r1, [r3, #24]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	460b      	mov	r3, r1
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f000 f8eb 	bl	800141c <UTIL_LCD_FillRect>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20025a80 	.word	0x20025a80

08001254 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	4613      	mov	r3, r2
 8001260:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <UTIL_LCD_DisplayChar+0x68>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <UTIL_LCD_DisplayChar+0x68>)
 8001268:	015b      	lsls	r3, r3, #5
 800126a:	4413      	add	r3, r2
 800126c:	3308      	adds	r3, #8
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8001276:	4911      	ldr	r1, [pc, #68]	; (80012bc <UTIL_LCD_DisplayChar+0x68>)
 8001278:	68c9      	ldr	r1, [r1, #12]
 800127a:	4810      	ldr	r0, [pc, #64]	; (80012bc <UTIL_LCD_DisplayChar+0x68>)
 800127c:	0149      	lsls	r1, r1, #5
 800127e:	4401      	add	r1, r0
 8001280:	3108      	adds	r1, #8
 8001282:	6809      	ldr	r1, [r1, #0]
 8001284:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001286:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <UTIL_LCD_DisplayChar+0x68>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <UTIL_LCD_DisplayChar+0x68>)
 8001290:	015b      	lsls	r3, r3, #5
 8001292:	4403      	add	r3, r0
 8001294:	3308      	adds	r3, #8
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	3307      	adds	r3, #7
 800129c:	2b00      	cmp	r3, #0
 800129e:	da00      	bge.n	80012a2 <UTIL_LCD_DisplayChar+0x4e>
 80012a0:	3307      	adds	r3, #7
 80012a2:	10db      	asrs	r3, r3, #3
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80012a8:	4413      	add	r3, r2
 80012aa:	461a      	mov	r2, r3
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 f8ee 	bl	8001490 <DrawChar>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20025a80 	.word	0x20025a80

080012c0 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80012e2:	e002      	b.n	80012ea <UTIL_LCD_DisplayStringAt+0x2a>
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	3301      	adds	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	61ba      	str	r2, [r7, #24]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f6      	bne.n	80012e4 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80012f6:	4b48      	ldr	r3, [pc, #288]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a47      	ldr	r2, [pc, #284]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 80012fc:	68d2      	ldr	r2, [r2, #12]
 80012fe:	4946      	ldr	r1, [pc, #280]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 8001300:	0152      	lsls	r2, r2, #5
 8001302:	440a      	add	r2, r1
 8001304:	3208      	adds	r2, #8
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	8892      	ldrh	r2, [r2, #4]
 800130a:	fbb3 f3f2 	udiv	r3, r3, r2
 800130e:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2b03      	cmp	r3, #3
 8001314:	d018      	beq.n	8001348 <UTIL_LCD_DisplayStringAt+0x88>
 8001316:	2b03      	cmp	r3, #3
 8001318:	dc2a      	bgt.n	8001370 <UTIL_LCD_DisplayStringAt+0xb0>
 800131a:	2b01      	cmp	r3, #1
 800131c:	d002      	beq.n	8001324 <UTIL_LCD_DisplayStringAt+0x64>
 800131e:	2b02      	cmp	r3, #2
 8001320:	d015      	beq.n	800134e <UTIL_LCD_DisplayStringAt+0x8e>
 8001322:	e025      	b.n	8001370 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	4a3b      	ldr	r2, [pc, #236]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 800132c:	68d2      	ldr	r2, [r2, #12]
 800132e:	493a      	ldr	r1, [pc, #232]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 8001330:	0152      	lsls	r2, r2, #5
 8001332:	440a      	add	r2, r1
 8001334:	3208      	adds	r2, #8
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	8892      	ldrh	r2, [r2, #4]
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001346:	e016      	b.n	8001376 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800134c:	e013      	b.n	8001376 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4a30      	ldr	r2, [pc, #192]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 8001356:	68d2      	ldr	r2, [r2, #12]
 8001358:	492f      	ldr	r1, [pc, #188]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 800135a:	0152      	lsls	r2, r2, #5
 800135c:	440a      	add	r2, r1
 800135e:	3208      	adds	r2, #8
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	8892      	ldrh	r2, [r2, #4]
 8001364:	fb03 f202 	mul.w	r2, r3, r2
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800136e:	e002      	b.n	8001376 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001374:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <UTIL_LCD_DisplayStringAt+0xc4>
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001382:	d31b      	bcc.n	80013bc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001388:	e018      	b.n	80013bc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001394:	f7ff ff5e 	bl	8001254 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	4413      	add	r3, r2
 80013a2:	3308      	adds	r3, #8
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	461a      	mov	r2, r3
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	4413      	add	r3, r2
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3301      	adds	r3, #1
 80013b4:	607b      	str	r3, [r7, #4]
    i++;
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	3301      	adds	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 80013cc:	6959      	ldr	r1, [r3, #20]
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 80013d4:	015b      	lsls	r3, r3, #5
 80013d6:	4403      	add	r3, r0
 80013d8:	3308      	adds	r3, #8
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	889b      	ldrh	r3, [r3, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	fb00 f303 	mul.w	r3, r0, r3
 80013e6:	1acb      	subs	r3, r1, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	490b      	ldr	r1, [pc, #44]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 80013ec:	68c9      	ldr	r1, [r1, #12]
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <UTIL_LCD_DisplayStringAt+0x158>)
 80013f0:	0149      	lsls	r1, r1, #5
 80013f2:	4401      	add	r1, r0
 80013f4:	3108      	adds	r1, #8
 80013f6:	6809      	ldr	r1, [r1, #0]
 80013f8:	8889      	ldrh	r1, [r1, #4]
 80013fa:	428b      	cmp	r3, r1
 80013fc:	bf2c      	ite	cs
 80013fe:	2301      	movcs	r3, #1
 8001400:	2300      	movcc	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	4013      	ands	r3, r2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1be      	bne.n	800138a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20025a80 	.word	0x20025a80

0800141c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b087      	sub	sp, #28
 8001420:	af02      	add	r7, sp, #8
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <UTIL_LCD_FillRect+0x6c>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d11a      	bne.n	8001468 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <UTIL_LCD_FillRect+0x70>)
 8001434:	691c      	ldr	r4, [r3, #16]
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <UTIL_LCD_FillRect+0x6c>)
 8001438:	6918      	ldr	r0, [r3, #16]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	f003 021f 	and.w	r2, r3, #31
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	0a9b      	lsrs	r3, r3, #10
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800144c:	431a      	orrs	r2, r3
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	0cdb      	lsrs	r3, r3, #19
 8001452:	02db      	lsls	r3, r3, #11
 8001454:	b29b      	uxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	68f9      	ldr	r1, [r7, #12]
 8001464:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001466:	e00b      	b.n	8001480 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <UTIL_LCD_FillRect+0x70>)
 800146a:	691c      	ldr	r4, [r3, #16]
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <UTIL_LCD_FillRect+0x6c>)
 800146e:	6918      	ldr	r0, [r3, #16]
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	47a0      	blx	r4
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	20025a80 	.word	0x20025a80
 800148c:	20025ac0 	.word	0x20025ac0

08001490 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0b2      	sub	sp, #200	; 0xc8
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 80014a8:	4ba5      	ldr	r3, [pc, #660]	; (8001740 <DrawChar+0x2b0>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4aa4      	ldr	r2, [pc, #656]	; (8001740 <DrawChar+0x2b0>)
 80014ae:	015b      	lsls	r3, r3, #5
 80014b0:	4413      	add	r3, r2
 80014b2:	3308      	adds	r3, #8
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	88db      	ldrh	r3, [r3, #6]
 80014b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 80014bc:	4ba0      	ldr	r3, [pc, #640]	; (8001740 <DrawChar+0x2b0>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a9f      	ldr	r2, [pc, #636]	; (8001740 <DrawChar+0x2b0>)
 80014c2:	015b      	lsls	r3, r3, #5
 80014c4:	4413      	add	r3, r2
 80014c6:	3308      	adds	r3, #8
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	889b      	ldrh	r3, [r3, #4]
 80014cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80014d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014d4:	3307      	adds	r3, #7
 80014d6:	f023 0207 	bic.w	r2, r3, #7
 80014da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014ea:	e11c      	b.n	8001726 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80014ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014f0:	3307      	adds	r3, #7
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8001504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001508:	3307      	adds	r3, #7
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d002      	beq.n	8001516 <DrawChar+0x86>
 8001510:	2b02      	cmp	r3, #2
 8001512:	d006      	beq.n	8001522 <DrawChar+0x92>
 8001514:	e011      	b.n	800153a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8001516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001520:	e01d      	b.n	800155e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800152e:	3201      	adds	r2, #1
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001538:	e011      	b.n	800155e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800153a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001546:	3301      	adds	r3, #1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	4313      	orrs	r3, r2
 800154e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001552:	3202      	adds	r2, #2
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800155c:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800155e:	4b78      	ldr	r3, [pc, #480]	; (8001740 <DrawChar+0x2b0>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4a77      	ldr	r2, [pc, #476]	; (8001740 <DrawChar+0x2b0>)
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	4413      	add	r3, r2
 8001568:	331c      	adds	r3, #28
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	f040 808c 	bne.w	800168a <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001578:	e074      	b.n	8001664 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800157a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800157e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001582:	1ad2      	subs	r2, r2, r3
 8001584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001588:	4413      	add	r3, r2
 800158a:	3b01      	subs	r3, #1
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	461a      	mov	r2, r3
 8001594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d02d      	beq.n	80015fa <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <DrawChar+0x2b0>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	4a67      	ldr	r2, [pc, #412]	; (8001740 <DrawChar+0x2b0>)
 80015a4:	015b      	lsls	r3, r3, #5
 80015a6:	4413      	add	r3, r2
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <DrawChar+0x2b0>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4961      	ldr	r1, [pc, #388]	; (8001740 <DrawChar+0x2b0>)
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	440b      	add	r3, r1
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0a9b      	lsrs	r3, r3, #10
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	015b      	lsls	r3, r3, #5
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <DrawChar+0x2b0>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	495a      	ldr	r1, [pc, #360]	; (8001740 <DrawChar+0x2b0>)
 80015d8:	015b      	lsls	r3, r3, #5
 80015da:	440b      	add	r3, r1
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0cdb      	lsrs	r3, r3, #19
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	02db      	lsls	r3, r3, #11
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	33c0      	adds	r3, #192	; 0xc0
 80015f2:	443b      	add	r3, r7
 80015f4:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80015f8:	e02f      	b.n	800165a <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <DrawChar+0x2b0>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	4a50      	ldr	r2, [pc, #320]	; (8001740 <DrawChar+0x2b0>)
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	b29b      	uxth	r3, r3
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <DrawChar+0x2b0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	494a      	ldr	r1, [pc, #296]	; (8001740 <DrawChar+0x2b0>)
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	440b      	add	r3, r1
 800161c:	3304      	adds	r3, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0a9b      	lsrs	r3, r3, #10
 8001622:	b29b      	uxth	r3, r3
 8001624:	015b      	lsls	r3, r3, #5
 8001626:	b29b      	uxth	r3, r3
 8001628:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800162c:	b29b      	uxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <DrawChar+0x2b0>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4942      	ldr	r1, [pc, #264]	; (8001740 <DrawChar+0x2b0>)
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	440b      	add	r3, r1
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0cdb      	lsrs	r3, r3, #19
 8001642:	b29b      	uxth	r3, r3
 8001644:	02db      	lsls	r3, r3, #11
 8001646:	b29b      	uxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b29a      	uxth	r2, r3
 800164c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	33c0      	adds	r3, #192	; 0xc0
 8001654:	443b      	add	r3, r7
 8001656:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800165a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800165e:	3301      	adds	r3, #1
 8001660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001664:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800166c:	429a      	cmp	r2, r3
 800166e:	d384      	bcc.n	800157a <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	1c4b      	adds	r3, r1, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800167a:	2301      	movs	r3, #1
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fdb4 	bl	80011f0 <UTIL_LCD_FillRGBRect>
 8001688:	e048      	b.n	800171c <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001690:	e032      	b.n	80016f8 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001692:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800169a:	1ad2      	subs	r2, r2, r3
 800169c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016a0:	4413      	add	r3, r2
 80016a2:	3b01      	subs	r3, #1
 80016a4:	2201      	movs	r2, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00d      	beq.n	80016d2 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <DrawChar+0x2b0>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <DrawChar+0x2b0>)
 80016bc:	015b      	lsls	r3, r3, #5
 80016be:	4413      	add	r3, r2
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	33c0      	adds	r3, #192	; 0xc0
 80016ca:	443b      	add	r3, r7
 80016cc:	f843 2cac 	str.w	r2, [r3, #-172]
 80016d0:	e00d      	b.n	80016ee <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <DrawChar+0x2b0>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <DrawChar+0x2b0>)
 80016d8:	015b      	lsls	r3, r3, #5
 80016da:	4413      	add	r3, r2
 80016dc:	3304      	adds	r3, #4
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	33c0      	adds	r3, #192	; 0xc0
 80016e8:	443b      	add	r3, r7
 80016ea:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80016ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016f2:	3301      	adds	r3, #1
 80016f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80016f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80016fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001700:	429a      	cmp	r2, r3
 8001702:	d3c6      	bcc.n	8001692 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	1c4b      	adds	r3, r1, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	f107 0214 	add.w	r2, r7, #20
 800170e:	2301      	movs	r3, #1
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7ff fd6a 	bl	80011f0 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 800171c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001720:	3301      	adds	r3, #1
 8001722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001726:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800172a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800172e:	429a      	cmp	r2, r3
 8001730:	f4ff aedc 	bcc.w	80014ec <DrawChar+0x5c>
    }
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	37c0      	adds	r7, #192	; 0xc0
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20025a80 	.word	0x20025a80

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_MspInit+0x34>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001750:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_MspInit+0x34>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_MspInit+0x34>)
 800175c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001768:	2004      	movs	r0, #4
 800176a:	f005 f80d 	bl	8006788 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	46020c00 	.word	0x46020c00

0800177c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2e      	ldr	r2, [pc, #184]	; (8001854 <HAL_DCMI_MspInit+0xd8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d155      	bne.n	800184a <HAL_DCMI_MspInit+0xce>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a4:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_DCMI_MspInit+0xdc>)
 80017ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    PH9     ------> DCMI_D0
    PH5     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80017f8:	23f0      	movs	r3, #240	; 0xf0
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001808:	230a      	movs	r3, #10
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <HAL_DCMI_MspInit+0xe0>)
 8001814:	f006 fe80 	bl	8008518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_11
 8001818:	f645 7320 	movw	r3, #24352	; 0x5f20
 800181c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800182a:	230a      	movs	r3, #10
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <HAL_DCMI_MspInit+0xe4>)
 8001836:	f006 fe6f 	bl	8008518 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2077      	movs	r0, #119	; 0x77
 8001840:	f004 ffad 	bl	800679e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8001844:	2077      	movs	r0, #119	; 0x77
 8001846:	f004 ffc4 	bl	80067d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	4202c000 	.word	0x4202c000
 8001858:	46020c00 	.word	0x46020c00
 800185c:	42022000 	.word	0x42022000
 8001860:	42021c00 	.word	0x42021c00

08001864 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_FMC_MspInit+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d152      	bne.n	8001926 <HAL_FMC_MspInit+0xc2>
    return;
  }
  FMC_Initialized = 1;
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_FMC_MspInit+0xcc>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_FMC_MspInit+0xd0>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188c:	4a29      	ldr	r2, [pc, #164]	; (8001934 <HAL_FMC_MspInit+0xd0>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001896:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_FMC_MspInit+0xd0>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
  PD11   ------> FMC_A16
  PF15   ------> FMC_A9
  PE12   ------> FMC_DA9
  PE12   ------> FMC_D9
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_5
 80018a4:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80018a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b6:	230c      	movs	r3, #12
 80018b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	481e      	ldr	r0, [pc, #120]	; (8001938 <HAL_FMC_MspInit+0xd4>)
 80018c0:	f006 fe2a 	bl	8008518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|FMC_A22_LCD_RS_Pin
 80018c4:	f64f 73cb 	movw	r3, #65483	; 0xffcb
 80018c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018d6:	230c      	movs	r3, #12
 80018d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4619      	mov	r1, r3
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <HAL_FMC_MspInit+0xd8>)
 80018e0:	f006 fe1a 	bl	8008518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 80018e4:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80018e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018f6:	230c      	movs	r3, #12
 80018f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4810      	ldr	r0, [pc, #64]	; (8001940 <HAL_FMC_MspInit+0xdc>)
 8001900:	f006 fe0a 	bl	8008518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_0
 8001904:	f241 033f 	movw	r3, #4159	; 0x103f
 8001908:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001916:	230c      	movs	r3, #12
 8001918:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <HAL_FMC_MspInit+0xe0>)
 8001920:	f006 fdfa 	bl	8008518 <HAL_GPIO_Init>
 8001924:	e000      	b.n	8001928 <HAL_FMC_MspInit+0xc4>
    return;
 8001926:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20025aec 	.word	0x20025aec
 8001934:	46020c00 	.word	0x46020c00
 8001938:	42020c00 	.word	0x42020c00
 800193c:	42021000 	.word	0x42021000
 8001940:	42021400 	.word	0x42021400
 8001944:	42021800 	.word	0x42021800

08001948 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001950:	f7ff ff88 	bl	8001864 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_FMC_MspDeInit+0x50>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d11f      	bne.n	80019a8 <HAL_FMC_MspDeInit+0x4c>
    return;
  }
  FMC_DeInitialized = 1;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_FMC_MspDeInit+0x50>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_FMC_MspDeInit+0x54>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001974:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <HAL_FMC_MspDeInit+0x54>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  PD11   ------> FMC_A16
  PF15   ------> FMC_A9
  PE12   ------> FMC_DA9
  PE12   ------> FMC_D9
  */
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_5
 800197e:	f64f 71b3 	movw	r1, #65459	; 0xffb3
 8001982:	480c      	ldr	r0, [pc, #48]	; (80019b4 <HAL_FMC_MspDeInit+0x58>)
 8001984:	f006 ffa0 	bl	80088c8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|FMC_A22_LCD_RS_Pin
 8001988:	f64f 71cb 	movw	r1, #65483	; 0xffcb
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <HAL_FMC_MspDeInit+0x5c>)
 800198e:	f006 ff9b 	bl	80088c8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15
                          |GPIO_PIN_12);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 8001992:	f24f 013f 	movw	r1, #61503	; 0xf03f
 8001996:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_FMC_MspDeInit+0x60>)
 8001998:	f006 ff96 	bl	80088c8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_13|GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_0
 800199c:	f241 013f 	movw	r1, #4159	; 0x103f
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <HAL_FMC_MspDeInit+0x64>)
 80019a2:	f006 ff91 	bl	80088c8 <HAL_GPIO_DeInit>
 80019a6:	e000      	b.n	80019aa <HAL_FMC_MspDeInit+0x4e>
    return;
 80019a8:	bf00      	nop
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_2);

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20025af0 	.word	0x20025af0
 80019b0:	46020c00 	.word	0x46020c00
 80019b4:	42020c00 	.word	0x42020c00
 80019b8:	42021000 	.word	0x42021000
 80019bc:	42021400 	.word	0x42021400
 80019c0:	42021800 	.word	0x42021800

080019c4 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 80019cc:	f7ff ffc6 	bl	800195c <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a24:	f004 fd9c 	bl	8006560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001a30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a34:	f007 f870 	bl	8008b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <GPDMA1_Channel12_IRQHandler+0x10>)
 8001a42:	f005 fc53 	bl	80072ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000174 	.word	0x20000174

08001a50 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DCMI_PSSI_IRQHandler+0x10>)
 8001a56:	f005 fa37 	bl	8006ec8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000124 	.word	0x20000124

08001a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <SystemInit+0x68>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <SystemInit+0x68>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <SystemInit+0x6c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <SystemInit+0x6c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <SystemInit+0x6c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <SystemInit+0x6c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <SystemInit+0x6c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <SystemInit+0x6c>)
 8001a96:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a9a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <SystemInit+0x6c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <SystemInit+0x6c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <SystemInit+0x6c>)
 8001aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <SystemInit+0x6c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SystemInit+0x68>)
 8001aba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001abe:	609a      	str	r2, [r3, #8]
  #endif
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	46020c00 	.word	0x46020c00

08001ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad8:	f7ff ffc4 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001adc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ade:	e003      	b.n	8001ae8 <LoopCopyDataInit>

08001ae0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ae2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ae4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ae6:	3104      	adds	r1, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001aec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001af0:	d3f6      	bcc.n	8001ae0 <CopyDataInit>
	ldr	r2, =_sbss
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001af4:	e002      	b.n	8001afc <LoopFillZerobss>

08001af6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001af6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001af8:	f842 3b04 	str.w	r3, [r2], #4

08001afc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <LoopForever+0x16>)
	cmp	r2, r3
 8001afe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b00:	d3f9      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f009 fc91 	bl	800b428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b06:	f7fe fc33 	bl	8000370 <main>

08001b0a <LoopForever>:

LoopForever:
    b LoopForever
 8001b0a:	e7fe      	b.n	8001b0a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b0c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001b10:	0800cbc8 	.word	0x0800cbc8
	ldr	r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b18:	200000a5 	.word	0x200000a5
	ldr	r2, =_sbss
 8001b1c:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8001b20:	20026638 	.word	0x20026638

08001b24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC1_IRQHandler>
	...

08001b28 <HX8347I_RegisterBusIO>:
  * @param  pObj Component object pointer.
  * @param  pIO  Component IO pointer.
  * @retval Error status.
  */
int32_t HX8347I_RegisterBusIO(HX8347I_Object_t *pObj, HX8347I_IO_t *pIO)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <HX8347I_RegisterBusIO+0x18>
  {
    ret = HX8347I_ERROR;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e02c      	b.n	8001b9a <HX8347I_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	891a      	ldrh	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = HX8347I_ReadRegWrap;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <HX8347I_RegisterBusIO+0x7c>)
 8001b74:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = HX8347I_WriteRegWrap;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HX8347I_RegisterBusIO+0x80>)
 8001b7a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HX8347I_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4798      	blx	r3
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	e002      	b.n	8001b9a <HX8347I_RegisterBusIO+0x72>
    }
    else
    {
      ret = HX8347I_ERROR;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b98:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	0800335f 	.word	0x0800335f
 8001ba8:	0800338d 	.word	0x0800338d

08001bac <HX8347I_Init>:
  * @param  ColorCoding Color coding.
  * @param  Orientation Orientation.
  * @retval Component status.
  */
int32_t HX8347I_Init(HX8347I_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  int32_t ret = HX8347I_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  uint8_t pData[2];

  pData[1] = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	747b      	strb	r3, [r7, #17]

  if (pObj->IsInitialized == 0U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 81bb 	bne.w	8001f42 <HX8347I_Init+0x396>
  {
    /* Set color mode */
    pData[0] = (uint8_t) ColorCoding;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLMOD_CTRL, pData, 1); /* default 0x06 262k color,  0x05 65k color */
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f103 0018 	add.w	r0, r3, #24
 8001bd8:	f107 0210 	add.w	r2, r7, #16
 8001bdc:	2301      	movs	r3, #1
 8001bde:	2117      	movs	r1, #23
 8001be0:	f001 fc1a 	bl	8003418 <hx8347i_write_reg>
 8001be4:	4602      	mov	r2, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	4413      	add	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]

    /* Set display frame rate */
    pData[0] = 0x36U;
 8001bec:	2336      	movs	r3, #54	; 0x36
 8001bee:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_OSC_CTRL1, pData, 1); /* Display frame rate = 60Hz */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f103 0018 	add.w	r0, r3, #24
 8001bf6:	f107 0210 	add.w	r2, r7, #16
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	2118      	movs	r1, #24
 8001bfe:	f001 fc0b 	bl	8003418 <hx8347i_write_reg>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4413      	add	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

    /* Set panel */
    pData[0] = 0x09U;
 8001c0a:	2309      	movs	r3, #9
 8001c0c:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_PANEL_CTRL, pData,
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f103 0018 	add.w	r0, r3, #24
 8001c14:	f107 0210 	add.w	r2, r7, #16
 8001c18:	2301      	movs	r3, #1
 8001c1a:	2136      	movs	r1, #54	; 0x36
 8001c1c:	f001 fbfc 	bl	8003418 <hx8347i_write_reg>
 8001c20:	4602      	mov	r2, r0
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
                             1); /* SS_PANEL = 1, GS_PANEL = 0, REV_PANEL = 0, BGR_PANEL = 1 */

    /* Set GRAM Area - Partial Display Control */
    pData[0] = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_MODE_CTRL, pData, 1); /* DP_STB=0, DP_STB_S=0, SCROLL=0, */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f103 0018 	add.w	r0, r3, #24
 8001c32:	f107 0210 	add.w	r2, r7, #16
 8001c36:	2301      	movs	r3, #1
 8001c38:	2101      	movs	r1, #1
 8001c3a:	f001 fbed 	bl	8003418 <hx8347i_write_reg>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f103 0018 	add.w	r0, r3, #24
 8001c4c:	f107 0210 	add.w	r2, r7, #16
 8001c50:	2301      	movs	r3, #1
 8001c52:	2106      	movs	r1, #6
 8001c54:	f001 fbe0 	bl	8003418 <hx8347i_write_reg>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f103 0018 	add.w	r0, r3, #24
 8001c66:	f107 0210 	add.w	r2, r7, #16
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2107      	movs	r1, #7
 8001c6e:	f001 fbd3 	bl	8003418 <hx8347i_write_reg>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
    if ((Orientation == HX8347I_ORIENTATION_PORTRAIT) || (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HX8347I_Init+0xda>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d11e      	bne.n	8001cc4 <HX8347I_Init+0x118>
    {
      /* 320 lines */
      pData[0] = 0x01U;
 8001c86:	2301      	movs	r3, #1
 8001c88:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f103 0018 	add.w	r0, r3, #24
 8001c90:	f107 0210 	add.w	r2, r7, #16
 8001c94:	2301      	movs	r3, #1
 8001c96:	2108      	movs	r1, #8
 8001c98:	f001 fbbe 	bl	8003418 <hx8347i_write_reg>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
      pData[0] = 0x3FU;
 8001ca4:	233f      	movs	r3, #63	; 0x3f
 8001ca6:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f103 0018 	add.w	r0, r3, #24
 8001cae:	f107 0210 	add.w	r2, r7, #16
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	2109      	movs	r1, #9
 8001cb6:	f001 fbaf 	bl	8003418 <hx8347i_write_reg>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e01d      	b.n	8001d00 <HX8347I_Init+0x154>
    }
    else
    {
      /* 240 lines */
      pData[0] = 0x00U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f103 0018 	add.w	r0, r3, #24
 8001cce:	f107 0210 	add.w	r2, r7, #16
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2108      	movs	r1, #8
 8001cd6:	f001 fb9f 	bl	8003418 <hx8347i_write_reg>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4413      	add	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
      pData[0] = 0xEFU;
 8001ce2:	23ef      	movs	r3, #239	; 0xef
 8001ce4:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f103 0018 	add.w	r0, r3, #24
 8001cec:	f107 0210 	add.w	r2, r7, #16
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	2109      	movs	r1, #9
 8001cf4:	f001 fb90 	bl	8003418 <hx8347i_write_reg>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
    }
    pData[0] = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f103 0018 	add.w	r0, r3, #24
 8001d0a:	f107 0210 	add.w	r2, r7, #16
 8001d0e:	2301      	movs	r3, #1
 8001d10:	2102      	movs	r1, #2
 8001d12:	f001 fb81 	bl	8003418 <hx8347i_write_reg>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f103 0018 	add.w	r0, r3, #24
 8001d24:	f107 0210 	add.w	r2, r7, #16
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	f001 fb74 	bl	8003418 <hx8347i_write_reg>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	4413      	add	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
    if ((Orientation == HX8347I_ORIENTATION_PORTRAIT) || (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HX8347I_Init+0x198>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d11e      	bne.n	8001d82 <HX8347I_Init+0x1d6>
    {
      /* 240 columns */
      pData[0] = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f103 0018 	add.w	r0, r3, #24
 8001d4e:	f107 0210 	add.w	r2, r7, #16
 8001d52:	2301      	movs	r3, #1
 8001d54:	2104      	movs	r1, #4
 8001d56:	f001 fb5f 	bl	8003418 <hx8347i_write_reg>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
      pData[0] = 0xEFU;
 8001d62:	23ef      	movs	r3, #239	; 0xef
 8001d64:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f103 0018 	add.w	r0, r3, #24
 8001d6c:	f107 0210 	add.w	r2, r7, #16
 8001d70:	2301      	movs	r3, #1
 8001d72:	2105      	movs	r1, #5
 8001d74:	f001 fb50 	bl	8003418 <hx8347i_write_reg>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e01d      	b.n	8001dbe <HX8347I_Init+0x212>
    }
    else
    {
      /* 320 columns */
      pData[0] = 0x01U;
 8001d82:	2301      	movs	r3, #1
 8001d84:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f103 0018 	add.w	r0, r3, #24
 8001d8c:	f107 0210 	add.w	r2, r7, #16
 8001d90:	2301      	movs	r3, #1
 8001d92:	2104      	movs	r1, #4
 8001d94:	f001 fb40 	bl	8003418 <hx8347i_write_reg>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
      pData[0] = 0x3FU;
 8001da0:	233f      	movs	r3, #63	; 0x3f
 8001da2:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f103 0018 	add.w	r0, r3, #24
 8001daa:	f107 0210 	add.w	r2, r7, #16
 8001dae:	2301      	movs	r3, #1
 8001db0:	2105      	movs	r1, #5
 8001db2:	f001 fb31 	bl	8003418 <hx8347i_write_reg>
 8001db6:	4602      	mov	r2, r0
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	4413      	add	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
    }
    if (Orientation == HX8347I_ORIENTATION_PORTRAIT)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10f      	bne.n	8001de4 <HX8347I_Init+0x238>
    {
      pData[0] = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f103 0018 	add.w	r0, r3, #24
 8001dce:	f107 0210 	add.w	r2, r7, #16
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	2116      	movs	r1, #22
 8001dd6:	f001 fb1f 	bl	8003418 <hx8347i_write_reg>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	4413      	add	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e034      	b.n	8001e4e <HX8347I_Init+0x2a2>
                               1); /* Memory access control: MY = 0, MX = 0, MV = 0, ML = 0 */
    }
    else if (Orientation == HX8347I_ORIENTATION_LANDSCAPE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10f      	bne.n	8001e0a <HX8347I_Init+0x25e>
    {
      pData[0] = 0xA0U;
 8001dea:	23a0      	movs	r3, #160	; 0xa0
 8001dec:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f103 0018 	add.w	r0, r3, #24
 8001df4:	f107 0210 	add.w	r2, r7, #16
 8001df8:	2301      	movs	r3, #1
 8001dfa:	2116      	movs	r1, #22
 8001dfc:	f001 fb0c 	bl	8003418 <hx8347i_write_reg>
 8001e00:	4602      	mov	r2, r0
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e021      	b.n	8001e4e <HX8347I_Init+0x2a2>
                               1); /* Memory access control: MY = 1, MX = 0, MV = 1, ML = 0 */
    }
    else if (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d10f      	bne.n	8001e30 <HX8347I_Init+0x284>
    {
      pData[0] = 0xC0U;
 8001e10:	23c0      	movs	r3, #192	; 0xc0
 8001e12:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f103 0018 	add.w	r0, r3, #24
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	2301      	movs	r3, #1
 8001e20:	2116      	movs	r1, #22
 8001e22:	f001 faf9 	bl	8003418 <hx8347i_write_reg>
 8001e26:	4602      	mov	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e00e      	b.n	8001e4e <HX8347I_Init+0x2a2>
                               1); /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
    }
    else
    {
      pData[0] = 0x60U;
 8001e30:	2360      	movs	r3, #96	; 0x60
 8001e32:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f103 0018 	add.w	r0, r3, #24
 8001e3a:	f107 0210 	add.w	r2, r7, #16
 8001e3e:	2301      	movs	r3, #1
 8001e40:	2116      	movs	r1, #22
 8001e42:	f001 fae9 	bl	8003418 <hx8347i_write_reg>
 8001e46:	4602      	mov	r2, r0
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
                               1); /* Memory access control: MY = 0, MX = 1, MV =1, ML = 0 */
    }

    /* Power On sequence */
    pData[0] = 0x01U;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_OSC_CTRL2, pData, 1); /* OSC_EN = 1 */
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f103 0018 	add.w	r0, r3, #24
 8001e58:	f107 0210 	add.w	r2, r7, #16
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	2119      	movs	r1, #25
 8001e60:	f001 fada 	bl	8003418 <hx8347i_write_reg>
 8001e64:	4602      	mov	r2, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	4413      	add	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 8001e6c:	210a      	movs	r1, #10
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f001 faa3 	bl	80033ba <HX8347I_Delay>
    pData[0] = 0x03U;
 8001e74:	2303      	movs	r3, #3
 8001e76:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL3, pData, 1); /* AP[2:0] = 011 */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f103 0018 	add.w	r0, r3, #24
 8001e7e:	f107 0210 	add.w	r2, r7, #16
 8001e82:	2301      	movs	r3, #1
 8001e84:	211c      	movs	r1, #28
 8001e86:	f001 fac7 	bl	8003418 <hx8347i_write_reg>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f103 0018 	add.w	r0, r3, #24
 8001e98:	f107 0210 	add.w	r2, r7, #16
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	211f      	movs	r1, #31
 8001ea0:	f001 faa5 	bl	80033ee <hx8347i_read_reg>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
    pData[1] = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	747b      	strb	r3, [r7, #17]
    pData[0] &= 0xFEU;
 8001eb0:	7c3b      	ldrb	r3, [r7, #16]
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* STB = 0 */
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f103 0018 	add.w	r0, r3, #24
 8001ec0:	f107 0210 	add.w	r2, r7, #16
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	211f      	movs	r1, #31
 8001ec8:	f001 faa6 	bl	8003418 <hx8347i_write_reg>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 8001ed4:	210a      	movs	r1, #10
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f001 fa6f 	bl	80033ba <HX8347I_Delay>
    pData[0] &= 0xF7U;
 8001edc:	7c3b      	ldrb	r3, [r7, #16]
 8001ede:	f023 0308 	bic.w	r3, r3, #8
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* DK = 0 */
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f103 0018 	add.w	r0, r3, #24
 8001eec:	f107 0210 	add.w	r2, r7, #16
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	211f      	movs	r1, #31
 8001ef4:	f001 fa90 	bl	8003418 <hx8347i_write_reg>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	4413      	add	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
    pData[0] |= 0x10U;
 8001f00:	7c3b      	ldrb	r3, [r7, #16]
 8001f02:	f043 0310 	orr.w	r3, r3, #16
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	743b      	strb	r3, [r7, #16]
    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 8001f0a:	210a      	movs	r1, #10
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f001 fa54 	bl	80033ba <HX8347I_Delay>
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* PON = 1 */
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f103 0018 	add.w	r0, r3, #24
 8001f18:	f107 0210 	add.w	r2, r7, #16
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	211f      	movs	r1, #31
 8001f20:	f001 fa7a 	bl	8003418 <hx8347i_write_reg>
 8001f24:	4602      	mov	r2, r0
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 8001f2c:	210a      	movs	r1, #10
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f001 fa43 	bl	80033ba <HX8347I_Delay>
    pObj->IsInitialized = 1U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    pObj->Orientation   = Orientation;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if (ret != HX8347I_OK)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HX8347I_Init+0x3a2>
  {
    ret = HX8347I_ERROR;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f4c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001f4e:	697b      	ldr	r3, [r7, #20]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HX8347I_DeInit>:
  * @brief  De-Initialize the LCD driver component.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t HX8347I_DeInit(HX8347I_Object_t *pObj)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  int32_t ret = HX8347I_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  uint8_t pData[2];

  if (pObj->IsInitialized != 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d051      	beq.n	8002012 <HX8347I_DeInit+0xba>
  {
    ret += HX8347I_DisplayOff(pObj);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8bd 	bl	80020ee <HX8347I_DisplayOff>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    /* Power Off sequence ---------------------------------------------------------*/
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f103 0018 	add.w	r0, r3, #24
 8001f82:	f107 0208 	add.w	r2, r7, #8
 8001f86:	2301      	movs	r3, #1
 8001f88:	211f      	movs	r1, #31
 8001f8a:	f001 fa30 	bl	80033ee <hx8347i_read_reg>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
    pData[1] = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	727b      	strb	r3, [r7, #9]
    pData[0] &= 0xAFU;
 8001f9a:	7a3b      	ldrb	r3, [r7, #8]
 8001f9c:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	723b      	strb	r3, [r7, #8]
    pData[0] |= 0x08U;
 8001fa4:	7a3b      	ldrb	r3, [r7, #8]
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* PON = 0, VCOMG = 0 and DK = 1 */
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f103 0018 	add.w	r0, r3, #24
 8001fb4:	f107 0208 	add.w	r2, r7, #8
 8001fb8:	2301      	movs	r3, #1
 8001fba:	211f      	movs	r1, #31
 8001fbc:	f001 fa2c 	bl	8003418 <hx8347i_write_reg>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
    pData[0] |= 0x01U;
 8001fc8:	7a3b      	ldrb	r3, [r7, #8]
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* STB = 1 */
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f103 0018 	add.w	r0, r3, #24
 8001fd8:	f107 0208 	add.w	r2, r7, #8
 8001fdc:	2301      	movs	r3, #1
 8001fde:	211f      	movs	r1, #31
 8001fe0:	f001 fa1a 	bl	8003418 <hx8347i_write_reg>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
    pData[0] = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_OSC_CTRL2, pData, 1); /* OSC_EN = 0 */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f103 0018 	add.w	r0, r3, #24
 8001ff6:	f107 0208 	add.w	r2, r7, #8
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	2119      	movs	r1, #25
 8001ffe:	f001 fa0b 	bl	8003418 <hx8347i_write_reg>
 8002002:	4602      	mov	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 0;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if (ret != HX8347I_OK)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HX8347I_DeInit+0xc8>
  {
    ret = HX8347I_ERROR;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e00b      	b.n	8002038 <HX8347I_DeInit+0xe0>
  }
  else
  {
    if (pObj->IO.DeInit != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <HX8347I_DeInit+0xda>
    {
      ret = pObj->IO.DeInit();
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4798      	blx	r3
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	e002      	b.n	8002038 <HX8347I_DeInit+0xe0>
    }
    else
    {
      ret = HX8347I_ERROR;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002036:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HX8347I_ReadID>:
  * @param  pObj pointer to component object.
  * @param  Id   pointer to component id.
  * @retval Component status.
  */
int32_t HX8347I_ReadID(HX8347I_Object_t *pObj, uint32_t *Id)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t hx8347i_id[2];

  /* Get ID from component */
  ret = hx8347i_read_reg(&pObj->Ctx, HX8347I_HIMAX_ID, hx8347i_id, 1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f103 0018 	add.w	r0, r3, #24
 8002052:	f107 0208 	add.w	r2, r7, #8
 8002056:	2301      	movs	r3, #1
 8002058:	2100      	movs	r1, #0
 800205a:	f001 f9c8 	bl	80033ee <hx8347i_read_reg>
 800205e:	60f8      	str	r0, [r7, #12]

  *Id = (uint32_t)hx8347i_id[0] | ((uint32_t)hx8347i_id[1] << 8U);
 8002060:	7a3b      	ldrb	r3, [r7, #8]
 8002062:	461a      	mov	r2, r3
 8002064:	7a7b      	ldrb	r3, [r7, #9]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	431a      	orrs	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	601a      	str	r2, [r3, #0]

  if (ret != HX8347I_OK)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HX8347I_ReadID+0x38>
  {
    ret = HX8347I_ERROR;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002078:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HX8347I_DisplayOn>:
  * @brief  Set the display on.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t HX8347I_DisplayOn(HX8347I_Object_t *pObj)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  int32_t ret = HX8347I_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  uint8_t pData[2];

  pData[1] = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	727b      	strb	r3, [r7, #9]

  /* Display On */
  pData[0] = 0x38U;
 8002094:	2338      	movs	r3, #56	; 0x38
 8002096:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f103 0018 	add.w	r0, r3, #24
 800209e:	f107 0208 	add.w	r2, r7, #8
 80020a2:	2301      	movs	r3, #1
 80020a4:	2128      	movs	r1, #40	; 0x28
 80020a6:	f001 f9b7 	bl	8003418 <hx8347i_write_reg>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  HX8347I_Delay(pObj, 40); /* Wait at least 2 frames */
 80020b2:	2128      	movs	r1, #40	; 0x28
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f001 f980 	bl	80033ba <HX8347I_Delay>
  pData[0] = 0x3CU;
 80020ba:	233c      	movs	r3, #60	; 0x3c
 80020bc:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f103 0018 	add.w	r0, r3, #24
 80020c4:	f107 0208 	add.w	r2, r7, #8
 80020c8:	2301      	movs	r3, #1
 80020ca:	2128      	movs	r1, #40	; 0x28
 80020cc:	f001 f9a4 	bl	8003418 <hx8347i_write_reg>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

  if (ret != HX8347I_OK)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HX8347I_DisplayOn+0x60>
  {
    ret = HX8347I_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020e4:	68fb      	ldr	r3, [r7, #12]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HX8347I_DisplayOff>:
  * @brief  Set the display off.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t HX8347I_DisplayOff(HX8347I_Object_t *pObj)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  int32_t ret = HX8347I_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  uint8_t pData[2];

  pData[1] = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	727b      	strb	r3, [r7, #9]

  /* Display Off */
  pData[0] = 0x38U;
 80020fe:	2338      	movs	r3, #56	; 0x38
 8002100:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 0018 	add.w	r0, r3, #24
 8002108:	f107 0208 	add.w	r2, r7, #8
 800210c:	2301      	movs	r3, #1
 800210e:	2128      	movs	r1, #40	; 0x28
 8002110:	f001 f982 	bl	8003418 <hx8347i_write_reg>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4413      	add	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
  HX8347I_Delay(pObj, 40); /* Wait at least 2 frames */
 800211c:	2128      	movs	r1, #40	; 0x28
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f001 f94b 	bl	80033ba <HX8347I_Delay>
  pData[0] = 0x04U;
 8002124:	2304      	movs	r3, #4
 8002126:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 0018 	add.w	r0, r3, #24
 800212e:	f107 0208 	add.w	r2, r7, #8
 8002132:	2301      	movs	r3, #1
 8002134:	2128      	movs	r1, #40	; 0x28
 8002136:	f001 f96f 	bl	8003418 <hx8347i_write_reg>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  if (ret != HX8347I_OK)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HX8347I_DisplayOff+0x60>
  {
    ret = HX8347I_ERROR;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800214c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HX8347I_SetBrightness>:
  * @param  pObj Pointer to component object.
  * @param  Brightness Display brightness to be set.
  * @retval Component status.
  */
int32_t HX8347I_SetBrightness(HX8347I_Object_t *pObj, uint32_t Brightness)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return HX8347I_ERROR;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HX8347I_GetBrightness>:
  * @param  pObj Pointer to component object.
  * @param  Brightness Current display brightness.
  * @retval Component status.
  */
int32_t HX8347I_GetBrightness(HX8347I_Object_t *pObj, uint32_t *Brightness)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return HX8347I_ERROR;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HX8347I_SetOrientation>:
  * @param  pObj Pointer to component object.
  * @param  Orientation Display orientation to be set.
  * @retval Component status.
  */
int32_t HX8347I_SetOrientation(HX8347I_Object_t *pObj, uint32_t Orientation)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  uint8_t  pData[2];

  pData[1] = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	727b      	strb	r3, [r7, #9]

  /* Update GRAM Area - Partial Display Control */
  if ((Orientation == HX8347I_ORIENTATION_PORTRAIT) || (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HX8347I_SetOrientation+0x1e>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d13c      	bne.n	8002224 <HX8347I_SetOrientation+0x98>
  {
    /* 320 lines */
    pData[0] = 0x01U;
 80021aa:	2301      	movs	r3, #1
 80021ac:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 0018 	add.w	r0, r3, #24
 80021b4:	f107 0208 	add.w	r2, r7, #8
 80021b8:	2301      	movs	r3, #1
 80021ba:	2108      	movs	r1, #8
 80021bc:	f001 f92c 	bl	8003418 <hx8347i_write_reg>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
    pData[0] = 0x3FU;
 80021c8:	233f      	movs	r3, #63	; 0x3f
 80021ca:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0018 	add.w	r0, r3, #24
 80021d2:	f107 0208 	add.w	r2, r7, #8
 80021d6:	2301      	movs	r3, #1
 80021d8:	2109      	movs	r1, #9
 80021da:	f001 f91d 	bl	8003418 <hx8347i_write_reg>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
    /* 240 columns */
    pData[0] = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f103 0018 	add.w	r0, r3, #24
 80021f0:	f107 0208 	add.w	r2, r7, #8
 80021f4:	2301      	movs	r3, #1
 80021f6:	2104      	movs	r1, #4
 80021f8:	f001 f90e 	bl	8003418 <hx8347i_write_reg>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
    pData[0] = 0xEFU;
 8002204:	23ef      	movs	r3, #239	; 0xef
 8002206:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 0018 	add.w	r0, r3, #24
 800220e:	f107 0208 	add.w	r2, r7, #8
 8002212:	2301      	movs	r3, #1
 8002214:	2105      	movs	r1, #5
 8002216:	f001 f8ff 	bl	8003418 <hx8347i_write_reg>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e03b      	b.n	800229c <HX8347I_SetOrientation+0x110>
  }
  else
  {
    /* 240 lines */
    pData[0] = 0x00U;
 8002224:	2300      	movs	r3, #0
 8002226:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0018 	add.w	r0, r3, #24
 800222e:	f107 0208 	add.w	r2, r7, #8
 8002232:	2301      	movs	r3, #1
 8002234:	2108      	movs	r1, #8
 8002236:	f001 f8ef 	bl	8003418 <hx8347i_write_reg>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
    pData[0] = 0xEFU;
 8002242:	23ef      	movs	r3, #239	; 0xef
 8002244:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0018 	add.w	r0, r3, #24
 800224c:	f107 0208 	add.w	r2, r7, #8
 8002250:	2301      	movs	r3, #1
 8002252:	2109      	movs	r1, #9
 8002254:	f001 f8e0 	bl	8003418 <hx8347i_write_reg>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
    /* 320 columns */
    pData[0] = 0x01U;
 8002260:	2301      	movs	r3, #1
 8002262:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f103 0018 	add.w	r0, r3, #24
 800226a:	f107 0208 	add.w	r2, r7, #8
 800226e:	2301      	movs	r3, #1
 8002270:	2104      	movs	r1, #4
 8002272:	f001 f8d1 	bl	8003418 <hx8347i_write_reg>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
    pData[0] = 0x3FU;
 800227e:	233f      	movs	r3, #63	; 0x3f
 8002280:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f103 0018 	add.w	r0, r3, #24
 8002288:	f107 0208 	add.w	r2, r7, #8
 800228c:	2301      	movs	r3, #1
 800228e:	2105      	movs	r1, #5
 8002290:	f001 f8c2 	bl	8003418 <hx8347i_write_reg>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  }
  if (Orientation == HX8347I_ORIENTATION_PORTRAIT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <HX8347I_SetOrientation+0x136>
  {
    pData[0] = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 0018 	add.w	r0, r3, #24
 80022ac:	f107 0208 	add.w	r2, r7, #8
 80022b0:	2301      	movs	r3, #1
 80022b2:	2116      	movs	r1, #22
 80022b4:	f001 f8b0 	bl	8003418 <hx8347i_write_reg>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	e034      	b.n	800232c <HX8347I_SetOrientation+0x1a0>
                             1); /* Memory access control: MY = 0, MX = 0, MV = 0, ML = 0 */
  }
  else if (Orientation == HX8347I_ORIENTATION_LANDSCAPE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10f      	bne.n	80022e8 <HX8347I_SetOrientation+0x15c>
  {
    pData[0] = 0xA0U;
 80022c8:	23a0      	movs	r3, #160	; 0xa0
 80022ca:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 0018 	add.w	r0, r3, #24
 80022d2:	f107 0208 	add.w	r2, r7, #8
 80022d6:	2301      	movs	r3, #1
 80022d8:	2116      	movs	r1, #22
 80022da:	f001 f89d 	bl	8003418 <hx8347i_write_reg>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e021      	b.n	800232c <HX8347I_SetOrientation+0x1a0>
                             1); /* Memory access control: MY = 1, MX = 0, MV = 1, ML = 0 */
  }
  else if (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d10f      	bne.n	800230e <HX8347I_SetOrientation+0x182>
  {
    pData[0] = 0xC0U;
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f103 0018 	add.w	r0, r3, #24
 80022f8:	f107 0208 	add.w	r2, r7, #8
 80022fc:	2301      	movs	r3, #1
 80022fe:	2116      	movs	r1, #22
 8002300:	f001 f88a 	bl	8003418 <hx8347i_write_reg>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e00e      	b.n	800232c <HX8347I_SetOrientation+0x1a0>
                             1); /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  }
  else
  {
    pData[0] = 0x60U;
 800230e:	2360      	movs	r3, #96	; 0x60
 8002310:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f103 0018 	add.w	r0, r3, #24
 8002318:	f107 0208 	add.w	r2, r7, #8
 800231c:	2301      	movs	r3, #1
 800231e:	2116      	movs	r1, #22
 8002320:	f001 f87a 	bl	8003418 <hx8347i_write_reg>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
                             1); /* Memory access control: MY = 0, MX = 1, MV =1, ML = 0 */
  }

  pObj->Orientation   = Orientation;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	629a      	str	r2, [r3, #40]	; 0x28

  return ret;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HX8347I_GetOrientation>:
  * @param  pObj Pointer to component object.
  * @param  Orientation Current display orientation.
  * @retval Component status.
  */
int32_t HX8347I_GetOrientation(HX8347I_Object_t *pObj, uint32_t *Orientation)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]

  *Orientation = pObj->Orientation;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	601a      	str	r2, [r3, #0]

  return ret;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HX8347I_SetCursor>:
  * @param  Xpos X position on LCD.
  * @param  Ypos Y position on LCD.
  * @retval Component status.
  */
int32_t HX8347I_SetCursor(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  int32_t ret = HX8347I_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  uint8_t pData[2];

  pData[1] = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	747b      	strb	r3, [r7, #17]

  pData[0] = (uint8_t)(Ypos >> 8);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	b2db      	uxtb	r3, r3
 800237a:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f103 0018 	add.w	r0, r3, #24
 8002382:	f107 0210 	add.w	r2, r7, #16
 8002386:	2301      	movs	r3, #1
 8002388:	2106      	movs	r1, #6
 800238a:	f001 f845 	bl	8003418 <hx8347i_write_reg>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4413      	add	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
  pData[0] = (uint8_t)(Ypos & 0xFFU);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f103 0018 	add.w	r0, r3, #24
 80023a2:	f107 0210 	add.w	r2, r7, #16
 80023a6:	2301      	movs	r3, #1
 80023a8:	2107      	movs	r1, #7
 80023aa:	f001 f835 	bl	8003418 <hx8347i_write_reg>
 80023ae:	4602      	mov	r2, r0
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
  pData[0] = (uint8_t)(Xpos >> 8);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f103 0018 	add.w	r0, r3, #24
 80023c4:	f107 0210 	add.w	r2, r7, #16
 80023c8:	2301      	movs	r3, #1
 80023ca:	2102      	movs	r1, #2
 80023cc:	f001 f824 	bl	8003418 <hx8347i_write_reg>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	4413      	add	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
  pData[0] = (uint8_t)(Xpos & 0xFFU);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f103 0018 	add.w	r0, r3, #24
 80023e4:	f107 0210 	add.w	r2, r7, #16
 80023e8:	2301      	movs	r3, #1
 80023ea:	2103      	movs	r1, #3
 80023ec:	f001 f814 	bl	8003418 <hx8347i_write_reg>
 80023f0:	4602      	mov	r2, r0
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4413      	add	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  if (ret != HX8347I_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HX8347I_SetCursor+0xa4>
  {
    ret = HX8347I_ERROR;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002402:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002404:	697b      	ldr	r3, [r7, #20]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HX8347I_DrawBitmap>:
  * @param  Ypos Y position on LCD.
  * @param  pBmp Pointer to bitmap.
  * @retval Component status.
  */
int32_t HX8347I_DrawBitmap(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b08c      	sub	sp, #48	; 0x30
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t height;
  uint32_t Ystart;
  uint32_t Ystop;

  /* Read file size */
  size = ((uint32_t)pBmp[5] << 24) | ((uint32_t)pBmp[4] << 16) | ((uint32_t)pBmp[3] << 8) | (uint32_t)pBmp[2];
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3305      	adds	r3, #5
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	061a      	lsls	r2, r3, #24
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3304      	adds	r3, #4
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3303      	adds	r3, #3
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	4313      	orrs	r3, r2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	3202      	adds	r2, #2
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	623b      	str	r3, [r7, #32]
  /* Get bitmap data address offset */
  index = ((uint32_t)pBmp[13] << 24) | ((uint32_t)pBmp[12] << 16) | ((uint32_t)pBmp[11] << 8) | (uint32_t)pBmp[10];
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	330d      	adds	r3, #13
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	061a      	lsls	r2, r3, #24
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	330c      	adds	r3, #12
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	330b      	adds	r3, #11
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	4313      	orrs	r3, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	320a      	adds	r2, #10
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	4313      	orrs	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]
  /* Get image width */
  width = ((uint32_t)pBmp[21] << 24) | ((uint32_t)pBmp[20] << 16) | ((uint32_t)pBmp[19] << 8) | (uint32_t)pBmp[18];
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3315      	adds	r3, #21
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	061a      	lsls	r2, r3, #24
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3314      	adds	r3, #20
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	3313      	adds	r3, #19
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	4313      	orrs	r3, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	3212      	adds	r2, #18
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
  width--;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	3b01      	subs	r3, #1
 8002496:	61bb      	str	r3, [r7, #24]
  /* Get image height */
  height = ((uint32_t)pBmp[25] << 24) | ((uint32_t)pBmp[24] << 16) | ((uint32_t)pBmp[23] << 8) | (uint32_t)pBmp[22];
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	3319      	adds	r3, #25
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	061a      	lsls	r2, r3, #24
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3318      	adds	r3, #24
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	041b      	lsls	r3, r3, #16
 80024a8:	431a      	orrs	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	3317      	adds	r3, #23
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	4313      	orrs	r3, r2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	3216      	adds	r2, #22
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  height--;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
  /* Get size of data */
  size = size - index;
 80024c4:	6a3a      	ldr	r2, [r7, #32]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	623b      	str	r3, [r7, #32]
  size = size / 2U;
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	623b      	str	r3, [r7, #32]

  /* Compute new Y start and stop values */
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HX8347I_DrawBitmap+0xd4>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d10c      	bne.n	80024fc <HX8347I_DrawBitmap+0xee>
  {
    Ystart = 319U - (Ypos + height);
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	4413      	add	r3, r2
 80024e8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80024ec:	3301      	adds	r3, #1
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
    Ystop  = 319U - Ypos;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80024f6:	3301      	adds	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	e009      	b.n	8002510 <HX8347I_DrawBitmap+0x102>
  }
  else
  {
    Ystart = 239U - (Ypos + height);
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4413      	add	r3, r2
 8002502:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
    Ystop  = 239U - Ypos;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set GRAM Area - Partial Display Control */
  pData[1] = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	747b      	strb	r3, [r7, #17]
  pData[0] = (uint8_t)((Xpos >> 8) & 0xFFU);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b2db      	uxtb	r3, r3
 800251a:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f103 0018 	add.w	r0, r3, #24
 8002522:	f107 0210 	add.w	r2, r7, #16
 8002526:	2301      	movs	r3, #1
 8002528:	2102      	movs	r1, #2
 800252a:	f000 ff75 	bl	8003418 <hx8347i_write_reg>
 800252e:	4602      	mov	r2, r0
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	4413      	add	r3, r2
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(Xpos & 0xFFU);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f103 0018 	add.w	r0, r3, #24
 8002542:	f107 0210 	add.w	r2, r7, #16
 8002546:	2301      	movs	r3, #1
 8002548:	2103      	movs	r1, #3
 800254a:	f000 ff65 	bl	8003418 <hx8347i_write_reg>
 800254e:	4602      	mov	r2, r0
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	4413      	add	r3, r2
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(((Xpos + width) >> 8) & 0xFFU);
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4413      	add	r3, r2
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	b2db      	uxtb	r3, r3
 8002560:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f103 0018 	add.w	r0, r3, #24
 8002568:	f107 0210 	add.w	r2, r7, #16
 800256c:	2301      	movs	r3, #1
 800256e:	2104      	movs	r1, #4
 8002570:	f000 ff52 	bl	8003418 <hx8347i_write_reg>
 8002574:	4602      	mov	r2, r0
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	4413      	add	r3, r2
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)((Xpos + width) & 0xFFU);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4413      	add	r3, r2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f103 0018 	add.w	r0, r3, #24
 8002590:	f107 0210 	add.w	r2, r7, #16
 8002594:	2301      	movs	r3, #1
 8002596:	2105      	movs	r1, #5
 8002598:	f000 ff3e 	bl	8003418 <hx8347i_write_reg>
 800259c:	4602      	mov	r2, r0
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	4413      	add	r3, r2
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)((Ystart >> 8) & 0xFFU);
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f103 0018 	add.w	r0, r3, #24
 80025b2:	f107 0210 	add.w	r2, r7, #16
 80025b6:	2301      	movs	r3, #1
 80025b8:	2106      	movs	r1, #6
 80025ba:	f000 ff2d 	bl	8003418 <hx8347i_write_reg>
 80025be:	4602      	mov	r2, r0
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	4413      	add	r3, r2
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(Ystart & 0xFFU);
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f103 0018 	add.w	r0, r3, #24
 80025d2:	f107 0210 	add.w	r2, r7, #16
 80025d6:	2301      	movs	r3, #1
 80025d8:	2107      	movs	r1, #7
 80025da:	f000 ff1d 	bl	8003418 <hx8347i_write_reg>
 80025de:	4602      	mov	r2, r0
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	4413      	add	r3, r2
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)((Ystop >> 8) & 0xFFU);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f103 0018 	add.w	r0, r3, #24
 80025f4:	f107 0210 	add.w	r2, r7, #16
 80025f8:	2301      	movs	r3, #1
 80025fa:	2108      	movs	r1, #8
 80025fc:	f000 ff0c 	bl	8003418 <hx8347i_write_reg>
 8002600:	4602      	mov	r2, r0
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	4413      	add	r3, r2
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(Ystop & 0xFFU);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f103 0018 	add.w	r0, r3, #24
 8002614:	f107 0210 	add.w	r2, r7, #16
 8002618:	2301      	movs	r3, #1
 800261a:	2109      	movs	r1, #9
 800261c:	f000 fefc 	bl	8003418 <hx8347i_write_reg>
 8002620:	4602      	mov	r2, r0
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	4413      	add	r3, r2
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HX8347I_DrawBitmap+0x22a>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	2b02      	cmp	r3, #2
 8002636:	d12b      	bne.n	8002690 <HX8347I_DrawBitmap+0x282>
  {
    /* Memory access control: Invert MY */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f103 0018 	add.w	r0, r3, #24
 800263e:	f107 0210 	add.w	r2, r7, #16
 8002642:	2301      	movs	r3, #1
 8002644:	2116      	movs	r1, #22
 8002646:	f000 fed2 	bl	80033ee <hx8347i_read_reg>
 800264a:	4602      	mov	r2, r0
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	4413      	add	r3, r2
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x80U) != 0U)
 8002656:	7c3b      	ldrb	r3, [r7, #16]
 8002658:	b25b      	sxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	da05      	bge.n	800266a <HX8347I_DrawBitmap+0x25c>
    {
      pData[0] &= 0x7FU;
 800265e:	7c3b      	ldrb	r3, [r7, #16]
 8002660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002664:	b2db      	uxtb	r3, r3
 8002666:	743b      	strb	r3, [r7, #16]
 8002668:	e004      	b.n	8002674 <HX8347I_DrawBitmap+0x266>
    }
    else
    {
      pData[0] |= 0x80U;
 800266a:	7c3b      	ldrb	r3, [r7, #16]
 800266c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002670:	b2db      	uxtb	r3, r3
 8002672:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f103 0018 	add.w	r0, r3, #24
 800267a:	f107 0210 	add.w	r2, r7, #16
 800267e:	2301      	movs	r3, #1
 8002680:	2116      	movs	r1, #22
 8002682:	f000 fec9 	bl	8003418 <hx8347i_write_reg>
 8002686:	4602      	mov	r2, r0
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	4413      	add	r3, r2
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268e:	e02b      	b.n	80026e8 <HX8347I_DrawBitmap+0x2da>
  }
  else
  {
    /* Memory access control: Invert MX */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f103 0018 	add.w	r0, r3, #24
 8002696:	f107 0210 	add.w	r2, r7, #16
 800269a:	2301      	movs	r3, #1
 800269c:	2116      	movs	r1, #22
 800269e:	f000 fea6 	bl	80033ee <hx8347i_read_reg>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	4413      	add	r3, r2
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x40U) != 0U)
 80026ae:	7c3b      	ldrb	r3, [r7, #16]
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HX8347I_DrawBitmap+0x2b6>
    {
      pData[0] &= 0xBFU;
 80026b8:	7c3b      	ldrb	r3, [r7, #16]
 80026ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	743b      	strb	r3, [r7, #16]
 80026c2:	e004      	b.n	80026ce <HX8347I_DrawBitmap+0x2c0>
    }
    else
    {
      pData[0] |= 0x40U;
 80026c4:	7c3b      	ldrb	r3, [r7, #16]
 80026c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f103 0018 	add.w	r0, r3, #24
 80026d4:	f107 0210 	add.w	r2, r7, #16
 80026d8:	2301      	movs	r3, #1
 80026da:	2116      	movs	r1, #22
 80026dc:	f000 fe9c 	bl	8003418 <hx8347i_write_reg>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	4413      	add	r3, r2
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write GRAM */
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, &pBmp[index], size);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f103 0018 	add.w	r0, r3, #24
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	441a      	add	r2, r3
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2122      	movs	r1, #34	; 0x22
 80026f8:	f000 fe8e 	bl	8003418 <hx8347i_write_reg>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	4413      	add	r3, r2
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Restore GRAM Area - Partial Display Control */
  pData[1] = 0x00U;
 8002704:	2300      	movs	r3, #0
 8002706:	747b      	strb	r3, [r7, #17]
  pData[0] = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	743b      	strb	r3, [r7, #16]
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HX8347I_DrawBitmap+0x30e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	2b02      	cmp	r3, #2
 800271a:	d170      	bne.n	80027fe <HX8347I_DrawBitmap+0x3f0>
  {
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f103 0018 	add.w	r0, r3, #24
 8002722:	f107 0210 	add.w	r2, r7, #16
 8002726:	2301      	movs	r3, #1
 8002728:	2102      	movs	r1, #2
 800272a:	f000 fe75 	bl	8003418 <hx8347i_write_reg>
 800272e:	4602      	mov	r2, r0
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	4413      	add	r3, r2
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f103 0018 	add.w	r0, r3, #24
 800273c:	f107 0210 	add.w	r2, r7, #16
 8002740:	2301      	movs	r3, #1
 8002742:	2103      	movs	r1, #3
 8002744:	f000 fe68 	bl	8003418 <hx8347i_write_reg>
 8002748:	4602      	mov	r2, r0
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	4413      	add	r3, r2
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f103 0018 	add.w	r0, r3, #24
 8002756:	f107 0210 	add.w	r2, r7, #16
 800275a:	2301      	movs	r3, #1
 800275c:	2104      	movs	r1, #4
 800275e:	f000 fe5b 	bl	8003418 <hx8347i_write_reg>
 8002762:	4602      	mov	r2, r0
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	4413      	add	r3, r2
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0xEFU;
 800276a:	23ef      	movs	r3, #239	; 0xef
 800276c:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f103 0018 	add.w	r0, r3, #24
 8002774:	f107 0210 	add.w	r2, r7, #16
 8002778:	2301      	movs	r3, #1
 800277a:	2105      	movs	r1, #5
 800277c:	f000 fe4c 	bl	8003418 <hx8347i_write_reg>
 8002780:	4602      	mov	r2, r0
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	4413      	add	r3, r2
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f103 0018 	add.w	r0, r3, #24
 8002792:	f107 0210 	add.w	r2, r7, #16
 8002796:	2301      	movs	r3, #1
 8002798:	2106      	movs	r1, #6
 800279a:	f000 fe3d 	bl	8003418 <hx8347i_write_reg>
 800279e:	4602      	mov	r2, r0
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	4413      	add	r3, r2
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f103 0018 	add.w	r0, r3, #24
 80027ac:	f107 0210 	add.w	r2, r7, #16
 80027b0:	2301      	movs	r3, #1
 80027b2:	2107      	movs	r1, #7
 80027b4:	f000 fe30 	bl	8003418 <hx8347i_write_reg>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	4413      	add	r3, r2
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x01U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f103 0018 	add.w	r0, r3, #24
 80027ca:	f107 0210 	add.w	r2, r7, #16
 80027ce:	2301      	movs	r3, #1
 80027d0:	2108      	movs	r1, #8
 80027d2:	f000 fe21 	bl	8003418 <hx8347i_write_reg>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	4413      	add	r3, r2
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x3FU;
 80027de:	233f      	movs	r3, #63	; 0x3f
 80027e0:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f103 0018 	add.w	r0, r3, #24
 80027e8:	f107 0210 	add.w	r2, r7, #16
 80027ec:	2301      	movs	r3, #1
 80027ee:	2109      	movs	r1, #9
 80027f0:	f000 fe12 	bl	8003418 <hx8347i_write_reg>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	4413      	add	r3, r2
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fc:	e06f      	b.n	80028de <HX8347I_DrawBitmap+0x4d0>
  }
  else
  {
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f103 0018 	add.w	r0, r3, #24
 8002804:	f107 0210 	add.w	r2, r7, #16
 8002808:	2301      	movs	r3, #1
 800280a:	2102      	movs	r1, #2
 800280c:	f000 fe04 	bl	8003418 <hx8347i_write_reg>
 8002810:	4602      	mov	r2, r0
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	4413      	add	r3, r2
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f103 0018 	add.w	r0, r3, #24
 800281e:	f107 0210 	add.w	r2, r7, #16
 8002822:	2301      	movs	r3, #1
 8002824:	2103      	movs	r1, #3
 8002826:	f000 fdf7 	bl	8003418 <hx8347i_write_reg>
 800282a:	4602      	mov	r2, r0
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	4413      	add	r3, r2
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x01U;
 8002832:	2301      	movs	r3, #1
 8002834:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f103 0018 	add.w	r0, r3, #24
 800283c:	f107 0210 	add.w	r2, r7, #16
 8002840:	2301      	movs	r3, #1
 8002842:	2104      	movs	r1, #4
 8002844:	f000 fde8 	bl	8003418 <hx8347i_write_reg>
 8002848:	4602      	mov	r2, r0
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	4413      	add	r3, r2
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x3FU;
 8002850:	233f      	movs	r3, #63	; 0x3f
 8002852:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f103 0018 	add.w	r0, r3, #24
 800285a:	f107 0210 	add.w	r2, r7, #16
 800285e:	2301      	movs	r3, #1
 8002860:	2105      	movs	r1, #5
 8002862:	f000 fdd9 	bl	8003418 <hx8347i_write_reg>
 8002866:	4602      	mov	r2, r0
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	4413      	add	r3, r2
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f103 0018 	add.w	r0, r3, #24
 8002878:	f107 0210 	add.w	r2, r7, #16
 800287c:	2301      	movs	r3, #1
 800287e:	2106      	movs	r1, #6
 8002880:	f000 fdca 	bl	8003418 <hx8347i_write_reg>
 8002884:	4602      	mov	r2, r0
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	4413      	add	r3, r2
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f103 0018 	add.w	r0, r3, #24
 8002892:	f107 0210 	add.w	r2, r7, #16
 8002896:	2301      	movs	r3, #1
 8002898:	2107      	movs	r1, #7
 800289a:	f000 fdbd 	bl	8003418 <hx8347i_write_reg>
 800289e:	4602      	mov	r2, r0
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	4413      	add	r3, r2
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f103 0018 	add.w	r0, r3, #24
 80028ac:	f107 0210 	add.w	r2, r7, #16
 80028b0:	2301      	movs	r3, #1
 80028b2:	2108      	movs	r1, #8
 80028b4:	f000 fdb0 	bl	8003418 <hx8347i_write_reg>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	4413      	add	r3, r2
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0xEFU;
 80028c0:	23ef      	movs	r3, #239	; 0xef
 80028c2:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f103 0018 	add.w	r0, r3, #24
 80028ca:	f107 0210 	add.w	r2, r7, #16
 80028ce:	2301      	movs	r3, #1
 80028d0:	2109      	movs	r1, #9
 80028d2:	f000 fda1 	bl	8003418 <hx8347i_write_reg>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	4413      	add	r3, r2
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HX8347I_DrawBitmap+0x4e0>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d12b      	bne.n	8002946 <HX8347I_DrawBitmap+0x538>
  {
    /* Memory access control: Re-invert MY */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f103 0018 	add.w	r0, r3, #24
 80028f4:	f107 0210 	add.w	r2, r7, #16
 80028f8:	2301      	movs	r3, #1
 80028fa:	2116      	movs	r1, #22
 80028fc:	f000 fd77 	bl	80033ee <hx8347i_read_reg>
 8002900:	4602      	mov	r2, r0
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	4413      	add	r3, r2
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x80U) != 0U)
 800290c:	7c3b      	ldrb	r3, [r7, #16]
 800290e:	b25b      	sxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	da05      	bge.n	8002920 <HX8347I_DrawBitmap+0x512>
    {
      pData[0] &= 0x7FU;
 8002914:	7c3b      	ldrb	r3, [r7, #16]
 8002916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800291a:	b2db      	uxtb	r3, r3
 800291c:	743b      	strb	r3, [r7, #16]
 800291e:	e004      	b.n	800292a <HX8347I_DrawBitmap+0x51c>
    }
    else
    {
      pData[0] |= 0x80U;
 8002920:	7c3b      	ldrb	r3, [r7, #16]
 8002922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002926:	b2db      	uxtb	r3, r3
 8002928:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f103 0018 	add.w	r0, r3, #24
 8002930:	f107 0210 	add.w	r2, r7, #16
 8002934:	2301      	movs	r3, #1
 8002936:	2116      	movs	r1, #22
 8002938:	f000 fd6e 	bl	8003418 <hx8347i_write_reg>
 800293c:	4602      	mov	r2, r0
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	4413      	add	r3, r2
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002944:	e02b      	b.n	800299e <HX8347I_DrawBitmap+0x590>
  }
  else
  {
    /* Memory access control: Re-invert MX */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f103 0018 	add.w	r0, r3, #24
 800294c:	f107 0210 	add.w	r2, r7, #16
 8002950:	2301      	movs	r3, #1
 8002952:	2116      	movs	r1, #22
 8002954:	f000 fd4b 	bl	80033ee <hx8347i_read_reg>
 8002958:	4602      	mov	r2, r0
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	4413      	add	r3, r2
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 8002960:	2300      	movs	r3, #0
 8002962:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x40U) != 0U)
 8002964:	7c3b      	ldrb	r3, [r7, #16]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HX8347I_DrawBitmap+0x56c>
    {
      pData[0] &= 0xBFU;
 800296e:	7c3b      	ldrb	r3, [r7, #16]
 8002970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002974:	b2db      	uxtb	r3, r3
 8002976:	743b      	strb	r3, [r7, #16]
 8002978:	e004      	b.n	8002984 <HX8347I_DrawBitmap+0x576>
    }
    else
    {
      pData[0] |= 0x40U;
 800297a:	7c3b      	ldrb	r3, [r7, #16]
 800297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002980:	b2db      	uxtb	r3, r3
 8002982:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f103 0018 	add.w	r0, r3, #24
 800298a:	f107 0210 	add.w	r2, r7, #16
 800298e:	2301      	movs	r3, #1
 8002990:	2116      	movs	r1, #22
 8002992:	f000 fd41 	bl	8003418 <hx8347i_write_reg>
 8002996:	4602      	mov	r2, r0
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	4413      	add	r3, r2
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (ret != HX8347I_OK)
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HX8347I_DrawBitmap+0x59c>
  {
    ret = HX8347I_ERROR;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HX8347I_FillRGBRect>:
  * @param  Height Height of the rectangle.
  * @retval Component status.
  */
int32_t HX8347I_FillRGBRect(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width,
                            uint32_t Height)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	f507 7428 	add.w	r4, r7, #672	; 0x2a0
 80029c0:	f5a4 7425 	sub.w	r4, r4, #660	; 0x294
 80029c4:	6020      	str	r0, [r4, #0]
 80029c6:	f507 7028 	add.w	r0, r7, #672	; 0x2a0
 80029ca:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
 80029ce:	6001      	str	r1, [r0, #0]
 80029d0:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 80029d4:	f5a1 7127 	sub.w	r1, r1, #668	; 0x29c
 80029d8:	600a      	str	r2, [r1, #0]
 80029da:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80029de:	f5a2 7228 	sub.w	r2, r2, #672	; 0x2a0
 80029e2:	6013      	str	r3, [r2, #0]
  int32_t  ret = HX8347I_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
  uint8_t  buffer[640];
  uint8_t *pTmp;
  uint32_t i;
  uint32_t j;

  pTmp = pData;
 80029ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80029ee:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

  for (i = 0; i < Height; i++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80029fe:	e062      	b.n	8002ac6 <HX8347I_FillRGBRect+0x112>
  {
    /* Set Cursor */
    ret += HX8347I_SetCursor(pObj, Xpos, Ypos + i);
 8002a00:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002a04:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002a0e:	441a      	add	r2, r3
 8002a10:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002a14:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8002a18:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002a1c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8002a20:	6809      	ldr	r1, [r1, #0]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	f7ff fc9c 	bl	8002360 <HX8347I_SetCursor>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002a2e:	4413      	add	r3, r2
 8002a30:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* Sent a complete line */
    for (j = 0; j < Width; j++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002a3a:	e025      	b.n	8002a88 <HX8347I_FillRGBRect+0xd4>
    {
      buffer[2U * j]      = *pTmp;
 8002a3c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002a46:	7811      	ldrb	r1, [r2, #0]
 8002a48:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002a4c:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8002a50:	54d1      	strb	r1, [r2, r3]
      pTmp++;
 8002a52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002a56:	3301      	adds	r3, #1
 8002a58:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
      buffer[(2U * j) + 1U] = *pTmp;
 8002a5c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	3301      	adds	r3, #1
 8002a64:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002a68:	7811      	ldrb	r1, [r2, #0]
 8002a6a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002a6e:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8002a72:	54d1      	strb	r1, [r2, r3]
      pTmp++;
 8002a74:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (j = 0; j < Width; j++)
 8002a7e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002a88:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002a8c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3d3      	bcc.n	8002a3c <HX8347I_FillRGBRect+0x88>
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, buffer, Width);
 8002a94:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002a98:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f103 0018 	add.w	r0, r3, #24
 8002aa2:	f107 0210 	add.w	r2, r7, #16
 8002aa6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8002aaa:	2122      	movs	r1, #34	; 0x22
 8002aac:	f000 fcb4 	bl	8003418 <hx8347i_write_reg>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
  for (i = 0; i < Height; i++)
 8002abc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002ac6:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002aca:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d396      	bcc.n	8002a00 <HX8347I_FillRGBRect+0x4c>
  }

  if (ret != HX8347I_OK)
 8002ad2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HX8347I_FillRGBRect+0x12e>
  {
    ret = HX8347I_ERROR;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ade:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
  }

  return ret;
 8002ae2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f507 7729 	add.w	r7, r7, #676	; 0x2a4
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd90      	pop	{r4, r7, pc}

08002af0 <HX8347I_DrawHLine>:
  * @param  Length Length of the line.
  * @param  Color  Color of the line.
  * @retval Component status.
  */
int32_t HX8347I_DrawHLine(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f507 7426 	add.w	r4, r7, #664	; 0x298
 8002afc:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 8002b00:	6020      	str	r0, [r4, #0]
 8002b02:	f507 7026 	add.w	r0, r7, #664	; 0x298
 8002b06:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 8002b0a:	6001      	str	r1, [r0, #0]
 8002b0c:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002b10:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 8002b14:	600a      	str	r2, [r1, #0]
 8002b16:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002b1a:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8002b1e:	6013      	str	r3, [r2, #0]
  int32_t  ret = HX8347I_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  uint8_t  pData[640];
  uint32_t i;

  pData[1] = 0x00U;
 8002b26:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002b2a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002b2e:	2200      	movs	r2, #0
 8002b30:	705a      	strb	r2, [r3, #1]

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Xpos, Ypos);
 8002b32:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002b36:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8002b3a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002b3e:	f5a3 7124 	sub.w	r1, r3, #656	; 0x290
 8002b42:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002b46:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	6809      	ldr	r1, [r1, #0]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	f7ff fc06 	bl	8002360 <HX8347I_SetCursor>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Sent a complete line */
  for (i = 0; i < Length; i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002b66:	e01c      	b.n	8002ba2 <HX8347I_DrawHLine+0xb2>
  {
    pData[2U * i]      = (uint8_t)(Color & 0xFFU);
 8002b68:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002b72:	b2d1      	uxtb	r1, r2
 8002b74:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002b78:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8002b7c:	54d1      	strb	r1, [r2, r3]
    pData[(2U * i) + 1U] = (uint8_t)((Color >> 8) & 0xFFU);
 8002b7e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002b82:	0a1a      	lsrs	r2, r3, #8
 8002b84:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2d1      	uxtb	r1, r2
 8002b8e:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002b92:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8002b96:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < Length; i++)
 8002b98:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002ba2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002ba6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8002baa:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3d9      	bcc.n	8002b68 <HX8347I_DrawHLine+0x78>
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, pData, Length);
 8002bb4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002bb8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f103 0018 	add.w	r0, r3, #24
 8002bc2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002bc6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8002bca:	f107 0210 	add.w	r2, r7, #16
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2122      	movs	r1, #34	; 0x22
 8002bd2:	f000 fc21 	bl	8003418 <hx8347i_write_reg>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002bdc:	4413      	add	r3, r2
 8002bde:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  if (ret != HX8347I_OK)
 8002be2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HX8347I_DrawHLine+0x102>
  {
    ret = HX8347I_ERROR;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bee:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }

  return ret;
 8002bf2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <HX8347I_DrawVLine>:
  * @param  Length Length of the line.
  * @param  Color  Color of the line.
  * @retval Component status.
  */
int32_t HX8347I_DrawVLine(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	f507 7426 	add.w	r4, r7, #664	; 0x298
 8002c0c:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 8002c10:	6020      	str	r0, [r4, #0]
 8002c12:	f507 7026 	add.w	r0, r7, #664	; 0x298
 8002c16:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 8002c1a:	6001      	str	r1, [r0, #0]
 8002c1c:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002c20:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 8002c24:	600a      	str	r2, [r1, #0]
 8002c26:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002c2a:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8002c2e:	6013      	str	r3, [r2, #0]
  int32_t  ret = HX8347I_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  uint8_t  pData[640];
  uint32_t i;

  pData[1] = 0x00U;
 8002c36:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c3a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002c3e:	2200      	movs	r2, #0
 8002c40:	705a      	strb	r2, [r3, #1]

  /* Invert row and column end addresses */
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002c42:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c46:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HX8347I_DrawVLine+0x62>
 8002c52:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c56:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d164      	bne.n	8002d2c <HX8347I_DrawVLine+0x12c>
  {
    pData[0] = 0x00U;
 8002c62:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c66:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002c6e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c72:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f103 0018 	add.w	r0, r3, #24
 8002c7c:	f107 0210 	add.w	r2, r7, #16
 8002c80:	2301      	movs	r3, #1
 8002c82:	2108      	movs	r1, #8
 8002c84:	f000 fbc8 	bl	8003418 <hx8347i_write_reg>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002c8e:	4413      	add	r3, r2
 8002c90:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 8002c94:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c98:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002c9c:	22ef      	movs	r2, #239	; 0xef
 8002c9e:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002ca0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002ca4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f103 0018 	add.w	r0, r3, #24
 8002cae:	f107 0210 	add.w	r2, r7, #16
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	2109      	movs	r1, #9
 8002cb6:	f000 fbaf 	bl	8003418 <hx8347i_write_reg>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x01U;
 8002cc6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002cca:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002cd2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002cd6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f103 0018 	add.w	r0, r3, #24
 8002ce0:	f107 0210 	add.w	r2, r7, #16
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	f000 fb96 	bl	8003418 <hx8347i_write_reg>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 8002cf8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002cfc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002d00:	223f      	movs	r2, #63	; 0x3f
 8002d02:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002d04:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d08:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f103 0018 	add.w	r0, r3, #24
 8002d12:	f107 0210 	add.w	r2, r7, #16
 8002d16:	2301      	movs	r3, #1
 8002d18:	2105      	movs	r1, #5
 8002d1a:	f000 fb7d 	bl	8003418 <hx8347i_write_reg>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002d24:	4413      	add	r3, r2
 8002d26:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002d2a:	e063      	b.n	8002df4 <HX8347I_DrawVLine+0x1f4>
  }
  else
  {
    pData[0] = 0x01U;
 8002d2c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d30:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002d38:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d3c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f103 0018 	add.w	r0, r3, #24
 8002d46:	f107 0210 	add.w	r2, r7, #16
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	f000 fb63 	bl	8003418 <hx8347i_write_reg>
 8002d52:	4602      	mov	r2, r0
 8002d54:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002d58:	4413      	add	r3, r2
 8002d5a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 8002d5e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d62:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002d66:	223f      	movs	r2, #63	; 0x3f
 8002d68:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002d6a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d6e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f103 0018 	add.w	r0, r3, #24
 8002d78:	f107 0210 	add.w	r2, r7, #16
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	2109      	movs	r1, #9
 8002d80:	f000 fb4a 	bl	8003418 <hx8347i_write_reg>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x00U;
 8002d90:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d94:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002d9c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002da0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f103 0018 	add.w	r0, r3, #24
 8002daa:	f107 0210 	add.w	r2, r7, #16
 8002dae:	2301      	movs	r3, #1
 8002db0:	2104      	movs	r1, #4
 8002db2:	f000 fb31 	bl	8003418 <hx8347i_write_reg>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 8002dc2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002dc6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002dca:	22ef      	movs	r2, #239	; 0xef
 8002dcc:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002dce:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002dd2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f103 0018 	add.w	r0, r3, #24
 8002ddc:	f107 0210 	add.w	r2, r7, #16
 8002de0:	2301      	movs	r3, #1
 8002de2:	2105      	movs	r1, #5
 8002de4:	f000 fb18 	bl	8003418 <hx8347i_write_reg>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002dee:	4413      	add	r3, r2
 8002df0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }
  /* Memory access control: Invert MV */
  ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002df4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002df8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f103 0018 	add.w	r0, r3, #24
 8002e02:	f107 0210 	add.w	r2, r7, #16
 8002e06:	2301      	movs	r3, #1
 8002e08:	2116      	movs	r1, #22
 8002e0a:	f000 faf0 	bl	80033ee <hx8347i_read_reg>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002e14:	4413      	add	r3, r2
 8002e16:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  pData[1] = 0x00U;
 8002e1a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e1e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002e22:	2200      	movs	r2, #0
 8002e24:	705a      	strb	r2, [r3, #1]
  if ((pData[0] & 0x20U) != 0U)
 8002e26:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e2a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <HX8347I_DrawVLine+0x254>
  {
    pData[0] &= 0xDFU;
 8002e38:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e3c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f023 0320 	bic.w	r3, r3, #32
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e4c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e00c      	b.n	8002e6e <HX8347I_DrawVLine+0x26e>
  }
  else
  {
    pData[0] |= 0x20U;
 8002e54:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e58:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f043 0320 	orr.w	r3, r3, #32
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e68:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002e6c:	701a      	strb	r2, [r3, #0]
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002e6e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e72:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f103 0018 	add.w	r0, r3, #24
 8002e7c:	f107 0210 	add.w	r2, r7, #16
 8002e80:	2301      	movs	r3, #1
 8002e82:	2116      	movs	r1, #22
 8002e84:	f000 fac8 	bl	8003418 <hx8347i_write_reg>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002e8e:	4413      	add	r3, r2
 8002e90:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Ypos, Xpos);
 8002e94:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e98:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8002e9c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002ea0:	f5a3 7125 	sub.w	r1, r3, #660	; 0x294
 8002ea4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002ea8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	6809      	ldr	r1, [r1, #0]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	f7ff fa55 	bl	8002360 <HX8347I_SetCursor>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Sent a complete line */
  for (i = 0; i < Length; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002ec8:	e01c      	b.n	8002f04 <HX8347I_DrawVLine+0x304>
  {
    pData[2U * i]      = (uint8_t)(Color & 0xFFU);
 8002eca:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002ed4:	b2d1      	uxtb	r1, r2
 8002ed6:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002eda:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8002ede:	54d1      	strb	r1, [r2, r3]
    pData[(2U * i) + 1U] = (uint8_t)((Color >> 8) & 0xFFU);
 8002ee0:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002ee4:	0a1a      	lsrs	r2, r3, #8
 8002ee6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	3301      	adds	r3, #1
 8002eee:	b2d1      	uxtb	r1, r2
 8002ef0:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002ef4:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8002ef8:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < Length; i++)
 8002efa:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002efe:	3301      	adds	r3, #1
 8002f00:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002f04:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f08:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8002f0c:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3d9      	bcc.n	8002eca <HX8347I_DrawVLine+0x2ca>
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, pData, Length);
 8002f16:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f1a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f103 0018 	add.w	r0, r3, #24
 8002f24:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f28:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8002f2c:	f107 0210 	add.w	r2, r7, #16
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2122      	movs	r1, #34	; 0x22
 8002f34:	f000 fa70 	bl	8003418 <hx8347i_write_reg>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002f3e:	4413      	add	r3, r2
 8002f40:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Restore row and column end addresses */
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002f44:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f48:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <HX8347I_DrawVLine+0x364>
 8002f54:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f58:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d16a      	bne.n	800303a <HX8347I_DrawVLine+0x43a>
  {
    pData[1] = 0x00U;
 8002f64:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f68:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	705a      	strb	r2, [r3, #1]
    pData[0] = 0x01U;
 8002f70:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f74:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002f7c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002f80:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f103 0018 	add.w	r0, r3, #24
 8002f8a:	f107 0210 	add.w	r2, r7, #16
 8002f8e:	2301      	movs	r3, #1
 8002f90:	2108      	movs	r1, #8
 8002f92:	f000 fa41 	bl	8003418 <hx8347i_write_reg>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 8002fa2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002fa6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002faa:	223f      	movs	r2, #63	; 0x3f
 8002fac:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002fae:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002fb2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f103 0018 	add.w	r0, r3, #24
 8002fbc:	f107 0210 	add.w	r2, r7, #16
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	2109      	movs	r1, #9
 8002fc4:	f000 fa28 	bl	8003418 <hx8347i_write_reg>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002fce:	4413      	add	r3, r2
 8002fd0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x00U;
 8002fd4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002fd8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002fe0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002fe4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f103 0018 	add.w	r0, r3, #24
 8002fee:	f107 0210 	add.w	r2, r7, #16
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	f000 fa0f 	bl	8003418 <hx8347i_write_reg>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003000:	4413      	add	r3, r2
 8003002:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 8003006:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800300a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800300e:	22ef      	movs	r2, #239	; 0xef
 8003010:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8003012:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003016:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f103 0018 	add.w	r0, r3, #24
 8003020:	f107 0210 	add.w	r2, r7, #16
 8003024:	2301      	movs	r3, #1
 8003026:	2105      	movs	r1, #5
 8003028:	f000 f9f6 	bl	8003418 <hx8347i_write_reg>
 800302c:	4602      	mov	r2, r0
 800302e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003032:	4413      	add	r3, r2
 8003034:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8003038:	e069      	b.n	800310e <HX8347I_DrawVLine+0x50e>
  }
  else
  {
    pData[1] = 0x00U;
 800303a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800303e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003042:	2200      	movs	r2, #0
 8003044:	705a      	strb	r2, [r3, #1]
    pData[0] = 0x00U;
 8003046:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800304a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8003052:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003056:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f103 0018 	add.w	r0, r3, #24
 8003060:	f107 0210 	add.w	r2, r7, #16
 8003064:	2301      	movs	r3, #1
 8003066:	2108      	movs	r1, #8
 8003068:	f000 f9d6 	bl	8003418 <hx8347i_write_reg>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003072:	4413      	add	r3, r2
 8003074:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 8003078:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800307c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003080:	22ef      	movs	r2, #239	; 0xef
 8003082:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8003084:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003088:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f103 0018 	add.w	r0, r3, #24
 8003092:	f107 0210 	add.w	r2, r7, #16
 8003096:	2301      	movs	r3, #1
 8003098:	2109      	movs	r1, #9
 800309a:	f000 f9bd 	bl	8003418 <hx8347i_write_reg>
 800309e:	4602      	mov	r2, r0
 80030a0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80030a4:	4413      	add	r3, r2
 80030a6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x01U;
 80030aa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80030ae:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 80030b6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80030ba:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f103 0018 	add.w	r0, r3, #24
 80030c4:	f107 0210 	add.w	r2, r7, #16
 80030c8:	2301      	movs	r3, #1
 80030ca:	2104      	movs	r1, #4
 80030cc:	f000 f9a4 	bl	8003418 <hx8347i_write_reg>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80030d6:	4413      	add	r3, r2
 80030d8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 80030dc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80030e0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80030e4:	223f      	movs	r2, #63	; 0x3f
 80030e6:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 80030e8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80030ec:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f103 0018 	add.w	r0, r3, #24
 80030f6:	f107 0210 	add.w	r2, r7, #16
 80030fa:	2301      	movs	r3, #1
 80030fc:	2105      	movs	r1, #5
 80030fe:	f000 f98b 	bl	8003418 <hx8347i_write_reg>
 8003102:	4602      	mov	r2, r0
 8003104:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003108:	4413      	add	r3, r2
 800310a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }
  /* Memory access control: Re-invert MV */
  ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 800310e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003112:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f103 0018 	add.w	r0, r3, #24
 800311c:	f107 0210 	add.w	r2, r7, #16
 8003120:	2301      	movs	r3, #1
 8003122:	2116      	movs	r1, #22
 8003124:	f000 f963 	bl	80033ee <hx8347i_read_reg>
 8003128:	4602      	mov	r2, r0
 800312a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800312e:	4413      	add	r3, r2
 8003130:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  pData[1] = 0x00U;
 8003134:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003138:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800313c:	2200      	movs	r2, #0
 800313e:	705a      	strb	r2, [r3, #1]
  if ((pData[0] & 0x20U) != 0U)
 8003140:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003144:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <HX8347I_DrawVLine+0x56e>
  {
    pData[0] &= 0xDFU;
 8003152:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003156:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	f023 0320 	bic.w	r3, r3, #32
 8003160:	b2da      	uxtb	r2, r3
 8003162:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003166:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e00c      	b.n	8003188 <HX8347I_DrawVLine+0x588>
  }
  else
  {
    pData[0] |= 0x20U;
 800316e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003172:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f043 0320 	orr.w	r3, r3, #32
 800317c:	b2da      	uxtb	r2, r3
 800317e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003182:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003186:	701a      	strb	r2, [r3, #0]
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8003188:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800318c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f103 0018 	add.w	r0, r3, #24
 8003196:	f107 0210 	add.w	r2, r7, #16
 800319a:	2301      	movs	r3, #1
 800319c:	2116      	movs	r1, #22
 800319e:	f000 f93b 	bl	8003418 <hx8347i_write_reg>
 80031a2:	4602      	mov	r2, r0
 80031a4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80031a8:	4413      	add	r3, r2
 80031aa:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  if (ret != HX8347I_OK)
 80031ae:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HX8347I_DrawVLine+0x5be>
  {
    ret = HX8347I_ERROR;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ba:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }

  return ret;
 80031be:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <HX8347I_FillRect>:
  * @param  Color  Color of the rectangle.
  * @retval Component status.
  */
int32_t HX8347I_FillRect(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                         uint32_t Color)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t i;

  for (i = 0U; i < Height; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e013      	b.n	800320c <HX8347I_FillRect+0x40>
  {
    if (HX8347I_DrawHLine(pObj, Xpos, (i + Ypos), Width, Color) != HX8347I_OK)
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	441a      	add	r2, r3
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff fc7c 	bl	8002af0 <HX8347I_DrawHLine>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HX8347I_FillRect+0x3a>
    {
      ret = HX8347I_ERROR;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003202:	617b      	str	r3, [r7, #20]
      break;
 8003204:	e006      	b.n	8003214 <HX8347I_FillRect+0x48>
  for (i = 0U; i < Height; i++)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	3301      	adds	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3e7      	bcc.n	80031e4 <HX8347I_FillRect+0x18>
    }
  }

  return ret;
 8003214:	697b      	ldr	r3, [r7, #20]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HX8347I_GetPixel>:
  * @param  Ypos Y position on LCD.
  * @param  Color Color of the pixel.
  * @retval Component status.
  */
int32_t HX8347I_GetPixel(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b088      	sub	sp, #32
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
  uint8_t  pData[6];

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Xpos, Ypos);
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff f893 	bl	8002360 <HX8347I_SetCursor>
 800323a:	4602      	mov	r2, r0
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	4413      	add	r3, r2
 8003240:	61fb      	str	r3, [r7, #28]

  /* read pixel */
  ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_READ_DATA, pData, 3);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f103 0018 	add.w	r0, r3, #24
 8003248:	f107 0214 	add.w	r2, r7, #20
 800324c:	2303      	movs	r3, #3
 800324e:	2122      	movs	r1, #34	; 0x22
 8003250:	f000 f8cd 	bl	80033ee <hx8347i_read_reg>
 8003254:	4602      	mov	r2, r0
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]

  /* Set color in RGB565 format */
  *Color = ((((uint32_t)pData[3] << 8) & 0xF800U) |
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	f403 4278 	and.w	r2, r3, #63488	; 0xf800
            (((uint32_t)pData[2] << 3) & 0x07E0U) |
 8003264:	7dbb      	ldrb	r3, [r7, #22]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
  *Color = ((((uint32_t)pData[3] << 8) & 0xF800U) |
 800326c:	431a      	orrs	r2, r3
            (((uint32_t)pData[5] >> 3) & 0x001FU));
 800326e:	7e7b      	ldrb	r3, [r7, #25]
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f003 031f 	and.w	r3, r3, #31
            (((uint32_t)pData[2] << 3) & 0x07E0U) |
 8003278:	431a      	orrs	r2, r3
  *Color = ((((uint32_t)pData[3] << 8) & 0xF800U) |
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	601a      	str	r2, [r3, #0]

  if (ret != HX8347I_OK)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HX8347I_GetPixel+0x6c>
  {
    ret = HX8347I_ERROR;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003288:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800328a:	69fb      	ldr	r3, [r7, #28]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HX8347I_SetPixel>:
  * @param  Ypos Y position on LCD.
  * @param  Color Color of the pixel.
  * @retval Component status.
  */
int32_t HX8347I_SetPixel(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Xpos, Ypos);
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff f858 	bl	8002360 <HX8347I_SetCursor>
 80032b0:	4602      	mov	r2, r0
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4413      	add	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* read pixel */
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, (uint8_t *) &Color, 1);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f103 0018 	add.w	r0, r3, #24
 80032be:	463a      	mov	r2, r7
 80032c0:	2301      	movs	r3, #1
 80032c2:	2122      	movs	r1, #34	; 0x22
 80032c4:	f000 f8a8 	bl	8003418 <hx8347i_write_reg>
 80032c8:	4602      	mov	r2, r0
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	4413      	add	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (ret != HX8347I_OK)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HX8347I_SetPixel+0x48>
  {
    ret = HX8347I_ERROR;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032da:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80032dc:	697b      	ldr	r3, [r7, #20]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HX8347I_GetXSize>:
  * @param  pObj Pointer to component object.
  * @param  Xsize X size of LCD.
  * @retval Component status.
  */
int32_t HX8347I_GetXSize(HX8347I_Object_t *pObj, uint32_t *Xsize)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HX8347I_GetXSize+0x1e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	2b02      	cmp	r3, #2
 8003302:	d103      	bne.n	800330c <HX8347I_GetXSize+0x26>
  {
    *Xsize = HX8347I_SIZE_240;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	22f0      	movs	r2, #240	; 0xf0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e003      	b.n	8003314 <HX8347I_GetXSize+0x2e>
  }
  else
  {
    *Xsize = HX8347I_SIZE_320;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003312:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003314:	68fb      	ldr	r3, [r7, #12]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HX8347I_GetYSize>:
  * @param  pObj Pointer to component object.
  * @param  Ysize Y size of LCD.
  * @retval Component status.
  */
int32_t HX8347I_GetYSize(HX8347I_Object_t *pObj, uint32_t *Ysize)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]

  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HX8347I_GetYSize+0x1e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	2b02      	cmp	r3, #2
 800333e:	d104      	bne.n	800334a <HX8347I_GetYSize+0x28>
  {
    *Ysize = HX8347I_SIZE_320;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e002      	b.n	8003350 <HX8347I_GetYSize+0x2e>
  }
  else
  {
    *Ysize = HX8347I_SIZE_240;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	22f0      	movs	r2, #240	; 0xf0
 800334e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003350:	68fb      	ldr	r3, [r7, #12]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HX8347I_ReadRegWrap>:
  * @param  pData   The target register value to be red.
  * @param  Length  Buffer size to be red.
  * @retval error status.
  */
static int32_t HX8347I_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 800335e:	b590      	push	{r4, r7, lr}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	460b      	mov	r3, r1
 800336c:	817b      	strh	r3, [r7, #10]
  HX8347I_Object_t *pObj = (HX8347I_Object_t *)handle;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	691c      	ldr	r4, [r3, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	8918      	ldrh	r0, [r3, #8]
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	47a0      	blx	r4
 8003382:	4603      	mov	r3, r0
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}

0800338c <HX8347I_WriteRegWrap>:
  * @param  pData  The target register value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t HX8347I_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
  HX8347I_Object_t *pObj = (HX8347I_Object_t *)handle;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	68dc      	ldr	r4, [r3, #12]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	8918      	ldrh	r0, [r3, #8]
 80033a8:	8979      	ldrh	r1, [r7, #10]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	47a0      	blx	r4
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd90      	pop	{r4, r7, pc}

080033ba <HX8347I_Delay>:
  * @brief  HX8347I delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static void HX8347I_Delay(HX8347I_Object_t *pObj, uint32_t Delay)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4798      	blx	r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80033ce:	bf00      	nop
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4798      	blx	r3
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d8f5      	bhi.n	80033d0 <HX8347I_Delay+0x16>
  {
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <hx8347i_read_reg>:
  * Description   : Generic Reading function.
  * Input         : Driver context, register Address, length of buffer.
  * Output        : Status.
  *******************************************************************************/
int32_t hx8347i_read_reg(HX8347I_ctx_t *ctx, uint16_t reg, uint8_t *data, uint32_t length)
{
 80033ee:	b590      	push	{r4, r7, lr}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	460b      	mov	r3, r1
 80033fc:	817b      	strh	r3, [r7, #10]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685c      	ldr	r4, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6898      	ldr	r0, [r3, #8]
 8003406:	8979      	ldrh	r1, [r7, #10]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	47a0      	blx	r4
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}

08003418 <hx8347i_write_reg>:
  * Input         : Driver context, Register Address, data to be written,
                  length of buffer.
  * Output        : Status.
  *******************************************************************************/
int32_t hx8347i_write_reg(HX8347I_ctx_t *ctx, uint16_t reg, uint8_t *data, uint32_t length)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	460b      	mov	r3, r1
 8003426:	817b      	strh	r3, [r7, #10]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681c      	ldr	r4, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6898      	ldr	r0, [r3, #8]
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	47a0      	blx	r4
 8003438:	4603      	mov	r3, r0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}

08003442 <MFXSTM32L152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Init(MFXSTM32L152_Object_t *pObj)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11c      	bne.n	8003492 <MFXSTM32L152_Init+0x50>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4798      	blx	r3

    if (MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 800345e:	2102      	movs	r1, #2
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f8d6 	bl	8003612 <MFXSTM32L152_SetIrqOutPinPolarity>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <MFXSTM32L152_Init+0x32>
    {
      ret = MFXSTM32L152_ERROR;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e00e      	b.n	8003492 <MFXSTM32L152_Init+0x50>
    }
    else if (MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 8003474:	2101      	movs	r1, #1
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f901 	bl	800367e <MFXSTM32L152_SetIrqOutPinType>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <MFXSTM32L152_Init+0x48>
    {
      ret = MFXSTM32L152_ERROR;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e003      	b.n	8003492 <MFXSTM32L152_Init+0x50>
    }
    else
    {
      pObj->IsInitialized = 1U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }

  return ret;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <MFXSTM32L152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <MFXSTM32L152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    pObj->IO.DeInit();
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4798      	blx	r3
    pObj->IsInitialized = 0U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  return MFXSTM32L152_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <MFXSTM32L152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Reset(MFXSTM32L152_Object_t *pObj)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = MFXSTM32L152_SWRST;
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	72fb      	strb	r3, [r7, #11]

  /* Soft Reset */
  if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f103 0018 	add.w	r0, r3, #24
 80034dc:	f107 020b 	add.w	r2, r7, #11
 80034e0:	2301      	movs	r3, #1
 80034e2:	2140      	movs	r1, #64	; 0x40
 80034e4:	f000 fd9c 	bl	8004020 <mfxstm32l152_write_reg>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <MFXSTM32L152_Reset+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <MFXSTM32L152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  pObj   Pointer to component object.
  * @retval The Device ID (two bytes).
  */
int32_t MFXSTM32L152_ReadID(MFXSTM32L152_Object_t *pObj, uint32_t *Id)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
  uint8_t id;

  /* Initialize IO BUS layer */
  pObj->IO.Init();
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4798      	blx	r3

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f103 0018 	add.w	r0, r3, #24
 8003518:	f107 020b 	add.w	r2, r7, #11
 800351c:	2301      	movs	r3, #1
 800351e:	2100      	movs	r1, #0
 8003520:	f000 fd67 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <MFXSTM32L152_ReadID+0x34>
  {
    ret = MFXSTM32L152_ERROR;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e003      	b.n	800353a <MFXSTM32L152_ReadID+0x3c>
  }
  else
  {
    /* Store the device ID value */
    *Id = id;
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	461a      	mov	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800353a:	68fb      	ldr	r3, [r7, #12]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <MFXSTM32L152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_EnableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f103 0018 	add.w	r0, r3, #24
 800355a:	f107 020b 	add.w	r2, r7, #11
 800355e:	2301      	movs	r3, #1
 8003560:	2142      	movs	r1, #66	; 0x42
 8003562:	f000 fd46 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <MFXSTM32L152_EnableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e013      	b.n	800359c <MFXSTM32L152_EnableITSource+0x58>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp |= Source;
 8003574:	7afa      	ldrb	r2, [r7, #11]
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	4313      	orrs	r3, r2
 800357a:	b2db      	uxtb	r3, r3
 800357c:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f103 0018 	add.w	r0, r3, #24
 8003584:	f107 020b 	add.w	r2, r7, #11
 8003588:	2301      	movs	r3, #1
 800358a:	2142      	movs	r1, #66	; 0x42
 800358c:	f000 fd48 	bl	8004020 <mfxstm32l152_write_reg>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <MFXSTM32L152_EnableITSource+0x58>
    {
      ret = MFXSTM32L152_ERROR;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800359a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800359c:	68fb      	ldr	r3, [r7, #12]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <MFXSTM32L152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_DisableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f103 0018 	add.w	r0, r3, #24
 80035bc:	f107 020b 	add.w	r2, r7, #11
 80035c0:	2301      	movs	r3, #1
 80035c2:	2142      	movs	r1, #66	; 0x42
 80035c4:	f000 fd15 	bl	8003ff2 <mfxstm32l152_read_reg>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <MFXSTM32L152_DisableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e018      	b.n	8003608 <MFXSTM32L152_DisableITSource+0x62>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp &= ~Source;
 80035d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035da:	43db      	mvns	r3, r3
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	4013      	ands	r3, r2
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f103 0018 	add.w	r0, r3, #24
 80035f0:	f107 020b 	add.w	r2, r7, #11
 80035f4:	2301      	movs	r3, #1
 80035f6:	2142      	movs	r1, #66	; 0x42
 80035f8:	f000 fd12 	bl	8004020 <mfxstm32l152_write_reg>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <MFXSTM32L152_DisableITSource+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003606:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <MFXSTM32L152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinPolarity(MFXSTM32L152_Object_t *pObj, uint8_t Polarity)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f103 0018 	add.w	r0, r3, #24
 8003628:	f107 020b 	add.w	r2, r7, #11
 800362c:	2301      	movs	r3, #1
 800362e:	2141      	movs	r1, #65	; 0x41
 8003630:	f000 fcdf 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <MFXSTM32L152_SetIrqOutPinPolarity+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	e018      	b.n	8003674 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  }
  else
  {
    /* Mask the polarity bits */
    tmp &= ~(uint8_t)0x02;
 8003642:	7afb      	ldrb	r3, [r7, #11]
 8003644:	f023 0302 	bic.w	r3, r3, #2
 8003648:	b2db      	uxtb	r3, r3
 800364a:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Polarity;
 800364c:	7afa      	ldrb	r2, [r7, #11]
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	4313      	orrs	r3, r2
 8003652:	b2db      	uxtb	r3, r3
 8003654:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 0018 	add.w	r0, r3, #24
 800365c:	f107 020b 	add.w	r2, r7, #11
 8003660:	2301      	movs	r3, #1
 8003662:	2141      	movs	r1, #65	; 0x41
 8003664:	f000 fcdc 	bl	8004020 <mfxstm32l152_write_reg>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003672:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003674:	68fb      	ldr	r3, [r7, #12]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <MFXSTM32L152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinType(MFXSTM32L152_Object_t *pObj, uint8_t Type)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f103 0018 	add.w	r0, r3, #24
 8003694:	f107 020b 	add.w	r2, r7, #11
 8003698:	2301      	movs	r3, #1
 800369a:	2141      	movs	r1, #65	; 0x41
 800369c:	f000 fca9 	bl	8003ff2 <mfxstm32l152_read_reg>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <MFXSTM32L152_SetIrqOutPinType+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e018      	b.n	80036e0 <MFXSTM32L152_SetIrqOutPinType+0x62>
  }
  else
  {
    /* Mask the type bits */
    tmp &= ~(uint8_t)0x01;
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Type;
 80036b8:	7afa      	ldrb	r2, [r7, #11]
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	4313      	orrs	r3, r2
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f103 0018 	add.w	r0, r3, #24
 80036c8:	f107 020b 	add.w	r2, r7, #11
 80036cc:	2301      	movs	r3, #1
 80036ce:	2141      	movs	r1, #65	; 0x41
 80036d0:	f000 fca6 	bl	8004020 <mfxstm32l152_write_reg>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <MFXSTM32L152_SetIrqOutPinType+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036de:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <MFXSTM32L152_IO_Start>:
  * @param  pObj   Pointer to component object.
  * @param  IO_Pin IO pin
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Start(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
  uint8_t mode;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f103 0018 	add.w	r0, r3, #24
 80036fe:	f107 020b 	add.w	r2, r7, #11
 8003702:	2301      	movs	r3, #1
 8003704:	2140      	movs	r1, #64	; 0x40
 8003706:	f000 fc74 	bl	8003ff2 <mfxstm32l152_read_reg>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <MFXSTM32L152_IO_Start+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e022      	b.n	800375e <MFXSTM32L152_IO_Start+0x74>
  }
  else
  {
    /* Set the IO Functionalities to be Enabled */
    mode |= MFXSTM32L152_GPIO_EN;
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	72fb      	strb	r3, [r7, #11]
    /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
    /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
    /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
    /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
    /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
    if (IO_Pin > 0xFFFFU)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d305      	bcc.n	8003736 <MFXSTM32L152_IO_Start+0x4c>
    {
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	b2db      	uxtb	r3, r3
 8003732:	72fb      	strb	r3, [r7, #11]
 8003734:	e004      	b.n	8003740 <MFXSTM32L152_IO_Start+0x56>
    }
    else
    {
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003736:	7afb      	ldrb	r3, [r7, #11]
 8003738:	f023 0308 	bic.w	r3, r3, #8
 800373c:	b2db      	uxtb	r3, r3
 800373e:	72fb      	strb	r3, [r7, #11]
    }

    /* Write the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f103 0018 	add.w	r0, r3, #24
 8003746:	f107 020b 	add.w	r2, r7, #11
 800374a:	2301      	movs	r3, #1
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	f000 fc67 	bl	8004020 <mfxstm32l152_write_reg>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <MFXSTM32L152_IO_Start+0x74>
    {
      ret = MFXSTM32L152_ERROR;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800375c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800375e:	68fb      	ldr	r3, [r7, #12]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <MFXSTM32L152_IO_Init>:
  * @param  IoInit Pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Init(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_Init_t *IoInit)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]

  /* IT enable/disable */
  switch (IoInit->Mode)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d903      	bls.n	8003786 <MFXSTM32L152_IO_Init+0x1e>
 800377e:	3b05      	subs	r3, #5
 8003780:	2b03      	cmp	r3, #3
 8003782:	d813      	bhi.n	80037ac <MFXSTM32L152_IO_Init+0x44>
 8003784:	e00a      	b.n	800379c <MFXSTM32L152_IO_Init+0x34>
    case MFXSTM32L152_GPIO_MODE_OFF:
    case MFXSTM32L152_GPIO_MODE_ANALOG:
    case MFXSTM32L152_GPIO_MODE_INPUT:
    case MFXSTM32L152_GPIO_MODE_OUTPUT_OD:
    case MFXSTM32L152_GPIO_MODE_OUTPUT_PP:
      ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa53 	bl	8003c38 <MFXSTM32L152_IO_DisablePinIT>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
      break;
 800379a:	e008      	b.n	80037ae <MFXSTM32L152_IO_Init+0x46>

    case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
    case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
    case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
    case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
      ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fa09 	bl	8003bb4 <MFXSTM32L152_IO_EnableIT>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
      break;
 80037aa:	e000      	b.n	80037ae <MFXSTM32L152_IO_Init+0x46>
    default:
      break;
 80037ac:	bf00      	nop
  }

  /* Set direction IN/OUT */
  if ((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <MFXSTM32L152_IO_Init+0x56>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d10b      	bne.n	80037d6 <MFXSTM32L152_IO_Init+0x6e>
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2201      	movs	r2, #1
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f936 	bl	8003a38 <MFXSTM32L152_IO_InitPin>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e00a      	b.n	80037ec <MFXSTM32L152_IO_Init+0x84>
  }
  else
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f92a 	bl	8003a38 <MFXSTM32L152_IO_InitPin>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set Push-Pull type */
  switch (IoInit->Pull)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <MFXSTM32L152_IO_Init+0x94>
 80037f4:	3b01      	subs	r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d818      	bhi.n	800382c <MFXSTM32L152_IO_Init+0xc4>
 80037fa:	e00b      	b.n	8003814 <MFXSTM32L152_IO_Init+0xac>
  {
    case MFXSTM32L152_GPIO_NOPULL:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	2164      	movs	r1, #100	; 0x64
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fb05 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
                                            MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
      break;
 8003812:	e00c      	b.n	800382e <MFXSTM32L152_IO_Init+0xc6>
    case MFXSTM32L152_GPIO_PULLUP:
    case MFXSTM32L152_GPIO_PULLDOWN:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	2301      	movs	r3, #1
 800381a:	2164      	movs	r1, #100	; 0x64
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 faf9 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
                                            MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
      break;
 800382a:	e000      	b.n	800382e <MFXSTM32L152_IO_Init+0xc6>
    default:
      break;
 800382c:	bf00      	nop
  }

  if (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d10a      	bne.n	800384c <MFXSTM32L152_IO_Init+0xe4>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	2300      	movs	r3, #0
 800383c:	2164      	movs	r1, #100	; 0x64
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fae8 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
                                          MFXSTM32L152_GPO_PUSH_PULL);
  }

  if (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d10a      	bne.n	800386a <MFXSTM32L152_IO_Init+0x102>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	2164      	movs	r1, #100	; 0x64
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fad9 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003862:	4602      	mov	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
                                          MFXSTM32L152_GPO_OPEN_DRAIN);
  }

  /* Set Pullup-Pulldown */
  switch (IoInit->Pull)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d033      	beq.n	80038da <MFXSTM32L152_IO_Init+0x172>
 8003872:	2b02      	cmp	r3, #2
 8003874:	d83d      	bhi.n	80038f2 <MFXSTM32L152_IO_Init+0x18a>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <MFXSTM32L152_IO_Init+0x118>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d021      	beq.n	80038c2 <MFXSTM32L152_IO_Init+0x15a>
    case MFXSTM32L152_GPIO_PULLDOWN:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
                                            MFXSTM32L152_GPIO_PULL_DOWN);
      break;
    default:
      break;
 800387e:	e038      	b.n	80038f2 <MFXSTM32L152_IO_Init+0x18a>
      if ((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d003      	beq.n	8003890 <MFXSTM32L152_IO_Init+0x128>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10c      	bne.n	80038aa <MFXSTM32L152_IO_Init+0x142>
        ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	2168      	movs	r1, #104	; 0x68
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fabb 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
                                              MFXSTM32L152_GPIO_PULL_DOWN);
 80038a6:	bf00      	nop
      break;
 80038a8:	e024      	b.n	80038f4 <MFXSTM32L152_IO_Init+0x18c>
        ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	2301      	movs	r3, #1
 80038b0:	2168      	movs	r1, #104	; 0x68
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 faae 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
      break;
 80038c0:	e018      	b.n	80038f4 <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	2301      	movs	r3, #1
 80038c8:	2168      	movs	r1, #104	; 0x68
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 faa2 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
      break;
 80038d8:	e00c      	b.n	80038f4 <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	2168      	movs	r1, #104	; 0x68
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa96 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
      break;
 80038f0:	e000      	b.n	80038f4 <MFXSTM32L152_IO_Init+0x18c>
      break;
 80038f2:	bf00      	nop
  }

  /* Set Irq event and type mode */
  switch (IoInit->Mode)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	3b05      	subs	r3, #5
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	f200 8090 	bhi.w	8003a20 <MFXSTM32L152_IO_Init+0x2b8>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <MFXSTM32L152_IO_Init+0x1a0>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	08003919 	.word	0x08003919
 800390c:	0800395b 	.word	0x0800395b
 8003910:	080039df 	.word	0x080039df
 8003914:	0800399d 	.word	0x0800399d
  {
    case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8a3 	bl	8003a6c <MFXSTM32L152_IO_SetIrqEvtMode>
 8003926:	4602      	mov	r2, r0
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8b2 	bl	8003aa0 <MFXSTM32L152_IO_SetIrqTypeMode>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4619      	mov	r1, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f95c 	bl	8003c08 <MFXSTM32L152_IO_EnablePinIT>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
      break;
 8003958:	e063      	b.n	8003a22 <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2201      	movs	r2, #1
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f882 	bl	8003a6c <MFXSTM32L152_IO_SetIrqEvtMode>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2200      	movs	r2, #0
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f891 	bl	8003aa0 <MFXSTM32L152_IO_SetIrqTypeMode>
 800397e:	4602      	mov	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f93b 	bl	8003c08 <MFXSTM32L152_IO_EnablePinIT>
 8003992:	4602      	mov	r2, r0
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
      break;
 800399a:	e042      	b.n	8003a22 <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f861 	bl	8003a6c <MFXSTM32L152_IO_SetIrqEvtMode>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2201      	movs	r2, #1
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f870 	bl	8003aa0 <MFXSTM32L152_IO_SetIrqTypeMode>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f91a 	bl	8003c08 <MFXSTM32L152_IO_EnablePinIT>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
      break;
 80039dc:	e021      	b.n	8003a22 <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f840 	bl	8003a6c <MFXSTM32L152_IO_SetIrqEvtMode>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f84f 	bl	8003aa0 <MFXSTM32L152_IO_SetIrqTypeMode>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f8f9 	bl	8003c08 <MFXSTM32L152_IO_EnablePinIT>
 8003a16:	4602      	mov	r2, r0
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
      break;
 8003a1e:	e000      	b.n	8003a22 <MFXSTM32L152_IO_Init+0x2ba>
    default:
      break;
 8003a20:	bf00      	nop
  }

  if (ret != MFXSTM32L152_OK)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <MFXSTM32L152_IO_Init+0x2c6>
  {
    ret = MFXSTM32L152_ERROR;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <MFXSTM32L152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_InitPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Direction)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	2160      	movs	r1, #96	; 0x60
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f9df 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <MFXSTM32L152_IO_InitPin+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a60:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a62:	697b      	ldr	r3, [r7, #20]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <MFXSTM32L152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqEvtMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Evt)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	214c      	movs	r1, #76	; 0x4c
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f9c5 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <MFXSTM32L152_IO_SetIrqEvtMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a94:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a96:	697b      	ldr	r3, [r7, #20]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <MFXSTM32L152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqTypeMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Type)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	2150      	movs	r1, #80	; 0x50
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f9ab 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <MFXSTM32L152_IO_SetIrqTypeMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ac8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003aca:	697b      	ldr	r3, [r7, #20]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <MFXSTM32L152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_WritePin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t PinState)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Apply the bit value to the selected pin */
  if (PinState != 0U)
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <MFXSTM32L152_IO_WritePin+0x32>
  {
    /* Set the SET register */
    if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 8003aec:	2301      	movs	r3, #1
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	216c      	movs	r1, #108	; 0x6c
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f98e 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00f      	beq.n	8003b1e <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e00b      	b.n	8003b1e <MFXSTM32L152_IO_WritePin+0x4a>
    }
  }
  else
  {
    /* Set the CLEAR register */
    if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 8003b06:	2301      	movs	r3, #1
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	2170      	movs	r1, #112	; 0x70
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f981 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003b1e:	697b      	ldr	r3, [r7, #20]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <MFXSTM32L152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
int32_t MFXSTM32L152_IO_ReadPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint8_t tmpreg[3];
  uint32_t tmp;

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f103 0018 	add.w	r0, r3, #24
 8003b38:	f107 0208 	add.w	r2, r7, #8
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	2110      	movs	r1, #16
 8003b40:	f000 fa57 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <MFXSTM32L152_IO_ReadPin+0x28>
  {
    return MFXSTM32L152_ERROR;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b4e:	e02d      	b.n	8003bac <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f103 0018 	add.w	r0, r3, #24
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	2111      	movs	r1, #17
 8003b60:	f000 fa47 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <MFXSTM32L152_IO_ReadPin+0x48>
  {
    return MFXSTM32L152_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b6e:	e01d      	b.n	8003bac <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f103 0018 	add.w	r0, r3, #24
 8003b76:	f107 0308 	add.w	r3, r7, #8
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	2112      	movs	r1, #18
 8003b80:	f000 fa37 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <MFXSTM32L152_IO_ReadPin+0x68>
  {
    return MFXSTM32L152_ERROR;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8e:	e00d      	b.n	8003bac <MFXSTM32L152_IO_ReadPin+0x84>
  }
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 8003b90:	7a3b      	ldrb	r3, [r7, #8]
 8003b92:	461a      	mov	r2, r3
 8003b94:	7a7b      	ldrb	r3, [r7, #9]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	441a      	add	r2, r3
 8003b9a:	7abb      	ldrb	r3, [r7, #10]
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  return (int32_t)(tmp);
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <MFXSTM32L152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnableIT(MFXSTM32L152_Object_t *pObj)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Enable global IO IT source */
  if (MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fcbe 	bl	8003544 <MFXSTM32L152_EnableITSource>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <MFXSTM32L152_IO_EnableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <MFXSTM32L152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisableIT(MFXSTM32L152_Object_t *pObj)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Disable global IO IT source */
  if (MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8003bea:	2101      	movs	r1, #1
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fcda 	bl	80035a6 <MFXSTM32L152_DisableITSource>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <MFXSTM32L152_IO_DisableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <MFXSTM32L152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 8003c16:	2301      	movs	r3, #1
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	2148      	movs	r1, #72	; 0x48
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8f9 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <MFXSTM32L152_IO_EnablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <MFXSTM32L152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 8003c46:	2300      	movs	r3, #0
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	2148      	movs	r1, #72	; 0x48
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f8e1 	bl	8003e14 <MFXSTM32L152_reg24_setPinValue>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <MFXSTM32L152_IO_DisablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <MFXSTM32L152_IO_ITStatus>:
  * @param  IO_Pin The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
int32_t MFXSTM32L152_IO_ITStatus(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* Get the Interrupt status */
  uint8_t tmpreg[3];
  uint32_t tmp;

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f103 0018 	add.w	r0, r3, #24
 8003c78:	f107 0208 	add.w	r2, r7, #8
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	210c      	movs	r1, #12
 8003c80:	f000 f9b7 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <MFXSTM32L152_IO_ITStatus+0x28>
  {
    return MFXSTM32L152_ERROR;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8e:	e02d      	b.n	8003cec <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0018 	add.w	r0, r3, #24
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	210d      	movs	r1, #13
 8003ca0:	f000 f9a7 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <MFXSTM32L152_IO_ITStatus+0x48>
  {
    return MFXSTM32L152_ERROR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cae:	e01d      	b.n	8003cec <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f103 0018 	add.w	r0, r3, #24
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	210e      	movs	r1, #14
 8003cc0:	f000 f997 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <MFXSTM32L152_IO_ITStatus+0x68>
  {
    return MFXSTM32L152_ERROR;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cce:	e00d      	b.n	8003cec <MFXSTM32L152_IO_ITStatus+0x84>
  }

  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 8003cd0:	7a3b      	ldrb	r3, [r7, #8]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	7a7b      	ldrb	r3, [r7, #9]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	441a      	add	r2, r3
 8003cda:	7abb      	ldrb	r3, [r7, #10]
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	4413      	add	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  return (int32_t)tmp;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <MFXSTM32L152_IO_ClearIT>:
  * @param  IO_Pin the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_ClearIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* normally this function is called under interrupt */
  uint8_t pin_0_7;
  uint8_t pin_8_15;
  uint8_t pin_16_23;

  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	73bb      	strb	r3, [r7, #14]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	737b      	strb	r3, [r7, #13]

  if (pin_0_7 != 0U)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <MFXSTM32L152_IO_ClearIT+0x48>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f103 0018 	add.w	r0, r3, #24
 8003d24:	f107 020f 	add.w	r2, r7, #15
 8003d28:	2301      	movs	r3, #1
 8003d2a:	2154      	movs	r1, #84	; 0x54
 8003d2c:	f000 f978 	bl	8004020 <mfxstm32l152_write_reg>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <MFXSTM32L152_IO_ClearIT+0x48>
    {
      return MFXSTM32L152_ERROR;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d3a:	e024      	b.n	8003d86 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_8_15 != 0U)
 8003d3c:	7bbb      	ldrb	r3, [r7, #14]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00e      	beq.n	8003d60 <MFXSTM32L152_IO_ClearIT+0x6c>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f103 0018 	add.w	r0, r3, #24
 8003d48:	f107 020e 	add.w	r2, r7, #14
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	2155      	movs	r1, #85	; 0x55
 8003d50:	f000 f966 	bl	8004020 <mfxstm32l152_write_reg>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <MFXSTM32L152_IO_ClearIT+0x6c>
    {
      return MFXSTM32L152_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d5e:	e012      	b.n	8003d86 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_16_23 != 0U)
 8003d60:	7b7b      	ldrb	r3, [r7, #13]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00e      	beq.n	8003d84 <MFXSTM32L152_IO_ClearIT+0x90>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f103 0018 	add.w	r0, r3, #24
 8003d6c:	f107 020d 	add.w	r2, r7, #13
 8003d70:	2301      	movs	r3, #1
 8003d72:	2156      	movs	r1, #86	; 0x56
 8003d74:	f000 f954 	bl	8004020 <mfxstm32l152_write_reg>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <MFXSTM32L152_IO_ClearIT+0x90>
    {
      return MFXSTM32L152_ERROR;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d82:	e000      	b.n	8003d86 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }

  return MFXSTM32L152_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <MFXSTM32L152_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Component status
  */
int32_t MFXSTM32L152_RegisterBusIO(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_t *pIO)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <MFXSTM32L152_RegisterBusIO+0x18>
  {
    ret = MFXSTM32L152_ERROR;
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e02c      	b.n	8003e02 <MFXSTM32L152_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	891a      	ldrh	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <MFXSTM32L152_RegisterBusIO+0x7c>)
 8003ddc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <MFXSTM32L152_RegisterBusIO+0x80>)
 8003de2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <MFXSTM32L152_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4798      	blx	r3
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	e002      	b.n	8003e02 <MFXSTM32L152_RegisterBusIO+0x72>
    }
    else
    {
      ret = MFXSTM32L152_ERROR;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e00:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	08003f8f 	.word	0x08003f8f
 8003e10:	08003fc1 	.word	0x08003fc1

08003e14 <MFXSTM32L152_reg24_setPinValue>:
  * @param  PinValue: 0/1
  * @retval Component status
  */
static int32_t MFXSTM32L152_reg24_setPinValue(MFXSTM32L152_Object_t *pObj, uint8_t RegisterAddr, uint32_t PinPosition,
                                              uint8_t PinValue)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	460b      	mov	r3, r1
 8003e22:	72fb      	strb	r3, [r7, #11]
 8003e24:	4613      	mov	r3, r2
 8003e26:	72bb      	strb	r3, [r7, #10]
  int32_t ret = MFXSTM32L152_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  uint8_t tmp;
  uint8_t pin_0_7;
  uint8_t pin_8_15;
  uint8_t pin_16_23;

  pin_0_7   = (uint8_t)(PinPosition & 0x0000ffU);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	74fb      	strb	r3, [r7, #19]
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	74bb      	strb	r3, [r7, #18]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	747b      	strb	r3, [r7, #17]

  if (pin_0_7 != 0U)
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d02e      	beq.n	8003ea0 <MFXSTM32L152_reg24_setPinValue+0x8c>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f103 0018 	add.w	r0, r3, #24
 8003e48:	7afb      	ldrb	r3, [r7, #11]
 8003e4a:	b299      	uxth	r1, r3
 8003e4c:	f107 0210 	add.w	r2, r7, #16
 8003e50:	2301      	movs	r3, #1
 8003e52:	f000 f8ce 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003e56:	4602      	mov	r2, r0
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8003e5e:	7abb      	ldrb	r3, [r7, #10]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <MFXSTM32L152_reg24_setPinValue+0x5c>
    {
      tmp |= (uint8_t)pin_0_7;
 8003e64:	7c3a      	ldrb	r2, [r7, #16]
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	743b      	strb	r3, [r7, #16]
 8003e6e:	e009      	b.n	8003e84 <MFXSTM32L152_reg24_setPinValue+0x70>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8003e70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	b25a      	sxtb	r2, r3
 8003e78:	7c3b      	ldrb	r3, [r7, #16]
 8003e7a:	b25b      	sxtb	r3, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f103 0018 	add.w	r0, r3, #24
 8003e8a:	7afb      	ldrb	r3, [r7, #11]
 8003e8c:	b299      	uxth	r1, r3
 8003e8e:	f107 0210 	add.w	r2, r7, #16
 8003e92:	2301      	movs	r3, #1
 8003e94:	f000 f8c4 	bl	8004020 <mfxstm32l152_write_reg>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  }

  if (pin_8_15 != 0U)
 8003ea0:	7cbb      	ldrb	r3, [r7, #18]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d032      	beq.n	8003f0c <MFXSTM32L152_reg24_setPinValue+0xf8>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 1U), &tmp, 1);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f103 0018 	add.w	r0, r3, #24
 8003eac:	7afb      	ldrb	r3, [r7, #11]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b299      	uxth	r1, r3
 8003eb4:	f107 0210 	add.w	r2, r7, #16
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f000 f89a 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8003ec6:	7abb      	ldrb	r3, [r7, #10]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <MFXSTM32L152_reg24_setPinValue+0xc4>
    {
      tmp |= (uint8_t)pin_8_15;
 8003ecc:	7c3a      	ldrb	r2, [r7, #16]
 8003ece:	7cbb      	ldrb	r3, [r7, #18]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	743b      	strb	r3, [r7, #16]
 8003ed6:	e009      	b.n	8003eec <MFXSTM32L152_reg24_setPinValue+0xd8>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8003ed8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	b25a      	sxtb	r2, r3
 8003ee0:	7c3b      	ldrb	r3, [r7, #16]
 8003ee2:	b25b      	sxtb	r3, r3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 1U), &tmp, 1);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f103 0018 	add.w	r0, r3, #24
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	b299      	uxth	r1, r3
 8003efa:	f107 0210 	add.w	r2, r7, #16
 8003efe:	2301      	movs	r3, #1
 8003f00:	f000 f88e 	bl	8004020 <mfxstm32l152_write_reg>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4413      	add	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  if (pin_16_23 != 0U)
 8003f0c:	7c7b      	ldrb	r3, [r7, #17]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d032      	beq.n	8003f78 <MFXSTM32L152_reg24_setPinValue+0x164>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 2U), &tmp, 1);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f103 0018 	add.w	r0, r3, #24
 8003f18:	7afb      	ldrb	r3, [r7, #11]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	b299      	uxth	r1, r3
 8003f20:	f107 0210 	add.w	r2, r7, #16
 8003f24:	2301      	movs	r3, #1
 8003f26:	f000 f864 	bl	8003ff2 <mfxstm32l152_read_reg>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4413      	add	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8003f32:	7abb      	ldrb	r3, [r7, #10]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <MFXSTM32L152_reg24_setPinValue+0x130>
    {
      tmp |= (uint8_t)pin_16_23;
 8003f38:	7c3a      	ldrb	r2, [r7, #16]
 8003f3a:	7c7b      	ldrb	r3, [r7, #17]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	743b      	strb	r3, [r7, #16]
 8003f42:	e009      	b.n	8003f58 <MFXSTM32L152_reg24_setPinValue+0x144>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8003f44:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	b25a      	sxtb	r2, r3
 8003f4c:	7c3b      	ldrb	r3, [r7, #16]
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	4013      	ands	r3, r2
 8003f52:	b25b      	sxtb	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 2U), &tmp, 1);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f103 0018 	add.w	r0, r3, #24
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3302      	adds	r3, #2
 8003f64:	b299      	uxth	r1, r3
 8003f66:	f107 0210 	add.w	r2, r7, #16
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f000 f858 	bl	8004020 <mfxstm32l152_write_reg>
 8003f70:	4602      	mov	r2, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4413      	add	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  }

  if (ret != MFXSTM32L152_OK)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <MFXSTM32L152_reg24_setPinValue+0x170>
  {
    ret = MFXSTM32L152_ERROR;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f82:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003f84:	697b      	ldr	r3, [r7, #20]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f8e:	b590      	push	{r4, r7, lr}
 8003f90:	b087      	sub	sp, #28
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	691c      	ldr	r4, [r3, #16]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	8918      	ldrh	r0, [r3, #8]
 8003fae:	893b      	ldrh	r3, [r7, #8]
 8003fb0:	8979      	ldrh	r1, [r7, #10]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	47a0      	blx	r4
 8003fb6:	4603      	mov	r3, r0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd90      	pop	{r4, r7, pc}

08003fc0 <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	460b      	mov	r3, r1
 8003fce:	817b      	strh	r3, [r7, #10]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	68dc      	ldr	r4, [r3, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	8918      	ldrh	r0, [r3, #8]
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	8979      	ldrh	r1, [r7, #10]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	47a0      	blx	r4
 8003fe8:	4603      	mov	r3, r0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}

08003ff2 <mfxstm32l152_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : Data Read
  *******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8003ff2:	b590      	push	{r4, r7, lr}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	460b      	mov	r3, r1
 8004000:	817b      	strh	r3, [r7, #10]
 8004002:	4613      	mov	r3, r2
 8004004:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685c      	ldr	r4, [r3, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6898      	ldr	r0, [r3, #8]
 800400e:	893b      	ldrh	r3, [r7, #8]
 8004010:	8979      	ldrh	r1, [r7, #10]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	47a0      	blx	r4
 8004016:	4603      	mov	r3, r0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}

08004020 <mfxstm32l152_write_reg>:
  *                 I2C or SPI writing function
  * Input         : Register Address, Data to be written, length of buffer
  * Output        : None
  *******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	461a      	mov	r2, r3
 800402c:	460b      	mov	r3, r1
 800402e:	817b      	strh	r3, [r7, #10]
 8004030:	4613      	mov	r3, r2
 8004032:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681c      	ldr	r4, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6898      	ldr	r0, [r3, #8]
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	8979      	ldrh	r1, [r7, #10]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	47a0      	blx	r4
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
	...

08004050 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8004060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e02c      	b.n	80040c2 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	891a      	ldrh	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <OV5640_RegisterBusIO+0x7c>)
 800409c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <OV5640_RegisterBusIO+0x80>)
 80040a2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4798      	blx	r3
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	e002      	b.n	80040c2 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040c0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80040c2:	68fb      	ldr	r3, [r7, #12]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	08004b4d 	.word	0x08004b4d
 80040d0:	08004b7f 	.word	0x08004b7f

080040d4 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d165      	bne.n	80041ba <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d80e      	bhi.n	8004112 <OV5640_Init+0x3e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00f      	beq.n	800411a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d00c      	beq.n	800411a <OV5640_Init+0x46>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d009      	beq.n	800411a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b07      	cmp	r3, #7
 800410a:	d006      	beq.n	800411a <OV5640_Init+0x46>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d003      	beq.n	800411a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e04f      	b.n	80041ba <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e01f      	b.n	8004160 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004126:	d018      	beq.n	800415a <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <OV5640_Init+0xf0>)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	885b      	ldrh	r3, [r3, #2]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f103 0018 	add.w	r0, r3, #24
 800413c:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <OV5640_Init+0xf0>)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004144:	f107 0217 	add.w	r2, r7, #23
 8004148:	2301      	movs	r3, #1
 800414a:	f000 fd48 	bl	8004bde <ov5640_write_reg>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004158:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3301      	adds	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2bfd      	cmp	r3, #253	; 0xfd
 8004164:	d9dc      	bls.n	8004120 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d126      	bne.n	80041ba <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f9be 	bl	80044f0 <OV5640_SetResolution>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	e01b      	b.n	80041ba <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f81f 	bl	80041c8 <OV5640_SetPixelFormat>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	e010      	b.n	80041ba <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8004198:	2300      	movs	r3, #0
 800419a:	2201      	movs	r2, #1
 800419c:	2101      	movs	r1, #1
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fa9c 	bl	80046dc <OV5640_SetPolarities>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e003      	b.n	80041ba <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80041ba:	69bb      	ldr	r3, [r7, #24]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	0800c610 	.word	0x0800c610

080041c8 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <OV5640_SetPixelFormat+0x34>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d00c      	beq.n	80041fc <OV5640_SetPixelFormat+0x34>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d009      	beq.n	80041fc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d006      	beq.n	80041fc <OV5640_SetPixelFormat+0x34>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d003      	beq.n	80041fc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e16a      	b.n	80044d2 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	3b01      	subs	r3, #1
 8004200:	2b07      	cmp	r3, #7
 8004202:	f200 80c3 	bhi.w	800438c <OV5640_SetPixelFormat+0x1c4>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <OV5640_SetPixelFormat+0x44>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004285 	.word	0x08004285
 8004210:	0800422d 	.word	0x0800422d
 8004214:	0800438d 	.word	0x0800438d
 8004218:	0800438d 	.word	0x0800438d
 800421c:	0800438d 	.word	0x0800438d
 8004220:	0800438d 	.word	0x0800438d
 8004224:	080042dd 	.word	0x080042dd
 8004228:	08004335 	.word	0x08004335
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	e024      	b.n	800427c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004238:	d01d      	beq.n	8004276 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800423a:	4aa8      	ldr	r2, [pc, #672]	; (80044dc <OV5640_SetPixelFormat+0x314>)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	885b      	ldrh	r3, [r3, #2]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f103 0018 	add.w	r0, r3, #24
 800424e:	4aa3      	ldr	r2, [pc, #652]	; (80044dc <OV5640_SetPixelFormat+0x314>)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004256:	f107 020f 	add.w	r2, r7, #15
 800425a:	2301      	movs	r3, #1
 800425c:	f000 fcbf 	bl	8004bde <ov5640_write_reg>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e003      	b.n	8004276 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800426e:	2101      	movs	r1, #1
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fc51 	bl	8004b18 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3301      	adds	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d9d7      	bls.n	8004232 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8004282:	e0af      	b.n	80043e4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	e024      	b.n	80042d4 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004290:	d01d      	beq.n	80042ce <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8004292:	4a93      	ldr	r2, [pc, #588]	; (80044e0 <OV5640_SetPixelFormat+0x318>)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	885b      	ldrh	r3, [r3, #2]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f103 0018 	add.w	r0, r3, #24
 80042a6:	4a8e      	ldr	r2, [pc, #568]	; (80044e0 <OV5640_SetPixelFormat+0x318>)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80042ae:	f107 020f 	add.w	r2, r7, #15
 80042b2:	2301      	movs	r3, #1
 80042b4:	f000 fc93 	bl	8004bde <ov5640_write_reg>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e003      	b.n	80042ce <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80042c6:	2101      	movs	r1, #1
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fc25 	bl	8004b18 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3301      	adds	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d9d7      	bls.n	800428a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80042da:	e083      	b.n	80043e4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e024      	b.n	800432c <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e8:	d01d      	beq.n	8004326 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80042ea:	4a7e      	ldr	r2, [pc, #504]	; (80044e4 <OV5640_SetPixelFormat+0x31c>)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	885b      	ldrh	r3, [r3, #2]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f103 0018 	add.w	r0, r3, #24
 80042fe:	4a79      	ldr	r2, [pc, #484]	; (80044e4 <OV5640_SetPixelFormat+0x31c>)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004306:	f107 020f 	add.w	r2, r7, #15
 800430a:	2301      	movs	r3, #1
 800430c:	f000 fc67 	bl	8004bde <ov5640_write_reg>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8004316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e003      	b.n	8004326 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800431e:	2101      	movs	r1, #1
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fbf9 	bl	8004b18 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3301      	adds	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d9d7      	bls.n	80042e2 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8004332:	e057      	b.n	80043e4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e024      	b.n	8004384 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004340:	d01d      	beq.n	800437e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8004342:	4a69      	ldr	r2, [pc, #420]	; (80044e8 <OV5640_SetPixelFormat+0x320>)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	885b      	ldrh	r3, [r3, #2]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f103 0018 	add.w	r0, r3, #24
 8004356:	4a64      	ldr	r2, [pc, #400]	; (80044e8 <OV5640_SetPixelFormat+0x320>)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800435e:	f107 020f 	add.w	r2, r7, #15
 8004362:	2301      	movs	r3, #1
 8004364:	f000 fc3b 	bl	8004bde <ov5640_write_reg>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e003      	b.n	800437e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8004376:	2101      	movs	r1, #1
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fbcd 	bl	8004b18 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3301      	adds	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d9d7      	bls.n	800433a <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800438a:	e02b      	b.n	80043e4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e024      	b.n	80043dc <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004398:	d01d      	beq.n	80043d6 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800439a:	4a54      	ldr	r2, [pc, #336]	; (80044ec <OV5640_SetPixelFormat+0x324>)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	885b      	ldrh	r3, [r3, #2]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f103 0018 	add.w	r0, r3, #24
 80043ae:	4a4f      	ldr	r2, [pc, #316]	; (80044ec <OV5640_SetPixelFormat+0x324>)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80043b6:	f107 020f 	add.w	r2, r7, #15
 80043ba:	2301      	movs	r3, #1
 80043bc:	f000 fc0f 	bl	8004bde <ov5640_write_reg>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e003      	b.n	80043d6 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80043ce:	2101      	movs	r1, #1
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fba1 	bl	8004b18 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3301      	adds	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d9d7      	bls.n	8004392 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80043e2:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d173      	bne.n	80044d2 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f103 0018 	add.w	r0, r3, #24
 80043f0:	f107 020f 	add.w	r2, r7, #15
 80043f4:	2301      	movs	r3, #1
 80043f6:	f643 0121 	movw	r1, #14369	; 0x3821
 80043fa:	f000 fbd9 	bl	8004bb0 <ov5640_read_reg>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e062      	b.n	80044d2 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	f043 0320 	orr.w	r3, r3, #32
 8004412:	b2db      	uxtb	r3, r3
 8004414:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f103 0018 	add.w	r0, r3, #24
 800441c:	f107 020f 	add.w	r2, r7, #15
 8004420:	2301      	movs	r3, #1
 8004422:	f643 0121 	movw	r1, #14369	; 0x3821
 8004426:	f000 fbda 	bl	8004bde <ov5640_write_reg>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e04c      	b.n	80044d2 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f103 0018 	add.w	r0, r3, #24
 800443e:	f107 020f 	add.w	r2, r7, #15
 8004442:	2301      	movs	r3, #1
 8004444:	f243 0102 	movw	r1, #12290	; 0x3002
 8004448:	f000 fbb2 	bl	8004bb0 <ov5640_read_reg>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e03b      	b.n	80044d2 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	f023 031c 	bic.w	r3, r3, #28
 8004460:	b2db      	uxtb	r3, r3
 8004462:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f103 0018 	add.w	r0, r3, #24
 800446a:	f107 020f 	add.w	r2, r7, #15
 800446e:	2301      	movs	r3, #1
 8004470:	f243 0102 	movw	r1, #12290	; 0x3002
 8004474:	f000 fbb3 	bl	8004bde <ov5640_write_reg>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e025      	b.n	80044d2 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f103 0018 	add.w	r0, r3, #24
 800448c:	f107 020f 	add.w	r2, r7, #15
 8004490:	2301      	movs	r3, #1
 8004492:	f243 0106 	movw	r1, #12294	; 0x3006
 8004496:	f000 fb8b 	bl	8004bb0 <ov5640_read_reg>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e014      	b.n	80044d2 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f103 0018 	add.w	r0, r3, #24
 80044b8:	f107 020f 	add.w	r2, r7, #15
 80044bc:	2301      	movs	r3, #1
 80044be:	f243 0106 	movw	r1, #12294	; 0x3006
 80044c2:	f000 fb8c 	bl	8004bde <ov5640_write_reg>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044d0:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	0800ca08 	.word	0x0800ca08
 80044e0:	0800ca10 	.word	0x0800ca10
 80044e4:	0800ca18 	.word	0x0800ca18
 80044e8:	0800ca20 	.word	0x0800ca20
 80044ec:	0800ca28 	.word	0x0800ca28

080044f0 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d903      	bls.n	800450c <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8004504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e0d8      	b.n	80046be <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	f200 80d1 	bhi.w	80046b6 <OV5640_SetResolution+0x1c6>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <OV5640_SetResolution+0x2c>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004531 	.word	0x08004531
 8004520:	0800457f 	.word	0x0800457f
 8004524:	080045cd 	.word	0x080045cd
 8004528:	0800461b 	.word	0x0800461b
 800452c:	08004669 	.word	0x08004669
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e01f      	b.n	8004576 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453c:	d018      	beq.n	8004570 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800453e:	4a62      	ldr	r2, [pc, #392]	; (80046c8 <OV5640_SetResolution+0x1d8>)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	885b      	ldrh	r3, [r3, #2]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f103 0018 	add.w	r0, r3, #24
 8004552:	4a5d      	ldr	r2, [pc, #372]	; (80046c8 <OV5640_SetResolution+0x1d8>)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800455a:	f107 020f 	add.w	r2, r7, #15
 800455e:	2301      	movs	r3, #1
 8004560:	f000 fb3d 	bl	8004bde <ov5640_write_reg>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800456e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	3301      	adds	r3, #1
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d9dc      	bls.n	8004536 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 800457c:	e09f      	b.n	80046be <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e01f      	b.n	80045c4 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458a:	d018      	beq.n	80045be <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800458c:	4a4f      	ldr	r2, [pc, #316]	; (80046cc <OV5640_SetResolution+0x1dc>)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	885b      	ldrh	r3, [r3, #2]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f103 0018 	add.w	r0, r3, #24
 80045a0:	4a4a      	ldr	r2, [pc, #296]	; (80046cc <OV5640_SetResolution+0x1dc>)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80045a8:	f107 020f 	add.w	r2, r7, #15
 80045ac:	2301      	movs	r3, #1
 80045ae:	f000 fb16 	bl	8004bde <ov5640_write_reg>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045bc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d9dc      	bls.n	8004584 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80045ca:	e078      	b.n	80046be <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e01f      	b.n	8004612 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d8:	d018      	beq.n	800460c <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80045da:	4a3d      	ldr	r2, [pc, #244]	; (80046d0 <OV5640_SetResolution+0x1e0>)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	885b      	ldrh	r3, [r3, #2]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f103 0018 	add.w	r0, r3, #24
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <OV5640_SetResolution+0x1e0>)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80045f6:	f107 020f 	add.w	r2, r7, #15
 80045fa:	2301      	movs	r3, #1
 80045fc:	f000 faef 	bl	8004bde <ov5640_write_reg>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800460a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3301      	adds	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d9dc      	bls.n	80045d2 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8004618:	e051      	b.n	80046be <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	e01f      	b.n	8004660 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004626:	d018      	beq.n	800465a <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8004628:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <OV5640_SetResolution+0x1e4>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	885b      	ldrh	r3, [r3, #2]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f103 0018 	add.w	r0, r3, #24
 800463c:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <OV5640_SetResolution+0x1e4>)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004644:	f107 020f 	add.w	r2, r7, #15
 8004648:	2301      	movs	r3, #1
 800464a:	f000 fac8 	bl	8004bde <ov5640_write_reg>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004658:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b03      	cmp	r3, #3
 8004664:	d9dc      	bls.n	8004620 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8004666:	e02a      	b.n	80046be <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	e01f      	b.n	80046ae <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004674:	d018      	beq.n	80046a8 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <OV5640_SetResolution+0x1e8>)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	885b      	ldrh	r3, [r3, #2]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f103 0018 	add.w	r0, r3, #24
 800468a:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <OV5640_SetResolution+0x1e8>)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004692:	f107 020f 	add.w	r2, r7, #15
 8004696:	2301      	movs	r3, #1
 8004698:	f000 faa1 	bl	8004bde <ov5640_write_reg>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 80046a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3301      	adds	r3, #1
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d9dc      	bls.n	800466e <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 80046b4:	e003      	b.n	80046be <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ba:	617b      	str	r3, [r7, #20]
        break;
 80046bc:	bf00      	nop
    }
  }

  return ret;
 80046be:	697b      	ldr	r3, [r7, #20]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	0800ca30 	.word	0x0800ca30
 80046cc:	0800ca40 	.word	0x0800ca40
 80046d0:	0800ca50 	.word	0x0800ca50
 80046d4:	0800ca60 	.word	0x0800ca60
 80046d8:	0800ca70 	.word	0x0800ca70

080046dc <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d011      	beq.n	8004718 <OV5640_SetPolarities+0x3c>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <OV5640_SetPolarities+0x24>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10b      	bne.n	8004718 <OV5640_SetPolarities+0x3c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <OV5640_SetPolarities+0x3c>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d006      	beq.n	8004720 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e01e      	b.n	800475e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	015b      	lsls	r3, r3, #5
 8004726:	b2da      	uxtb	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	4313      	orrs	r3, r2
 8004732:	b2da      	uxtb	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	4313      	orrs	r3, r2
 800473a:	b2db      	uxtb	r3, r3
 800473c:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f103 0018 	add.w	r0, r3, #24
 8004744:	f107 0213 	add.w	r2, r7, #19
 8004748:	2301      	movs	r3, #1
 800474a:	f244 7140 	movw	r1, #18240	; 0x4740
 800474e:	f000 fa46 	bl	8004bde <ov5640_write_reg>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800475c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800475e:	697b      	ldr	r3, [r7, #20]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f103 0018 	add.w	r0, r3, #24
 8004782:	f107 020b 	add.w	r2, r7, #11
 8004786:	2301      	movs	r3, #1
 8004788:	f243 0108 	movw	r1, #12296	; 0x3008
 800478c:	f000 fa27 	bl	8004bde <ov5640_write_reg>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e032      	b.n	8004804 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800479e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9b8 	bl	8004b18 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f103 0018 	add.w	r0, r3, #24
 80047ae:	f107 020b 	add.w	r2, r7, #11
 80047b2:	2301      	movs	r3, #1
 80047b4:	f243 010a 	movw	r1, #12298	; 0x300a
 80047b8:	f000 f9fa 	bl	8004bb0 <ov5640_read_reg>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e01c      	b.n	8004804 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80047ca:	7afb      	ldrb	r3, [r7, #11]
 80047cc:	021a      	lsls	r2, r3, #8
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f103 0018 	add.w	r0, r3, #24
 80047d8:	f107 020b 	add.w	r2, r7, #11
 80047dc:	2301      	movs	r3, #1
 80047de:	f243 010b 	movw	r1, #12299	; 0x300b
 80047e2:	f000 f9e5 	bl	8004bb0 <ov5640_read_reg>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e007      	b.n	8004804 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	7afa      	ldrb	r2, [r7, #11]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f103 0018 	add.w	r0, r3, #24
 8004822:	f107 020b 	add.w	r2, r7, #11
 8004826:	2301      	movs	r3, #1
 8004828:	f643 0120 	movw	r1, #14368	; 0x3820
 800482c:	f000 f9c0 	bl	8004bb0 <ov5640_read_reg>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8004836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e0cb      	b.n	80049d6 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f023 0306 	bic.w	r3, r3, #6
 8004844:	b2db      	uxtb	r3, r3
 8004846:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f103 0018 	add.w	r0, r3, #24
 800484e:	f107 020a 	add.w	r2, r7, #10
 8004852:	2301      	movs	r3, #1
 8004854:	f643 0121 	movw	r1, #14369	; 0x3821
 8004858:	f000 f9aa 	bl	8004bb0 <ov5640_read_reg>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8004862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e0b5      	b.n	80049d6 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 800486e:	7abb      	ldrb	r3, [r7, #10]
 8004870:	f023 0306 	bic.w	r3, r3, #6
 8004874:	b2db      	uxtb	r3, r3
 8004876:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b03      	cmp	r3, #3
 800487c:	d056      	beq.n	800492c <OV5640_MirrorFlipConfig+0x11e>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d87f      	bhi.n	8004984 <OV5640_MirrorFlipConfig+0x176>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d029      	beq.n	80048de <OV5640_MirrorFlipConfig+0xd0>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d179      	bne.n	8004984 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f103 0018 	add.w	r0, r3, #24
 8004896:	f107 020b 	add.w	r2, r7, #11
 800489a:	2301      	movs	r3, #1
 800489c:	f643 0120 	movw	r1, #14368	; 0x3820
 80048a0:	f000 f99d 	bl	8004bde <ov5640_write_reg>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ae:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80048b0:	e08a      	b.n	80049c8 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 80048b2:	7abb      	ldrb	r3, [r7, #10]
 80048b4:	f043 0306 	orr.w	r3, r3, #6
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f103 0018 	add.w	r0, r3, #24
 80048c2:	f107 020a 	add.w	r2, r7, #10
 80048c6:	2301      	movs	r3, #1
 80048c8:	f643 0121 	movw	r1, #14369	; 0x3821
 80048cc:	f000 f987 	bl	8004bde <ov5640_write_reg>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d078      	beq.n	80049c8 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048da:	60fb      	str	r3, [r7, #12]
          break;
 80048dc:	e074      	b.n	80049c8 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 80048de:	7afb      	ldrb	r3, [r7, #11]
 80048e0:	f043 0306 	orr.w	r3, r3, #6
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0018 	add.w	r0, r3, #24
 80048ee:	f107 020b 	add.w	r2, r7, #11
 80048f2:	2301      	movs	r3, #1
 80048f4:	f643 0120 	movw	r1, #14368	; 0x3820
 80048f8:	f000 f971 	bl	8004bde <ov5640_write_reg>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004906:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8004908:	e060      	b.n	80049cc <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f103 0018 	add.w	r0, r3, #24
 8004910:	f107 020a 	add.w	r2, r7, #10
 8004914:	2301      	movs	r3, #1
 8004916:	f643 0121 	movw	r1, #14369	; 0x3821
 800491a:	f000 f960 	bl	8004bde <ov5640_write_reg>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d053      	beq.n	80049cc <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004928:	60fb      	str	r3, [r7, #12]
          break;
 800492a:	e04f      	b.n	80049cc <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	f043 0306 	orr.w	r3, r3, #6
 8004932:	b2db      	uxtb	r3, r3
 8004934:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f103 0018 	add.w	r0, r3, #24
 800493c:	f107 020b 	add.w	r2, r7, #11
 8004940:	2301      	movs	r3, #1
 8004942:	f643 0120 	movw	r1, #14368	; 0x3820
 8004946:	f000 f94a 	bl	8004bde <ov5640_write_reg>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004954:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8004956:	e03b      	b.n	80049d0 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8004958:	7abb      	ldrb	r3, [r7, #10]
 800495a:	f043 0306 	orr.w	r3, r3, #6
 800495e:	b2db      	uxtb	r3, r3
 8004960:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f103 0018 	add.w	r0, r3, #24
 8004968:	f107 020a 	add.w	r2, r7, #10
 800496c:	2301      	movs	r3, #1
 800496e:	f643 0121 	movw	r1, #14369	; 0x3821
 8004972:	f000 f934 	bl	8004bde <ov5640_write_reg>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d029      	beq.n	80049d0 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004980:	60fb      	str	r3, [r7, #12]
          break;
 8004982:	e025      	b.n	80049d0 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f103 0018 	add.w	r0, r3, #24
 800498a:	f107 020b 	add.w	r2, r7, #11
 800498e:	2301      	movs	r3, #1
 8004990:	f643 0120 	movw	r1, #14368	; 0x3820
 8004994:	f000 f923 	bl	8004bde <ov5640_write_reg>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049a2:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80049a4:	e016      	b.n	80049d4 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f103 0018 	add.w	r0, r3, #24
 80049ac:	f107 020a 	add.w	r2, r7, #10
 80049b0:	2301      	movs	r3, #1
 80049b2:	f643 0121 	movw	r1, #14369	; 0x3821
 80049b6:	f000 f912 	bl	8004bde <ov5640_write_reg>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c4:	60fb      	str	r3, [r7, #12]
          break;
 80049c6:	e005      	b.n	80049d4 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80049d4:	bf00      	nop
      }
    }
  }

  return ret;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <OV5640_EmbeddedSynchroConfig>:
  * @param  pSyncCodes  pointer to Embedded Codes
  * @retval Component status
  */

int32_t OV5640_EmbeddedSynchroConfig(OV5640_Object_t *pObj, OV5640_SyncCodes_t *pSyncCodes)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_ERROR;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ee:	60fb      	str	r3, [r7, #12]

  /*[7] : SYNC code from reg 0x4732-0x4732, [1]: Enable Clip ,[0]: Enable CCIR656 */
  tmp = 0x83;
 80049f0:	2383      	movs	r3, #131	; 0x83
 80049f2:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_CTRL00, &tmp, 1) == OV5640_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 0018 	add.w	r0, r3, #24
 80049fa:	f107 020b 	add.w	r2, r7, #11
 80049fe:	2301      	movs	r3, #1
 8004a00:	f244 7130 	movw	r1, #18224	; 0x4730
 8004a04:	f000 f8eb 	bl	8004bde <ov5640_write_reg>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d153      	bne.n	8004ab6 <OV5640_EmbeddedSynchroConfig+0xd6>
  {
    tmp = pSyncCodes->FrameStartCode;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	72fb      	strb	r3, [r7, #11]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_FS, &tmp, 1) == OV5640_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f103 0018 	add.w	r0, r3, #24
 8004a1a:	f107 020b 	add.w	r2, r7, #11
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f244 7132 	movw	r1, #18226	; 0x4732
 8004a24:	f000 f8db 	bl	8004bde <ov5640_write_reg>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d143      	bne.n	8004ab6 <OV5640_EmbeddedSynchroConfig+0xd6>
    {
      tmp = pSyncCodes->FrameEndCode;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	78db      	ldrb	r3, [r3, #3]
 8004a32:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_FE, &tmp, 1) != OV5640_OK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f103 0018 	add.w	r0, r3, #24
 8004a3a:	f107 020b 	add.w	r2, r7, #11
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f244 7133 	movw	r1, #18227	; 0x4733
 8004a44:	f000 f8cb 	bl	8004bde <ov5640_write_reg>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <OV5640_EmbeddedSynchroConfig+0x74>
      {
        return OV5640_ERROR;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a52:	e05d      	b.n	8004b10 <OV5640_EmbeddedSynchroConfig+0x130>
      }
      tmp = pSyncCodes->LineStartCode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_LS, &tmp, 1) == OV5640_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f103 0018 	add.w	r0, r3, #24
 8004a60:	f107 020b 	add.w	r2, r7, #11
 8004a64:	2301      	movs	r3, #1
 8004a66:	f244 7134 	movw	r1, #18228	; 0x4734
 8004a6a:	f000 f8b8 	bl	8004bde <ov5640_write_reg>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d120      	bne.n	8004ab6 <OV5640_EmbeddedSynchroConfig+0xd6>
      {
        tmp = pSyncCodes->LineEndCode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	789b      	ldrb	r3, [r3, #2]
 8004a78:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_LE, &tmp, 1) == OV5640_OK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f103 0018 	add.w	r0, r3, #24
 8004a80:	f107 020b 	add.w	r2, r7, #11
 8004a84:	2301      	movs	r3, #1
 8004a86:	f244 7135 	movw	r1, #18229	; 0x4735
 8004a8a:	f000 f8a8 	bl	8004bde <ov5640_write_reg>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d110      	bne.n	8004ab6 <OV5640_EmbeddedSynchroConfig+0xd6>
        {
          /*Adding 1 dummy line */
          tmp = 0x01;
 8004a94:	2301      	movs	r3, #1
 8004a96:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_656_DUMMY_LINE, &tmp, 1) == OV5640_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f103 0018 	add.w	r0, r3, #24
 8004a9e:	f107 020b 	add.w	r2, r7, #11
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f244 7115 	movw	r1, #18197	; 0x4715
 8004aa8:	f000 f899 	bl	8004bde <ov5640_write_reg>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <OV5640_EmbeddedSynchroConfig+0xd6>
          {
            ret = OV5640_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* max clip value[9:8], to avoid SYNC code clipping */
  tmp = 0x2;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	72fb      	strb	r3, [r7, #11]
  if (ret == OV5640_OK)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <OV5640_EmbeddedSynchroConfig+0xf6>
  {
    ret = ov5640_write_reg(&pObj->Ctx, 0x4302, &tmp, 1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f103 0018 	add.w	r0, r3, #24
 8004ac6:	f107 020b 	add.w	r2, r7, #11
 8004aca:	2301      	movs	r3, #1
 8004acc:	f244 3102 	movw	r1, #17154	; 0x4302
 8004ad0:	f000 f885 	bl	8004bde <ov5640_write_reg>
 8004ad4:	60f8      	str	r0, [r7, #12]
  }
  if (ret == OV5640_OK)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <OV5640_EmbeddedSynchroConfig+0x112>
  {
    ret = ov5640_write_reg(&pObj->Ctx, 0x4306, &tmp, 1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f103 0018 	add.w	r0, r3, #24
 8004ae2:	f107 020b 	add.w	r2, r7, #11
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f244 3106 	movw	r1, #17158	; 0x4306
 8004aec:	f000 f877 	bl	8004bde <ov5640_write_reg>
 8004af0:	60f8      	str	r0, [r7, #12]
  }
  if (ret == OV5640_OK)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <OV5640_EmbeddedSynchroConfig+0x12e>
  {
    ret = ov5640_write_reg(&pObj->Ctx, 0x430A, &tmp, 1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f103 0018 	add.w	r0, r3, #24
 8004afe:	f107 020b 	add.w	r2, r7, #11
 8004b02:	2301      	movs	r3, #1
 8004b04:	f244 310a 	movw	r1, #17162	; 0x430a
 8004b08:	f000 f869 	bl	8004bde <ov5640_write_reg>
 8004b0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	4798      	blx	r3
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8004b2c:	bf00      	nop
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	4798      	blx	r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d8f5      	bhi.n	8004b2e <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	461a      	mov	r2, r3
 8004b58:	460b      	mov	r3, r1
 8004b5a:	817b      	strh	r3, [r7, #10]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	691c      	ldr	r4, [r3, #16]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	8918      	ldrh	r0, [r3, #8]
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	8979      	ldrh	r1, [r7, #10]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	47a0      	blx	r4
 8004b74:	4603      	mov	r3, r0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd90      	pop	{r4, r7, pc}

08004b7e <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b7e:	b590      	push	{r4, r7, lr}
 8004b80:	b087      	sub	sp, #28
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	817b      	strh	r3, [r7, #10]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	68dc      	ldr	r4, [r3, #12]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	8918      	ldrh	r0, [r3, #8]
 8004b9e:	893b      	ldrh	r3, [r7, #8]
 8004ba0:	8979      	ldrh	r1, [r7, #10]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	47a0      	blx	r4
 8004ba6:	4603      	mov	r3, r0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd90      	pop	{r4, r7, pc}

08004bb0 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	817b      	strh	r3, [r7, #10]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685c      	ldr	r4, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6898      	ldr	r0, [r3, #8]
 8004bcc:	893b      	ldrh	r3, [r7, #8]
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	47a0      	blx	r4
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd90      	pop	{r4, r7, pc}

08004bde <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8004bde:	b590      	push	{r4, r7, lr}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	461a      	mov	r2, r3
 8004bea:	460b      	mov	r3, r1
 8004bec:	817b      	strh	r3, [r7, #10]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681c      	ldr	r4, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6898      	ldr	r0, [r3, #8]
 8004bfa:	893b      	ldrh	r3, [r7, #8]
 8004bfc:	8979      	ldrh	r1, [r7, #10]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	47a0      	blx	r4
 8004c02:	4603      	mov	r3, r0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}

08004c0c <BSP_LED_Init>:
  *            @arg  LED7 only if IO expander is used
  *            @arg  LED8 only if IO expander is used
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08e      	sub	sp, #56	; 0x38
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /* (USE_BSP_IO_CLASS > 0) */
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led == LED5) || (Led == LED6))
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <BSP_LED_Init+0x1a>
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d144      	bne.n	8004cb0 <BSP_LED_Init+0xa4>
  {
    /* Enable the GPIO_LED clock */
    if (Led == LED5)
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10f      	bne.n	8004c4c <BSP_LED_Init+0x40>
    {
      LED5_GPIO_CLK_ENABLE();
 8004c2c:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <BSP_LED_Init+0x100>)
 8004c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c32:	4a36      	ldr	r2, [pc, #216]	; (8004d0c <BSP_LED_Init+0x100>)
 8004c34:	f043 0302 	orr.w	r3, r3, #2
 8004c38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c3c:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <BSP_LED_Init+0x100>)
 8004c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	e00e      	b.n	8004c6a <BSP_LED_Init+0x5e>
    }
    else
    {
      LED6_GPIO_CLK_ENABLE();
 8004c4c:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <BSP_LED_Init+0x100>)
 8004c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c52:	4a2e      	ldr	r2, [pc, #184]	; (8004d0c <BSP_LED_Init+0x100>)
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <BSP_LED_Init+0x100>)
 8004c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
    }

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c72:	2302      	movs	r3, #2
 8004c74:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pin = LED_PIN [Led];
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <BSP_LED_Init+0x104>)
 8004c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	4a24      	ldr	r2, [pc, #144]	; (8004d14 <BSP_LED_Init+0x108>)
 8004c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c88:	f107 0214 	add.w	r2, r7, #20
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f003 fc42 	bl	8008518 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_RESET);
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <BSP_LED_Init+0x108>)
 8004c98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <BSP_LED_Init+0x104>)
 8004ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f003 ff03 	bl	8008ab4 <HAL_GPIO_WritePin>
 8004cae:	e027      	b.n	8004d00 <BSP_LED_Init+0xf4>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)

    io_init_structure.Pin  = LED_PIN[Led];
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <BSP_LED_Init+0x104>)
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    io_init_structure.Pull = IO_PULLDOWN;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Initialize IO expander */
    if (BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8004cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f000 fd69 	bl	80057a0 <BSP_IO_Init>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <BSP_LED_Init+0xd0>
    {
      ret = BSP_ERROR_NO_INIT;
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cda:	e00e      	b.n	8004cfa <BSP_LED_Init+0xee>
    }
    else
    {
      if (BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET) != BSP_ERROR_NONE)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <BSP_LED_Init+0x104>)
 8004ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f000 fdb9 	bl	8005860 <BSP_IO_WritePin>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <BSP_LED_Init+0xee>
      {
        ret = BSP_ERROR_NO_INIT;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    HAL_Delay(1);
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f001 fc50 	bl	80065a0 <HAL_Delay>
#endif /* (USE_BSP_IO_CLASS > 0) */
  }

  return ret;
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3738      	adds	r7, #56	; 0x38
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	46020c00 	.word	0x46020c00
 8004d10:	0800ca80 	.word	0x0800ca80
 8004d14:	20000090 	.word	0x20000090

08004d18 <BSP_LED_Off>:
  *            @arg  LED7 only if IO expander is used
  *            @arg  LED8 only if IO expander is used
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  if ((Led == LED5) || (Led == LED6))
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <BSP_LED_Off+0x16>
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d10f      	bne.n	8004d4e <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <BSP_LED_Off+0x54>)
 8004d32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	4a0d      	ldr	r2, [pc, #52]	; (8004d70 <BSP_LED_Off+0x58>)
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2200      	movs	r2, #0
 8004d42:	4619      	mov	r1, r3
 8004d44:	f003 feb6 	bl	8008ab4 <HAL_GPIO_WritePin>
    ret = BSP_ERROR_NONE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e009      	b.n	8004d62 <BSP_LED_Off+0x4a>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <BSP_LED_Off+0x58>)
 8004d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d56:	2200      	movs	r2, #0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f000 fd80 	bl	8005860 <BSP_IO_WritePin>
 8004d60:	60f8      	str	r0, [r7, #12]
#else
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* (USE_BSP_IO_CLASS > 0) */
  }
  return ret;
 8004d62:	68fb      	ldr	r3, [r7, #12]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000090 	.word	0x20000090
 8004d70:	0800ca80 	.word	0x0800ca80

08004d74 <BSP_LED_Toggle>:
  *            @arg  LED7 only if IO expander is used
  *            @arg  LED8 only if IO expander is used
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  if ((Led == LED5) || (Led == LED6))
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <BSP_LED_Toggle+0x16>
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d10f      	bne.n	8004daa <BSP_LED_Toggle+0x36>
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <BSP_LED_Toggle+0x54>)
 8004d8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	490d      	ldr	r1, [pc, #52]	; (8004dcc <BSP_LED_Toggle+0x58>)
 8004d96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f003 fea0 	bl	8008ae4 <HAL_GPIO_TogglePin>
    ret = BSP_ERROR_NONE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e008      	b.n	8004dbc <BSP_LED_Toggle+0x48>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_TogglePin(0, LED_PIN[Led]);
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <BSP_LED_Toggle+0x58>)
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	4619      	mov	r1, r3
 8004db4:	2000      	movs	r0, #0
 8004db6:	f000 fd85 	bl	80058c4 <BSP_IO_TogglePin>
 8004dba:	60f8      	str	r0, [r7, #12]
#else
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* (USE_BSP_IO_CLASS > 0) */
  }
  return ret;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000090 	.word	0x20000090
 8004dcc:	0800ca80 	.word	0x0800ca80

08004dd0 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8004dda:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <BSP_I2C2_Init+0x64>)
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <BSP_I2C2_Init+0x68>)
 8004dde:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <BSP_I2C2_Init+0x6c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11f      	bne.n	8004e28 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <BSP_I2C2_Init+0x6c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <BSP_I2C2_Init+0x6c>)
 8004df0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8004df2:	4810      	ldr	r0, [pc, #64]	; (8004e34 <BSP_I2C2_Init+0x64>)
 8004df4:	f004 f9c2 	bl	800917c <HAL_I2C_GetState>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d114      	bne.n	8004e28 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8004dfe:	480d      	ldr	r0, [pc, #52]	; (8004e34 <BSP_I2C2_Init+0x64>)
 8004e00:	f000 fbbc 	bl	800557c <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* BSP_USE_CMSIS_OS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8004e04:	f006 f840 	bl	800ae88 <HAL_RCC_GetPCLK1Freq>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	490d      	ldr	r1, [pc, #52]	; (8004e40 <BSP_I2C2_Init+0x70>)
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f93f 	bl	8005090 <I2C_GetTiming>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4619      	mov	r1, r3
 8004e16:	4807      	ldr	r0, [pc, #28]	; (8004e34 <BSP_I2C2_Init+0x64>)
 8004e18:	f000 f838 	bl	8004e8c <MX_I2C2_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004e22:	f06f 0307 	mvn.w	r3, #7
 8004e26:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8004e28:	687b      	ldr	r3, [r7, #4]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200264fc 	.word	0x200264fc
 8004e38:	40005800 	.word	0x40005800
 8004e3c:	20025af4 	.word	0x20025af4
 8004e40:	00061a80 	.word	0x00061a80

08004e44 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <BSP_I2C2_DeInit+0x40>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	4a0b      	ldr	r2, [pc, #44]	; (8004e84 <BSP_I2C2_DeInit+0x40>)
 8004e56:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <BSP_I2C2_DeInit+0x40>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8004e60:	4809      	ldr	r0, [pc, #36]	; (8004e88 <BSP_I2C2_DeInit+0x44>)
 8004e62:	f000 fbf3 	bl	800564c <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8004e66:	4808      	ldr	r0, [pc, #32]	; (8004e88 <BSP_I2C2_DeInit+0x44>)
 8004e68:	f003 ff16 	bl	8008c98 <HAL_I2C_DeInit>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004e72:	f06f 0307 	mvn.w	r3, #7
 8004e76:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8004e78:	687b      	ldr	r3, [r7, #4]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20025af4 	.word	0x20025af4
 8004e88:	200264fc 	.word	0x200264fc

08004e8c <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f003 fe55 	bl	8008b7a <HAL_I2C_Init>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
 8004eda:	e014      	b.n	8004f06 <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f004 fc1c 	bl	8009720 <HAL_I2CEx_ConfigAnalogFilter>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	e008      	b.n	8004f06 <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f004 fc5d 	bl	80097b6 <HAL_I2CEx_ConfigDigitalFilter>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60ba      	str	r2, [r7, #8]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	81fb      	strh	r3, [r7, #14]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	81bb      	strh	r3, [r7, #12]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004f26:	89b9      	ldrh	r1, [r7, #12]
 8004f28:	89f8      	ldrh	r0, [r7, #14]
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f000 fbaf 	bl	8005694 <I2C2_WriteReg>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e00c      	b.n	8004f5c <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8004f42:	4809      	ldr	r0, [pc, #36]	; (8004f68 <BSP_I2C2_WriteReg+0x58>)
 8004f44:	f004 f928 	bl	8009198 <HAL_I2C_GetError>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d103      	bne.n	8004f56 <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004f4e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e002      	b.n	8004f5c <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004f56:	f06f 0303 	mvn.w	r3, #3
 8004f5a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004f5c:	697b      	ldr	r3, [r7, #20]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	200264fc 	.word	0x200264fc

08004f6c <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60ba      	str	r2, [r7, #8]
 8004f74:	461a      	mov	r2, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	81fb      	strh	r3, [r7, #14]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	81bb      	strh	r3, [r7, #12]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004f82:	89b9      	ldrh	r1, [r7, #12]
 8004f84:	89f8      	ldrh	r0, [r7, #14]
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f000 fba7 	bl	80056e0 <I2C2_ReadReg>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	e00c      	b.n	8004fb8 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8004f9e:	4809      	ldr	r0, [pc, #36]	; (8004fc4 <BSP_I2C2_ReadReg+0x58>)
 8004fa0:	f004 f8fa 	bl	8009198 <HAL_I2C_GetError>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d103      	bne.n	8004fb2 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004faa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	e002      	b.n	8004fb8 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004fb2:	f06f 0303 	mvn.w	r3, #3
 8004fb6:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004fb8:	697b      	ldr	r3, [r7, #20]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200264fc 	.word	0x200264fc

08004fc8 <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60ba      	str	r2, [r7, #8]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	81fb      	strh	r3, [r7, #14]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	81bb      	strh	r3, [r7, #12]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8004fde:	89b9      	ldrh	r1, [r7, #12]
 8004fe0:	89f8      	ldrh	r0, [r7, #14]
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f000 fb53 	bl	8005694 <I2C2_WriteReg>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <BSP_I2C2_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e00c      	b.n	8005014 <BSP_I2C2_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8004ffa:	4809      	ldr	r0, [pc, #36]	; (8005020 <BSP_I2C2_WriteReg16+0x58>)
 8004ffc:	f004 f8cc 	bl	8009198 <HAL_I2C_GetError>
 8005000:	4603      	mov	r3, r0
 8005002:	2b04      	cmp	r3, #4
 8005004:	d103      	bne.n	800500e <BSP_I2C2_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005006:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e002      	b.n	8005014 <BSP_I2C2_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800500e:	f06f 0303 	mvn.w	r3, #3
 8005012:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8005014:	697b      	ldr	r3, [r7, #20]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	200264fc 	.word	0x200264fc

08005024 <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60ba      	str	r2, [r7, #8]
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	81fb      	strh	r3, [r7, #14]
 8005032:	460b      	mov	r3, r1
 8005034:	81bb      	strh	r3, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800503a:	89b9      	ldrh	r1, [r7, #12]
 800503c:	89f8      	ldrh	r0, [r7, #14]
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2202      	movs	r2, #2
 8005046:	f000 fb4b 	bl	80056e0 <I2C2_ReadReg>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <BSP_I2C2_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e00c      	b.n	8005070 <BSP_I2C2_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8005056:	4809      	ldr	r0, [pc, #36]	; (800507c <BSP_I2C2_ReadReg16+0x58>)
 8005058:	f004 f89e 	bl	8009198 <HAL_I2C_GetError>
 800505c:	4603      	mov	r3, r0
 800505e:	2b04      	cmp	r3, #4
 8005060:	d103      	bne.n	800506a <BSP_I2C2_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005062:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e002      	b.n	8005070 <BSP_I2C2_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800506a:	f06f 0303 	mvn.w	r3, #3
 800506e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8005070:	697b      	ldr	r3, [r7, #20]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200264fc 	.word	0x200264fc

08005080 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8005084:	f001 fa80 	bl	8006588 <HAL_GetTick>
 8005088:	4603      	mov	r3, r0
}
 800508a:	4618      	mov	r0, r3
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d06b      	beq.n	800517c <I2C_GetTiming+0xec>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d068      	beq.n	800517c <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e060      	b.n	8005172 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80050b0:	4a35      	ldr	r2, [pc, #212]	; (8005188 <I2C_GetTiming+0xf8>)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	212c      	movs	r1, #44	; 0x2c
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d352      	bcc.n	800516c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80050c6:	4a30      	ldr	r2, [pc, #192]	; (8005188 <I2C_GetTiming+0xf8>)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	212c      	movs	r1, #44	; 0x2c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	3308      	adds	r3, #8
 80050d4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d847      	bhi.n	800516c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80050dc:	6939      	ldr	r1, [r7, #16]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f856 	bl	8005190 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80050e4:	6939      	ldr	r1, [r7, #16]
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f940 	bl	800536c <I2C_Compute_SCLL_SCLH>
 80050ec:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b7f      	cmp	r3, #127	; 0x7f
 80050f2:	d842      	bhi.n	800517a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80050f4:	4925      	ldr	r1, [pc, #148]	; (800518c <I2C_GetTiming+0xfc>)
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8005106:	4821      	ldr	r0, [pc, #132]	; (800518c <I2C_GetTiming+0xfc>)
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4403      	add	r3, r0
 8005114:	3304      	adds	r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	051b      	lsls	r3, r3, #20
 800511a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800511e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8005120:	481a      	ldr	r0, [pc, #104]	; (800518c <I2C_GetTiming+0xfc>)
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4403      	add	r3, r0
 800512e:	3308      	adds	r3, #8
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8005138:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 800513a:	4814      	ldr	r0, [pc, #80]	; (800518c <I2C_GetTiming+0xfc>)
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4403      	add	r3, r0
 8005148:	330c      	adds	r3, #12
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8005150:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005152:	480e      	ldr	r0, [pc, #56]	; (800518c <I2C_GetTiming+0xfc>)
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4403      	add	r3, r0
 8005160:	3310      	adds	r3, #16
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8005166:	430b      	orrs	r3, r1
 8005168:	617b      	str	r3, [r7, #20]
        }
        break;
 800516a:	e006      	b.n	800517a <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d99b      	bls.n	80050b0 <I2C_GetTiming+0x20>
 8005178:	e000      	b.n	800517c <I2C_GetTiming+0xec>
        break;
 800517a:	bf00      	nop
      }
    }
  }

  return ret;
 800517c:	697b      	ldr	r3, [r7, #20]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	0800ca90 	.word	0x0800ca90
 800518c:	20025af8 	.word	0x20025af8

08005190 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005190:	b480      	push	{r7}
 8005192:	b08f      	sub	sp, #60	; 0x3c
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800519a:	2310      	movs	r3, #16
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	085a      	lsrs	r2, r3, #1
 80051a2:	4b6e      	ldr	r3, [pc, #440]	; (800535c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80051a4:	4413      	add	r3, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ac:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80051ae:	2332      	movs	r3, #50	; 0x32
 80051b0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80051b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80051b6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80051b8:	4a69      	ldr	r2, [pc, #420]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	212c      	movs	r1, #44	; 0x2c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	3324      	adds	r3, #36	; 0x24
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	4a65      	ldr	r2, [pc, #404]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	212c      	movs	r1, #44	; 0x2c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	330c      	adds	r3, #12
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80051dc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80051de:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80051e0:	495f      	ldr	r1, [pc, #380]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	202c      	movs	r0, #44	; 0x2c
 80051e6:	fb00 f303 	mul.w	r3, r0, r3
 80051ea:	440b      	add	r3, r1
 80051ec:	3328      	adds	r3, #40	; 0x28
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3303      	adds	r3, #3
 80051f2:	69f9      	ldr	r1, [r7, #28]
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80051fc:	4a58      	ldr	r2, [pc, #352]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	212c      	movs	r1, #44	; 0x2c
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	3310      	adds	r3, #16
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	4a54      	ldr	r2, [pc, #336]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	212c      	movs	r1, #44	; 0x2c
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	4413      	add	r3, r2
 800521a:	3320      	adds	r3, #32
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005220:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005222:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005224:	494e      	ldr	r1, [pc, #312]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	202c      	movs	r0, #44	; 0x2c
 800522a:	fb00 f303 	mul.w	r3, r0, r3
 800522e:	440b      	add	r3, r1
 8005230:	3328      	adds	r3, #40	; 0x28
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3304      	adds	r3, #4
 8005236:	69f9      	ldr	r1, [r7, #28]
 8005238:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8005240:	4a47      	ldr	r2, [pc, #284]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	212c      	movs	r1, #44	; 0x2c
 8005246:	fb01 f303 	mul.w	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	3320      	adds	r3, #32
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	4a43      	ldr	r2, [pc, #268]	; (8005360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	3314      	adds	r3, #20
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4403      	add	r3, r0
 8005264:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	dc01      	bgt.n	8005270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	2b00      	cmp	r3, #0
 8005274:	dc01      	bgt.n	800527a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800527a:	2300      	movs	r3, #0
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
 800527e:	e062      	b.n	8005346 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005280:	2300      	movs	r3, #0
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	e059      	b.n	800533a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	3301      	adds	r3, #1
 800528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528c:	3201      	adds	r2, #1
 800528e:	fb03 f202 	mul.w	r2, r3, r2
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d348      	bcc.n	8005334 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	e042      	b.n	800532e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	3301      	adds	r3, #1
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	fb03 f202 	mul.w	r2, r3, r2
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d332      	bcc.n	8005328 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d82e      	bhi.n	8005328 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 80052ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d02a      	beq.n	8005328 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4924      	ldr	r1, [pc, #144]	; (8005368 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80052e6:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	491f      	ldr	r1, [pc, #124]	; (8005368 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	3304      	adds	r3, #4
 80052f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fa:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4919      	ldr	r1, [pc, #100]	; (8005368 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	3308      	adds	r3, #8
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	4a11      	ldr	r2, [pc, #68]	; (8005364 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800531e:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b7f      	cmp	r3, #127	; 0x7f
 8005326:	d812      	bhi.n	800534e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	3301      	adds	r3, #1
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d9b9      	bls.n	80052a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	3301      	adds	r3, #1
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2b0f      	cmp	r3, #15
 800533e:	d9a2      	bls.n	8005286 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	3301      	adds	r3, #1
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2b0f      	cmp	r3, #15
 800534a:	d999      	bls.n	8005280 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800534c:	e000      	b.n	8005350 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800534e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8005350:	373c      	adds	r7, #60	; 0x3c
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	3b9aca00 	.word	0x3b9aca00
 8005360:	0800ca90 	.word	0x0800ca90
 8005364:	200264f8 	.word	0x200264f8
 8005368:	20025af8 	.word	0x20025af8

0800536c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800536c:	b480      	push	{r7}
 800536e:	b093      	sub	sp, #76	; 0x4c
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800537a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	085a      	lsrs	r2, r3, #1
 8005380:	4b7a      	ldr	r3, [pc, #488]	; (800556c <I2C_Compute_SCLL_SCLH+0x200>)
 8005382:	4413      	add	r3, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	fbb3 f3f2 	udiv	r3, r3, r2
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 800538c:	4a78      	ldr	r2, [pc, #480]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	085a      	lsrs	r2, r3, #1
 800539c:	4b73      	ldr	r3, [pc, #460]	; (800556c <I2C_Compute_SCLL_SCLH+0x200>)
 800539e:	4413      	add	r3, r2
 80053a0:	4973      	ldr	r1, [pc, #460]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	202c      	movs	r0, #44	; 0x2c
 80053a6:	fb00 f202 	mul.w	r2, r0, r2
 80053aa:	440a      	add	r2, r1
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80053b4:	2332      	movs	r3, #50	; 0x32
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80053b8:	4a6d      	ldr	r2, [pc, #436]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3328      	adds	r3, #40	; 0x28
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80053d0:	4a67      	ldr	r2, [pc, #412]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	212c      	movs	r1, #44	; 0x2c
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	3304      	adds	r3, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a62      	ldr	r2, [pc, #392]	; (800556c <I2C_Compute_SCLL_SCLH+0x200>)
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80053e8:	4a61      	ldr	r2, [pc, #388]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	212c      	movs	r1, #44	; 0x2c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	3308      	adds	r3, #8
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a5c      	ldr	r2, [pc, #368]	; (800556c <I2C_Compute_SCLL_SCLH+0x200>)
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005404:	2300      	movs	r3, #0
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
 8005408:	e0a3      	b.n	8005552 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800540a:	495a      	ldr	r1, [pc, #360]	; (8005574 <I2C_Compute_SCLL_SCLH+0x208>)
 800540c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005424:	2300      	movs	r3, #0
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	e08c      	b.n	8005544 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	441a      	add	r2, r3
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	3301      	adds	r3, #1
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	fb03 f101 	mul.w	r1, r3, r1
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	440b      	add	r3, r1
 8005440:	4413      	add	r3, r2
 8005442:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005444:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	212c      	movs	r1, #44	; 0x2c
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	4413      	add	r3, r2
 8005450:	3318      	adds	r3, #24
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d971      	bls.n	800553e <I2C_Compute_SCLL_SCLH+0x1d2>
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	089b      	lsrs	r3, r3, #2
 8005466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005468:	429a      	cmp	r2, r3
 800546a:	d268      	bcs.n	800553e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800546c:	2300      	movs	r3, #0
 800546e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005470:	e062      	b.n	8005538 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	441a      	add	r2, r3
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	3301      	adds	r3, #1
 800547c:	6979      	ldr	r1, [r7, #20]
 800547e:	fb03 f101 	mul.w	r1, r3, r1
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	440b      	add	r3, r1
 8005488:	4413      	add	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	441a      	add	r2, r3
 8005492:	4937      	ldr	r1, [pc, #220]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	202c      	movs	r0, #44	; 0x2c
 8005498:	fb00 f303 	mul.w	r3, r0, r3
 800549c:	440b      	add	r3, r1
 800549e:	3320      	adds	r3, #32
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	441a      	add	r2, r3
 80054a4:	4932      	ldr	r1, [pc, #200]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	202c      	movs	r0, #44	; 0x2c
 80054aa:	fb00 f303 	mul.w	r3, r0, r3
 80054ae:	440b      	add	r3, r1
 80054b0:	3324      	adds	r3, #36	; 0x24
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4413      	add	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d338      	bcc.n	8005532 <I2C_Compute_SCLL_SCLH+0x1c6>
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d834      	bhi.n	8005532 <I2C_Compute_SCLL_SCLH+0x1c6>
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <I2C_Compute_SCLL_SCLH+0x204>)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	212c      	movs	r1, #44	; 0x2c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	331c      	adds	r3, #28
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d329      	bcc.n	8005532 <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 80054de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d225      	bcs.n	8005532 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da02      	bge.n	80054fa <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	425b      	negs	r3, r3
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054fe:	429a      	cmp	r2, r3
 8005500:	d917      	bls.n	8005532 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8005506:	491b      	ldr	r1, [pc, #108]	; (8005574 <I2C_Compute_SCLL_SCLH+0x208>)
 8005508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3310      	adds	r3, #16
 8005516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005518:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800551a:	4916      	ldr	r1, [pc, #88]	; (8005574 <I2C_Compute_SCLL_SCLH+0x208>)
 800551c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	330c      	adds	r3, #12
 800552a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800552c:	601a      	str	r2, [r3, #0]
              ret = count;
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	3301      	adds	r3, #1
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	2bff      	cmp	r3, #255	; 0xff
 800553c:	d999      	bls.n	8005472 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800553e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005540:	3301      	adds	r3, #1
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	2bff      	cmp	r3, #255	; 0xff
 8005548:	f67f af6f 	bls.w	800542a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	3301      	adds	r3, #1
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <I2C_Compute_SCLL_SCLH+0x20c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005558:	429a      	cmp	r2, r3
 800555a:	f4ff af56 	bcc.w	800540a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800555e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005560:	4618      	mov	r0, r3
 8005562:	374c      	adds	r7, #76	; 0x4c
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	3b9aca00 	.word	0x3b9aca00
 8005570:	0800ca90 	.word	0x0800ca90
 8005574:	20025af8 	.word	0x20025af8
 8005578:	200264f8 	.word	0x200264f8

0800557c <I2C2_MspInit>:
  * @brief  Initializes I2C2 MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(const I2C_HandleTypeDef *hI2c)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8005584:	4b2f      	ldr	r3, [pc, #188]	; (8005644 <I2C2_MspInit+0xc8>)
 8005586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558a:	4a2e      	ldr	r2, [pc, #184]	; (8005644 <I2C2_MspInit+0xc8>)
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005594:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <I2C2_MspInit+0xc8>)
 8005596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80055a2:	4b28      	ldr	r3, [pc, #160]	; (8005644 <I2C2_MspInit+0xc8>)
 80055a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a8:	4a26      	ldr	r2, [pc, #152]	; (8005644 <I2C2_MspInit+0xc8>)
 80055aa:	f043 0302 	orr.w	r3, r3, #2
 80055ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055b2:	4b24      	ldr	r3, [pc, #144]	; (8005644 <I2C2_MspInit+0xc8>)
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 80055c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80055c6:	2312      	movs	r3, #18
 80055c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80055ce:	2302      	movs	r3, #2
 80055d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 80055d2:	2304      	movs	r3, #4
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	4619      	mov	r1, r3
 80055dc:	481a      	ldr	r0, [pc, #104]	; (8005648 <I2C2_MspInit+0xcc>)
 80055de:	f002 ff9b 	bl	8008518 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 80055e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80055e8:	2312      	movs	r3, #18
 80055ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80055ec:	2301      	movs	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80055f0:	2302      	movs	r3, #2
 80055f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 80055f4:	2304      	movs	r3, #4
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80055f8:	f107 0314 	add.w	r3, r7, #20
 80055fc:	4619      	mov	r1, r3
 80055fe:	4812      	ldr	r0, [pc, #72]	; (8005648 <I2C2_MspInit+0xcc>)
 8005600:	f002 ff8a 	bl	8008518 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <I2C2_MspInit+0xc8>)
 8005606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800560a:	4a0e      	ldr	r2, [pc, #56]	; (8005644 <I2C2_MspInit+0xc8>)
 800560c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005610:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005614:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <I2C2_MspInit+0xc8>)
 8005616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <I2C2_MspInit+0xc8>)
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	4a07      	ldr	r2, [pc, #28]	; (8005644 <I2C2_MspInit+0xc8>)
 8005628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800562c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 800562e:	4b05      	ldr	r3, [pc, #20]	; (8005644 <I2C2_MspInit+0xc8>)
 8005630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005632:	4a04      	ldr	r2, [pc, #16]	; (8005644 <I2C2_MspInit+0xc8>)
 8005634:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005638:	6753      	str	r3, [r2, #116]	; 0x74
}
 800563a:	bf00      	nop
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	46020c00 	.word	0x46020c00
 8005648:	42020400 	.word	0x42020400

0800564c <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8005654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005658:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4619      	mov	r1, r3
 800565e:	480b      	ldr	r0, [pc, #44]	; (800568c <I2C2_MspDeInit+0x40>)
 8005660:	f003 f932 	bl	80088c8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 8005664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005668:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4619      	mov	r1, r3
 800566e:	4807      	ldr	r0, [pc, #28]	; (800568c <I2C2_MspDeInit+0x40>)
 8005670:	f003 f92a 	bl	80088c8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <I2C2_MspDeInit+0x44>)
 8005676:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <I2C2_MspDeInit+0x44>)
 800567c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005680:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8005684:	bf00      	nop
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	42020400 	.word	0x42020400
 8005690:	46020c00 	.word	0x46020c00

08005694 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af04      	add	r7, sp, #16
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	4603      	mov	r3, r0
 800569e:	81fb      	strh	r3, [r7, #14]
 80056a0:	460b      	mov	r3, r1
 80056a2:	81bb      	strh	r3, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80056a8:	8978      	ldrh	r0, [r7, #10]
 80056aa:	89ba      	ldrh	r2, [r7, #12]
 80056ac:	89f9      	ldrh	r1, [r7, #14]
 80056ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80056b2:	9302      	str	r3, [sp, #8]
 80056b4:	8b3b      	ldrh	r3, [r7, #24]
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	4603      	mov	r3, r0
 80056be:	4807      	ldr	r0, [pc, #28]	; (80056dc <I2C2_WriteReg+0x48>)
 80056c0:	f003 fb2e 	bl	8008d20 <HAL_I2C_Mem_Write>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e001      	b.n	80056d2 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80056ce:	f06f 0307 	mvn.w	r3, #7
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200264fc 	.word	0x200264fc

080056e0 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af04      	add	r7, sp, #16
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	4603      	mov	r3, r0
 80056ea:	81fb      	strh	r3, [r7, #14]
 80056ec:	460b      	mov	r3, r1
 80056ee:	81bb      	strh	r3, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80056f4:	8978      	ldrh	r0, [r7, #10]
 80056f6:	89ba      	ldrh	r2, [r7, #12]
 80056f8:	89f9      	ldrh	r1, [r7, #14]
 80056fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80056fe:	9302      	str	r3, [sp, #8]
 8005700:	8b3b      	ldrh	r3, [r7, #24]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	4603      	mov	r3, r0
 800570a:	4807      	ldr	r0, [pc, #28]	; (8005728 <I2C2_ReadReg+0x48>)
 800570c:	f003 fc1c 	bl	8008f48 <HAL_I2C_Mem_Read>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005716:	2300      	movs	r3, #0
 8005718:	e001      	b.n	800571e <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800571a:	f06f 0307 	mvn.w	r3, #7
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	200264fc 	.word	0x200264fc

0800572c <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32U575I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <BSP_IOEXPANDER_Init+0x1a>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d003      	beq.n	800574e <BSP_IOEXPANDER_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005746:	f06f 0301 	mvn.w	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e01d      	b.n	800578a <BSP_IOEXPANDER_Init+0x5e>
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 800574e:	4a11      	ldr	r2, [pc, #68]	; (8005794 <BSP_IOEXPANDER_Init+0x68>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10e      	bne.n	8005778 <BSP_IOEXPANDER_Init+0x4c>
    {
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f94c 	bl	80059f8 <MFXSTM32L152_Probe>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <BSP_IOEXPANDER_Init+0x42>
      {
        ret = BSP_ERROR_NO_INIT;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e004      	b.n	8005778 <BSP_IOEXPANDER_Init+0x4c>
      }
      else
      {
        IO_Ctx[Instance].IsInitialized = 1;
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <BSP_IOEXPANDER_Init+0x68>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2101      	movs	r1, #1
 8005774:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      }
    }

    if (IO_Ctx[Instance].IsInitialized == 1U)
 8005778:	4a06      	ldr	r2, [pc, #24]	; (8005794 <BSP_IOEXPANDER_Init+0x68>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d102      	bne.n	800578a <BSP_IOEXPANDER_Init+0x5e>
    {
      Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 8005784:	4b04      	ldr	r3, [pc, #16]	; (8005798 <BSP_IOEXPANDER_Init+0x6c>)
 8005786:	4a05      	ldr	r2, [pc, #20]	; (800579c <BSP_IOEXPANDER_Init+0x70>)
 8005788:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20026550 	.word	0x20026550
 8005798:	20026580 	.word	0x20026580
 800579c:	20000064 	.word	0x20000064

080057a0 <BSP_IO_Init>:
  * @param  Init     pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval BSP status
  */
int32_t BSP_IO_Init(const uint32_t Instance, BSP_IO_Init_t *Init)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <BSP_IO_Init+0x1a>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <BSP_IO_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80057ba:	f06f 0301 	mvn.w	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e043      	b.n	800584a <BSP_IO_Init+0xaa>
  }
  else
  {
    if ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 80057c2:	4a24      	ldr	r2, [pc, #144]	; (8005854 <BSP_IO_Init+0xb4>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d124      	bne.n	800581e <BSP_IO_Init+0x7e>
    {
      if (BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 80057d4:	2101      	movs	r1, #1
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ffa8 	bl	800572c <BSP_IOEXPANDER_Init>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <BSP_IO_Init+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057e2:	f06f 0304 	mvn.w	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	e019      	b.n	800581e <BSP_IO_Init+0x7e>
      }
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 80057ea:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <BSP_IO_Init+0xb8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80057f4:	4819      	ldr	r0, [pc, #100]	; (800585c <BSP_IO_Init+0xbc>)
 80057f6:	4798      	blx	r3
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da03      	bge.n	8005806 <BSP_IO_Init+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057fe:	f06f 0304 	mvn.w	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e00b      	b.n	800581e <BSP_IO_Init+0x7e>
      }
      else
      {
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 8005806:	4a13      	ldr	r2, [pc, #76]	; (8005854 <BSP_IO_Init+0xb4>)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f043 0201 	orr.w	r2, r3, #1
 8005814:	490f      	ldr	r1, [pc, #60]	; (8005854 <BSP_IO_Init+0xb4>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	440b      	add	r3, r1
 800581c:	605a      	str	r2, [r3, #4]
      }
    }

    if (ret == BSP_ERROR_NONE)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d112      	bne.n	800584a <BSP_IO_Init+0xaa>
    {
      /* If IT mode is selected, configures MFX low level interrupt */
      if (Init->Mode >= IO_MODE_IT_RISING_EDGE)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d902      	bls.n	8005832 <BSP_IO_Init+0x92>
      {
        BSP_IOEXPANDER_ITConfig(Instance);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f897 	bl	8005960 <BSP_IOEXPANDER_ITConfig>
      }

      /* Initializes IO pin */
      if (Io_Drv->Init(&Io_CompObj, Init) < 0)
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <BSP_IO_Init+0xb8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	4808      	ldr	r0, [pc, #32]	; (800585c <BSP_IO_Init+0xbc>)
 800583c:	4798      	blx	r3
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	da02      	bge.n	800584a <BSP_IO_Init+0xaa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005844:	f06f 0304 	mvn.w	r3, #4
 8005848:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20026550 	.word	0x20026550
 8005858:	20026580 	.word	0x20026580
 800585c:	20026558 	.word	0x20026558

08005860 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState  New pins state to write
  * @retval BSP status
  */
int32_t BSP_IO_WritePin(uint32_t Instance, uint32_t IoPin, uint32_t PinState)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d108      	bne.n	8005888 <BSP_IO_WritePin+0x28>
      ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8005876:	4a10      	ldr	r2, [pc, #64]	; (80058b8 <BSP_IO_WritePin+0x58>)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4413      	add	r3, r2
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0301 	and.w	r3, r3, #1
  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <BSP_IO_WritePin+0x30>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005888:	f06f 0301 	mvn.w	r3, #1
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e00d      	b.n	80058ac <BSP_IO_WritePin+0x4c>
  }
  else
  {
    /* Set the Pin state */
    if (Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <BSP_IO_WritePin+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	4808      	ldr	r0, [pc, #32]	; (80058c0 <BSP_IO_WritePin+0x60>)
 800589e:	4798      	blx	r3
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da02      	bge.n	80058ac <BSP_IO_WritePin+0x4c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058a6:	f06f 0304 	mvn.w	r3, #4
 80058aa:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80058ac:	697b      	ldr	r3, [r7, #20]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20026550 	.word	0x20026550
 80058bc:	20026580 	.word	0x20026580
 80058c0:	20026558 	.word	0x20026558

080058c4 <BSP_IO_TogglePin>:
  *          This parameter can be any combination of the IO pins.
  * @note   This function is only used to toggle one pin in the same time
  * @retval None
  */
int32_t BSP_IO_TogglePin(uint32_t Instance, uint32_t IoPin)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
  int32_t pinState;

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d108      	bne.n	80058ea <BSP_IO_TogglePin+0x26>
      ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 80058d8:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <BSP_IO_TogglePin+0x90>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f003 0301 	and.w	r3, r3, #1
  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <BSP_IO_TogglePin+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058ea:	f06f 0301 	mvn.w	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e02b      	b.n	800594a <BSP_IO_TogglePin+0x86>
  }
  else
  {
    /* Toggle the current pin state */
    pinState = Io_Drv->ReadPin(&Io_CompObj, IoPin);
 80058f2:	4b19      	ldr	r3, [pc, #100]	; (8005958 <BSP_IO_TogglePin+0x94>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	4818      	ldr	r0, [pc, #96]	; (800595c <BSP_IO_TogglePin+0x98>)
 80058fc:	4798      	blx	r3
 80058fe:	60b8      	str	r0, [r7, #8]
    if (pinState < 0)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	da03      	bge.n	800590e <BSP_IO_TogglePin+0x4a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005906:	f06f 0304 	mvn.w	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e01d      	b.n	800594a <BSP_IO_TogglePin+0x86>
    }
    else
    {
      if (pinState == 0) /* Reset state */
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <BSP_IO_TogglePin+0x6c>
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_SET) < 0)
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <BSP_IO_TogglePin+0x94>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2201      	movs	r2, #1
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	480f      	ldr	r0, [pc, #60]	; (800595c <BSP_IO_TogglePin+0x98>)
 8005920:	4798      	blx	r3
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	da10      	bge.n	800594a <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005928:	f06f 0304 	mvn.w	r3, #4
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e00c      	b.n	800594a <BSP_IO_TogglePin+0x86>
        }
      }
      else /* Set state */
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_RESET) < 0)
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <BSP_IO_TogglePin+0x94>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	2200      	movs	r2, #0
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	4808      	ldr	r0, [pc, #32]	; (800595c <BSP_IO_TogglePin+0x98>)
 800593c:	4798      	blx	r3
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	da02      	bge.n	800594a <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005944:	f06f 0304 	mvn.w	r3, #4
 8005948:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800594a:	68fb      	ldr	r3, [r7, #12]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20026550 	.word	0x20026550
 8005958:	20026580 	.word	0x20026580
 800595c:	20026558 	.word	0x20026558

08005960 <BSP_IOEXPANDER_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void BSP_IOEXPANDER_ITConfig(uint32_t Instance)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08a      	sub	sp, #40	; 0x28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  if (mfx_io_it_enabled == 0U)
 8005968:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <BSP_IOEXPANDER_ITConfig+0x88>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d136      	bne.n	80059de <BSP_IOEXPANDER_ITConfig+0x7e>
  {
    mfx_io_it_enabled = 1U;
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <BSP_IOEXPANDER_ITConfig+0x88>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
    /* Enable the GPIO EXTI clock */
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 8005976:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <BSP_IOEXPANDER_ITConfig+0x8c>)
 8005978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597c:	4a1b      	ldr	r2, [pc, #108]	; (80059ec <BSP_IOEXPANDER_ITConfig+0x8c>)
 800597e:	f043 0304 	orr.w	r3, r3, #4
 8005982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005986:	4b19      	ldr	r3, [pc, #100]	; (80059ec <BSP_IOEXPANDER_ITConfig+0x8c>)
 8005988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005994:	4b15      	ldr	r3, [pc, #84]	; (80059ec <BSP_IOEXPANDER_ITConfig+0x8c>)
 8005996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800599a:	4a14      	ldr	r2, [pc, #80]	; (80059ec <BSP_IOEXPANDER_ITConfig+0x8c>)
 800599c:	f043 0302 	orr.w	r3, r3, #2
 80059a0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80059a4:	4b11      	ldr	r3, [pc, #68]	; (80059ec <BSP_IOEXPANDER_ITConfig+0x8c>)
 80059a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 80059b2:	2320      	movs	r3, #32
 80059b4:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 80059ba:	2300      	movs	r3, #0
 80059bc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <BSP_IOEXPANDER_ITConfig+0x90>)
 80059c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 80059c2:	f107 0314 	add.w	r3, r7, #20
 80059c6:	4619      	mov	r1, r3
 80059c8:	480a      	ldr	r0, [pc, #40]	; (80059f4 <BSP_IOEXPANDER_ITConfig+0x94>)
 80059ca:	f002 fda5 	bl	8008518 <HAL_GPIO_Init>

    /* Enable and set GPIO EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQ), BSP_IOEXPANDER_IT_PRIORITY, 0x00);
 80059ce:	2200      	movs	r2, #0
 80059d0:	210f      	movs	r1, #15
 80059d2:	2010      	movs	r0, #16
 80059d4:	f000 fee3 	bl	800679e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQ));
 80059d8:	2010      	movs	r0, #16
 80059da:	f000 fefa 	bl	80067d2 <HAL_NVIC_EnableIRQ>
  }
}
 80059de:	bf00      	nop
 80059e0:	3728      	adds	r7, #40	; 0x28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20026584 	.word	0x20026584
 80059ec:	46020c00 	.word	0x46020c00
 80059f0:	10110000 	.word	0x10110000
 80059f4:	42020800 	.word	0x42020800

080059f8 <MFXSTM32L152_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  int32_t              ret = BSP_ERROR_NONE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id;
  uint32_t             i;
  const uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8005a04:	f248 6384 	movw	r3, #34436	; 0x8684
 8005a08:	813b      	strh	r3, [r7, #8]

  /* Configure the audio driver */
  IOCtx.Init        = BSP_I2C2_Init;
 8005a0a:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <MFXSTM32L152_Probe+0xb0>)
 8005a0c:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <MFXSTM32L152_Probe+0xb4>)
 8005a10:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8005a12:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <MFXSTM32L152_Probe+0xb8>)
 8005a14:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <MFXSTM32L152_Probe+0xbc>)
 8005a18:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8005a1a:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <MFXSTM32L152_Probe+0xc0>)
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24

  for (i = 0U; i < 2U; i++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a22:	e036      	b.n	8005a92 <MFXSTM32L152_Probe+0x9a>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005a24:	f107 0208 	add.w	r2, r7, #8
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	833b      	strh	r3, [r7, #24]
    if (MFXSTM32L152_RegisterBusIO(&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8005a32:	f107 0310 	add.w	r3, r7, #16
 8005a36:	4619      	mov	r1, r3
 8005a38:	4820      	ldr	r0, [pc, #128]	; (8005abc <MFXSTM32L152_Probe+0xc4>)
 8005a3a:	f7fe f9a9 	bl	8003d90 <MFXSTM32L152_RegisterBusIO>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <MFXSTM32L152_Probe+0x54>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005a44:	f06f 0307 	mvn.w	r3, #7
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4a:	e01f      	b.n	8005a8c <MFXSTM32L152_Probe+0x94>
    }
    else if (MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	4619      	mov	r1, r3
 8005a52:	481a      	ldr	r0, [pc, #104]	; (8005abc <MFXSTM32L152_Probe+0xc4>)
 8005a54:	f7fd fd53 	bl	80034fe <MFXSTM32L152_ReadID>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <MFXSTM32L152_Probe+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005a5e:	f06f 0303 	mvn.w	r3, #3
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a64:	e012      	b.n	8005a8c <MFXSTM32L152_Probe+0x94>
    }
    else
    {
      if ((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b7b      	cmp	r3, #123	; 0x7b
 8005a6a:	d002      	beq.n	8005a72 <MFXSTM32L152_Probe+0x7a>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b79      	cmp	r3, #121	; 0x79
 8005a70:	d109      	bne.n	8005a86 <MFXSTM32L152_Probe+0x8e>
      {
        if (MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 8005a72:	4812      	ldr	r0, [pc, #72]	; (8005abc <MFXSTM32L152_Probe+0xc4>)
 8005a74:	f7fd fce5 	bl	8003442 <MFXSTM32L152_Init>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <MFXSTM32L152_Probe+0xa2>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a7e:	f06f 0304 	mvn.w	r3, #4
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8005a84:	e009      	b.n	8005a9a <MFXSTM32L152_Probe+0xa2>
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a86:	f06f 0306 	mvn.w	r3, #6
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (i = 0U; i < 2U; i++)
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	3301      	adds	r3, #1
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d9c5      	bls.n	8005a24 <MFXSTM32L152_Probe+0x2c>
 8005a98:	e000      	b.n	8005a9c <MFXSTM32L152_Probe+0xa4>
        break;
 8005a9a:	bf00      	nop
      }
    }
  }

  return ret;
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3730      	adds	r7, #48	; 0x30
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08004dd1 	.word	0x08004dd1
 8005aac:	08004e45 	.word	0x08004e45
 8005ab0:	08004f6d 	.word	0x08004f6d
 8005ab4:	08004f11 	.word	0x08004f11
 8005ab8:	08005081 	.word	0x08005081
 8005abc:	20026558 	.word	0x20026558

08005ac0 <BSP_LCD_Init>:
  * @param  Orientation LCD_ORIENTATION_PORTRAIT, LCD_ORIENTATION_LANDSCAPE,
  *                     LCD_ORIENTATION_PORTRAIT_ROT180 or LCD_ORIENTATION_LANDSCAPE_ROT180.
  * @retval BSP status.
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <BSP_LCD_Init+0x1a>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d903      	bls.n	8005ae2 <BSP_LCD_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005ada:	f06f 0301 	mvn.w	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e011      	b.n	8005b06 <BSP_LCD_Init+0x46>
  }
  else
  {
    /* Power up LCD */
    if (HX8347I_PowerUp() != BSP_ERROR_NONE)
 8005ae2:	f000 fadf 	bl	80060a4 <HX8347I_PowerUp>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <BSP_LCD_Init+0x34>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005aec:	f06f 0304 	mvn.w	r3, #4
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e008      	b.n	8005b06 <BSP_LCD_Init+0x46>
    }
    else
    {
      /* Probe the LCD driver */
      if (HX8347I_Probe(Orientation) != BSP_ERROR_NONE)
 8005af4:	6838      	ldr	r0, [r7, #0]
 8005af6:	f000 fa61 	bl	8005fbc <HX8347I_Probe>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <BSP_LCD_Init+0x46>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8005b00:	f06f 0304 	mvn.w	r3, #4
 8005b04:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
 8005b06:	68fb      	ldr	r3, [r7, #12]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <BSP_LCD_DisplayOn>:
  * @brief  Set the display on.
  * @param  Instance LCD Instance.
  * @retval BSP status.
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <BSP_LCD_DisplayOn+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005b22:	f06f 0301 	mvn.w	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e016      	b.n	8005b58 <BSP_LCD_DisplayOn+0x48>
  }
  else
  {
    /* Set display backlight on */
    HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_PORT, LCD_BACKLIGHT_GPIO_PIN, GPIO_PIN_RESET);
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b30:	480c      	ldr	r0, [pc, #48]	; (8005b64 <BSP_LCD_DisplayOn+0x54>)
 8005b32:	f002 ffbf 	bl	8008ab4 <HAL_GPIO_WritePin>

    /* Set the display on */
    if (Lcd_Drv[Instance]->DisplayOn(Lcd_CompObj[Instance]) < 0)
 8005b36:	4a0c      	ldr	r2, [pc, #48]	; (8005b68 <BSP_LCD_DisplayOn+0x58>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	490a      	ldr	r1, [pc, #40]	; (8005b6c <BSP_LCD_DisplayOn+0x5c>)
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da02      	bge.n	8005b58 <BSP_LCD_DisplayOn+0x48>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005b52:	f06f 0304 	mvn.w	r3, #4
 8005b56:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8005b58:	68fb      	ldr	r3, [r7, #12]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	42020000 	.word	0x42020000
 8005b68:	200265e4 	.word	0x200265e4
 8005b6c:	200265e0 	.word	0x200265e0

08005b70 <BSP_LCD_GetXSize>:
  * @param  Instance LCD Instance.
  * @param  Xsize LCD X size.
  * @retval BSP status.
  */
int32_t BSP_LCD_GetXSize(const uint32_t Instance, uint32_t *Xsize)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Xsize == NULL))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <BSP_LCD_GetXSize+0x1a>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <BSP_LCD_GetXSize+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005b8a:	f06f 0301 	mvn.w	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e011      	b.n	8005bb6 <BSP_LCD_GetXSize+0x46>
  }
  else
  {
    /* Get the display Xsize */
    if (Lcd_Drv[Instance]->GetXSize(Lcd_CompObj[Instance], Xsize) < 0)
 8005b92:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <BSP_LCD_GetXSize+0x50>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9c:	4909      	ldr	r1, [pc, #36]	; (8005bc4 <BSP_LCD_GetXSize+0x54>)
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4798      	blx	r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da02      	bge.n	8005bb6 <BSP_LCD_GetXSize+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005bb0:	f06f 0304 	mvn.w	r3, #4
 8005bb4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	200265e4 	.word	0x200265e4
 8005bc4:	200265e0 	.word	0x200265e0

08005bc8 <BSP_LCD_GetYSize>:
  * @param  Instance LCD Instance.
  * @param  Ysize LCD Y size.
  * @retval BSP status.
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *Ysize)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Ysize == NULL))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <BSP_LCD_GetYSize+0x1a>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <BSP_LCD_GetYSize+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005be2:	f06f 0301 	mvn.w	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e011      	b.n	8005c0e <BSP_LCD_GetYSize+0x46>
  }
  else
  {
    /* Get the display Ysize */
    if (Lcd_Drv[Instance]->GetYSize(Lcd_CompObj[Instance], Ysize) < 0)
 8005bea:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <BSP_LCD_GetYSize+0x50>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf4:	4909      	ldr	r1, [pc, #36]	; (8005c1c <BSP_LCD_GetYSize+0x54>)
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4798      	blx	r3
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	da02      	bge.n	8005c0e <BSP_LCD_GetYSize+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005c08:	f06f 0304 	mvn.w	r3, #4
 8005c0c:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	200265e4 	.word	0x200265e4
 8005c1c:	200265e0 	.word	0x200265e0

08005c20 <BSP_LCD_SetActiveLayer>:
  * @param  Instance LCD Instance.
  * @param  LayerIndex Active layer index.
  * @retval BSP status.
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  int32_t status;

  if (Instance >= LCD_INSTANCES_NBR)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <BSP_LCD_SetActiveLayer+0x18>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005c30:	f06f 0301 	mvn.w	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	e002      	b.n	8005c3e <BSP_LCD_SetActiveLayer+0x1e>
  {
    /* Nothing to do */
    UNUSED(LayerIndex);

    /* Feature not supported */
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8005c38:	f06f 030a 	mvn.w	r3, #10
 8005c3c:	60fb      	str	r3, [r7, #12]
  }

  return status;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Y position.
  * @param  pBmp Pointer to bitmap.
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawBitmap(const uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <BSP_LCD_DrawBitmap+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005c64:	f06f 0301 	mvn.w	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e012      	b.n	8005c92 <BSP_LCD_DrawBitmap+0x46>
  }
  else
  {
    /* Draw the bitmap on LCD */
    if (Lcd_Drv[Instance]->DrawBitmap(Lcd_CompObj[Instance], Xpos, Ypos, pBmp) < 0)
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <BSP_LCD_DrawBitmap+0x50>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c74:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <BSP_LCD_DrawBitmap+0x54>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	47a0      	blx	r4
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	da02      	bge.n	8005c92 <BSP_LCD_DrawBitmap+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005c8c:	f06f 0304 	mvn.w	r3, #4
 8005c90:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005c92:	697b      	ldr	r3, [r7, #20]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd90      	pop	{r4, r7, pc}
 8005c9c:	200265e4 	.word	0x200265e4
 8005ca0:	200265e0 	.word	0x200265e0

08005ca4 <BSP_LCD_FillRGBRect>:
  * @param  Height Height of the rectangle.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(const uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width,
                            uint32_t Height)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <BSP_LCD_FillRGBRect+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005cbc:	f06f 0301 	mvn.w	r3, #1
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e016      	b.n	8005cf2 <BSP_LCD_FillRGBRect+0x4e>
  }
  else
  {
    /* Fill rectangle on LCD */
    if (Lcd_Drv[Instance]->FillRGBRect(Lcd_CompObj[Instance], Xpos, Ypos, pData, Width, Height) < 0)
 8005cc4:	4a0d      	ldr	r2, [pc, #52]	; (8005cfc <BSP_LCD_FillRGBRect+0x58>)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ccc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005cce:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <BSP_LCD_FillRGBRect+0x5c>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	47a0      	blx	r4
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da02      	bge.n	8005cf2 <BSP_LCD_FillRGBRect+0x4e>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005cec:	f06f 0304 	mvn.w	r3, #4
 8005cf0:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005cf2:	697b      	ldr	r3, [r7, #20]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd90      	pop	{r4, r7, pc}
 8005cfc:	200265e4 	.word	0x200265e4
 8005d00:	200265e0 	.word	0x200265e0

08005d04 <BSP_LCD_DrawHLine>:
  * @param  Length Length of the line.
  * @param  Color Color of the line.
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b089      	sub	sp, #36	; 0x24
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <BSP_LCD_DrawHLine+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005d1c:	f06f 0301 	mvn.w	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e014      	b.n	8005d4e <BSP_LCD_DrawHLine+0x4a>
  }
  else
  {
    /* Draw the horizontal line on LCD */
    if (Lcd_Drv[Instance]->DrawHLine(Lcd_CompObj[Instance], Xpos, Ypos, Length, Color) < 0)
 8005d24:	4a0c      	ldr	r2, [pc, #48]	; (8005d58 <BSP_LCD_DrawHLine+0x54>)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005d2e:	4a0b      	ldr	r2, [pc, #44]	; (8005d5c <BSP_LCD_DrawHLine+0x58>)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	47a0      	blx	r4
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da02      	bge.n	8005d4e <BSP_LCD_DrawHLine+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005d48:	f06f 0304 	mvn.w	r3, #4
 8005d4c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}
 8005d58:	200265e4 	.word	0x200265e4
 8005d5c:	200265e0 	.word	0x200265e0

08005d60 <BSP_LCD_DrawVLine>:
  * @param  Length Length of the line.
  * @param  Color Color of the line.
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b089      	sub	sp, #36	; 0x24
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <BSP_LCD_DrawVLine+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005d78:	f06f 0301 	mvn.w	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	e014      	b.n	8005daa <BSP_LCD_DrawVLine+0x4a>
  }
  else
  {
    /* Draw the vertical line on LCD */
    if (Lcd_Drv[Instance]->DrawVLine(Lcd_CompObj[Instance], Xpos, Ypos, Length, Color) < 0)
 8005d80:	4a0c      	ldr	r2, [pc, #48]	; (8005db4 <BSP_LCD_DrawVLine+0x54>)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d88:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <BSP_LCD_DrawVLine+0x58>)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	47a0      	blx	r4
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da02      	bge.n	8005daa <BSP_LCD_DrawVLine+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005da4:	f06f 0304 	mvn.w	r3, #4
 8005da8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005daa:	697b      	ldr	r3, [r7, #20]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd90      	pop	{r4, r7, pc}
 8005db4:	200265e4 	.word	0x200265e4
 8005db8:	200265e0 	.word	0x200265e0

08005dbc <BSP_LCD_FillRect>:
  * @param  Color Color of the rectangle.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                         uint32_t Color)
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b089      	sub	sp, #36	; 0x24
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <BSP_LCD_FillRect+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005dd4:	f06f 0301 	mvn.w	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e016      	b.n	8005e0a <BSP_LCD_FillRect+0x4e>
  }
  else
  {
    /* Draw and fill rectangle on LCD */
    if (Lcd_Drv[Instance]->FillRect(Lcd_CompObj[Instance], Xpos, Ypos, Width, Height, Color) < 0)
 8005ddc:	4a0d      	ldr	r2, [pc, #52]	; (8005e14 <BSP_LCD_FillRect+0x58>)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8005de6:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <BSP_LCD_FillRect+0x5c>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	47a0      	blx	r4
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da02      	bge.n	8005e0a <BSP_LCD_FillRect+0x4e>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005e04:	f06f 0304 	mvn.w	r3, #4
 8005e08:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005e0a:	697b      	ldr	r3, [r7, #20]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd90      	pop	{r4, r7, pc}
 8005e14:	200265e4 	.word	0x200265e4
 8005e18:	200265e0 	.word	0x200265e0

08005e1c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position.
  * @param  Color Pointer to the pixel.
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(const uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <BSP_LCD_ReadPixel+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005e34:	f06f 0301 	mvn.w	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e012      	b.n	8005e62 <BSP_LCD_ReadPixel+0x46>
  }
  else
  {
    /* Read pixel on LCD */
    if (Lcd_Drv[Instance]->GetPixel(Lcd_CompObj[Instance], Xpos, Ypos, Color) < 0)
 8005e3c:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <BSP_LCD_ReadPixel+0x50>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e44:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <BSP_LCD_ReadPixel+0x54>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	47a0      	blx	r4
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	da02      	bge.n	8005e62 <BSP_LCD_ReadPixel+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005e5c:	f06f 0304 	mvn.w	r3, #4
 8005e60:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005e62:	697b      	ldr	r3, [r7, #20]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd90      	pop	{r4, r7, pc}
 8005e6c:	200265e4 	.word	0x200265e4
 8005e70:	200265e0 	.word	0x200265e0

08005e74 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position.
  * @param  Color Pixel.
  * @retval BSP status.
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <BSP_LCD_WritePixel+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005e8c:	f06f 0301 	mvn.w	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e012      	b.n	8005eba <BSP_LCD_WritePixel+0x46>
  }
  else
  {
    /* Write pixel on LCD */
    if (Lcd_Drv[Instance]->SetPixel(Lcd_CompObj[Instance], Xpos, Ypos, Color) < 0)
 8005e94:	4a0b      	ldr	r2, [pc, #44]	; (8005ec4 <BSP_LCD_WritePixel+0x50>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <BSP_LCD_WritePixel+0x54>)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	47a0      	blx	r4
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da02      	bge.n	8005eba <BSP_LCD_WritePixel+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8005eb4:	f06f 0304 	mvn.w	r3, #4
 8005eb8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005eba:	697b      	ldr	r3, [r7, #20]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd90      	pop	{r4, r7, pc}
 8005ec4:	200265e4 	.word	0x200265e4
 8005ec8:	200265e0 	.word	0x200265e0

08005ecc <BSP_LCD_GetPixelFormat>:
  * @param  Instance LCD Instance.
  * @param  Format Pointer on pixel format.
  * @retval BSP status.
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *Format)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <BSP_LCD_GetPixelFormat+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8005ee0:	f06f 0301 	mvn.w	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e002      	b.n	8005eee <BSP_LCD_GetPixelFormat+0x22>
  }
  else
  {
    /* Get pixel format supported by LCD */
    *Format = LCD_PIXEL_FORMAT_RGB565;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2202      	movs	r2, #2
 8005eec:	601a      	str	r2, [r3, #0]
  }

  return status;
 8005eee:	68fb      	ldr	r3, [r7, #12]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <MX_FMC_BANK4_Init>:
  * @brief  MX FMC BANK4 initialization.
  * @param  hSram SRAM handle.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_FMC_BANK4_Init(SRAM_HandleTypeDef *hSram)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  static FMC_NORSRAM_TimingTypeDef  SramTiming = {0};

  /* SRAM device configuration */
  hSram->Init.DataAddressMux         = FMC_DATA_ADDRESS_MUX_DISABLE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	60da      	str	r2, [r3, #12]
  hSram->Init.MemoryType             = FMC_MEMORY_TYPE_SRAM;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	611a      	str	r2, [r3, #16]
  hSram->Init.MemoryDataWidth        = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2210      	movs	r2, #16
 8005f14:	615a      	str	r2, [r3, #20]
  hSram->Init.BurstAccessMode        = FMC_BURST_ACCESS_MODE_DISABLE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	619a      	str	r2, [r3, #24]
  hSram->Init.WaitSignalPolarity     = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	61da      	str	r2, [r3, #28]
  hSram->Init.WaitSignalActive       = FMC_WAIT_TIMING_BEFORE_WS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	621a      	str	r2, [r3, #32]
  hSram->Init.WriteOperation         = FMC_WRITE_OPERATION_ENABLE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hSram->Init.WaitSignal             = FMC_WAIT_SIGNAL_DISABLE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	629a      	str	r2, [r3, #40]	; 0x28
  hSram->Init.ExtendedMode           = FMC_EXTENDED_MODE_DISABLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hSram->Init.AsynchronousWait       = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
  hSram->Init.WriteBurst             = FMC_WRITE_BURST_DISABLE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	635a      	str	r2, [r3, #52]	; 0x34
  hSram->Init.ContinuousClock        = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38
  hSram->Init.WriteFifo              = FMC_WRITE_FIFO_DISABLE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c
  hSram->Init.PageSize               = FMC_PAGE_SIZE_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hSram->Init.NBLSetupTime           = FMC_NBL_SETUPTIME_0;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	645a      	str	r2, [r3, #68]	; 0x44
  hSram->Init.MaxChipSelectPulse     = DISABLE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  hSram->Init.MaxChipSelectPulseTime = 1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	64da      	str	r2, [r3, #76]	; 0x4c

  SramTiming.AddressSetupTime      = 10;
 8005f72:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f74:	220a      	movs	r2, #10
 8005f76:	601a      	str	r2, [r3, #0]
  SramTiming.AddressHoldTime       = 10;
 8005f78:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f7a:	220a      	movs	r2, #10
 8005f7c:	605a      	str	r2, [r3, #4]
  SramTiming.DataSetupTime         = 10;
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f80:	220a      	movs	r2, #10
 8005f82:	609a      	str	r2, [r3, #8]
  SramTiming.DataHoldTime          = 3;
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f86:	2203      	movs	r2, #3
 8005f88:	60da      	str	r2, [r3, #12]
  SramTiming.BusTurnAroundDuration = 1;
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	611a      	str	r2, [r3, #16]
  SramTiming.CLKDivision           = 2;
 8005f90:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f92:	2202      	movs	r2, #2
 8005f94:	615a      	str	r2, [r3, #20]
  SramTiming.DataLatency           = 2;
 8005f96:	4b08      	ldr	r3, [pc, #32]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f98:	2202      	movs	r2, #2
 8005f9a:	619a      	str	r2, [r3, #24]
  SramTiming.AccessMode            = FMC_ACCESS_MODE_A;
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	61da      	str	r2, [r3, #28]

  return HAL_SRAM_Init(hSram, &SramTiming, &SramTiming);
 8005fa2:	4a05      	ldr	r2, [pc, #20]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005fa4:	4904      	ldr	r1, [pc, #16]	; (8005fb8 <MX_FMC_BANK4_Init+0xbc>)
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f005 f808 	bl	800afbc <HAL_SRAM_Init>
 8005fac:	4603      	mov	r3, r0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200265e8 	.word	0x200265e8

08005fbc <HX8347I_Probe>:
  * @brief  Probe the HX8347I LCD driver.
  * @param  Orientation LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE.
  * @retval BSP status.
  */
static int32_t HX8347I_Probe(uint32_t Orientation)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08c      	sub	sp, #48	; 0x30
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t                 hx8347i_id;
  static HX8347I_Object_t  HX8347IObj;
  uint32_t                 lcd_orientation;

  /* Configure the LCD driver */
  IOCtx.Address     = LCD_FMC_ADDRESS;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	833b      	strh	r3, [r7, #24]
  IOCtx.Init        = LCD_FMC_Init;
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <HX8347I_Probe+0xc4>)
 8005fca:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = LCD_FMC_DeInit;
 8005fcc:	4b2d      	ldr	r3, [pc, #180]	; (8006084 <HX8347I_Probe+0xc8>)
 8005fce:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = LCD_FMC_ReadReg16;
 8005fd0:	4b2d      	ldr	r3, [pc, #180]	; (8006088 <HX8347I_Probe+0xcc>)
 8005fd2:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = LCD_FMC_WriteReg16;
 8005fd4:	4b2d      	ldr	r3, [pc, #180]	; (800608c <HX8347I_Probe+0xd0>)
 8005fd6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = LCD_FMC_GetTick;
 8005fd8:	4b2d      	ldr	r3, [pc, #180]	; (8006090 <HX8347I_Probe+0xd4>)
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24

  if (HX8347I_RegisterBusIO(&HX8347IObj, &IOCtx) != HX8347I_OK)
 8005fdc:	f107 0310 	add.w	r3, r7, #16
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	482c      	ldr	r0, [pc, #176]	; (8006094 <HX8347I_Probe+0xd8>)
 8005fe4:	f7fb fda0 	bl	8001b28 <HX8347I_RegisterBusIO>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HX8347I_Probe+0x3a>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8005fee:	f06f 0307 	mvn.w	r3, #7
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff4:	e03e      	b.n	8006074 <HX8347I_Probe+0xb8>
  }
  else if (HX8347I_ReadID(&HX8347IObj, &hx8347i_id) != HX8347I_OK)
 8005ff6:	f107 030c 	add.w	r3, r7, #12
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4825      	ldr	r0, [pc, #148]	; (8006094 <HX8347I_Probe+0xd8>)
 8005ffe:	f7fc f820 	bl	8002042 <HX8347I_ReadID>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HX8347I_Probe+0x54>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8006008:	f06f 0304 	mvn.w	r3, #4
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800600e:	e031      	b.n	8006074 <HX8347I_Probe+0xb8>
  }
  else if (hx8347i_id != HX8347I_ID)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b95      	cmp	r3, #149	; 0x95
 8006014:	d003      	beq.n	800601e <HX8347I_Probe+0x62>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8006016:	f06f 0306 	mvn.w	r3, #6
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601c:	e02a      	b.n	8006074 <HX8347I_Probe+0xb8>
  }
  else
  {
    Lcd_CompObj[0] = &HX8347IObj;
 800601e:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <HX8347I_Probe+0xdc>)
 8006020:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <HX8347I_Probe+0xd8>)
 8006022:	601a      	str	r2, [r3, #0]
    Lcd_Drv[0] = (LCD_Drv_t *) &HX8347I_Driver;
 8006024:	4b1d      	ldr	r3, [pc, #116]	; (800609c <HX8347I_Probe+0xe0>)
 8006026:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <HX8347I_Probe+0xe4>)
 8006028:	601a      	str	r2, [r3, #0]
    if (Orientation == LCD_ORIENTATION_PORTRAIT)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <HX8347I_Probe+0x7a>
    {
      lcd_orientation = HX8347I_ORIENTATION_PORTRAIT;
 8006030:	2300      	movs	r3, #0
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
 8006034:	e00d      	b.n	8006052 <HX8347I_Probe+0x96>
    }
    else if (Orientation == LCD_ORIENTATION_LANDSCAPE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d102      	bne.n	8006042 <HX8347I_Probe+0x86>
    {
      lcd_orientation = HX8347I_ORIENTATION_LANDSCAPE;
 800603c:	2301      	movs	r3, #1
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006040:	e007      	b.n	8006052 <HX8347I_Probe+0x96>
    }
    else if (Orientation == LCD_ORIENTATION_PORTRAIT_ROT180)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d102      	bne.n	800604e <HX8347I_Probe+0x92>
    {
      lcd_orientation = HX8347I_ORIENTATION_PORTRAIT_ROT180;
 8006048:	2302      	movs	r3, #2
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
 800604c:	e001      	b.n	8006052 <HX8347I_Probe+0x96>
    }
    else
    {
      lcd_orientation = HX8347I_ORIENTATION_LANDSCAPE_ROT180;
 800604e:	2303      	movs	r3, #3
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (Lcd_Drv[0]->Init(Lcd_CompObj[0], HX8347I_FORMAT_RBG565, lcd_orientation) < 0)
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <HX8347I_Probe+0xe0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0f      	ldr	r2, [pc, #60]	; (8006098 <HX8347I_Probe+0xdc>)
 800605a:	6810      	ldr	r0, [r2, #0]
 800605c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605e:	2105      	movs	r1, #5
 8006060:	4798      	blx	r3
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	da03      	bge.n	8006070 <HX8347I_Probe+0xb4>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006068:	f06f 0304 	mvn.w	r3, #4
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800606e:	e001      	b.n	8006074 <HX8347I_Probe+0xb8>
    }
    else
    {
      status = BSP_ERROR_NONE;
 8006070:	2300      	movs	r3, #0
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  return status;
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006076:	4618      	mov	r0, r3
 8006078:	3730      	adds	r7, #48	; 0x30
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	08006175 	.word	0x08006175
 8006084:	080061cd 	.word	0x080061cd
 8006088:	0800627d 	.word	0x0800627d
 800608c:	080061fd 	.word	0x080061fd
 8006090:	080062ff 	.word	0x080062ff
 8006094:	20026608 	.word	0x20026608
 8006098:	200265e0 	.word	0x200265e0
 800609c:	200265e4 	.word	0x200265e4
 80060a0:	20000018 	.word	0x20000018

080060a4 <HX8347I_PowerUp>:
/**
  * @brief  Un-reset HX8347I and activate backlight.
  * @retval BSP status.
  */
static int32_t HX8347I_PowerUp(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t    IO_Init;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Initialize the BSP IO driver and configure the HX8347I reset pin */
  IO_Init.Pin  = IO_PIN_12;
 80060aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ae:	61bb      	str	r3, [r7, #24]
  IO_Init.Mode = IO_MODE_OUTPUT_OD;
 80060b0:	2303      	movs	r3, #3
 80060b2:	61fb      	str	r3, [r7, #28]
  IO_Init.Pull = IO_NOPULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	623b      	str	r3, [r7, #32]
  status = BSP_IO_Init(0, &IO_Init);
 80060b8:	f107 0318 	add.w	r3, r7, #24
 80060bc:	4619      	mov	r1, r3
 80060be:	2000      	movs	r0, #0
 80060c0:	f7ff fb6e 	bl	80057a0 <BSP_IO_Init>
 80060c4:	6278      	str	r0, [r7, #36]	; 0x24
  if (status == BSP_ERROR_NONE)
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d149      	bne.n	8006160 <HX8347I_PowerUp+0xbc>
  {
    /* Un-reset the HX8347I */
    status = BSP_IO_WritePin(0, IO_PIN_12, IO_PIN_SET);
 80060cc:	2201      	movs	r2, #1
 80060ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060d2:	2000      	movs	r0, #0
 80060d4:	f7ff fbc4 	bl	8005860 <BSP_IO_WritePin>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (status == BSP_ERROR_NONE)
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d13f      	bne.n	8006160 <HX8347I_PowerUp+0xbc>
    {
      HAL_Delay(5);
 80060e0:	2005      	movs	r0, #5
 80060e2:	f000 fa5d 	bl	80065a0 <HAL_Delay>
      /* Reset the HX8347I */
      status = BSP_IO_WritePin(0, IO_PIN_12, IO_PIN_RESET);
 80060e6:	2200      	movs	r2, #0
 80060e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060ec:	2000      	movs	r0, #0
 80060ee:	f7ff fbb7 	bl	8005860 <BSP_IO_WritePin>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24
      if (status == BSP_ERROR_NONE)
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d132      	bne.n	8006160 <HX8347I_PowerUp+0xbc>
      {
        HAL_Delay(5);
 80060fa:	2005      	movs	r0, #5
 80060fc:	f000 fa50 	bl	80065a0 <HAL_Delay>
        /* Un-reset the HX8347I */
        status = BSP_IO_WritePin(0, IO_PIN_12, IO_PIN_SET);
 8006100:	2201      	movs	r2, #1
 8006102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006106:	2000      	movs	r0, #0
 8006108:	f7ff fbaa 	bl	8005860 <BSP_IO_WritePin>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24
        if (status == BSP_ERROR_NONE)
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	d125      	bne.n	8006160 <HX8347I_PowerUp+0xbc>
        {
          /* Initialize GPIO for backlight control and enable backlight */
          LCD_BACKLIGHT_GPIO_CLOCK_ENABLE();
 8006114:	4b15      	ldr	r3, [pc, #84]	; (800616c <HX8347I_PowerUp+0xc8>)
 8006116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611a:	4a14      	ldr	r2, [pc, #80]	; (800616c <HX8347I_PowerUp+0xc8>)
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <HX8347I_PowerUp+0xc8>)
 8006126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
          GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8006132:	2301      	movs	r3, #1
 8006134:	60bb      	str	r3, [r7, #8]
          GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006136:	2301      	movs	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]
          GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM ;
 800613a:	2301      	movs	r3, #1
 800613c:	613b      	str	r3, [r7, #16]
          GPIO_InitStruct.Pin       = LCD_BACKLIGHT_GPIO_PIN;
 800613e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006142:	607b      	str	r3, [r7, #4]
          HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_PORT, &GPIO_InitStruct);
 8006144:	1d3b      	adds	r3, r7, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4809      	ldr	r0, [pc, #36]	; (8006170 <HX8347I_PowerUp+0xcc>)
 800614a:	f002 f9e5 	bl	8008518 <HAL_GPIO_Init>
          HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_PORT, LCD_BACKLIGHT_GPIO_PIN, GPIO_PIN_RESET);
 800614e:	2200      	movs	r2, #0
 8006150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006154:	4806      	ldr	r0, [pc, #24]	; (8006170 <HX8347I_PowerUp+0xcc>)
 8006156:	f002 fcad 	bl	8008ab4 <HAL_GPIO_WritePin>

          /* Wait 120ms according HX8347I datasheet */
          HAL_Delay(120);
 800615a:	2078      	movs	r0, #120	; 0x78
 800615c:	f000 fa20 	bl	80065a0 <HAL_Delay>
  }
#else /* USE_BSP_IO_CLASS > 0 */
  status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* USE_BSP_IO_CLASS > 0 */

  return status;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006162:	4618      	mov	r0, r3
 8006164:	3728      	adds	r7, #40	; 0x28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	46020c00 	.word	0x46020c00
 8006170:	42020000 	.word	0x42020000

08006174 <LCD_FMC_Init>:
/**
  * @brief  Initialize FMC.
  * @retval BSP status.
  */
static int32_t LCD_FMC_Init(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]

  hlcd_sram[0].Instance    = FMC_NORSRAM_DEVICE;
 800617e:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <LCD_FMC_Init+0x4c>)
 8006180:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <LCD_FMC_Init+0x50>)
 8006182:	601a      	str	r2, [r3, #0]
  hlcd_sram[0].Extended    = FMC_NORSRAM_EXTENDED_DEVICE;
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <LCD_FMC_Init+0x4c>)
 8006186:	4a10      	ldr	r2, [pc, #64]	; (80061c8 <LCD_FMC_Init+0x54>)
 8006188:	605a      	str	r2, [r3, #4]
  hlcd_sram[0].Init.NSBank = FMC_NORSRAM_BANK4;
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <LCD_FMC_Init+0x4c>)
 800618c:	2206      	movs	r2, #6
 800618e:	609a      	str	r2, [r3, #8]

  if (HAL_SRAM_GetState(&hlcd_sram[0]) == HAL_SRAM_STATE_RESET)
 8006190:	480b      	ldr	r0, [pc, #44]	; (80061c0 <LCD_FMC_Init+0x4c>)
 8006192:	f004 ff80 	bl	800b096 <HAL_SRAM_GetState>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <LCD_FMC_Init+0x40>
  {
#if (USE_HAL_SRAM_REGISTER_CALLBACKS == 0)
    /* Init the FMC Msp */
    FMC_MspInit(&hlcd_sram[0]);
 800619c:	4808      	ldr	r0, [pc, #32]	; (80061c0 <LCD_FMC_Init+0x4c>)
 800619e:	f000 f8b9 	bl	8006314 <FMC_MspInit>

    if (MX_FMC_BANK4_Init(&hlcd_sram[0]) != HAL_OK)
 80061a2:	4807      	ldr	r0, [pc, #28]	; (80061c0 <LCD_FMC_Init+0x4c>)
 80061a4:	f7ff feaa 	bl	8005efc <MX_FMC_BANK4_Init>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <LCD_FMC_Init+0x40>
    {
      status = BSP_ERROR_BUS_FAILURE;
 80061ae:	f06f 0307 	mvn.w	r3, #7
 80061b2:	607b      	str	r3, [r7, #4]
        status = BSP_ERROR_BUS_FAILURE;
      }
    }
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }
  return status;
 80061b4:	687b      	ldr	r3, [r7, #4]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20026588 	.word	0x20026588
 80061c4:	420d0400 	.word	0x420d0400
 80061c8:	420d0504 	.word	0x420d0504

080061cc <LCD_FMC_DeInit>:
/**
  * @brief  DeInitialize BSP FMC.
  * @retval BSP status.
  */
static int32_t LCD_FMC_DeInit(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SRAM_REGISTER_CALLBACKS == 0)
  FMC_MspDeInit(&hlcd_sram[0]);
 80061d6:	4808      	ldr	r0, [pc, #32]	; (80061f8 <LCD_FMC_DeInit+0x2c>)
 80061d8:	f000 f92e 	bl	8006438 <FMC_MspDeInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */

  /* De-Init the FMC */
  if (HAL_SRAM_DeInit(&hlcd_sram[0]) != HAL_OK)
 80061dc:	4806      	ldr	r0, [pc, #24]	; (80061f8 <LCD_FMC_DeInit+0x2c>)
 80061de:	f004 ff3d 	bl	800b05c <HAL_SRAM_DeInit>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <LCD_FMC_DeInit+0x22>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
 80061e8:	f06f 0303 	mvn.w	r3, #3
 80061ec:	607b      	str	r3, [r7, #4]
  }

  return status;
 80061ee:	687b      	ldr	r3, [r7, #4]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20026588 	.word	0x20026588

080061fc <LCD_FMC_WriteReg16>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
static int32_t LCD_FMC_WriteReg16(const uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60ba      	str	r2, [r7, #8]
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	4603      	mov	r3, r0
 8006208:	81fb      	strh	r3, [r7, #14]
 800620a:	460b      	mov	r3, r1
 800620c:	81bb      	strh	r3, [r7, #12]
  int32_t  ret = BSP_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]

  if ((DevAddr != LCD_FMC_ADDRESS) || (pData == NULL) || (Length == 0U))
 8006216:	89fb      	ldrh	r3, [r7, #14]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d105      	bne.n	8006228 <LCD_FMC_WriteReg16+0x2c>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <LCD_FMC_WriteReg16+0x2c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <LCD_FMC_WriteReg16+0x34>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006228:	f06f 0301 	mvn.w	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e01e      	b.n	800626e <LCD_FMC_WriteReg16+0x72>
  }
  else
  {
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 8006230:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 8006234:	89bb      	ldrh	r3, [r7, #12]
 8006236:	8013      	strh	r3, [r2, #0]
    while (i < (2U * Length))
 8006238:	e014      	b.n	8006264 <LCD_FMC_WriteReg16+0x68>
    {
      /* Write register value */
      *(uint16_t *)LCD_DATA_ADDR = (((uint16_t)pData[i + 1U] << 8U) & 0xFF00U) | ((uint16_t)pData[i] & 0x00FFU);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3301      	adds	r3, #1
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4413      	add	r3, r2
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	b29a      	uxth	r2, r3
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	440b      	add	r3, r1
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f04f 41d9 	mov.w	r1, #1820327936	; 0x6c800000
 8006258:	4313      	orrs	r3, r2
 800625a:	b29b      	uxth	r3, r3
 800625c:	800b      	strh	r3, [r1, #0]
      /* Update data pointer */
      i += 2U;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3302      	adds	r3, #2
 8006262:	613b      	str	r3, [r7, #16]
    while (i < (2U * Length))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	429a      	cmp	r2, r3
 800626c:	d3e5      	bcc.n	800623a <LCD_FMC_WriteReg16+0x3e>
    }
  }

  /* BSP status */
  return ret;
 800626e:	697b      	ldr	r3, [r7, #20]
}
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LCD_FMC_ReadReg16>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
static int32_t LCD_FMC_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 800627c:	b480      	push	{r7}
 800627e:	b089      	sub	sp, #36	; 0x24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60ba      	str	r2, [r7, #8]
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	4603      	mov	r3, r0
 8006288:	81fb      	strh	r3, [r7, #14]
 800628a:	460b      	mov	r3, r1
 800628c:	81bb      	strh	r3, [r7, #12]
  int32_t  ret = BSP_ERROR_NONE;
 800628e:	2300      	movs	r3, #0
 8006290:	61fb      	str	r3, [r7, #28]
  uint32_t i = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  uint16_t tmp;

  if ((DevAddr != LCD_FMC_ADDRESS) || (pData == NULL) || (Length == 0U))
 8006296:	89fb      	ldrh	r3, [r7, #14]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d105      	bne.n	80062a8 <LCD_FMC_ReadReg16+0x2c>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <LCD_FMC_ReadReg16+0x2c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <LCD_FMC_ReadReg16+0x34>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062a8:	f06f 0301 	mvn.w	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	e01f      	b.n	80062f0 <LCD_FMC_ReadReg16+0x74>
  }
  else
  {
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 80062b0:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 80062b4:	89bb      	ldrh	r3, [r7, #12]
 80062b6:	8013      	strh	r3, [r2, #0]
    while (i < (2U * Length))
 80062b8:	e015      	b.n	80062e6 <LCD_FMC_ReadReg16+0x6a>
    {
      tmp = *(uint16_t *)LCD_DATA_ADDR;
 80062ba:	f04f 43d9 	mov.w	r3, #1820327936	; 0x6c800000
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	82fb      	strh	r3, [r7, #22]
      pData[i]    = (uint8_t) tmp;
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	4413      	add	r3, r2
 80062c8:	8afa      	ldrh	r2, [r7, #22]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
      pData[i + 1U] = (uint8_t)(tmp >> 8U);
 80062ce:	8afb      	ldrh	r3, [r7, #22]
 80062d0:	0a1b      	lsrs	r3, r3, #8
 80062d2:	b299      	uxth	r1, r3
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	3301      	adds	r3, #1
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	4413      	add	r3, r2
 80062dc:	b2ca      	uxtb	r2, r1
 80062de:	701a      	strb	r2, [r3, #0]
      /* Update data pointer */
      i += 2U;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	3302      	adds	r3, #2
 80062e4:	61bb      	str	r3, [r7, #24]
    while (i < (2U * Length))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d3e4      	bcc.n	80062ba <LCD_FMC_ReadReg16+0x3e>
    }
  }

  /* BSP status */
  return ret;
 80062f0:	69fb      	ldr	r3, [r7, #28]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3724      	adds	r7, #36	; 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LCD_FMC_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
static int32_t LCD_FMC_GetTick(void)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 8006304:	f000 f940 	bl	8006588 <HAL_GetTick>
 8006308:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 800630a:	687b      	ldr	r3, [r7, #4]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <FMC_MspInit>:
  * @brief  Initializes FMC MSP.
  * @param  hSram : SRAM handler
  * @retval None
  */
static void  FMC_MspInit(const SRAM_HandleTypeDef *hSram)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08c      	sub	sp, #48	; 0x30
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(hSram);

  /*** Configure the GPIOs ***/

  /* Enable VddIO2 for GPIOG */
  __HAL_RCC_PWR_CLK_ENABLE();
 800631c:	4b42      	ldr	r3, [pc, #264]	; (8006428 <FMC_MspInit+0x114>)
 800631e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006322:	4a41      	ldr	r2, [pc, #260]	; (8006428 <FMC_MspInit+0x114>)
 8006324:	f043 0304 	orr.w	r3, r3, #4
 8006328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800632c:	4b3e      	ldr	r3, [pc, #248]	; (8006428 <FMC_MspInit+0x114>)
 800632e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 800633a:	f003 fb95 	bl	8009a68 <HAL_PWREx_EnableVddIO2>

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800633e:	4b3a      	ldr	r3, [pc, #232]	; (8006428 <FMC_MspInit+0x114>)
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	4a38      	ldr	r2, [pc, #224]	; (8006428 <FMC_MspInit+0x114>)
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800634e:	4b36      	ldr	r3, [pc, #216]	; (8006428 <FMC_MspInit+0x114>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800635c:	4b32      	ldr	r3, [pc, #200]	; (8006428 <FMC_MspInit+0x114>)
 800635e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006362:	4a31      	ldr	r2, [pc, #196]	; (8006428 <FMC_MspInit+0x114>)
 8006364:	f043 0308 	orr.w	r3, r3, #8
 8006368:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800636c:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <FMC_MspInit+0x114>)
 800636e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800637a:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <FMC_MspInit+0x114>)
 800637c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006380:	4a29      	ldr	r2, [pc, #164]	; (8006428 <FMC_MspInit+0x114>)
 8006382:	f043 0310 	orr.w	r3, r3, #16
 8006386:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800638a:	4b27      	ldr	r3, [pc, #156]	; (8006428 <FMC_MspInit+0x114>)
 800638c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006398:	4b23      	ldr	r3, [pc, #140]	; (8006428 <FMC_MspInit+0x114>)
 800639a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800639e:	4a22      	ldr	r2, [pc, #136]	; (8006428 <FMC_MspInit+0x114>)
 80063a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <FMC_MspInit+0x114>)
 80063aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80063b6:	2302      	movs	r3, #2
 80063b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_MEDIUM ;
 80063ba:	2301      	movs	r3, #1
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80063be:	230c      	movs	r3, #12
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* NE configuration */
  /* NE4 : LCD */
  gpio_init_structure.Pin = GPIO_PIN_12;
 80063c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80063cc:	f107 031c 	add.w	r3, r7, #28
 80063d0:	4619      	mov	r1, r3
 80063d2:	4816      	ldr	r0, [pc, #88]	; (800642c <FMC_MspInit+0x118>)
 80063d4:	f002 f8a0 	bl	8008518 <HAL_GPIO_Init>

  /* NOE and NWE configuration */
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80063d8:	2330      	movs	r3, #48	; 0x30
 80063da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80063dc:	f107 031c 	add.w	r3, r7, #28
 80063e0:	4619      	mov	r1, r3
 80063e2:	4813      	ldr	r0, [pc, #76]	; (8006430 <FMC_MspInit+0x11c>)
 80063e4:	f002 f898 	bl	8008518 <HAL_GPIO_Init>

  /* RS configuration */
  gpio_init_structure.Pin = GPIO_PIN_6;
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80063ec:	f107 031c 	add.w	r3, r7, #28
 80063f0:	4619      	mov	r1, r3
 80063f2:	4810      	ldr	r0, [pc, #64]	; (8006434 <FMC_MspInit+0x120>)
 80063f4:	f002 f890 	bl	8008518 <HAL_GPIO_Init>

  /* Data Bus */
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_8 | GPIO_PIN_9 | \
 80063fc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006400:	61fb      	str	r3, [r7, #28]
                            GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006402:	f107 031c 	add.w	r3, r7, #28
 8006406:	4619      	mov	r1, r3
 8006408:	4809      	ldr	r0, [pc, #36]	; (8006430 <FMC_MspInit+0x11c>)
 800640a:	f002 f885 	bl	8008518 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin = GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | \
 800640e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8006412:	61fb      	str	r3, [r7, #28]
                            GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | \
                            GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006414:	f107 031c 	add.w	r3, r7, #28
 8006418:	4619      	mov	r1, r3
 800641a:	4806      	ldr	r0, [pc, #24]	; (8006434 <FMC_MspInit+0x120>)
 800641c:	f002 f87c 	bl	8008518 <HAL_GPIO_Init>
}
 8006420:	bf00      	nop
 8006422:	3730      	adds	r7, #48	; 0x30
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	46020c00 	.word	0x46020c00
 800642c:	42021800 	.word	0x42021800
 8006430:	42020c00 	.word	0x42020c00
 8006434:	42021000 	.word	0x42021000

08006438 <FMC_MspDeInit>:
  * @brief  DeInitializes FMC MSP.
  * @param  hSram : SRAM handler
  * @retval None
  */
static void FMC_MspDeInit(const SRAM_HandleTypeDef *hSram)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSram);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  | \
 8006440:	f24c 7333 	movw	r3, #50995	; 0xc733
 8006444:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_14 | \
                              GPIO_PIN_15;
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4619      	mov	r1, r3
 800644a:	480f      	ldr	r0, [pc, #60]	; (8006488 <FMC_MspDeInit+0x50>)
 800644c:	f002 fa3c 	bl	80088c8 <HAL_GPIO_DeInit>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_6  | GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | \
 8006450:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8006454:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | \
                              GPIO_PIN_14 | GPIO_PIN_15;
  \

  HAL_GPIO_DeInit(GPIOE, gpio_init_structure.Pin);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4619      	mov	r1, r3
 800645a:	480c      	ldr	r0, [pc, #48]	; (800648c <FMC_MspDeInit+0x54>)
 800645c:	f002 fa34 	bl	80088c8 <HAL_GPIO_DeInit>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_12;
 8006460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006464:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4619      	mov	r1, r3
 800646a:	4809      	ldr	r0, [pc, #36]	; (8006490 <FMC_MspDeInit+0x58>)
 800646c:	f002 fa2c 	bl	80088c8 <HAL_GPIO_DeInit>

  /* Disable FMC clock */
  __HAL_RCC_FMC_CLK_DISABLE();
 8006470:	4b08      	ldr	r3, [pc, #32]	; (8006494 <FMC_MspDeInit+0x5c>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	4a07      	ldr	r2, [pc, #28]	; (8006494 <FMC_MspDeInit+0x5c>)
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006480:	bf00      	nop
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	42020c00 	.word	0x42020c00
 800648c:	42021000 	.word	0x42021000
 8006490:	42021800 	.word	0x42021800
 8006494:	46020c00 	.word	0x46020c00

08006498 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800649c:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <HAL_Init+0x4c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a10      	ldr	r2, [pc, #64]	; (80064e4 <HAL_Init+0x4c>)
 80064a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064a8:	2003      	movs	r0, #3
 80064aa:	f000 f96d 	bl	8006788 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80064ae:	f004 fbc9 	bl	800ac44 <HAL_RCC_GetSysClockFreq>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <HAL_Init+0x50>)
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	490b      	ldr	r1, [pc, #44]	; (80064ec <HAL_Init+0x54>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <HAL_Init+0x58>)
 80064c6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064c8:	2000      	movs	r0, #0
 80064ca:	f000 f813 	bl	80064f4 <HAL_InitTick>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e002      	b.n	80064de <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80064d8:	f7fb f934 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40022000 	.word	0x40022000
 80064e8:	46020c00 	.word	0x46020c00
 80064ec:	0800c5b8 	.word	0x0800c5b8
 80064f0:	20000014 	.word	0x20000014

080064f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80064fc:	4b15      	ldr	r3, [pc, #84]	; (8006554 <HAL_InitTick+0x60>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e021      	b.n	800654c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006508:	4b13      	ldr	r3, [pc, #76]	; (8006558 <HAL_InitTick+0x64>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <HAL_InitTick+0x60>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006516:	fbb3 f3f1 	udiv	r3, r3, r1
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f965 	bl	80067ee <HAL_SYSTICK_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e00e      	b.n	800654c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d80a      	bhi.n	800654a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006534:	2200      	movs	r2, #0
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653c:	f000 f92f 	bl	800679e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006540:	4a06      	ldr	r2, [pc, #24]	; (800655c <HAL_InitTick+0x68>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	200000a4 	.word	0x200000a4
 8006558:	20000014 	.word	0x20000014
 800655c:	200000a0 	.word	0x200000a0

08006560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <HAL_IncTick+0x20>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_IncTick+0x24>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4413      	add	r3, r2
 8006570:	4a04      	ldr	r2, [pc, #16]	; (8006584 <HAL_IncTick+0x24>)
 8006572:	6013      	str	r3, [r2, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	200000a4 	.word	0x200000a4
 8006584:	20026634 	.word	0x20026634

08006588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return uwTick;
 800658c:	4b03      	ldr	r3, [pc, #12]	; (800659c <HAL_GetTick+0x14>)
 800658e:	681b      	ldr	r3, [r3, #0]
}
 8006590:	4618      	mov	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20026634 	.word	0x20026634

080065a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065a8:	f7ff ffee 	bl	8006588 <HAL_GetTick>
 80065ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b8:	d005      	beq.n	80065c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ba:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <HAL_Delay+0x44>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065c6:	bf00      	nop
 80065c8:	f7ff ffde 	bl	8006588 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d8f7      	bhi.n	80065c8 <HAL_Delay+0x28>
  {
  }
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200000a4 	.word	0x200000a4

080065e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065f8:	4b0c      	ldr	r3, [pc, #48]	; (800662c <__NVIC_SetPriorityGrouping+0x44>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006604:	4013      	ands	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800661a:	4a04      	ldr	r2, [pc, #16]	; (800662c <__NVIC_SetPriorityGrouping+0x44>)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	60d3      	str	r3, [r2, #12]
}
 8006620:	bf00      	nop
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	e000ed00 	.word	0xe000ed00

08006630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <__NVIC_GetPriorityGrouping+0x18>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	f003 0307 	and.w	r3, r3, #7
}
 800663e:	4618      	mov	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	e000ed00 	.word	0xe000ed00

0800664c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	db0b      	blt.n	8006676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	f003 021f 	and.w	r2, r3, #31
 8006664:	4907      	ldr	r1, [pc, #28]	; (8006684 <__NVIC_EnableIRQ+0x38>)
 8006666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	2001      	movs	r0, #1
 800666e:	fa00 f202 	lsl.w	r2, r0, r2
 8006672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	e000e100 	.word	0xe000e100

08006688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006698:	2b00      	cmp	r3, #0
 800669a:	db0a      	blt.n	80066b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	490c      	ldr	r1, [pc, #48]	; (80066d4 <__NVIC_SetPriority+0x4c>)
 80066a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a6:	0112      	lsls	r2, r2, #4
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	440b      	add	r3, r1
 80066ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066b0:	e00a      	b.n	80066c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	4908      	ldr	r1, [pc, #32]	; (80066d8 <__NVIC_SetPriority+0x50>)
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	3b04      	subs	r3, #4
 80066c0:	0112      	lsls	r2, r2, #4
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	440b      	add	r3, r1
 80066c6:	761a      	strb	r2, [r3, #24]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	e000e100 	.word	0xe000e100
 80066d8:	e000ed00 	.word	0xe000ed00

080066dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066dc:	b480      	push	{r7}
 80066de:	b089      	sub	sp, #36	; 0x24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f1c3 0307 	rsb	r3, r3, #7
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	bf28      	it	cs
 80066fa:	2304      	movcs	r3, #4
 80066fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	3304      	adds	r3, #4
 8006702:	2b06      	cmp	r3, #6
 8006704:	d902      	bls.n	800670c <NVIC_EncodePriority+0x30>
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	3b03      	subs	r3, #3
 800670a:	e000      	b.n	800670e <NVIC_EncodePriority+0x32>
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	43da      	mvns	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	401a      	ands	r2, r3
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	fa01 f303 	lsl.w	r3, r1, r3
 800672e:	43d9      	mvns	r1, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006734:	4313      	orrs	r3, r2
         );
}
 8006736:	4618      	mov	r0, r3
 8006738:	3724      	adds	r7, #36	; 0x24
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3b01      	subs	r3, #1
 8006750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006754:	d301      	bcc.n	800675a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006756:	2301      	movs	r3, #1
 8006758:	e00f      	b.n	800677a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800675a:	4a0a      	ldr	r2, [pc, #40]	; (8006784 <SysTick_Config+0x40>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3b01      	subs	r3, #1
 8006760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006762:	210f      	movs	r1, #15
 8006764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006768:	f7ff ff8e 	bl	8006688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <SysTick_Config+0x40>)
 800676e:	2200      	movs	r2, #0
 8006770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006772:	4b04      	ldr	r3, [pc, #16]	; (8006784 <SysTick_Config+0x40>)
 8006774:	2207      	movs	r2, #7
 8006776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	e000e010 	.word	0xe000e010

08006788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff29 	bl	80065e8 <__NVIC_SetPriorityGrouping>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b086      	sub	sp, #24
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	4603      	mov	r3, r0
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
 80067aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067ac:	f7ff ff40 	bl	8006630 <__NVIC_GetPriorityGrouping>
 80067b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	6978      	ldr	r0, [r7, #20]
 80067b8:	f7ff ff90 	bl	80066dc <NVIC_EncodePriority>
 80067bc:	4602      	mov	r2, r0
 80067be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff ff5f 	bl	8006688 <__NVIC_SetPriority>
}
 80067ca:	bf00      	nop
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	4603      	mov	r3, r0
 80067da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff ff33 	bl	800664c <__NVIC_EnableIRQ>
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ffa4 	bl	8006744 <SysTick_Config>
 80067fc:	4603      	mov	r3, r0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006810:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <HAL_MPU_Enable+0x38>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <HAL_MPU_Enable+0x3c>)
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <HAL_MPU_Enable+0x3c>)
 8006820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006824:	6253      	str	r3, [r2, #36]	; 0x24
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006826:	f3bf 8f5f 	dmb	sy
}
 800682a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800682c:	f3bf 8f6f 	isb	sy
}
 8006830:	bf00      	nop

  /* Follow ARM recommendation with */
  /* - Data Memory Barrier and Instruction Synchronization to insure MPU usage */
  __DMB(); /* Force memory writes before continuing */
  __ISB(); /* Flush and refill pipeline with updated permissions */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	e000ed90 	.word	0xe000ed90
 8006844:	e000ed00 	.word	0xe000ed00

08006848 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800684c:	f3bf 8f5f 	dmb	sy
}
 8006850:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_MPU_Disable+0x20>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4a04      	ldr	r2, [pc, #16]	; (8006868 <HAL_MPU_Disable+0x20>)
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	6053      	str	r3, [r2, #4]
}
 800685e:	bf00      	nop
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	e000ed90 	.word	0xe000ed90

0800686c <HAL_MPU_ConfigRegion>:
  * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, pMPU_RegionInit);
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4803      	ldr	r0, [pc, #12]	; (8006884 <HAL_MPU_ConfigRegion+0x18>)
 8006878:	f000 f814 	bl	80068a4 <MPU_ConfigRegion>
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	e000ed90 	.word	0xe000ed90

08006888 <HAL_MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4803      	ldr	r0, [pc, #12]	; (80068a0 <HAL_MPU_ConfigMemoryAttributes+0x18>)
 8006894:	f000 f842 	bl	800691c <MPU_ConfigMemoryAttributes>
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	e000ed90 	.word	0xe000ed90

080068a4 <MPU_ConfigRegion>:

/** @addtogroup CORTEX_Private_Functions
  * @{
  */
static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80068ae:	f3bf 8f5f 	dmb	sy
}
 80068b2:	bf00      	nop

  /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
  __DMB();

  /* Set the Region number */
  MPUx->RNR = pMPU_RegionInit->Number;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	609a      	str	r2, [r3, #8]

  if (pMPU_RegionInit->Enable != MPU_REGION_DISABLE)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01e      	beq.n	8006904 <MPU_ConfigRegion+0x60>
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(pMPU_RegionInit->DisableExec));
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(pMPU_RegionInit->AccessPermission));
    assert_param(IS_MPU_ACCESS_SHAREABLE(pMPU_RegionInit->IsShareable));

    MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	7bdb      	ldrb	r3, [r3, #15]
 80068d2:	00db      	lsls	r3, r3, #3
    MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80068d4:	431a      	orrs	r2, r3
                  ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	7b5b      	ldrb	r3, [r3, #13]
 80068da:	005b      	lsls	r3, r3, #1
                  ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 80068dc:	4313      	orrs	r3, r2
                  ((uint32_t)pMPU_RegionInit->DisableExec           << MPU_RBAR_XN_Pos));
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	7b92      	ldrb	r2, [r2, #14]
                  ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 80068e2:	431a      	orrs	r2, r3
    MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	60da      	str	r2, [r3, #12]

    MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	7b1b      	ldrb	r3, [r3, #12]
 80068f4:	005b      	lsls	r3, r3, #1
    MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80068f6:	4313      	orrs	r3, r2
                  ((uint32_t)pMPU_RegionInit->Enable                << MPU_RLAR_EN_Pos));
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 80068fc:	431a      	orrs	r2, r3
    MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	611a      	str	r2, [r3, #16]
  else
  {
    MPUx->RLAR = 0U;
    MPUx->RBAR = 0U;
  }
}
 8006902:	e005      	b.n	8006910 <MPU_ConfigRegion+0x6c>
    MPUx->RLAR = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
    MPUx->RBAR = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	60da      	str	r2, [r3, #12]
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <MPU_ConfigMemoryAttributes>:

static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8006926:	f3bf 8f5f 	dmb	sy
}
 800692a:	bf00      	nop
  /* No need to check Attributes value as all 0x0..0xFF possible */

  /* Follow ARM recommendation with Data Memory Barrier prior to MPUx configuration */
  __DMB();

  if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b03      	cmp	r3, #3
 8006932:	d806      	bhi.n	8006942 <MPU_ConfigMemoryAttributes+0x26>
  {
    /* Program MPU_MAIR0 */
    p_mair = &(MPUx->MAIR0);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3330      	adds	r3, #48	; 0x30
 8006938:	617b      	str	r3, [r7, #20]
    attr_number = pMPU_AttributesInit->Number;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	e006      	b.n	8006950 <MPU_ConfigMemoryAttributes+0x34>
  }
  else
  {
    /* Program MPU_MAIR1 */
    p_mair = &(MPUx->MAIR1);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3334      	adds	r3, #52	; 0x34
 8006946:	617b      	str	r3, [r7, #20]
    attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	3b04      	subs	r3, #4
 800694e:	613b      	str	r3, [r7, #16]
  }

  attr_values = *(p_mair);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60fb      	str	r3, [r7, #12]
  attr_values &=  ~(0xFFUL << (attr_number * 8U));
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	22ff      	movs	r2, #255	; 0xff
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	43db      	mvns	r3, r3
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4013      	ands	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	785b      	ldrb	r3, [r3, #1]
 800696c:	461a      	mov	r2, r3
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	409a      	lsls	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	431a      	orrs	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	601a      	str	r2, [r3, #0]
}
 800697c:	bf00      	nop
 800697e:	371c      	adds	r7, #28
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e069      	b.n	8006a6e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fa fee8 	bl	800177c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6819      	ldr	r1, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <HAL_DCMI_Init+0xf0>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6819      	ldr	r1, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80069e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80069f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80069fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006a0a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006a16:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d112      	bne.n	8006a4e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7f1b      	ldrb	r3, [r3, #28]
 8006a2c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	7f5b      	ldrb	r3, [r3, #29]
 8006a32:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006a34:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7f9b      	ldrb	r3, [r3, #30]
 8006a3a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006a3c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	7fdb      	ldrb	r3, [r3, #31]
 8006a44:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006a4a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006a4c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 021e 	orr.w	r2, r2, #30
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	ffe0f007 	.word	0xffe0f007

08006a7c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_DCMI_Start_DMA+0x26>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e189      	b.n	8006db6 <HAL_DCMI_Start_DMA+0x33a>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2202      	movs	r2, #2
 8006aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0202 	bic.w	r2, r2, #2
 8006ad0:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6819      	ldr	r1, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae6:	4a99      	ldr	r2, [pc, #612]	; (8006d4c <HAL_DCMI_Start_DMA+0x2d0>)
 8006ae8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aee:	4a98      	ldr	r2, [pc, #608]	; (8006d50 <HAL_DCMI_Start_DMA+0x2d4>)
 8006af0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af6:	2200      	movs	r2, #0
 8006af8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1e:	d24c      	bcs.n	8006bba <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d037      	beq.n	8006b9e <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d023      	beq.n	8006b80 <HAL_DCMI_Start_DMA+0x104>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01d      	beq.n	8006b80 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fec4 	bl	8007900 <HAL_DMAEx_List_Start_IT>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b7e:	e0f9      	b.n	8006d74 <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2240      	movs	r2, #64	; 0x40
 8006b84:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b9c:	e0ea      	b.n	8006d74 <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3328      	adds	r3, #40	; 0x28
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	f000 fb14 	bl	80071da <HAL_DMA_Start_IT>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bb8:	e0dc      	b.n	8006d74 <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8006bcc:	e009      	b.n	8006be2 <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	085a      	lsrs	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	005a      	lsls	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bea:	d2f0      	bcs.n	8006bce <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80a3 	beq.w	8006d54 <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 808a 	beq.w	8006d2e <HAL_DCMI_Start_DMA+0x2b2>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8083 	beq.w	8006d2e <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c34:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d04b      	beq.n	8006d10 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	0c1b      	lsrs	r3, r3, #16
 8006c96:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006c9e:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca8:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	0c1b      	lsrs	r3, r3, #16
 8006cb6:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006cb8:	6979      	ldr	r1, [r7, #20]
 8006cba:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006cbe:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006cc0:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 8006cc2:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006cc4:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8006cd0:	6978      	ldr	r0, [r7, #20]
 8006cd2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006cd6:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8006ce0:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fe0a 	bl	8007900 <HAL_DMAEx_List_Start_IT>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d03f      	beq.n	8006d72 <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2240      	movs	r2, #64	; 0x40
 8006cf6:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006d0e:	e030      	b.n	8006d72 <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2240      	movs	r2, #64	; 0x40
 8006d14:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006d2c:	e021      	b.n	8006d72 <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2240      	movs	r2, #64	; 0x40
 8006d32:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d4a:	e013      	b.n	8006d74 <HAL_DCMI_Start_DMA+0x2f8>
 8006d4c:	08007095 	.word	0x08007095
 8006d50:	080071a1 	.word	0x080071a1
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2240      	movs	r2, #64	; 0x40
 8006d58:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d70:	e000      	b.n	8006d74 <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006d72:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10c      	bne.n	8006d96 <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006d94:	e00d      	b.n	8006db2 <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2240      	movs	r2, #64	; 0x40
 8006d9a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 8006db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3728      	adds	r7, #40	; 0x28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8006dc8:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <HAL_DCMI_Suspend+0xa8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <HAL_DCMI_Suspend+0xac>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0a5b      	lsrs	r3, r3, #9
 8006dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dd8:	fb02 f303 	mul.w	r3, r2, r3
 8006ddc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_DCMI_Suspend+0x30>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e034      	b.n	8006e5a <HAL_DCMI_Suspend+0x9a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d125      	bne.n	8006e50 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2205      	movs	r2, #5
 8006e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10c      	bne.n	8006e42 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	72fb      	strb	r3, [r7, #11]
        break;
 8006e40:	e006      	b.n	8006e50 <HAL_DCMI_Suspend+0x90>
      }
    } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000014 	.word	0x20000014
 8006e6c:	10624dd3 	.word	0x10624dd3

08006e70 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_DCMI_Resume+0x16>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e01a      	b.n	8006ebc <HAL_DCMI_Resume+0x4c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d10b      	bne.n	8006eb2 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0201 	orr.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01e      	beq.n	8006f20 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eee:	f043 0202 	orr.w	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f02:	4a39      	ldr	r2, [pc, #228]	; (8006fe8 <HAL_DCMI_IRQHandler+0x120>)
 8006f04:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f9c5 	bl	800729a <HAL_DMA_Abort_IT>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f940 	bl	80071a0 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01e      	beq.n	8006f68 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f36:	f043 0201 	orr.w	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2204      	movs	r2, #4
 8006f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4a:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <HAL_DCMI_IRQHandler+0x120>)
 8006f4c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f9a1 	bl	800729a <HAL_DMA_Abort_IT>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 f91c 	bl	80071a0 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d006      	beq.n	8006f80 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2210      	movs	r2, #16
 8006f78:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f840 	bl	8007000 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d006      	beq.n	8006f98 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2208      	movs	r2, #8
 8006f90:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f83e 	bl	8007014 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01d      	beq.n	8006fde <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d107      	bne.n	8006fc0 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 021e 	bic.w	r2, r2, #30
 8006fbe:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7f9 ff01 	bl	8000de0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	080071a1 	.word	0x080071a1

08006fec <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_DCMI_ConfigSyncUnmask>:
  * @param  SyncUnmask pointer to a DCMI_SyncUnmaskTypeDef structure that contains
  *                    the embedded synchronization delimiters unmasks.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCMI_ConfigSyncUnmask(DCMI_HandleTypeDef *hdcmi, DCMI_SyncUnmaskTypeDef *SyncUnmask)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_DCMI_ConfigSyncUnmask+0x18>
 800703c:	2302      	movs	r3, #2
 800703e:	e023      	b.n	8007088 <HAL_DCMI_ConfigSyncUnmask+0x60>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Write DCMI embedded synchronization unmask register */
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
                           ((uint32_t)SyncUnmask->LineStartUnmask << DCMI_ESUR_LSU_Pos) | \
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	021b      	lsls	r3, r3, #8
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 800705c:	431a      	orrs	r2, r3
                           ((uint32_t)SyncUnmask->LineEndUnmask << DCMI_ESUR_LEU_Pos) | \
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	041b      	lsls	r3, r3, #16
                           ((uint32_t)SyncUnmask->LineStartUnmask << DCMI_ESUR_LSU_Pos) | \
 8007064:	ea42 0103 	orr.w	r1, r2, r3
                           ((uint32_t)SyncUnmask->FrameEndUnmask << DCMI_ESUR_FEU_Pos));
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	78db      	ldrb	r3, [r3, #3]
 800706c:	061a      	lsls	r2, r3, #24
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
                           ((uint32_t)SyncUnmask->LineEndUnmask << DCMI_ESUR_LEU_Pos) | \
 8007072:	430a      	orrs	r2, r1
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 8007074:	61da      	str	r2, [r3, #28]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007094:	b480      	push	{r7}
 8007096:	b08b      	sub	sp, #44	; 0x2c
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d061      	beq.n	800716e <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80070ca:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80070ce:	4013      	ands	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	0c1b      	lsrs	r3, r3, #16
 80070dc:	041b      	lsls	r3, r3, #16
 80070de:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d910      	bls.n	8007112 <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	3302      	adds	r3, #2
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	fb03 f202 	mul.w	r2, r3, r2
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	441a      	add	r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	1e5a      	subs	r2, r3, #1
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8007110:	e040      	b.n	8007194 <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	2b01      	cmp	r3, #1
 8007118:	d109      	bne.n	800712e <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	1e5a      	subs	r2, r3, #1
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800712c:	e032      	b.n	8007194 <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	441a      	add	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
 8007152:	e003      	b.n	800715c <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	60da      	str	r2, [r3, #12]
}
 800716c:	e012      	b.n	8007194 <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	d103      	bne.n	8007194 <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8007194:	bf00      	nop
 8007196:	372c      	adds	r7, #44	; 0x2c
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d009      	beq.n	80071cc <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff ff0d 	bl	8006fec <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e04f      	b.n	8007292 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_DMA_Start_IT+0x26>
 80071fc:	2302      	movs	r3, #2
 80071fe:	e048      	b.n	8007292 <HAL_DMA_Start_IT+0xb8>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d136      	bne.n	8007282 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fa15 	bl	8007658 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695a      	ldr	r2, [r3, #20]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 800723c:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695a      	ldr	r2, [r3, #20]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007254:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	2b00      	cmp	r3, #0
 800725c:	d007      	beq.n	800726e <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695a      	ldr	r2, [r3, #20]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800726c:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695a      	ldr	r2, [r3, #20]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e007      	b.n	8007292 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2240      	movs	r2, #64	; 0x40
 8007286:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e019      	b.n	80072e0 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d004      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e00e      	b.n	80072e0 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2204      	movs	r2, #4
 80072c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6812      	ldr	r2, [r2, #0]
 80072d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80072d8:	f043 0304 	orr.w	r3, r3, #4
 80072dc:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80072fc:	f023 030f 	bic.w	r3, r3, #15
 8007300:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800730a:	3b50      	subs	r3, #80	; 0x50
 800730c:	09db      	lsrs	r3, r3, #7
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	2201      	movs	r2, #1
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8154 	beq.w	80075d4 <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007336:	2b00      	cmp	r3, #0
 8007338:	d011      	beq.n	800735e <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007350:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007356:	f043 0201 	orr.w	r2, r3, #1
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007368:	2b00      	cmp	r3, #0
 800736a:	d011      	beq.n	8007390 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007382:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007388:	f043 0202 	orr.w	r2, r3, #2
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d011      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073b4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ba:	f043 0204 	orr.w	r2, r3, #4
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d011      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073e6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ec:	f043 0208 	orr.w	r2, r3, #8
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d013      	beq.n	800742a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00c      	beq.n	800742a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007418:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d059      	beq.n	80074ec <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d052      	beq.n	80074ec <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800744e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b04      	cmp	r3, #4
 800745a:	d13b      	bne.n	80074d4 <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695a      	ldr	r2, [r3, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800746a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695a      	ldr	r2, [r3, #20]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0202 	orr.w	r2, r2, #2
 800747a:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d004      	beq.n	8007494 <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2203      	movs	r2, #3
 800748e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007492:	e003      	b.n	800749c <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d007      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ac:	2201      	movs	r2, #1
 80074ae:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2200      	movs	r2, #0
 80074b6:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8087 	beq.w	80075d8 <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
        }

        return;
 80074d2:	e081      	b.n	80075d8 <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2205      	movs	r2, #5
 80074d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d039      	beq.n	800756e <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d032      	beq.n	800756e <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b00      	cmp	r3, #0
 8007512:	d012      	beq.n	800753a <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d116      	bne.n	800754c <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007524:	2b00      	cmp	r3, #0
 8007526:	d111      	bne.n	800754c <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007534:	2201      	movs	r2, #1
 8007536:	731a      	strb	r2, [r3, #12]
 8007538:	e008      	b.n	800754c <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007554:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007572:	2b00      	cmp	r3, #0
 8007574:	d031      	beq.n	80075da <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0202 	orr.w	r2, r2, #2
 8007584:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2203      	movs	r2, #3
 8007598:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800759c:	e003      	b.n	80075a6 <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b6:	2201      	movs	r2, #1
 80075b8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
 80075d2:	e002      	b.n	80075da <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80075d4:	bf00      	nop
 80075d6:	e000      	b.n	80075da <HAL_DMA_IRQHandler+0x2ee>
        return;
 80075d8:	bf00      	nop
    }
  }
}
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e02b      	b.n	800764c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075fc:	f023 030f 	bic.w	r3, r3, #15
 8007600:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800760a:	3b50      	subs	r3, #80	; 0x50
 800760c:	09db      	lsrs	r3, r3, #7
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	2201      	movs	r2, #1
 8007614:	fa02 f303 	lsl.w	r3, r2, r3
 8007618:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d012      	beq.n	800764a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	f003 0311 	and.w	r3, r3, #17
 800762a:	2b11      	cmp	r3, #17
 800762c:	d106      	bne.n	800763c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	431a      	orrs	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	e006      	b.n	800764a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	43db      	mvns	r3, r3
 8007644:	401a      	ands	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	b291      	uxth	r1, r2
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	430b      	orrs	r3, r1
 800767a:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007684:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
	...

080076a4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80076ac:	f7fe ff6c 	bl	8006588 <HAL_GetTick>
 80076b0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0dc      	b.n	8007876 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a6f      	ldr	r2, [pc, #444]	; (8007880 <HAL_DMAEx_List_Init+0x1dc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	f000 809f 	beq.w	8007806 <HAL_DMAEx_List_Init+0x162>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6d      	ldr	r2, [pc, #436]	; (8007884 <HAL_DMAEx_List_Init+0x1e0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	f000 8099 	beq.w	8007806 <HAL_DMAEx_List_Init+0x162>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a6b      	ldr	r2, [pc, #428]	; (8007888 <HAL_DMAEx_List_Init+0x1e4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	f000 8093 	beq.w	8007806 <HAL_DMAEx_List_Init+0x162>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a69      	ldr	r2, [pc, #420]	; (800788c <HAL_DMAEx_List_Init+0x1e8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	f000 808d 	beq.w	8007806 <HAL_DMAEx_List_Init+0x162>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a67      	ldr	r2, [pc, #412]	; (8007890 <HAL_DMAEx_List_Init+0x1ec>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	f000 8087 	beq.w	8007806 <HAL_DMAEx_List_Init+0x162>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a65      	ldr	r2, [pc, #404]	; (8007894 <HAL_DMAEx_List_Init+0x1f0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	f000 8081 	beq.w	8007806 <HAL_DMAEx_List_Init+0x162>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a63      	ldr	r2, [pc, #396]	; (8007898 <HAL_DMAEx_List_Init+0x1f4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d07b      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a62      	ldr	r2, [pc, #392]	; (800789c <HAL_DMAEx_List_Init+0x1f8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d076      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a60      	ldr	r2, [pc, #384]	; (80078a0 <HAL_DMAEx_List_Init+0x1fc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d071      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a5f      	ldr	r2, [pc, #380]	; (80078a4 <HAL_DMAEx_List_Init+0x200>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d06c      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5d      	ldr	r2, [pc, #372]	; (80078a8 <HAL_DMAEx_List_Init+0x204>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d067      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a5c      	ldr	r2, [pc, #368]	; (80078ac <HAL_DMAEx_List_Init+0x208>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d062      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a5a      	ldr	r2, [pc, #360]	; (80078b0 <HAL_DMAEx_List_Init+0x20c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d05d      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a59      	ldr	r2, [pc, #356]	; (80078b4 <HAL_DMAEx_List_Init+0x210>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d058      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a57      	ldr	r2, [pc, #348]	; (80078b8 <HAL_DMAEx_List_Init+0x214>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d053      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a56      	ldr	r2, [pc, #344]	; (80078bc <HAL_DMAEx_List_Init+0x218>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d04e      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a54      	ldr	r2, [pc, #336]	; (80078c0 <HAL_DMAEx_List_Init+0x21c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d049      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a53      	ldr	r2, [pc, #332]	; (80078c4 <HAL_DMAEx_List_Init+0x220>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d044      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a51      	ldr	r2, [pc, #324]	; (80078c8 <HAL_DMAEx_List_Init+0x224>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d03f      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a50      	ldr	r2, [pc, #320]	; (80078cc <HAL_DMAEx_List_Init+0x228>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d03a      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a4e      	ldr	r2, [pc, #312]	; (80078d0 <HAL_DMAEx_List_Init+0x22c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d035      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a4d      	ldr	r2, [pc, #308]	; (80078d4 <HAL_DMAEx_List_Init+0x230>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d030      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a4b      	ldr	r2, [pc, #300]	; (80078d8 <HAL_DMAEx_List_Init+0x234>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d02b      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a4a      	ldr	r2, [pc, #296]	; (80078dc <HAL_DMAEx_List_Init+0x238>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d026      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a48      	ldr	r2, [pc, #288]	; (80078e0 <HAL_DMAEx_List_Init+0x23c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d021      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a47      	ldr	r2, [pc, #284]	; (80078e4 <HAL_DMAEx_List_Init+0x240>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d01c      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a45      	ldr	r2, [pc, #276]	; (80078e8 <HAL_DMAEx_List_Init+0x244>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d017      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a44      	ldr	r2, [pc, #272]	; (80078ec <HAL_DMAEx_List_Init+0x248>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d012      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a42      	ldr	r2, [pc, #264]	; (80078f0 <HAL_DMAEx_List_Init+0x24c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00d      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a41      	ldr	r2, [pc, #260]	; (80078f4 <HAL_DMAEx_List_Init+0x250>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d008      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a3f      	ldr	r2, [pc, #252]	; (80078f8 <HAL_DMAEx_List_Init+0x254>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <HAL_DMAEx_List_Init+0x162>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a3e      	ldr	r2, [pc, #248]	; (80078fc <HAL_DMAEx_List_Init+0x258>)
 8007804:	4293      	cmp	r3, r2
 8007806:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0206 	orr.w	r2, r2, #6
 8007826:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007828:	e00f      	b.n	800784a <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800782a:	f7fe fead 	bl	8006588 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b05      	cmp	r3, #5
 8007836:	d908      	bls.n	800784a <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2210      	movs	r2, #16
 800783c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2203      	movs	r2, #3
 8007842:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e015      	b.n	8007876 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e8      	bne.n	800782a <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fa77 	bl	8007d4c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	40020050 	.word	0x40020050
 8007884:	50020050 	.word	0x50020050
 8007888:	400200d0 	.word	0x400200d0
 800788c:	500200d0 	.word	0x500200d0
 8007890:	40020150 	.word	0x40020150
 8007894:	50020150 	.word	0x50020150
 8007898:	400201d0 	.word	0x400201d0
 800789c:	500201d0 	.word	0x500201d0
 80078a0:	40020250 	.word	0x40020250
 80078a4:	50020250 	.word	0x50020250
 80078a8:	400202d0 	.word	0x400202d0
 80078ac:	500202d0 	.word	0x500202d0
 80078b0:	40020350 	.word	0x40020350
 80078b4:	50020350 	.word	0x50020350
 80078b8:	400203d0 	.word	0x400203d0
 80078bc:	500203d0 	.word	0x500203d0
 80078c0:	40020450 	.word	0x40020450
 80078c4:	50020450 	.word	0x50020450
 80078c8:	400204d0 	.word	0x400204d0
 80078cc:	500204d0 	.word	0x500204d0
 80078d0:	40020550 	.word	0x40020550
 80078d4:	50020550 	.word	0x50020550
 80078d8:	400205d0 	.word	0x400205d0
 80078dc:	500205d0 	.word	0x500205d0
 80078e0:	40020650 	.word	0x40020650
 80078e4:	50020650 	.word	0x50020650
 80078e8:	400206d0 	.word	0x400206d0
 80078ec:	500206d0 	.word	0x500206d0
 80078f0:	40020750 	.word	0x40020750
 80078f4:	50020750 	.word	0x50020750
 80078f8:	400207d0 	.word	0x400207d0
 80078fc:	500207d0 	.word	0x500207d0

08007900 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_DMAEx_List_Start_IT+0x16>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e082      	b.n	8007a20 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007920:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800792c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800792e:	7dfb      	ldrb	r3, [r7, #23]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d005      	beq.n	8007940 <HAL_DMAEx_List_Start_IT+0x40>
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d16a      	bne.n	8007a10 <HAL_DMAEx_List_Start_IT+0x110>
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d067      	beq.n	8007a10 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	d157      	bne.n	80079fc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <HAL_DMAEx_List_Start_IT+0x5a>
 8007956:	2302      	movs	r3, #2
 8007958:	e062      	b.n	8007a20 <HAL_DMAEx_List_Start_IT+0x120>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796e:	2202      	movs	r2, #2
 8007970:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797c:	2200      	movs	r2, #0
 800797e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 800798e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695a      	ldr	r2, [r3, #20]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079a6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695a      	ldr	r2, [r3, #20]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079be:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f107 010c 	add.w	r1, r7, #12
 80079ca:	2200      	movs	r2, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fcd3 	bl	8008378 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	0c0b      	lsrs	r3, r1, #16
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80079f0:	4013      	ands	r3, r2
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	430b      	orrs	r3, r1
 80079fa:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0201 	orr.w	r2, r2, #1
 8007a0a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e007      	b.n	8007a20 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2240      	movs	r2, #64	; 0x40
 8007a14:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_DMAEx_List_BuildNode+0x16>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e004      	b.n	8007a4c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fad9 	bl	8007ffc <DMA_List_BuildNode>

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	; 0x28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e066      	b.n	8007b3c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d104      	bne.n	8007a80 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2204      	movs	r2, #4
 8007a7a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e05d      	b.n	8007b3c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2200      	movs	r2, #0
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fc09 	bl	80082a0 <DMA_List_CheckNodesBaseAddresses>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2205      	movs	r2, #5
 8007a98:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e04e      	b.n	8007b3c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fc2a 	bl	8008300 <DMA_List_CheckNodesTypes>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2204      	movs	r2, #4
 8007ab6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e03f      	b.n	8007b3c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e02b      	b.n	8007b24 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8007acc:	f107 0220 	add.w	r2, r7, #32
 8007ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6838      	ldr	r0, [r7, #0]
 8007ad8:	f000 fc4e 	bl	8008378 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007ae0:	f107 030c 	add.w	r3, r7, #12
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fc75 	bl	80083d8 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007b00:	4013      	ands	r3, r2
 8007b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	4319      	orrs	r1, r3
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007b14:	4013      	ands	r3, r2
 8007b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007b1e:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8007b20:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3728      	adds	r7, #40	; 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e05c      	b.n	8007c18 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e053      	b.n	8007c18 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d101      	bne.n	8007b86 <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e048      	b.n	8007c18 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e043      	b.n	8007c18 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d104      	bne.n	8007ba2 <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e03a      	b.n	8007c18 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 8007bae:	f107 0220 	add.w	r2, r7, #32
 8007bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6838      	ldr	r0, [r7, #0]
 8007bba:	f000 fbdd 	bl	8008378 <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 8007bc2:	f107 030c 	add.w	r3, r7, #12
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fc04 	bl	80083d8 <DMA_List_FindNode>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d11c      	bne.n	8007c10 <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	461a      	mov	r2, r3
 8007bdc:	2100      	movs	r1, #0
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fbfa 	bl	80083d8 <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007bea:	4013      	ands	r3, r2
 8007bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007bf4:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007bf6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e003      	b.n	8007c18 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2206      	movs	r2, #6
 8007c14:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3728      	adds	r7, #40	; 0x28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <HAL_DMAEx_List_LinkQ+0x16>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e072      	b.n	8007d20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c40:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d002      	beq.n	8007c54 <HAL_DMAEx_List_LinkQ+0x34>
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b05      	cmp	r3, #5
 8007c52:	d108      	bne.n	8007c66 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2240      	movs	r2, #64	; 0x40
 8007c58:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e05c      	b.n	8007d20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	7b1b      	ldrb	r3, [r3, #12]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d104      	bne.n	8007c7a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2201      	movs	r2, #1
 8007c74:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e052      	b.n	8007d20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a2b      	ldr	r2, [pc, #172]	; (8007d2c <HAL_DMAEx_List_LinkQ+0x10c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d022      	beq.n	8007cca <HAL_DMAEx_List_LinkQ+0xaa>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a29      	ldr	r2, [pc, #164]	; (8007d30 <HAL_DMAEx_List_LinkQ+0x110>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d01d      	beq.n	8007cca <HAL_DMAEx_List_LinkQ+0xaa>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a28      	ldr	r2, [pc, #160]	; (8007d34 <HAL_DMAEx_List_LinkQ+0x114>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d018      	beq.n	8007cca <HAL_DMAEx_List_LinkQ+0xaa>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a26      	ldr	r2, [pc, #152]	; (8007d38 <HAL_DMAEx_List_LinkQ+0x118>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d013      	beq.n	8007cca <HAL_DMAEx_List_LinkQ+0xaa>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a25      	ldr	r2, [pc, #148]	; (8007d3c <HAL_DMAEx_List_LinkQ+0x11c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_DMAEx_List_LinkQ+0xaa>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a23      	ldr	r2, [pc, #140]	; (8007d40 <HAL_DMAEx_List_LinkQ+0x120>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d009      	beq.n	8007cca <HAL_DMAEx_List_LinkQ+0xaa>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a22      	ldr	r2, [pc, #136]	; (8007d44 <HAL_DMAEx_List_LinkQ+0x124>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <HAL_DMAEx_List_LinkQ+0xaa>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a20      	ldr	r2, [pc, #128]	; (8007d48 <HAL_DMAEx_List_LinkQ+0x128>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d101      	bne.n	8007cce <HAL_DMAEx_List_LinkQ+0xae>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <HAL_DMAEx_List_LinkQ+0xb0>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10b      	bne.n	8007cec <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e019      	b.n	8007d20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf0:	2b81      	cmp	r3, #129	; 0x81
 8007cf2:	d108      	bne.n	8007d06 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10d      	bne.n	8007d18 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2204      	movs	r2, #4
 8007d00:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e00c      	b.n	8007d20 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2204      	movs	r2, #4
 8007d12:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e003      	b.n	8007d20 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	40020650 	.word	0x40020650
 8007d30:	50020650 	.word	0x50020650
 8007d34:	400206d0 	.word	0x400206d0
 8007d38:	500206d0 	.word	0x500206d0
 8007d3c:	40020750 	.word	0x40020750
 8007d40:	50020750 	.word	0x50020750
 8007d44:	400207d0 	.word	0x400207d0
 8007d48:	500207d0 	.word	0x500207d0

08007d4c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a85      	ldr	r2, [pc, #532]	; (8007f7c <DMA_List_Init+0x230>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	f000 80a0 	beq.w	8007eac <DMA_List_Init+0x160>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a83      	ldr	r2, [pc, #524]	; (8007f80 <DMA_List_Init+0x234>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	f000 809a 	beq.w	8007eac <DMA_List_Init+0x160>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a81      	ldr	r2, [pc, #516]	; (8007f84 <DMA_List_Init+0x238>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	f000 8094 	beq.w	8007eac <DMA_List_Init+0x160>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a7f      	ldr	r2, [pc, #508]	; (8007f88 <DMA_List_Init+0x23c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	f000 808e 	beq.w	8007eac <DMA_List_Init+0x160>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7d      	ldr	r2, [pc, #500]	; (8007f8c <DMA_List_Init+0x240>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	f000 8088 	beq.w	8007eac <DMA_List_Init+0x160>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a7b      	ldr	r2, [pc, #492]	; (8007f90 <DMA_List_Init+0x244>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	f000 8082 	beq.w	8007eac <DMA_List_Init+0x160>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a79      	ldr	r2, [pc, #484]	; (8007f94 <DMA_List_Init+0x248>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d07c      	beq.n	8007eac <DMA_List_Init+0x160>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a78      	ldr	r2, [pc, #480]	; (8007f98 <DMA_List_Init+0x24c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d077      	beq.n	8007eac <DMA_List_Init+0x160>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a76      	ldr	r2, [pc, #472]	; (8007f9c <DMA_List_Init+0x250>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d072      	beq.n	8007eac <DMA_List_Init+0x160>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a75      	ldr	r2, [pc, #468]	; (8007fa0 <DMA_List_Init+0x254>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d06d      	beq.n	8007eac <DMA_List_Init+0x160>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a73      	ldr	r2, [pc, #460]	; (8007fa4 <DMA_List_Init+0x258>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d068      	beq.n	8007eac <DMA_List_Init+0x160>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a72      	ldr	r2, [pc, #456]	; (8007fa8 <DMA_List_Init+0x25c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d063      	beq.n	8007eac <DMA_List_Init+0x160>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a70      	ldr	r2, [pc, #448]	; (8007fac <DMA_List_Init+0x260>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d05e      	beq.n	8007eac <DMA_List_Init+0x160>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a6f      	ldr	r2, [pc, #444]	; (8007fb0 <DMA_List_Init+0x264>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d059      	beq.n	8007eac <DMA_List_Init+0x160>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a6d      	ldr	r2, [pc, #436]	; (8007fb4 <DMA_List_Init+0x268>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d054      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a6c      	ldr	r2, [pc, #432]	; (8007fb8 <DMA_List_Init+0x26c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d04f      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a6a      	ldr	r2, [pc, #424]	; (8007fbc <DMA_List_Init+0x270>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d04a      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a69      	ldr	r2, [pc, #420]	; (8007fc0 <DMA_List_Init+0x274>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d045      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a67      	ldr	r2, [pc, #412]	; (8007fc4 <DMA_List_Init+0x278>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d040      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a66      	ldr	r2, [pc, #408]	; (8007fc8 <DMA_List_Init+0x27c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d03b      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a64      	ldr	r2, [pc, #400]	; (8007fcc <DMA_List_Init+0x280>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d036      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a63      	ldr	r2, [pc, #396]	; (8007fd0 <DMA_List_Init+0x284>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d031      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a61      	ldr	r2, [pc, #388]	; (8007fd4 <DMA_List_Init+0x288>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d02c      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a60      	ldr	r2, [pc, #384]	; (8007fd8 <DMA_List_Init+0x28c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d027      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a5e      	ldr	r2, [pc, #376]	; (8007fdc <DMA_List_Init+0x290>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d022      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a5d      	ldr	r2, [pc, #372]	; (8007fe0 <DMA_List_Init+0x294>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d01d      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a5b      	ldr	r2, [pc, #364]	; (8007fe4 <DMA_List_Init+0x298>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d018      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a5a      	ldr	r2, [pc, #360]	; (8007fe8 <DMA_List_Init+0x29c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d013      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a58      	ldr	r2, [pc, #352]	; (8007fec <DMA_List_Init+0x2a0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00e      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a57      	ldr	r2, [pc, #348]	; (8007ff0 <DMA_List_Init+0x2a4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d009      	beq.n	8007eac <DMA_List_Init+0x160>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a55      	ldr	r2, [pc, #340]	; (8007ff4 <DMA_List_Init+0x2a8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <DMA_List_Init+0x160>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a54      	ldr	r2, [pc, #336]	; (8007ff8 <DMA_List_Init+0x2ac>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d101      	bne.n	8007eb0 <DMA_List_Init+0x164>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <DMA_List_Init+0x166>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d004      	beq.n	8007ec0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ee4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a36      	ldr	r2, [pc, #216]	; (8007fdc <DMA_List_Init+0x290>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d022      	beq.n	8007f4e <DMA_List_Init+0x202>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <DMA_List_Init+0x294>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d01d      	beq.n	8007f4e <DMA_List_Init+0x202>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a33      	ldr	r2, [pc, #204]	; (8007fe4 <DMA_List_Init+0x298>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d018      	beq.n	8007f4e <DMA_List_Init+0x202>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a31      	ldr	r2, [pc, #196]	; (8007fe8 <DMA_List_Init+0x29c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d013      	beq.n	8007f4e <DMA_List_Init+0x202>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a30      	ldr	r2, [pc, #192]	; (8007fec <DMA_List_Init+0x2a0>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00e      	beq.n	8007f4e <DMA_List_Init+0x202>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2e      	ldr	r2, [pc, #184]	; (8007ff0 <DMA_List_Init+0x2a4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d009      	beq.n	8007f4e <DMA_List_Init+0x202>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a2d      	ldr	r2, [pc, #180]	; (8007ff4 <DMA_List_Init+0x2a8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <DMA_List_Init+0x202>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2b      	ldr	r2, [pc, #172]	; (8007ff8 <DMA_List_Init+0x2ac>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d101      	bne.n	8007f52 <DMA_List_Init+0x206>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <DMA_List_Init+0x208>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	40020050 	.word	0x40020050
 8007f80:	50020050 	.word	0x50020050
 8007f84:	400200d0 	.word	0x400200d0
 8007f88:	500200d0 	.word	0x500200d0
 8007f8c:	40020150 	.word	0x40020150
 8007f90:	50020150 	.word	0x50020150
 8007f94:	400201d0 	.word	0x400201d0
 8007f98:	500201d0 	.word	0x500201d0
 8007f9c:	40020250 	.word	0x40020250
 8007fa0:	50020250 	.word	0x50020250
 8007fa4:	400202d0 	.word	0x400202d0
 8007fa8:	500202d0 	.word	0x500202d0
 8007fac:	40020350 	.word	0x40020350
 8007fb0:	50020350 	.word	0x50020350
 8007fb4:	400203d0 	.word	0x400203d0
 8007fb8:	500203d0 	.word	0x500203d0
 8007fbc:	40020450 	.word	0x40020450
 8007fc0:	50020450 	.word	0x50020450
 8007fc4:	400204d0 	.word	0x400204d0
 8007fc8:	500204d0 	.word	0x500204d0
 8007fcc:	40020550 	.word	0x40020550
 8007fd0:	50020550 	.word	0x50020550
 8007fd4:	400205d0 	.word	0x400205d0
 8007fd8:	500205d0 	.word	0x500205d0
 8007fdc:	40020650 	.word	0x40020650
 8007fe0:	50020650 	.word	0x50020650
 8007fe4:	400206d0 	.word	0x400206d0
 8007fe8:	500206d0 	.word	0x500206d0
 8007fec:	40020750 	.word	0x40020750
 8007ff0:	50020750 	.word	0x50020750
 8007ff4:	400207d0 	.word	0x400207d0
 8007ff8:	500207d0 	.word	0x500207d0

08007ffc <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800800e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8008014:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800801a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8008020:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	3b01      	subs	r3, #1
 8008046:	051b      	lsls	r3, r3, #20
 8008048:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800804c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	3b01      	subs	r3, #1
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800805a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800805c:	431a      	orrs	r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6859      	ldr	r1, [r3, #4]
 800806a:	f240 237f 	movw	r3, #639	; 0x27f
 800806e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8008070:	431a      	orrs	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807e:	d10c      	bne.n	800809a <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b00      	cmp	r3, #0
 800808a:	d011      	beq.n	80080b0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	605a      	str	r2, [r3, #4]
 8008098:	e00a      	b.n	80080b0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a2:	d105      	bne.n	80080b0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00f      	beq.n	80080d8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ca:	041b      	lsls	r3, r3, #16
 80080cc:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80080d0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80080d2:	431a      	orrs	r2, r3
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080dc:	b29a      	uxth	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d04e      	beq.n	800818c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f6:	3b01      	subs	r3, #1
 80080f8:	0419      	lsls	r1, r3, #16
 80080fa:	4b67      	ldr	r3, [pc, #412]	; (8008298 <DMA_List_BuildNode+0x29c>)
 80080fc:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80080fe:	431a      	orrs	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008108:	2b00      	cmp	r3, #0
 800810a:	da06      	bge.n	800811a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	609a      	str	r2, [r3, #8]
 8008118:	e005      	b.n	8008126 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812a:	2b00      	cmp	r3, #0
 800812c:	da06      	bge.n	800813c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	609a      	str	r2, [r3, #8]
 800813a:	e005      	b.n	8008148 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	2b00      	cmp	r3, #0
 800814e:	da06      	bge.n	800815e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	609a      	str	r2, [r3, #8]
 800815c:	e005      	b.n	800816a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816e:	2b00      	cmp	r3, #0
 8008170:	da06      	bge.n	8008180 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	609a      	str	r2, [r3, #8]
 800817e:	e005      	b.n	800818c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d059      	beq.n	800825c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da09      	bge.n	80081c4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b4:	425b      	negs	r3, r3
 80081b6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	615a      	str	r2, [r3, #20]
 80081c2:	e005      	b.n	80081d0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	da0d      	bge.n	80081f4 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081dc:	425b      	negs	r3, r3
 80081de:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	695a      	ldr	r2, [r3, #20]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0419      	lsls	r1, r3, #16
 80081e8:	4b2c      	ldr	r3, [pc, #176]	; (800829c <DMA_List_BuildNode+0x2a0>)
 80081ea:	400b      	ands	r3, r1
 80081ec:	431a      	orrs	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	615a      	str	r2, [r3, #20]
 80081f2:	e009      	b.n	8008208 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fc:	0419      	lsls	r1, r3, #16
 80081fe:	4b27      	ldr	r3, [pc, #156]	; (800829c <DMA_List_BuildNode+0x2a0>)
 8008200:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008202:	431a      	orrs	r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820c:	2b00      	cmp	r3, #0
 800820e:	da08      	bge.n	8008222 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008214:	425b      	negs	r3, r3
 8008216:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	b29a      	uxth	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	619a      	str	r2, [r3, #24]
 8008220:	e004      	b.n	800822c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008226:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008230:	2b00      	cmp	r3, #0
 8008232:	da0b      	bge.n	800824c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008238:	425b      	negs	r3, r3
 800823a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008244:	431a      	orrs	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	619a      	str	r2, [r3, #24]
 800824a:	e007      	b.n	800825c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008254:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008256:	431a      	orrs	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800827c:	e005      	b.n	800828a <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	621a      	str	r2, [r3, #32]
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	07ff0000 	.word	0x07ff0000
 800829c:	1fff0000 	.word	0x1fff0000

080082a0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	0c1b      	lsrs	r3, r3, #16
 80082b8:	041b      	lsls	r3, r3, #16
 80082ba:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	e00a      	b.n	80082e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	e004      	b.n	80082e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d001      	beq.n	80082f2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e000      	b.n	80082f4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e00e      	b.n	800833e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e006      	b.n	800833e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	429a      	cmp	r2, r3
 800834e:	d001      	beq.n	8008354 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8008350:	2302      	movs	r3, #2
 8008352:	e00b      	b.n	800836c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	429a      	cmp	r2, r3
 8008364:	d001      	beq.n	800836a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8008366:	2303      	movs	r3, #3
 8008368:	e000      	b.n	800836c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00c      	beq.n	80083aa <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800839a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00f      	beq.n	80083c2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2207      	movs	r2, #7
 80083a6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80083a8:	e00b      	b.n	80083c2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4a08      	ldr	r2, [pc, #32]	; (80083d4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80083b4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2205      	movs	r2, #5
 80083c0:	601a      	str	r2, [r3, #0]
}
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	fe010000 	.word	0xfe010000
 80083d4:	f8010000 	.word	0xf8010000

080083d8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80083d8:	b480      	push	{r7}
 80083da:	b089      	sub	sp, #36	; 0x24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d142      	bne.n	8008482 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80083fc:	e01d      	b.n	800843a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d107      	bne.n	8008414 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800840e:	4013      	ands	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	e00f      	b.n	8008434 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	0c1b      	lsrs	r3, r3, #16
 800841e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	4413      	add	r3, r2
 8008424:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800842c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008430:	4013      	ands	r3, r2
 8008432:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	3301      	adds	r3, #1
 8008438:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	69fa      	ldr	r2, [r7, #28]
 8008440:	429a      	cmp	r2, r3
 8008442:	d3dc      	bcc.n	80083fe <DMA_List_FindNode+0x26>
 8008444:	e029      	b.n	800849a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d107      	bne.n	800845c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008456:	4013      	ands	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	e00f      	b.n	800847c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	0c1b      	lsrs	r3, r3, #16
 8008466:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	4413      	add	r3, r2
 800846c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008474:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008478:	4013      	ands	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	3301      	adds	r3, #1
 8008480:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	429a      	cmp	r2, r3
 800848a:	d206      	bcs.n	800849a <DMA_List_FindNode+0xc2>
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008492:	4013      	ands	r3, r2
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	429a      	cmp	r2, r3
 8008498:	d1d5      	bne.n	8008446 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80084a6:	4013      	ands	r3, r2
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d001      	beq.n	80084b2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e02b      	b.n	800850a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69fa      	ldr	r2, [r7, #28]
 80084b6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	0c1b      	lsrs	r3, r3, #16
 80084be:	041b      	lsls	r3, r3, #16
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	041b      	lsls	r3, r3, #16
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	461a      	mov	r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00f      	beq.n	8008508 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	461a      	mov	r2, r3
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80084f8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	0c1b      	lsrs	r3, r3, #16
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3724      	adds	r7, #36	; 0x24
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
	...

08008518 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008518:	b480      	push	{r7}
 800851a:	b089      	sub	sp, #36	; 0x24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800852a:	e1ba      	b.n	80088a2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	2101      	movs	r1, #1
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	fa01 f303 	lsl.w	r3, r1, r3
 8008538:	4013      	ands	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 81aa 	beq.w	800889c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a55      	ldr	r2, [pc, #340]	; (80086a0 <HAL_GPIO_Init+0x188>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d15d      	bne.n	800860c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8008556:	2201      	movs	r2, #1
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	43db      	mvns	r3, r3
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	4013      	ands	r3, r2
 8008564:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f003 0201 	and.w	r2, r3, #1
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	fa02 f303 	lsl.w	r3, r2, r3
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	4313      	orrs	r3, r2
 8008578:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8008580:	4a48      	ldr	r2, [pc, #288]	; (80086a4 <HAL_GPIO_Init+0x18c>)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008588:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800858a:	4a46      	ldr	r2, [pc, #280]	; (80086a4 <HAL_GPIO_Init+0x18c>)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	08da      	lsrs	r2, r3, #3
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3208      	adds	r2, #8
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	220f      	movs	r2, #15
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	43db      	mvns	r3, r3
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	4013      	ands	r3, r2
 80085b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	220b      	movs	r2, #11
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	08da      	lsrs	r2, r3, #3
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	3208      	adds	r2, #8
 80085d6:	69f9      	ldr	r1, [r7, #28]
 80085d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	2203      	movs	r2, #3
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	43db      	mvns	r3, r3
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	4013      	ands	r3, r2
 80085f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	2202      	movs	r2, #2
 80085fa:	fa02 f303 	lsl.w	r3, r2, r3
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	4313      	orrs	r3, r2
 8008602:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e067      	b.n	80086dc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d003      	beq.n	800861c <HAL_GPIO_Init+0x104>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2b12      	cmp	r3, #18
 800861a:	d145      	bne.n	80086a8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	08da      	lsrs	r2, r3, #3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3208      	adds	r2, #8
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f003 0307 	and.w	r3, r3, #7
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	220f      	movs	r2, #15
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	43db      	mvns	r3, r3
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	4013      	ands	r3, r2
 800863e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f003 020f 	and.w	r2, r3, #15
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	fa02 f303 	lsl.w	r3, r2, r3
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	4313      	orrs	r3, r2
 8008658:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	08da      	lsrs	r2, r3, #3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3208      	adds	r2, #8
 8008662:	69f9      	ldr	r1, [r7, #28]
 8008664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	2203      	movs	r2, #3
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	43db      	mvns	r3, r3
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	4013      	ands	r3, r2
 800867e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f003 0203 	and.w	r2, r3, #3
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	fa02 f303 	lsl.w	r3, r2, r3
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	4313      	orrs	r3, r2
 8008694:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e01e      	b.n	80086dc <HAL_GPIO_Init+0x1c4>
 800869e:	bf00      	nop
 80086a0:	46020000 	.word	0x46020000
 80086a4:	0800cb40 	.word	0x0800cb40
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	2203      	movs	r2, #3
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	43db      	mvns	r3, r3
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	4013      	ands	r3, r2
 80086be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f003 0203 	and.w	r2, r3, #3
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	fa02 f303 	lsl.w	r3, r2, r3
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	69fa      	ldr	r2, [r7, #28]
 80086da:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d00b      	beq.n	80086fc <HAL_GPIO_Init+0x1e4>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d007      	beq.n	80086fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086f0:	2b11      	cmp	r3, #17
 80086f2:	d003      	beq.n	80086fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2b12      	cmp	r3, #18
 80086fa:	d130      	bne.n	800875e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	2203      	movs	r2, #3
 8008708:	fa02 f303 	lsl.w	r3, r2, r3
 800870c:	43db      	mvns	r3, r3
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	4013      	ands	r3, r2
 8008712:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	4313      	orrs	r3, r2
 8008724:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8008732:	2201      	movs	r2, #1
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	43db      	mvns	r3, r3
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	4013      	ands	r3, r2
 8008740:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	091b      	lsrs	r3, r3, #4
 8008748:	f003 0201 	and.w	r2, r3, #1
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	4313      	orrs	r3, r2
 8008756:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2b03      	cmp	r3, #3
 8008764:	d017      	beq.n	8008796 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	2203      	movs	r2, #3
 8008772:	fa02 f303 	lsl.w	r3, r2, r3
 8008776:	43db      	mvns	r3, r3
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	4013      	ands	r3, r2
 800877c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	689a      	ldr	r2, [r3, #8]
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	fa02 f303 	lsl.w	r3, r2, r3
 800878a:	69fa      	ldr	r2, [r7, #28]
 800878c:	4313      	orrs	r3, r2
 800878e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d07c      	beq.n	800889c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80087a2:	4a47      	ldr	r2, [pc, #284]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	089b      	lsrs	r3, r3, #2
 80087a8:	3318      	adds	r3, #24
 80087aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	220f      	movs	r2, #15
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	43db      	mvns	r3, r3
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	4013      	ands	r3, r2
 80087c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	0a9a      	lsrs	r2, r3, #10
 80087ca:	4b3e      	ldr	r3, [pc, #248]	; (80088c4 <HAL_GPIO_Init+0x3ac>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	f002 0203 	and.w	r2, r2, #3
 80087d4:	00d2      	lsls	r2, r2, #3
 80087d6:	4093      	lsls	r3, r2
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	4313      	orrs	r3, r2
 80087dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80087de:	4938      	ldr	r1, [pc, #224]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	3318      	adds	r3, #24
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80087ec:	4b34      	ldr	r3, [pc, #208]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	43db      	mvns	r3, r3
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	4013      	ands	r3, r2
 80087fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4313      	orrs	r3, r2
 800880e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8008810:	4a2b      	ldr	r2, [pc, #172]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8008816:	4b2a      	ldr	r3, [pc, #168]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	43db      	mvns	r3, r3
 8008820:	69fa      	ldr	r2, [r7, #28]
 8008822:	4013      	ands	r3, r2
 8008824:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800883a:	4a21      	ldr	r2, [pc, #132]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008840:	4b1f      	ldr	r3, [pc, #124]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 8008842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008846:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	43db      	mvns	r3, r3
 800884c:	69fa      	ldr	r2, [r7, #28]
 800884e:	4013      	ands	r3, r2
 8008850:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8008866:	4a16      	ldr	r2, [pc, #88]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800886e:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 8008870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008874:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	43db      	mvns	r3, r3
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	4013      	ands	r3, r2
 800887e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8008894:	4a0a      	ldr	r2, [pc, #40]	; (80088c0 <HAL_GPIO_Init+0x3a8>)
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	3301      	adds	r3, #1
 80088a0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f47f ae3d 	bne.w	800852c <HAL_GPIO_Init+0x14>
  }
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	3724      	adds	r7, #36	; 0x24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	46022000 	.word	0x46022000
 80088c4:	002f7f7f 	.word	0x002f7f7f

080088c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b089      	sub	sp, #36	; 0x24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80088da:	e0bc      	b.n	8008a56 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80088dc:	2201      	movs	r2, #1
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	fa02 f303 	lsl.w	r3, r2, r3
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	4013      	ands	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80ad 	beq.w	8008a50 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a5e      	ldr	r2, [pc, #376]	; (8008a74 <HAL_GPIO_DeInit+0x1ac>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d115      	bne.n	800892a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80088fe:	4a5e      	ldr	r2, [pc, #376]	; (8008a78 <HAL_GPIO_DeInit+0x1b0>)
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008906:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008908:	4a5b      	ldr	r2, [pc, #364]	; (8008a78 <HAL_GPIO_DeInit+0x1b0>)
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	4413      	add	r3, r2
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8008914:	4b57      	ldr	r3, [pc, #348]	; (8008a74 <HAL_GPIO_DeInit+0x1ac>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	2101      	movs	r1, #1
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	fa01 f303 	lsl.w	r3, r1, r3
 8008920:	43db      	mvns	r3, r3
 8008922:	4954      	ldr	r1, [pc, #336]	; (8008a74 <HAL_GPIO_DeInit+0x1ac>)
 8008924:	4013      	ands	r3, r2
 8008926:	600b      	str	r3, [r1, #0]
 8008928:	e053      	b.n	80089d2 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800892a:	4a54      	ldr	r2, [pc, #336]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	089b      	lsrs	r3, r3, #2
 8008930:	3318      	adds	r3, #24
 8008932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008936:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	220f      	movs	r2, #15
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4013      	ands	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	0a9a      	lsrs	r2, r3, #10
 8008950:	4b4b      	ldr	r3, [pc, #300]	; (8008a80 <HAL_GPIO_DeInit+0x1b8>)
 8008952:	4013      	ands	r3, r2
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	f002 0203 	and.w	r2, r2, #3
 800895a:	00d2      	lsls	r2, r2, #3
 800895c:	4093      	lsls	r3, r2
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d136      	bne.n	80089d2 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8008964:	4b45      	ldr	r3, [pc, #276]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 8008966:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	43db      	mvns	r3, r3
 800896e:	4943      	ldr	r1, [pc, #268]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 8008970:	4013      	ands	r3, r2
 8008972:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8008976:	4b41      	ldr	r3, [pc, #260]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 8008978:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	43db      	mvns	r3, r3
 8008980:	493e      	ldr	r1, [pc, #248]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 8008982:	4013      	ands	r3, r2
 8008984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8008988:	4b3c      	ldr	r3, [pc, #240]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	43db      	mvns	r3, r3
 8008990:	493a      	ldr	r1, [pc, #232]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 8008992:	4013      	ands	r3, r2
 8008994:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8008996:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	43db      	mvns	r3, r3
 800899e:	4937      	ldr	r1, [pc, #220]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	220f      	movs	r2, #15
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80089b4:	4a31      	ldr	r2, [pc, #196]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	089b      	lsrs	r3, r3, #2
 80089ba:	3318      	adds	r3, #24
 80089bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	43da      	mvns	r2, r3
 80089c4:	482d      	ldr	r0, [pc, #180]	; (8008a7c <HAL_GPIO_DeInit+0x1b4>)
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	089b      	lsrs	r3, r3, #2
 80089ca:	400a      	ands	r2, r1
 80089cc:	3318      	adds	r3, #24
 80089ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	2103      	movs	r1, #3
 80089dc:	fa01 f303 	lsl.w	r3, r1, r3
 80089e0:	431a      	orrs	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	08da      	lsrs	r2, r3, #3
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	3208      	adds	r2, #8
 80089ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	220f      	movs	r2, #15
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	43db      	mvns	r3, r3
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	08d2      	lsrs	r2, r2, #3
 8008a06:	4019      	ands	r1, r3
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	3208      	adds	r2, #8
 8008a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	689a      	ldr	r2, [r3, #8]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	2103      	movs	r1, #3
 8008a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1e:	43db      	mvns	r3, r3
 8008a20:	401a      	ands	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a32:	43db      	mvns	r3, r3
 8008a34:	401a      	ands	r2, r3
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	2103      	movs	r1, #3
 8008a44:	fa01 f303 	lsl.w	r3, r1, r3
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	401a      	ands	r2, r3
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	3301      	adds	r3, #1
 8008a54:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f47f af3c 	bne.w	80088dc <HAL_GPIO_DeInit+0x14>
  }
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	3724      	adds	r7, #36	; 0x24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	46020000 	.word	0x46020000
 8008a78:	0800cb40 	.word	0x0800cb40
 8008a7c:	46022000 	.word	0x46022000
 8008a80:	002f7f7f 	.word	0x002f7f7f

08008a84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	887b      	ldrh	r3, [r7, #2]
 8008a96:	4013      	ands	r3, r2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	73fb      	strb	r3, [r7, #15]
 8008aa0:	e001      	b.n	8008aa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	807b      	strh	r3, [r7, #2]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ac4:	787b      	ldrb	r3, [r7, #1]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008aca:	887a      	ldrh	r2, [r7, #2]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8008ad0:	e002      	b.n	8008ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8008ad2:	887a      	ldrh	r2, [r7, #2]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008af6:	887a      	ldrh	r2, [r7, #2]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4013      	ands	r3, r2
 8008afc:	041a      	lsls	r2, r3, #16
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	43d9      	mvns	r1, r3
 8008b02:	887b      	ldrh	r3, [r7, #2]
 8008b04:	400b      	ands	r3, r1
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	619a      	str	r2, [r3, #24]
}
 8008b0c:	bf00      	nop
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8008b22:	4b0f      	ldr	r3, [pc, #60]	; (8008b60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d006      	beq.n	8008b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008b2e:	4a0c      	ldr	r2, [pc, #48]	; (8008b60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008b30:	88fb      	ldrh	r3, [r7, #6]
 8008b32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7f8 faac 	bl	8001094 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8008b3c:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	4013      	ands	r3, r2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d006      	beq.n	8008b56 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008b48:	4a05      	ldr	r2, [pc, #20]	; (8008b60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f807 	bl	8008b64 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	46022000 	.word	0x46022000

08008b64 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e081      	b.n	8008c90 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f8a8 	bl	8008cf6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2224      	movs	r2, #36	; 0x24
 8008baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0201 	bic.w	r2, r2, #1
 8008bbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d107      	bne.n	8008bf4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bf0:	609a      	str	r2, [r3, #8]
 8008bf2:	e006      	b.n	8008c02 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008c00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d104      	bne.n	8008c14 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c26:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691a      	ldr	r2, [r3, #16]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	69d9      	ldr	r1, [r3, #28]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0201 	orr.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e021      	b.n	8008cee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2224      	movs	r2, #36	; 0x24
 8008cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0201 	bic.w	r2, r2, #1
 8008cc0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f821 	bl	8008d0a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
	...

08008d20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	4603      	mov	r3, r0
 8008d30:	817b      	strh	r3, [r7, #10]
 8008d32:	460b      	mov	r3, r1
 8008d34:	813b      	strh	r3, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	f040 80f9 	bne.w	8008f3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <HAL_I2C_Mem_Write+0x34>
 8008d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0ed      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d101      	bne.n	8008d6e <HAL_I2C_Mem_Write+0x4e>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	e0e6      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d76:	f7fd fc07 	bl	8006588 <HAL_GetTick>
 8008d7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	2319      	movs	r3, #25
 8008d82:	2201      	movs	r2, #1
 8008d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fadd 	bl	8009348 <I2C_WaitOnFlagUntilTimeout>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e0d1      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2221      	movs	r2, #33	; 0x21
 8008d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2240      	movs	r2, #64	; 0x40
 8008da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a3a      	ldr	r2, [r7, #32]
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dc0:	88f8      	ldrh	r0, [r7, #6]
 8008dc2:	893a      	ldrh	r2, [r7, #8]
 8008dc4:	8979      	ldrh	r1, [r7, #10]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	4603      	mov	r3, r0
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 f9ed 	bl	80091b0 <I2C_RequestMemoryWrite>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0a9      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	2bff      	cmp	r3, #255	; 0xff
 8008df0:	d90e      	bls.n	8008e10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	22ff      	movs	r2, #255	; 0xff
 8008df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	8979      	ldrh	r1, [r7, #10]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fc57 	bl	80096bc <I2C_TransferConfig>
 8008e0e:	e00f      	b.n	8008e30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	8979      	ldrh	r1, [r7, #10]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 fc46 	bl	80096bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 fad6 	bl	80093e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e07b      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	781a      	ldrb	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d034      	beq.n	8008ee8 <HAL_I2C_Mem_Write+0x1c8>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d130      	bne.n	8008ee8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2180      	movs	r1, #128	; 0x80
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 fa59 	bl	8009348 <I2C_WaitOnFlagUntilTimeout>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e04d      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	2bff      	cmp	r3, #255	; 0xff
 8008ea8:	d90e      	bls.n	8008ec8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	22ff      	movs	r2, #255	; 0xff
 8008eae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	8979      	ldrh	r1, [r7, #10]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 fbfb 	bl	80096bc <I2C_TransferConfig>
 8008ec6:	e00f      	b.n	8008ee8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	8979      	ldrh	r1, [r7, #10]
 8008eda:	2300      	movs	r3, #0
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 fbea 	bl	80096bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d19e      	bne.n	8008e30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 fabc 	bl	8009474 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e01a      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6859      	ldr	r1, [r3, #4]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <HAL_I2C_Mem_Write+0x224>)
 8008f1a:	400b      	ands	r3, r1
 8008f1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	e000      	b.n	8008f3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008f3a:	2302      	movs	r3, #2
  }
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	fe00e800 	.word	0xfe00e800

08008f48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	4608      	mov	r0, r1
 8008f52:	4611      	mov	r1, r2
 8008f54:	461a      	mov	r2, r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	817b      	strh	r3, [r7, #10]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	813b      	strh	r3, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	f040 80fd 	bne.w	800916a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_I2C_Mem_Read+0x34>
 8008f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d105      	bne.n	8008f88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0f1      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_I2C_Mem_Read+0x4e>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e0ea      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f9e:	f7fd faf3 	bl	8006588 <HAL_GetTick>
 8008fa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	2319      	movs	r3, #25
 8008faa:	2201      	movs	r2, #1
 8008fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f9c9 	bl	8009348 <I2C_WaitOnFlagUntilTimeout>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e0d5      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2222      	movs	r2, #34	; 0x22
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2240      	movs	r2, #64	; 0x40
 8008fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a3a      	ldr	r2, [r7, #32]
 8008fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fe8:	88f8      	ldrh	r0, [r7, #6]
 8008fea:	893a      	ldrh	r2, [r7, #8]
 8008fec:	8979      	ldrh	r1, [r7, #10]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 f92d 	bl	8009258 <I2C_RequestMemoryRead>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e0ad      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009014:	b29b      	uxth	r3, r3
 8009016:	2bff      	cmp	r3, #255	; 0xff
 8009018:	d90e      	bls.n	8009038 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	22ff      	movs	r2, #255	; 0xff
 800901e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009024:	b2da      	uxtb	r2, r3
 8009026:	8979      	ldrh	r1, [r7, #10]
 8009028:	4b52      	ldr	r3, [pc, #328]	; (8009174 <HAL_I2C_Mem_Read+0x22c>)
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fb43 	bl	80096bc <I2C_TransferConfig>
 8009036:	e00f      	b.n	8009058 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800903c:	b29a      	uxth	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009046:	b2da      	uxtb	r2, r3
 8009048:	8979      	ldrh	r1, [r7, #10]
 800904a:	4b4a      	ldr	r3, [pc, #296]	; (8009174 <HAL_I2C_Mem_Read+0x22c>)
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fb32 	bl	80096bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	2200      	movs	r2, #0
 8009060:	2104      	movs	r1, #4
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 f970 	bl	8009348 <I2C_WaitOnFlagUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e07c      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908e:	3b01      	subs	r3, #1
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d034      	beq.n	8009118 <HAL_I2C_Mem_Read+0x1d0>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d130      	bne.n	8009118 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	2200      	movs	r2, #0
 80090be:	2180      	movs	r1, #128	; 0x80
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f941 	bl	8009348 <I2C_WaitOnFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e04d      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2bff      	cmp	r3, #255	; 0xff
 80090d8:	d90e      	bls.n	80090f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	22ff      	movs	r2, #255	; 0xff
 80090de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	8979      	ldrh	r1, [r7, #10]
 80090e8:	2300      	movs	r3, #0
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 fae3 	bl	80096bc <I2C_TransferConfig>
 80090f6:	e00f      	b.n	8009118 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009106:	b2da      	uxtb	r2, r3
 8009108:	8979      	ldrh	r1, [r7, #10]
 800910a:	2300      	movs	r3, #0
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 fad2 	bl	80096bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d19a      	bne.n	8009058 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f9a4 	bl	8009474 <I2C_WaitOnSTOPFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e01a      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2220      	movs	r2, #32
 800913c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6859      	ldr	r1, [r3, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <HAL_I2C_Mem_Read+0x230>)
 800914a:	400b      	ands	r3, r1
 800914c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2220      	movs	r2, #32
 8009152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	e000      	b.n	800916c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800916a:	2302      	movs	r3, #2
  }
}
 800916c:	4618      	mov	r0, r3
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	80002400 	.word	0x80002400
 8009178:	fe00e800 	.word	0xfe00e800

0800917c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800918a:	b2db      	uxtb	r3, r3
}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	4608      	mov	r0, r1
 80091ba:	4611      	mov	r1, r2
 80091bc:	461a      	mov	r2, r3
 80091be:	4603      	mov	r3, r0
 80091c0:	817b      	strh	r3, [r7, #10]
 80091c2:	460b      	mov	r3, r1
 80091c4:	813b      	strh	r3, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	8979      	ldrh	r1, [r7, #10]
 80091d0:	4b20      	ldr	r3, [pc, #128]	; (8009254 <I2C_RequestMemoryWrite+0xa4>)
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 fa6f 	bl	80096bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	69b9      	ldr	r1, [r7, #24]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f8ff 	bl	80093e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e02c      	b.n	800924c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091f2:	88fb      	ldrh	r3, [r7, #6]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d105      	bne.n	8009204 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091f8:	893b      	ldrh	r3, [r7, #8]
 80091fa:	b2da      	uxtb	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	629a      	str	r2, [r3, #40]	; 0x28
 8009202:	e015      	b.n	8009230 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009204:	893b      	ldrh	r3, [r7, #8]
 8009206:	0a1b      	lsrs	r3, r3, #8
 8009208:	b29b      	uxth	r3, r3
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 f8e5 	bl	80093e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e012      	b.n	800924c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009226:	893b      	ldrh	r3, [r7, #8]
 8009228:	b2da      	uxtb	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2200      	movs	r2, #0
 8009238:	2180      	movs	r1, #128	; 0x80
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f884 	bl	8009348 <I2C_WaitOnFlagUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e000      	b.n	800924c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	80002000 	.word	0x80002000

08009258 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af02      	add	r7, sp, #8
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	4608      	mov	r0, r1
 8009262:	4611      	mov	r1, r2
 8009264:	461a      	mov	r2, r3
 8009266:	4603      	mov	r3, r0
 8009268:	817b      	strh	r3, [r7, #10]
 800926a:	460b      	mov	r3, r1
 800926c:	813b      	strh	r3, [r7, #8]
 800926e:	4613      	mov	r3, r2
 8009270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	8979      	ldrh	r1, [r7, #10]
 8009278:	4b20      	ldr	r3, [pc, #128]	; (80092fc <I2C_RequestMemoryRead+0xa4>)
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	2300      	movs	r3, #0
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fa1c 	bl	80096bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009284:	69fa      	ldr	r2, [r7, #28]
 8009286:	69b9      	ldr	r1, [r7, #24]
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f8ac 	bl	80093e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e02c      	b.n	80092f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d105      	bne.n	80092aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800929e:	893b      	ldrh	r3, [r7, #8]
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28
 80092a8:	e015      	b.n	80092d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80092aa:	893b      	ldrh	r3, [r7, #8]
 80092ac:	0a1b      	lsrs	r3, r3, #8
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092b8:	69fa      	ldr	r2, [r7, #28]
 80092ba:	69b9      	ldr	r1, [r7, #24]
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f892 	bl	80093e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e012      	b.n	80092f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092cc:	893b      	ldrh	r3, [r7, #8]
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2200      	movs	r2, #0
 80092de:	2140      	movs	r1, #64	; 0x40
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f831 	bl	8009348 <I2C_WaitOnFlagUntilTimeout>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e000      	b.n	80092f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	80002000 	.word	0x80002000

08009300 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b02      	cmp	r3, #2
 8009314:	d103      	bne.n	800931e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2200      	movs	r2, #0
 800931c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b01      	cmp	r3, #1
 800932a:	d007      	beq.n	800933c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 0201 	orr.w	r2, r2, #1
 800933a:	619a      	str	r2, [r3, #24]
  }
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	4613      	mov	r3, r2
 8009356:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009358:	e031      	b.n	80093be <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009360:	d02d      	beq.n	80093be <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009362:	f7fd f911 	bl	8006588 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d302      	bcc.n	8009378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d122      	bne.n	80093be <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699a      	ldr	r2, [r3, #24]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	4013      	ands	r3, r2
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	429a      	cmp	r2, r3
 8009386:	bf0c      	ite	eq
 8009388:	2301      	moveq	r3, #1
 800938a:	2300      	movne	r3, #0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	461a      	mov	r2, r3
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	429a      	cmp	r2, r3
 8009394:	d113      	bne.n	80093be <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939a:	f043 0220 	orr.w	r2, r3, #32
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e00f      	b.n	80093de <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	699a      	ldr	r2, [r3, #24]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	4013      	ands	r3, r2
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	bf0c      	ite	eq
 80093ce:	2301      	moveq	r3, #1
 80093d0:	2300      	movne	r3, #0
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d0be      	beq.n	800935a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093f2:	e033      	b.n	800945c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f87f 	bl	80094fc <I2C_IsErrorOccurred>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e031      	b.n	800946c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800940e:	d025      	beq.n	800945c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009410:	f7fd f8ba 	bl	8006588 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	429a      	cmp	r2, r3
 800941e:	d302      	bcc.n	8009426 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d11a      	bne.n	800945c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b02      	cmp	r3, #2
 8009432:	d013      	beq.n	800945c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009438:	f043 0220 	orr.w	r2, r3, #32
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e007      	b.n	800946c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b02      	cmp	r3, #2
 8009468:	d1c4      	bne.n	80093f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009480:	e02f      	b.n	80094e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 f838 	bl	80094fc <I2C_IsErrorOccurred>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e02d      	b.n	80094f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009496:	f7fd f877 	bl	8006588 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d302      	bcc.n	80094ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d11a      	bne.n	80094e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f003 0320 	and.w	r3, r3, #32
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d013      	beq.n	80094e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	f043 0220 	orr.w	r2, r3, #32
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e007      	b.n	80094f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	d1c8      	bne.n	8009482 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f003 0310 	and.w	r3, r3, #16
 8009524:	2b00      	cmp	r3, #0
 8009526:	d068      	beq.n	80095fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2210      	movs	r2, #16
 800952e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009530:	e049      	b.n	80095c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009538:	d045      	beq.n	80095c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800953a:	f7fd f825 	bl	8006588 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	d302      	bcc.n	8009550 <I2C_IsErrorOccurred+0x54>
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d13a      	bne.n	80095c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800955a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009562:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800956e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009572:	d121      	bne.n	80095b8 <I2C_IsErrorOccurred+0xbc>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800957a:	d01d      	beq.n	80095b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800957c:	7cfb      	ldrb	r3, [r7, #19]
 800957e:	2b20      	cmp	r3, #32
 8009580:	d01a      	beq.n	80095b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009590:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009592:	f7fc fff9 	bl	8006588 <HAL_GetTick>
 8009596:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009598:	e00e      	b.n	80095b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800959a:	f7fc fff5 	bl	8006588 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b19      	cmp	r3, #25
 80095a6:	d907      	bls.n	80095b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	f043 0320 	orr.w	r3, r3, #32
 80095ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80095b6:	e006      	b.n	80095c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d1e9      	bne.n	800959a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d003      	beq.n	80095dc <I2C_IsErrorOccurred+0xe0>
 80095d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d0aa      	beq.n	8009532 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80095dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d103      	bne.n	80095ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2220      	movs	r2, #32
 80095ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	f043 0304 	orr.w	r3, r3, #4
 80095f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800961c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	f043 0308 	orr.w	r3, r3, #8
 8009634:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800963e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	f043 0302 	orr.w	r3, r3, #2
 8009656:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01c      	beq.n	80096aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fe45 	bl	8009300 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6859      	ldr	r1, [r3, #4]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <I2C_IsErrorOccurred+0x1bc>)
 8009682:	400b      	ands	r3, r1
 8009684:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	431a      	orrs	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80096aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3728      	adds	r7, #40	; 0x28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	fe00e800 	.word	0xfe00e800

080096bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	607b      	str	r3, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	817b      	strh	r3, [r7, #10]
 80096ca:	4613      	mov	r3, r2
 80096cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096ce:	897b      	ldrh	r3, [r7, #10]
 80096d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096d4:	7a7b      	ldrb	r3, [r7, #9]
 80096d6:	041b      	lsls	r3, r3, #16
 80096d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	0d5b      	lsrs	r3, r3, #21
 80096f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <I2C_TransferConfig+0x60>)
 80096fc:	430b      	orrs	r3, r1
 80096fe:	43db      	mvns	r3, r3
 8009700:	ea02 0103 	and.w	r1, r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	430a      	orrs	r2, r1
 800970c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800970e:	bf00      	nop
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	03ff63ff 	.word	0x03ff63ff

08009720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b20      	cmp	r3, #32
 8009734:	d138      	bne.n	80097a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009740:	2302      	movs	r3, #2
 8009742:	e032      	b.n	80097aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2224      	movs	r2, #36	; 0x24
 8009750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0201 	bic.w	r2, r2, #1
 8009762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6819      	ldr	r1, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e000      	b.n	80097aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097a8:	2302      	movs	r3, #2
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b085      	sub	sp, #20
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b20      	cmp	r3, #32
 80097ca:	d139      	bne.n	8009840 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e033      	b.n	8009842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2224      	movs	r2, #36	; 0x24
 80097e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0201 	bic.w	r2, r2, #1
 80097f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009808:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0201 	orr.w	r2, r2, #1
 800982a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
	...

08009850 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800985c:	4b0b      	ldr	r3, [pc, #44]	; (800988c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
 800986c:	e007      	b.n	800987e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800986e:	4b07      	ldr	r3, [pc, #28]	; (800988c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f023 0204 	bic.w	r2, r3, #4
 8009876:	4905      	ldr	r1, [pc, #20]	; (800988c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4313      	orrs	r3, r2
 800987c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	40030400 	.word	0x40030400

08009890 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009894:	4b05      	ldr	r3, [pc, #20]	; (80098ac <HAL_ICACHE_Enable+0x1c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a04      	ldr	r2, [pc, #16]	; (80098ac <HAL_ICACHE_Enable+0x1c>)
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	40030400 	.word	0x40030400

080098b0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80098b8:	4b39      	ldr	r3, [pc, #228]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80098c0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d10b      	bne.n	80098e2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098d0:	d905      	bls.n	80098de <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80098d2:	4b33      	ldr	r3, [pc, #204]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	4a32      	ldr	r2, [pc, #200]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098dc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	e057      	b.n	8009992 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e8:	d90a      	bls.n	8009900 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80098ea:	4b2d      	ldr	r3, [pc, #180]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	4a2a      	ldr	r2, [pc, #168]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098fc:	60d3      	str	r3, [r2, #12]
 80098fe:	e007      	b.n	8009910 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009900:	4b27      	ldr	r3, [pc, #156]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009908:	4925      	ldr	r1, [pc, #148]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4313      	orrs	r3, r2
 800990e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009910:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a24      	ldr	r2, [pc, #144]	; (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009916:	fba2 2303 	umull	r2, r3, r2, r3
 800991a:	099b      	lsrs	r3, r3, #6
 800991c:	2232      	movs	r2, #50	; 0x32
 800991e:	fb02 f303 	mul.w	r3, r2, r3
 8009922:	4a21      	ldr	r2, [pc, #132]	; (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009924:	fba2 2303 	umull	r2, r3, r2, r3
 8009928:	099b      	lsrs	r3, r3, #6
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800992e:	e002      	b.n	8009936 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3b01      	subs	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009936:	4b1a      	ldr	r3, [pc, #104]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1f3      	bne.n	8009930 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01b      	beq.n	8009986 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800994e:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009954:	fba2 2303 	umull	r2, r3, r2, r3
 8009958:	099b      	lsrs	r3, r3, #6
 800995a:	2232      	movs	r2, #50	; 0x32
 800995c:	fb02 f303 	mul.w	r3, r2, r3
 8009960:	4a11      	ldr	r2, [pc, #68]	; (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009962:	fba2 2303 	umull	r2, r3, r2, r3
 8009966:	099b      	lsrs	r3, r3, #6
 8009968:	3301      	adds	r3, #1
 800996a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800996c:	e002      	b.n	8009974 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3b01      	subs	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009974:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1f3      	bne.n	800996e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e000      	b.n	8009992 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	46020800 	.word	0x46020800
 80099a4:	20000014 	.word	0x20000014
 80099a8:	10624dd3 	.word	0x10624dd3

080099ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80099b0:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80099b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	46020800 	.word	0x46020800

080099c8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80099d0:	4b22      	ldr	r3, [pc, #136]	; (8009a5c <HAL_PWREx_ConfigSupply+0x94>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a22      	ldr	r2, [pc, #136]	; (8009a60 <HAL_PWREx_ConfigSupply+0x98>)
 80099d6:	fba2 2303 	umull	r2, r3, r2, r3
 80099da:	099b      	lsrs	r3, r3, #6
 80099dc:	2232      	movs	r2, #50	; 0x32
 80099de:	fb02 f303 	mul.w	r3, r2, r3
 80099e2:	4a1f      	ldr	r2, [pc, #124]	; (8009a60 <HAL_PWREx_ConfigSupply+0x98>)
 80099e4:	fba2 2303 	umull	r2, r3, r2, r3
 80099e8:	099b      	lsrs	r3, r3, #6
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d113      	bne.n	8009a1c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80099f4:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 80099fa:	f023 0302 	bic.w	r3, r3, #2
 80099fe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a00:	e002      	b.n	8009a08 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a08:	4b16      	ldr	r3, [pc, #88]	; (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d116      	bne.n	8009a42 <HAL_PWREx_ConfigSupply+0x7a>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f3      	bne.n	8009a02 <HAL_PWREx_ConfigSupply+0x3a>
 8009a1a:	e012      	b.n	8009a42 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009a1c:	4b11      	ldr	r3, [pc, #68]	; (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	4a10      	ldr	r2, [pc, #64]	; (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a22:	f043 0302 	orr.w	r3, r3, #2
 8009a26:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a28:	e002      	b.n	8009a30 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a30:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a34:	f003 0302 	and.w	r3, r3, #2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d102      	bne.n	8009a42 <HAL_PWREx_ConfigSupply+0x7a>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f3      	bne.n	8009a2a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e000      	b.n	8009a4e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20000014 	.word	0x20000014
 8009a60:	10624dd3 	.word	0x10624dd3
 8009a64:	46020800 	.word	0x46020800

08009a68 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009a6c:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a04      	ldr	r2, [pc, #16]	; (8009a84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009a72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a76:	6113      	str	r3, [r2, #16]
}
 8009a78:	bf00      	nop
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	46020800 	.word	0x46020800

08009a88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	4a04      	ldr	r2, [pc, #16]	; (8009aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a92:	f043 0301 	orr.w	r3, r3, #1
 8009a96:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8009a98:	bf00      	nop
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	46020800 	.word	0x46020800

08009aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08e      	sub	sp, #56	; 0x38
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f000 bec8 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ac2:	4b99      	ldr	r3, [pc, #612]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	f003 030c 	and.w	r3, r3, #12
 8009aca:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009acc:	4b96      	ldr	r3, [pc, #600]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0310 	and.w	r3, r3, #16
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 816c 	beq.w	8009dbc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d007      	beq.n	8009afa <HAL_RCC_OscConfig+0x52>
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	2b0c      	cmp	r3, #12
 8009aee:	f040 80de 	bne.w	8009cae <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	f040 80da 	bne.w	8009cae <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	f000 bea5 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b0c:	4b86      	ldr	r3, [pc, #536]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <HAL_RCC_OscConfig+0x7a>
 8009b18:	4b83      	ldr	r3, [pc, #524]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b20:	e005      	b.n	8009b2e <HAL_RCC_OscConfig+0x86>
 8009b22:	4b81      	ldr	r3, [pc, #516]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d255      	bcs.n	8009bde <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 f9b7 	bl	800aeb0 <RCC_SetFlashLatencyFromMSIRange>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f000 be82 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009b4e:	4b76      	ldr	r3, [pc, #472]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	4a75      	ldr	r2, [pc, #468]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b58:	6093      	str	r3, [r2, #8]
 8009b5a:	4b73      	ldr	r3, [pc, #460]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	4970      	ldr	r1, [pc, #448]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009b74:	d309      	bcc.n	8009b8a <HAL_RCC_OscConfig+0xe2>
 8009b76:	4b6c      	ldr	r3, [pc, #432]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f023 021f 	bic.w	r2, r3, #31
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	4969      	ldr	r1, [pc, #420]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	60cb      	str	r3, [r1, #12]
 8009b88:	e07e      	b.n	8009c88 <HAL_RCC_OscConfig+0x1e0>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da0a      	bge.n	8009ba8 <HAL_RCC_OscConfig+0x100>
 8009b92:	4b65      	ldr	r3, [pc, #404]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	015b      	lsls	r3, r3, #5
 8009ba0:	4961      	ldr	r1, [pc, #388]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60cb      	str	r3, [r1, #12]
 8009ba6:	e06f      	b.n	8009c88 <HAL_RCC_OscConfig+0x1e0>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb0:	d30a      	bcc.n	8009bc8 <HAL_RCC_OscConfig+0x120>
 8009bb2:	4b5d      	ldr	r3, [pc, #372]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	029b      	lsls	r3, r3, #10
 8009bc0:	4959      	ldr	r1, [pc, #356]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60cb      	str	r3, [r1, #12]
 8009bc6:	e05f      	b.n	8009c88 <HAL_RCC_OscConfig+0x1e0>
 8009bc8:	4b57      	ldr	r3, [pc, #348]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	03db      	lsls	r3, r3, #15
 8009bd6:	4954      	ldr	r1, [pc, #336]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	60cb      	str	r3, [r1, #12]
 8009bdc:	e054      	b.n	8009c88 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009bde:	4b52      	ldr	r3, [pc, #328]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	4a51      	ldr	r2, [pc, #324]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009be8:	6093      	str	r3, [r2, #8]
 8009bea:	4b4f      	ldr	r3, [pc, #316]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	494c      	ldr	r1, [pc, #304]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009c04:	d309      	bcc.n	8009c1a <HAL_RCC_OscConfig+0x172>
 8009c06:	4b48      	ldr	r3, [pc, #288]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f023 021f 	bic.w	r2, r3, #31
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	4945      	ldr	r1, [pc, #276]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60cb      	str	r3, [r1, #12]
 8009c18:	e028      	b.n	8009c6c <HAL_RCC_OscConfig+0x1c4>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	da0a      	bge.n	8009c38 <HAL_RCC_OscConfig+0x190>
 8009c22:	4b41      	ldr	r3, [pc, #260]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	015b      	lsls	r3, r3, #5
 8009c30:	493d      	ldr	r1, [pc, #244]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60cb      	str	r3, [r1, #12]
 8009c36:	e019      	b.n	8009c6c <HAL_RCC_OscConfig+0x1c4>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c40:	d30a      	bcc.n	8009c58 <HAL_RCC_OscConfig+0x1b0>
 8009c42:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	029b      	lsls	r3, r3, #10
 8009c50:	4935      	ldr	r1, [pc, #212]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60cb      	str	r3, [r1, #12]
 8009c56:	e009      	b.n	8009c6c <HAL_RCC_OscConfig+0x1c4>
 8009c58:	4b33      	ldr	r3, [pc, #204]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	03db      	lsls	r3, r3, #15
 8009c66:	4930      	ldr	r1, [pc, #192]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10a      	bne.n	8009c88 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 f91a 	bl	800aeb0 <RCC_SetFlashLatencyFromMSIRange>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	f000 bde5 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009c88:	f001 f8e4 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009c8c:	4b27      	ldr	r3, [pc, #156]	; (8009d2c <HAL_RCC_OscConfig+0x284>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fc fc2f 	bl	80064f4 <HAL_InitTick>
 8009c96:	4603      	mov	r3, r0
 8009c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 808a 	beq.w	8009dba <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009caa:	f000 bdd2 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d066      	beq.n	8009d84 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009cb6:	4b1c      	ldr	r3, [pc, #112]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a1b      	ldr	r2, [pc, #108]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009cbc:	f043 0301 	orr.w	r3, r3, #1
 8009cc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009cc2:	f7fc fc61 	bl	8006588 <HAL_GetTick>
 8009cc6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009cc8:	e009      	b.n	8009cde <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009cca:	f7fc fc5d 	bl	8006588 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d902      	bls.n	8009cde <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	f000 bdba 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009cde:	4b12      	ldr	r3, [pc, #72]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0ef      	beq.n	8009cca <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009cea:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009cf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cf4:	6093      	str	r3, [r2, #8]
 8009cf6:	4b0c      	ldr	r3, [pc, #48]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	4909      	ldr	r1, [pc, #36]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009d10:	d30e      	bcc.n	8009d30 <HAL_RCC_OscConfig+0x288>
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f023 021f 	bic.w	r2, r3, #31
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	4902      	ldr	r1, [pc, #8]	; (8009d28 <HAL_RCC_OscConfig+0x280>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60cb      	str	r3, [r1, #12]
 8009d24:	e04a      	b.n	8009dbc <HAL_RCC_OscConfig+0x314>
 8009d26:	bf00      	nop
 8009d28:	46020c00 	.word	0x46020c00
 8009d2c:	200000a0 	.word	0x200000a0
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da0a      	bge.n	8009d4e <HAL_RCC_OscConfig+0x2a6>
 8009d38:	4b98      	ldr	r3, [pc, #608]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	015b      	lsls	r3, r3, #5
 8009d46:	4995      	ldr	r1, [pc, #596]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60cb      	str	r3, [r1, #12]
 8009d4c:	e036      	b.n	8009dbc <HAL_RCC_OscConfig+0x314>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d56:	d30a      	bcc.n	8009d6e <HAL_RCC_OscConfig+0x2c6>
 8009d58:	4b90      	ldr	r3, [pc, #576]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a1b      	ldr	r3, [r3, #32]
 8009d64:	029b      	lsls	r3, r3, #10
 8009d66:	498d      	ldr	r1, [pc, #564]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60cb      	str	r3, [r1, #12]
 8009d6c:	e026      	b.n	8009dbc <HAL_RCC_OscConfig+0x314>
 8009d6e:	4b8b      	ldr	r3, [pc, #556]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	03db      	lsls	r3, r3, #15
 8009d7c:	4987      	ldr	r1, [pc, #540]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60cb      	str	r3, [r1, #12]
 8009d82:	e01b      	b.n	8009dbc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009d84:	4b85      	ldr	r3, [pc, #532]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a84      	ldr	r2, [pc, #528]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009d8a:	f023 0301 	bic.w	r3, r3, #1
 8009d8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d90:	f7fc fbfa 	bl	8006588 <HAL_GetTick>
 8009d94:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009d96:	e009      	b.n	8009dac <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d98:	f7fc fbf6 	bl	8006588 <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d902      	bls.n	8009dac <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	f000 bd53 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009dac:	4b7b      	ldr	r3, [pc, #492]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1ef      	bne.n	8009d98 <HAL_RCC_OscConfig+0x2f0>
 8009db8:	e000      	b.n	8009dbc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009dba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 808b 	beq.w	8009ee0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d005      	beq.n	8009ddc <HAL_RCC_OscConfig+0x334>
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	2b0c      	cmp	r3, #12
 8009dd4:	d109      	bne.n	8009dea <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d106      	bne.n	8009dea <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d17d      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	f000 bd34 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df2:	d106      	bne.n	8009e02 <HAL_RCC_OscConfig+0x35a>
 8009df4:	4b69      	ldr	r3, [pc, #420]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a68      	ldr	r2, [pc, #416]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	e041      	b.n	8009e86 <HAL_RCC_OscConfig+0x3de>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e0a:	d112      	bne.n	8009e32 <HAL_RCC_OscConfig+0x38a>
 8009e0c:	4b63      	ldr	r3, [pc, #396]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a62      	ldr	r2, [pc, #392]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	4b60      	ldr	r3, [pc, #384]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a5f      	ldr	r2, [pc, #380]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	4b5d      	ldr	r3, [pc, #372]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a5c      	ldr	r2, [pc, #368]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	e029      	b.n	8009e86 <HAL_RCC_OscConfig+0x3de>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8009e3a:	d112      	bne.n	8009e62 <HAL_RCC_OscConfig+0x3ba>
 8009e3c:	4b57      	ldr	r3, [pc, #348]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a56      	ldr	r2, [pc, #344]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	4b54      	ldr	r3, [pc, #336]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a53      	ldr	r2, [pc, #332]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	4b51      	ldr	r3, [pc, #324]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a50      	ldr	r2, [pc, #320]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	e011      	b.n	8009e86 <HAL_RCC_OscConfig+0x3de>
 8009e62:	4b4e      	ldr	r3, [pc, #312]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a4d      	ldr	r2, [pc, #308]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	4b4b      	ldr	r3, [pc, #300]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a4a      	ldr	r2, [pc, #296]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	4b48      	ldr	r3, [pc, #288]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a47      	ldr	r2, [pc, #284]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009e80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d014      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009e8e:	f7fc fb7b 	bl	8006588 <HAL_GetTick>
 8009e92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e94:	e009      	b.n	8009eaa <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e96:	f7fc fb77 	bl	8006588 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	2b64      	cmp	r3, #100	; 0x64
 8009ea2:	d902      	bls.n	8009eaa <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	f000 bcd4 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009eaa:	4b3c      	ldr	r3, [pc, #240]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0ef      	beq.n	8009e96 <HAL_RCC_OscConfig+0x3ee>
 8009eb6:	e013      	b.n	8009ee0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009eb8:	f7fc fb66 	bl	8006588 <HAL_GetTick>
 8009ebc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ebe:	e009      	b.n	8009ed4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ec0:	f7fc fb62 	bl	8006588 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b64      	cmp	r3, #100	; 0x64
 8009ecc:	d902      	bls.n	8009ed4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	f000 bcbf 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ed4:	4b31      	ldr	r3, [pc, #196]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1ef      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d05f      	beq.n	8009fac <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d005      	beq.n	8009efe <HAL_RCC_OscConfig+0x456>
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	2b0c      	cmp	r3, #12
 8009ef6:	d114      	bne.n	8009f22 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d111      	bne.n	8009f22 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d102      	bne.n	8009f0c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	f000 bca3 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009f0c:	4b23      	ldr	r3, [pc, #140]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	4920      	ldr	r1, [pc, #128]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009f20:	e044      	b.n	8009fac <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d024      	beq.n	8009f74 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009f2a:	4b1c      	ldr	r3, [pc, #112]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a1b      	ldr	r2, [pc, #108]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f34:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f36:	f7fc fb27 	bl	8006588 <HAL_GetTick>
 8009f3a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f3c:	e009      	b.n	8009f52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f3e:	f7fc fb23 	bl	8006588 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d902      	bls.n	8009f52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	f000 bc80 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f52:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0ef      	beq.n	8009f3e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009f5e:	4b0f      	ldr	r3, [pc, #60]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	490b      	ldr	r1, [pc, #44]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	610b      	str	r3, [r1, #16]
 8009f72:	e01b      	b.n	8009fac <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009f74:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a08      	ldr	r2, [pc, #32]	; (8009f9c <HAL_RCC_OscConfig+0x4f4>)
 8009f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f80:	f7fc fb02 	bl	8006588 <HAL_GetTick>
 8009f84:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f86:	e00b      	b.n	8009fa0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f88:	f7fc fafe 	bl	8006588 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d904      	bls.n	8009fa0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	f000 bc5b 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
 8009f9c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fa0:	4baf      	ldr	r3, [pc, #700]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1ed      	bne.n	8009f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 80c8 	beq.w	800a14a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fc0:	4ba7      	ldr	r3, [pc, #668]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 8009fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d111      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fce:	4ba4      	ldr	r3, [pc, #656]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 8009fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fd4:	4aa2      	ldr	r2, [pc, #648]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 8009fd6:	f043 0304 	orr.w	r3, r3, #4
 8009fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009fde:	4ba0      	ldr	r3, [pc, #640]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 8009fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ff2:	4b9c      	ldr	r3, [pc, #624]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d119      	bne.n	800a032 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009ffe:	4b99      	ldr	r3, [pc, #612]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 800a000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a002:	4a98      	ldr	r2, [pc, #608]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 800a004:	f043 0301 	orr.w	r3, r3, #1
 800a008:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a00a:	f7fc fabd 	bl	8006588 <HAL_GetTick>
 800a00e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a010:	e009      	b.n	800a026 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a012:	f7fc fab9 	bl	8006588 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d902      	bls.n	800a026 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	f000 bc16 	b.w	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a026:	4b8f      	ldr	r3, [pc, #572]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0ef      	beq.n	800a012 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d05f      	beq.n	800a0fa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a03a:	4b89      	ldr	r3, [pc, #548]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a03c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a040:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d037      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d006      	beq.n	800a068 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e3f4      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d01b      	beq.n	800a0aa <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a072:	4b7b      	ldr	r3, [pc, #492]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a078:	4a79      	ldr	r2, [pc, #484]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a07a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a07e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800a082:	f7fc fa81 	bl	8006588 <HAL_GetTick>
 800a086:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a088:	e008      	b.n	800a09c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a08a:	f7fc fa7d 	bl	8006588 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b05      	cmp	r3, #5
 800a096:	d901      	bls.n	800a09c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e3da      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a09c:	4b70      	ldr	r3, [pc, #448]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a09e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1ef      	bne.n	800a08a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a0aa:	4b6d      	ldr	r3, [pc, #436]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a0ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	4969      	ldr	r1, [pc, #420]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a0c0:	4b67      	ldr	r3, [pc, #412]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a0c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0c6:	4a66      	ldr	r2, [pc, #408]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a0c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a0d0:	f7fc fa5a 	bl	8006588 <HAL_GetTick>
 800a0d4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0d8:	f7fc fa56 	bl	8006588 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b05      	cmp	r3, #5
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e3b3      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a0ea:	4b5d      	ldr	r3, [pc, #372]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a0ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0ef      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x630>
 800a0f8:	e01b      	b.n	800a132 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a0fa:	4b59      	ldr	r3, [pc, #356]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a0fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a100:	4a57      	ldr	r2, [pc, #348]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a102:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a106:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a10a:	f7fc fa3d 	bl	8006588 <HAL_GetTick>
 800a10e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a110:	e008      	b.n	800a124 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a112:	f7fc fa39 	bl	8006588 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b05      	cmp	r3, #5
 800a11e:	d901      	bls.n	800a124 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e396      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a124:	4b4e      	ldr	r3, [pc, #312]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a12a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1ef      	bne.n	800a112 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a132:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a136:	2b01      	cmp	r3, #1
 800a138:	d107      	bne.n	800a14a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a13a:	4b49      	ldr	r3, [pc, #292]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a13c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a140:	4a47      	ldr	r2, [pc, #284]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a142:	f023 0304 	bic.w	r3, r3, #4
 800a146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 8111 	beq.w	800a37a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a15e:	4b40      	ldr	r3, [pc, #256]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d111      	bne.n	800a190 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a16c:	4b3c      	ldr	r3, [pc, #240]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a172:	4a3b      	ldr	r2, [pc, #236]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a174:	f043 0304 	orr.w	r3, r3, #4
 800a178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a17c:	4b38      	ldr	r3, [pc, #224]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a17e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a190:	4b34      	ldr	r3, [pc, #208]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d118      	bne.n	800a1ce <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a19c:	4b31      	ldr	r3, [pc, #196]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 800a19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a0:	4a30      	ldr	r2, [pc, #192]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1a8:	f7fc f9ee 	bl	8006588 <HAL_GetTick>
 800a1ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a1ae:	e008      	b.n	800a1c2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1b0:	f7fc f9ea 	bl	8006588 <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e347      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a1c2:	4b28      	ldr	r3, [pc, #160]	; (800a264 <HAL_RCC_OscConfig+0x7bc>)
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0f0      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d01f      	beq.n	800a21a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0304 	and.w	r3, r3, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d010      	beq.n	800a208 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a1e6:	4b1e      	ldr	r3, [pc, #120]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a1e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1ec:	4a1c      	ldr	r2, [pc, #112]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a1ee:	f043 0304 	orr.w	r3, r3, #4
 800a1f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a1f6:	4b1a      	ldr	r3, [pc, #104]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a1f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1fc:	4a18      	ldr	r2, [pc, #96]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a206:	e018      	b.n	800a23a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a20a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a20e:	4a14      	ldr	r2, [pc, #80]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a210:	f043 0301 	orr.w	r3, r3, #1
 800a214:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a218:	e00f      	b.n	800a23a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a21a:	4b11      	ldr	r3, [pc, #68]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a21c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a220:	4a0f      	ldr	r2, [pc, #60]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a22a:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a22c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a230:	4a0b      	ldr	r2, [pc, #44]	; (800a260 <HAL_RCC_OscConfig+0x7b8>)
 800a232:	f023 0304 	bic.w	r3, r3, #4
 800a236:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d057      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a242:	f7fc f9a1 	bl	8006588 <HAL_GetTick>
 800a246:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a248:	e00e      	b.n	800a268 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a24a:	f7fc f99d 	bl	8006588 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	f241 3288 	movw	r2, #5000	; 0x1388
 800a258:	4293      	cmp	r3, r2
 800a25a:	d905      	bls.n	800a268 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e2f8      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
 800a260:	46020c00 	.word	0x46020c00
 800a264:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a268:	4b9c      	ldr	r3, [pc, #624]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a26a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0e9      	beq.n	800a24a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01b      	beq.n	800a2ba <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a282:	4b96      	ldr	r3, [pc, #600]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a288:	4a94      	ldr	r2, [pc, #592]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a292:	e00a      	b.n	800a2aa <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a294:	f7fc f978 	bl	8006588 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e2d3      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a2aa:	4b8c      	ldr	r3, [pc, #560]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a2ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0ed      	beq.n	800a294 <HAL_RCC_OscConfig+0x7ec>
 800a2b8:	e053      	b.n	800a362 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a2ba:	4b88      	ldr	r3, [pc, #544]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a2bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2c0:	4a86      	ldr	r2, [pc, #536]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a2ca:	e00a      	b.n	800a2e2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2cc:	f7fc f95c 	bl	8006588 <HAL_GetTick>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d901      	bls.n	800a2e2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e2b7      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a2e2:	4b7e      	ldr	r3, [pc, #504]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a2e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1ed      	bne.n	800a2cc <HAL_RCC_OscConfig+0x824>
 800a2f0:	e037      	b.n	800a362 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a2f2:	f7fc f949 	bl	8006588 <HAL_GetTick>
 800a2f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2f8:	e00a      	b.n	800a310 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2fa:	f7fc f945 	bl	8006588 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	f241 3288 	movw	r2, #5000	; 0x1388
 800a308:	4293      	cmp	r3, r2
 800a30a:	d901      	bls.n	800a310 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e2a0      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a310:	4b72      	ldr	r3, [pc, #456]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1ed      	bne.n	800a2fa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a31e:	4b6f      	ldr	r3, [pc, #444]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01a      	beq.n	800a362 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a32c:	4b6b      	ldr	r3, [pc, #428]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a32e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a332:	4a6a      	ldr	r2, [pc, #424]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a33c:	e00a      	b.n	800a354 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a33e:	f7fc f923 	bl	8006588 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	f241 3288 	movw	r2, #5000	; 0x1388
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d901      	bls.n	800a354 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e27e      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a354:	4b61      	ldr	r3, [pc, #388]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a35a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1ed      	bne.n	800a33e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a362:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a366:	2b01      	cmp	r3, #1
 800a368:	d107      	bne.n	800a37a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a36a:	4b5c      	ldr	r3, [pc, #368]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a36c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a370:	4a5a      	ldr	r2, [pc, #360]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a372:	f023 0304 	bic.w	r3, r3, #4
 800a376:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	2b00      	cmp	r3, #0
 800a384:	d036      	beq.n	800a3f4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d019      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a38e:	4b53      	ldr	r3, [pc, #332]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a52      	ldr	r2, [pc, #328]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a398:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a39a:	f7fc f8f5 	bl	8006588 <HAL_GetTick>
 800a39e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3a2:	f7fc f8f1 	bl	8006588 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e24e      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a3b4:	4b49      	ldr	r3, [pc, #292]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0f0      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x8fa>
 800a3c0:	e018      	b.n	800a3f4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a3c2:	4b46      	ldr	r3, [pc, #280]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a45      	ldr	r2, [pc, #276]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a3c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3ce:	f7fc f8db 	bl	8006588 <HAL_GetTick>
 800a3d2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a3d4:	e008      	b.n	800a3e8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3d6:	f7fc f8d7 	bl	8006588 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d901      	bls.n	800a3e8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e234      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a3e8:	4b3c      	ldr	r3, [pc, #240]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f0      	bne.n	800a3d6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d036      	beq.n	800a46e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a404:	2b00      	cmp	r3, #0
 800a406:	d019      	beq.n	800a43c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a408:	4b34      	ldr	r3, [pc, #208]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a33      	ldr	r2, [pc, #204]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a40e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a412:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a414:	f7fc f8b8 	bl	8006588 <HAL_GetTick>
 800a418:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a41a:	e008      	b.n	800a42e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a41c:	f7fc f8b4 	bl	8006588 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	2b02      	cmp	r3, #2
 800a428:	d901      	bls.n	800a42e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e211      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a42e:	4b2b      	ldr	r3, [pc, #172]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0f0      	beq.n	800a41c <HAL_RCC_OscConfig+0x974>
 800a43a:	e018      	b.n	800a46e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a43c:	4b27      	ldr	r3, [pc, #156]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a26      	ldr	r2, [pc, #152]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a446:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a448:	f7fc f89e 	bl	8006588 <HAL_GetTick>
 800a44c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a44e:	e008      	b.n	800a462 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a450:	f7fc f89a 	bl	8006588 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e1f7      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a462:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1f0      	bne.n	800a450 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d07f      	beq.n	800a57a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d062      	beq.n	800a548 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a482:	4b16      	ldr	r3, [pc, #88]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	4a15      	ldr	r2, [pc, #84]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a48c:	6093      	str	r3, [r2, #8]
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49a:	4910      	ldr	r1, [pc, #64]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a4a8:	d309      	bcc.n	800a4be <HAL_RCC_OscConfig+0xa16>
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f023 021f 	bic.w	r2, r3, #31
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	4909      	ldr	r1, [pc, #36]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	60cb      	str	r3, [r1, #12]
 800a4bc:	e02a      	b.n	800a514 <HAL_RCC_OscConfig+0xa6c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	da0c      	bge.n	800a4e0 <HAL_RCC_OscConfig+0xa38>
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	015b      	lsls	r3, r3, #5
 800a4d4:	4901      	ldr	r1, [pc, #4]	; (800a4dc <HAL_RCC_OscConfig+0xa34>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60cb      	str	r3, [r1, #12]
 800a4da:	e01b      	b.n	800a514 <HAL_RCC_OscConfig+0xa6c>
 800a4dc:	46020c00 	.word	0x46020c00
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e8:	d30a      	bcc.n	800a500 <HAL_RCC_OscConfig+0xa58>
 800a4ea:	4ba1      	ldr	r3, [pc, #644]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	029b      	lsls	r3, r3, #10
 800a4f8:	499d      	ldr	r1, [pc, #628]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60cb      	str	r3, [r1, #12]
 800a4fe:	e009      	b.n	800a514 <HAL_RCC_OscConfig+0xa6c>
 800a500:	4b9b      	ldr	r3, [pc, #620]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	03db      	lsls	r3, r3, #15
 800a50e:	4998      	ldr	r1, [pc, #608]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a510:	4313      	orrs	r3, r2
 800a512:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a514:	4b96      	ldr	r3, [pc, #600]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a95      	ldr	r2, [pc, #596]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a51a:	f043 0310 	orr.w	r3, r3, #16
 800a51e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a520:	f7fc f832 	bl	8006588 <HAL_GetTick>
 800a524:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a526:	e008      	b.n	800a53a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a528:	f7fc f82e 	bl	8006588 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e18b      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a53a:	4b8d      	ldr	r3, [pc, #564]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f0      	beq.n	800a528 <HAL_RCC_OscConfig+0xa80>
 800a546:	e018      	b.n	800a57a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a548:	4b89      	ldr	r3, [pc, #548]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a88      	ldr	r2, [pc, #544]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a54e:	f023 0310 	bic.w	r3, r3, #16
 800a552:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a554:	f7fc f818 	bl	8006588 <HAL_GetTick>
 800a558:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a55a:	e008      	b.n	800a56e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a55c:	f7fc f814 	bl	8006588 <HAL_GetTick>
 800a560:	4602      	mov	r2, r0
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	2b02      	cmp	r3, #2
 800a568:	d901      	bls.n	800a56e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e171      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a56e:	4b80      	ldr	r3, [pc, #512]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1f0      	bne.n	800a55c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f000 8166 	beq.w	800a850 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a584:	2300      	movs	r3, #0
 800a586:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a58a:	4b79      	ldr	r3, [pc, #484]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	f003 030c 	and.w	r3, r3, #12
 800a592:	2b0c      	cmp	r3, #12
 800a594:	f000 80f2 	beq.w	800a77c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	f040 80c5 	bne.w	800a72c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a5a2:	4b73      	ldr	r3, [pc, #460]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a72      	ldr	r2, [pc, #456]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a5a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a5ae:	f7fb ffeb 	bl	8006588 <HAL_GetTick>
 800a5b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5b4:	e008      	b.n	800a5c8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5b6:	f7fb ffe7 	bl	8006588 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d901      	bls.n	800a5c8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e144      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5c8:	4b69      	ldr	r3, [pc, #420]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1f0      	bne.n	800a5b6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5d4:	4b66      	ldr	r3, [pc, #408]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a5d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d111      	bne.n	800a606 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a5e2:	4b63      	ldr	r3, [pc, #396]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a5e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5e8:	4a61      	ldr	r2, [pc, #388]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a5ea:	f043 0304 	orr.w	r3, r3, #4
 800a5ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a5f2:	4b5f      	ldr	r3, [pc, #380]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a606:	4b5b      	ldr	r3, [pc, #364]	; (800a774 <HAL_RCC_OscConfig+0xccc>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a60e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a612:	d102      	bne.n	800a61a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a614:	2301      	movs	r3, #1
 800a616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a61a:	4b56      	ldr	r3, [pc, #344]	; (800a774 <HAL_RCC_OscConfig+0xccc>)
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	4a55      	ldr	r2, [pc, #340]	; (800a774 <HAL_RCC_OscConfig+0xccc>)
 800a620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a624:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a626:	4b52      	ldr	r3, [pc, #328]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a62e:	f023 0303 	bic.w	r3, r3, #3
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a63a:	3a01      	subs	r2, #1
 800a63c:	0212      	lsls	r2, r2, #8
 800a63e:	4311      	orrs	r1, r2
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a644:	430a      	orrs	r2, r1
 800a646:	494a      	ldr	r1, [pc, #296]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	628b      	str	r3, [r1, #40]	; 0x28
 800a64c:	4b48      	ldr	r3, [pc, #288]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a64e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a650:	4b49      	ldr	r3, [pc, #292]	; (800a778 <HAL_RCC_OscConfig+0xcd0>)
 800a652:	4013      	ands	r3, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a658:	3a01      	subs	r2, #1
 800a65a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a662:	3a01      	subs	r2, #1
 800a664:	0252      	lsls	r2, r2, #9
 800a666:	b292      	uxth	r2, r2
 800a668:	4311      	orrs	r1, r2
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a66e:	3a01      	subs	r2, #1
 800a670:	0412      	lsls	r2, r2, #16
 800a672:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a676:	4311      	orrs	r1, r2
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a67c:	3a01      	subs	r2, #1
 800a67e:	0612      	lsls	r2, r2, #24
 800a680:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a684:	430a      	orrs	r2, r1
 800a686:	493a      	ldr	r1, [pc, #232]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a68c:	4b38      	ldr	r3, [pc, #224]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a690:	4a37      	ldr	r2, [pc, #220]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a692:	f023 0310 	bic.w	r3, r3, #16
 800a696:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a69c:	4a34      	ldr	r2, [pc, #208]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a6a2:	4b33      	ldr	r3, [pc, #204]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	4a32      	ldr	r2, [pc, #200]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6a8:	f043 0310 	orr.w	r3, r3, #16
 800a6ac:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a6ae:	4b30      	ldr	r3, [pc, #192]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b2:	f023 020c 	bic.w	r2, r3, #12
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ba:	492d      	ldr	r1, [pc, #180]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800a6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d105      	bne.n	800a6d4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a6c8:	4b2a      	ldr	r3, [pc, #168]	; (800a774 <HAL_RCC_OscConfig+0xccc>)
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	4a29      	ldr	r2, [pc, #164]	; (800a774 <HAL_RCC_OscConfig+0xccc>)
 800a6ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6d2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a6d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d107      	bne.n	800a6ec <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a6dc:	4b24      	ldr	r3, [pc, #144]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6e2:	4a23      	ldr	r2, [pc, #140]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6e4:	f023 0304 	bic.w	r3, r3, #4
 800a6e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a6ec:	4b20      	ldr	r3, [pc, #128]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f0:	4a1f      	ldr	r2, [pc, #124]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6f6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a6f8:	4b1d      	ldr	r3, [pc, #116]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1c      	ldr	r2, [pc, #112]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a6fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a702:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a704:	f7fb ff40 	bl	8006588 <HAL_GetTick>
 800a708:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a70a:	e008      	b.n	800a71e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a70c:	f7fb ff3c 	bl	8006588 <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	2b02      	cmp	r3, #2
 800a718:	d901      	bls.n	800a71e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e099      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a71e:	4b14      	ldr	r3, [pc, #80]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0f0      	beq.n	800a70c <HAL_RCC_OscConfig+0xc64>
 800a72a:	e091      	b.n	800a850 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a72c:	4b10      	ldr	r3, [pc, #64]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a0f      	ldr	r2, [pc, #60]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a736:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a738:	f7fb ff26 	bl	8006588 <HAL_GetTick>
 800a73c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a73e:	e008      	b.n	800a752 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a740:	f7fb ff22 	bl	8006588 <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d901      	bls.n	800a752 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e07f      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a752:	4b07      	ldr	r3, [pc, #28]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1f0      	bne.n	800a740 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a75e:	4b04      	ldr	r3, [pc, #16]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a762:	4a03      	ldr	r2, [pc, #12]	; (800a770 <HAL_RCC_OscConfig+0xcc8>)
 800a764:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800a768:	f023 0303 	bic.w	r3, r3, #3
 800a76c:	6293      	str	r3, [r2, #40]	; 0x28
 800a76e:	e06f      	b.n	800a850 <HAL_RCC_OscConfig+0xda8>
 800a770:	46020c00 	.word	0x46020c00
 800a774:	46020800 	.word	0x46020800
 800a778:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a77c:	4b37      	ldr	r3, [pc, #220]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a780:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a782:	4b36      	ldr	r3, [pc, #216]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a786:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d039      	beq.n	800a804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	f003 0203 	and.w	r2, r3, #3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d132      	bne.n	800a804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	0a1b      	lsrs	r3, r3, #8
 800a7a2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7aa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d129      	bne.n	800a804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d122      	bne.n	800a804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d11a      	bne.n	800a804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	0a5b      	lsrs	r3, r3, #9
 800a7d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d111      	bne.n	800a804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	0c1b      	lsrs	r3, r3, #16
 800a7e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d108      	bne.n	800a804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	0e1b      	lsrs	r3, r3, #24
 800a7f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a800:	429a      	cmp	r2, r3
 800a802:	d001      	beq.n	800a808 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e024      	b.n	800a852 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a808:	4b14      	ldr	r3, [pc, #80]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	08db      	lsrs	r3, r3, #3
 800a80e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a816:	429a      	cmp	r2, r3
 800a818:	d01a      	beq.n	800a850 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81e:	4a0f      	ldr	r2, [pc, #60]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a820:	f023 0310 	bic.w	r3, r3, #16
 800a824:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a826:	f7fb feaf 	bl	8006588 <HAL_GetTick>
 800a82a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a82c:	bf00      	nop
 800a82e:	f7fb feab 	bl	8006588 <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	4293      	cmp	r3, r2
 800a838:	d0f9      	beq.n	800a82e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83e:	4a07      	ldr	r2, [pc, #28]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a840:	00db      	lsls	r3, r3, #3
 800a842:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a844:	4b05      	ldr	r3, [pc, #20]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a848:	4a04      	ldr	r2, [pc, #16]	; (800a85c <HAL_RCC_OscConfig+0xdb4>)
 800a84a:	f043 0310 	orr.w	r3, r3, #16
 800a84e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3738      	adds	r7, #56	; 0x38
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	46020c00 	.word	0x46020c00

0800a860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e1d9      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a874:	4b9b      	ldr	r3, [pc, #620]	; (800aae4 <HAL_RCC_ClockConfig+0x284>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 030f 	and.w	r3, r3, #15
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d910      	bls.n	800a8a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a882:	4b98      	ldr	r3, [pc, #608]	; (800aae4 <HAL_RCC_ClockConfig+0x284>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f023 020f 	bic.w	r2, r3, #15
 800a88a:	4996      	ldr	r1, [pc, #600]	; (800aae4 <HAL_RCC_ClockConfig+0x284>)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	4313      	orrs	r3, r2
 800a890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a892:	4b94      	ldr	r3, [pc, #592]	; (800aae4 <HAL_RCC_ClockConfig+0x284>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d001      	beq.n	800a8a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e1c1      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0310 	and.w	r3, r3, #16
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d010      	beq.n	800a8d2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	695a      	ldr	r2, [r3, #20]
 800a8b4:	4b8c      	ldr	r3, [pc, #560]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d908      	bls.n	800a8d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a8c0:	4b89      	ldr	r3, [pc, #548]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	4986      	ldr	r1, [pc, #536]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0308 	and.w	r3, r3, #8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d012      	beq.n	800a904 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691a      	ldr	r2, [r3, #16]
 800a8e2:	4b81      	ldr	r3, [pc, #516]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	091b      	lsrs	r3, r3, #4
 800a8e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d909      	bls.n	800a904 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a8f0:	4b7d      	ldr	r3, [pc, #500]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	497a      	ldr	r1, [pc, #488]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a900:	4313      	orrs	r3, r2
 800a902:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d010      	beq.n	800a932 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	4b74      	ldr	r3, [pc, #464]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d908      	bls.n	800a932 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a920:	4b71      	ldr	r3, [pc, #452]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	496e      	ldr	r1, [pc, #440]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a92e:	4313      	orrs	r3, r2
 800a930:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d010      	beq.n	800a960 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	4b69      	ldr	r3, [pc, #420]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d908      	bls.n	800a960 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a94e:	4b66      	ldr	r3, [pc, #408]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	f023 020f 	bic.w	r2, r3, #15
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	4963      	ldr	r1, [pc, #396]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80d2 	beq.w	800ab12 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a96e:	2300      	movs	r3, #0
 800a970:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2b03      	cmp	r3, #3
 800a978:	d143      	bne.n	800aa02 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a97a:	4b5b      	ldr	r3, [pc, #364]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a97c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	d110      	bne.n	800a9aa <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a988:	4b57      	ldr	r3, [pc, #348]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a98a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a98e:	4a56      	ldr	r2, [pc, #344]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a990:	f043 0304 	orr.w	r3, r3, #4
 800a994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a998:	4b53      	ldr	r3, [pc, #332]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a99a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a99e:	f003 0304 	and.w	r3, r3, #4
 800a9a2:	60bb      	str	r3, [r7, #8]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a9aa:	f7fb fded 	bl	8006588 <HAL_GetTick>
 800a9ae:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a9b0:	4b4e      	ldr	r3, [pc, #312]	; (800aaec <HAL_RCC_ClockConfig+0x28c>)
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00f      	beq.n	800a9dc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a9bc:	e008      	b.n	800a9d0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a9be:	f7fb fde3 	bl	8006588 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d901      	bls.n	800a9d0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e12b      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a9d0:	4b46      	ldr	r3, [pc, #280]	; (800aaec <HAL_RCC_ClockConfig+0x28c>)
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0f0      	beq.n	800a9be <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d107      	bne.n	800a9f2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a9e2:	4b41      	ldr	r3, [pc, #260]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a9e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9e8:	4a3f      	ldr	r2, [pc, #252]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a9ea:	f023 0304 	bic.w	r3, r3, #4
 800a9ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a9f2:	4b3d      	ldr	r3, [pc, #244]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d121      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e112      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d107      	bne.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa0a:	4b37      	ldr	r3, [pc, #220]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d115      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e106      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d107      	bne.n	800aa32 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800aa22:	4b31      	ldr	r3, [pc, #196]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0304 	and.w	r3, r3, #4
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d109      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e0fa      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa32:	4b2d      	ldr	r3, [pc, #180]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e0f2      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800aa42:	4b29      	ldr	r3, [pc, #164]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f023 0203 	bic.w	r2, r3, #3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	4926      	ldr	r1, [pc, #152]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800aa54:	f7fb fd98 	bl	8006588 <HAL_GetTick>
 800aa58:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d112      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa62:	e00a      	b.n	800aa7a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa64:	f7fb fd90 	bl	8006588 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d901      	bls.n	800aa7a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e0d6      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa7a:	4b1b      	ldr	r3, [pc, #108]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	f003 030c 	and.w	r3, r3, #12
 800aa82:	2b0c      	cmp	r3, #12
 800aa84:	d1ee      	bne.n	800aa64 <HAL_RCC_ClockConfig+0x204>
 800aa86:	e044      	b.n	800ab12 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d112      	bne.n	800aab6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa90:	e00a      	b.n	800aaa8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa92:	f7fb fd79 	bl	8006588 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e0bf      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aaa8:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	f003 030c 	and.w	r3, r3, #12
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d1ee      	bne.n	800aa92 <HAL_RCC_ClockConfig+0x232>
 800aab4:	e02d      	b.n	800ab12 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d123      	bne.n	800ab06 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800aabe:	e00a      	b.n	800aad6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aac0:	f7fb fd62 	bl	8006588 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	f241 3288 	movw	r2, #5000	; 0x1388
 800aace:	4293      	cmp	r3, r2
 800aad0:	d901      	bls.n	800aad6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e0a8      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800aad6:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <HAL_RCC_ClockConfig+0x288>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f003 030c 	and.w	r3, r3, #12
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1ee      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x260>
 800aae2:	e016      	b.n	800ab12 <HAL_RCC_ClockConfig+0x2b2>
 800aae4:	40022000 	.word	0x40022000
 800aae8:	46020c00 	.word	0x46020c00
 800aaec:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaf0:	f7fb fd4a 	bl	8006588 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	f241 3288 	movw	r2, #5000	; 0x1388
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e090      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab06:	4b4a      	ldr	r3, [pc, #296]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	f003 030c 	and.w	r3, r3, #12
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d1ee      	bne.n	800aaf0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d010      	beq.n	800ab40 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	4b43      	ldr	r3, [pc, #268]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	f003 030f 	and.w	r3, r3, #15
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d208      	bcs.n	800ab40 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ab2e:	4b40      	ldr	r3, [pc, #256]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f023 020f 	bic.w	r2, r3, #15
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	493d      	ldr	r1, [pc, #244]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab40:	4b3c      	ldr	r3, [pc, #240]	; (800ac34 <HAL_RCC_ClockConfig+0x3d4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 030f 	and.w	r3, r3, #15
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d210      	bcs.n	800ab70 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab4e:	4b39      	ldr	r3, [pc, #228]	; (800ac34 <HAL_RCC_ClockConfig+0x3d4>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f023 020f 	bic.w	r2, r3, #15
 800ab56:	4937      	ldr	r1, [pc, #220]	; (800ac34 <HAL_RCC_ClockConfig+0x3d4>)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab5e:	4b35      	ldr	r3, [pc, #212]	; (800ac34 <HAL_RCC_ClockConfig+0x3d4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 030f 	and.w	r3, r3, #15
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d001      	beq.n	800ab70 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e05b      	b.n	800ac28 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0304 	and.w	r3, r3, #4
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d010      	beq.n	800ab9e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	4b2b      	ldr	r3, [pc, #172]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d208      	bcs.n	800ab9e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800ab8c:	4b28      	ldr	r3, [pc, #160]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4925      	ldr	r1, [pc, #148]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0308 	and.w	r3, r3, #8
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d012      	beq.n	800abd0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	691a      	ldr	r2, [r3, #16]
 800abae:	4b20      	ldr	r3, [pc, #128]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	091b      	lsrs	r3, r3, #4
 800abb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abb8:	429a      	cmp	r2, r3
 800abba:	d209      	bcs.n	800abd0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800abbc:	4b1c      	ldr	r3, [pc, #112]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	4919      	ldr	r1, [pc, #100]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800abcc:	4313      	orrs	r3, r2
 800abce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d010      	beq.n	800abfe <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	695a      	ldr	r2, [r3, #20]
 800abe0:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abe8:	429a      	cmp	r2, r3
 800abea:	d208      	bcs.n	800abfe <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800abec:	4b10      	ldr	r3, [pc, #64]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	490d      	ldr	r1, [pc, #52]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800abfa:	4313      	orrs	r3, r2
 800abfc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800abfe:	f000 f821 	bl	800ac44 <HAL_RCC_GetSysClockFreq>
 800ac02:	4602      	mov	r2, r0
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <HAL_RCC_ClockConfig+0x3d0>)
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	f003 030f 	and.w	r3, r3, #15
 800ac0c:	490a      	ldr	r1, [pc, #40]	; (800ac38 <HAL_RCC_ClockConfig+0x3d8>)
 800ac0e:	5ccb      	ldrb	r3, [r1, r3]
 800ac10:	fa22 f303 	lsr.w	r3, r2, r3
 800ac14:	4a09      	ldr	r2, [pc, #36]	; (800ac3c <HAL_RCC_ClockConfig+0x3dc>)
 800ac16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ac18:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <HAL_RCC_ClockConfig+0x3e0>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fb fc69 	bl	80064f4 <HAL_InitTick>
 800ac22:	4603      	mov	r3, r0
 800ac24:	73fb      	strb	r3, [r7, #15]

  return status;
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	46020c00 	.word	0x46020c00
 800ac34:	40022000 	.word	0x40022000
 800ac38:	0800c5b8 	.word	0x0800c5b8
 800ac3c:	20000014 	.word	0x20000014
 800ac40:	200000a0 	.word	0x200000a0

0800ac44 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b08b      	sub	sp, #44	; 0x2c
 800ac48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac52:	4b7b      	ldr	r3, [pc, #492]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	f003 030c 	and.w	r3, r3, #12
 800ac5a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac5c:	4b78      	ldr	r3, [pc, #480]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	f003 0303 	and.w	r3, r3, #3
 800ac64:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <HAL_RCC_GetSysClockFreq+0x34>
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	2b0c      	cmp	r3, #12
 800ac70:	d121      	bne.n	800acb6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d11e      	bne.n	800acb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ac78:	4b71      	ldr	r3, [pc, #452]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d107      	bne.n	800ac94 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ac84:	4b6e      	ldr	r3, [pc, #440]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ac86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac8a:	0b1b      	lsrs	r3, r3, #12
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	627b      	str	r3, [r7, #36]	; 0x24
 800ac92:	e005      	b.n	800aca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ac94:	4b6a      	ldr	r3, [pc, #424]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	0f1b      	lsrs	r3, r3, #28
 800ac9a:	f003 030f 	and.w	r3, r3, #15
 800ac9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aca0:	4a68      	ldr	r2, [pc, #416]	; (800ae44 <HAL_RCC_GetSysClockFreq+0x200>)
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d110      	bne.n	800acd2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800acb4:	e00d      	b.n	800acd2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800acb6:	4b62      	ldr	r3, [pc, #392]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	f003 030c 	and.w	r3, r3, #12
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d102      	bne.n	800acc8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800acc2:	4b61      	ldr	r3, [pc, #388]	; (800ae48 <HAL_RCC_GetSysClockFreq+0x204>)
 800acc4:	623b      	str	r3, [r7, #32]
 800acc6:	e004      	b.n	800acd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b08      	cmp	r3, #8
 800accc:	d101      	bne.n	800acd2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800acce:	4b5e      	ldr	r3, [pc, #376]	; (800ae48 <HAL_RCC_GetSysClockFreq+0x204>)
 800acd0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	2b0c      	cmp	r3, #12
 800acd6:	f040 80ac 	bne.w	800ae32 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800acda:	4b59      	ldr	r3, [pc, #356]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800acdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acde:	f003 0303 	and.w	r3, r3, #3
 800ace2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ace4:	4b56      	ldr	r3, [pc, #344]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ace6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace8:	0a1b      	lsrs	r3, r3, #8
 800acea:	f003 030f 	and.w	r3, r3, #15
 800acee:	3301      	adds	r3, #1
 800acf0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800acf2:	4b53      	ldr	r3, [pc, #332]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf6:	091b      	lsrs	r3, r3, #4
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800acfe:	4b50      	ldr	r3, [pc, #320]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad02:	08db      	lsrs	r3, r3, #3
 800ad04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	fb02 f303 	mul.w	r3, r2, r3
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad16:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8086 	beq.w	800ae2e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d003      	beq.n	800ad30 <HAL_RCC_GetSysClockFreq+0xec>
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	d022      	beq.n	800ad74 <HAL_RCC_GetSysClockFreq+0x130>
 800ad2e:	e043      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ae4c <HAL_RCC_GetSysClockFreq+0x208>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b3f      	ldr	r3, [pc, #252]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ad44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ad52:	ed97 6a01 	vldr	s12, [r7, #4]
 800ad56:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ae50 <HAL_RCC_GetSysClockFreq+0x20c>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800ad72:	e046      	b.n	800ae02 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800ae4c <HAL_RCC_GetSysClockFreq+0x208>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b2e      	ldr	r3, [pc, #184]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ad88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ad96:	ed97 6a01 	vldr	s12, [r7, #4]
 800ad9a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800ae50 <HAL_RCC_GetSysClockFreq+0x20c>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800adb6:	e024      	b.n	800ae02 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add0:	4b1b      	ldr	r3, [pc, #108]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800add2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add8:	ee07 3a90 	vmov	s15, r3
 800addc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ade0:	ed97 6a01 	vldr	s12, [r7, #4]
 800ade4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800ae50 <HAL_RCC_GetSysClockFreq+0x20c>
 800ade8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800adf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800ae00:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800ae02:	4b0f      	ldr	r3, [pc, #60]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ae04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae06:	0e1b      	lsrs	r3, r3, #24
 800ae08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae26:	ee17 3a90 	vmov	r3, s15
 800ae2a:	623b      	str	r3, [r7, #32]
 800ae2c:	e001      	b.n	800ae32 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800ae32:	6a3b      	ldr	r3, [r7, #32]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	372c      	adds	r7, #44	; 0x2c
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	46020c00 	.word	0x46020c00
 800ae44:	0800c5d0 	.word	0x0800c5d0
 800ae48:	00f42400 	.word	0x00f42400
 800ae4c:	4b742400 	.word	0x4b742400
 800ae50:	46000000 	.word	0x46000000

0800ae54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ae58:	f7ff fef4 	bl	800ac44 <HAL_RCC_GetSysClockFreq>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <HAL_RCC_GetHCLKFreq+0x28>)
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	4906      	ldr	r1, [pc, #24]	; (800ae80 <HAL_RCC_GetHCLKFreq+0x2c>)
 800ae68:	5ccb      	ldrb	r3, [r1, r3]
 800ae6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6e:	4a05      	ldr	r2, [pc, #20]	; (800ae84 <HAL_RCC_GetHCLKFreq+0x30>)
 800ae70:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ae72:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <HAL_RCC_GetHCLKFreq+0x30>)
 800ae74:	681b      	ldr	r3, [r3, #0]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	46020c00 	.word	0x46020c00
 800ae80:	0800c5b8 	.word	0x0800c5b8
 800ae84:	20000014 	.word	0x20000014

0800ae88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ae8c:	f7ff ffe2 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
 800ae90:	4602      	mov	r2, r0
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	091b      	lsrs	r3, r3, #4
 800ae98:	f003 0307 	and.w	r3, r3, #7
 800ae9c:	4903      	ldr	r1, [pc, #12]	; (800aeac <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae9e:	5ccb      	ldrb	r3, [r1, r3]
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	46020c00 	.word	0x46020c00
 800aeac:	0800c5c8 	.word	0x0800c5c8

0800aeb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800aeb8:	4b3e      	ldr	r3, [pc, #248]	; (800afb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aeba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800aec6:	f7fe fd71 	bl	80099ac <HAL_PWREx_GetVoltageRange>
 800aeca:	6178      	str	r0, [r7, #20]
 800aecc:	e019      	b.n	800af02 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800aece:	4b39      	ldr	r3, [pc, #228]	; (800afb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aed4:	4a37      	ldr	r2, [pc, #220]	; (800afb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aed6:	f043 0304 	orr.w	r3, r3, #4
 800aeda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800aede:	4b35      	ldr	r3, [pc, #212]	; (800afb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800aeec:	f7fe fd5e 	bl	80099ac <HAL_PWREx_GetVoltageRange>
 800aef0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800aef2:	4b30      	ldr	r3, [pc, #192]	; (800afb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aef8:	4a2e      	ldr	r2, [pc, #184]	; (800afb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aefa:	f023 0304 	bic.w	r3, r3, #4
 800aefe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af08:	d003      	beq.n	800af12 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af10:	d109      	bne.n	800af26 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af18:	d202      	bcs.n	800af20 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800af1a:	2301      	movs	r3, #1
 800af1c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800af1e:	e033      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800af20:	2300      	movs	r3, #0
 800af22:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800af24:	e030      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af2c:	d208      	bcs.n	800af40 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af34:	d102      	bne.n	800af3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800af36:	2303      	movs	r3, #3
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	e025      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e035      	b.n	800afac <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af46:	d90f      	bls.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d109      	bne.n	800af62 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af54:	d902      	bls.n	800af5c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800af56:	2300      	movs	r3, #0
 800af58:	613b      	str	r3, [r7, #16]
 800af5a:	e015      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800af5c:	2301      	movs	r3, #1
 800af5e:	613b      	str	r3, [r7, #16]
 800af60:	e012      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800af62:	2300      	movs	r3, #0
 800af64:	613b      	str	r3, [r7, #16]
 800af66:	e00f      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af6e:	d109      	bne.n	800af84 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af76:	d102      	bne.n	800af7e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800af78:	2301      	movs	r3, #1
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	e004      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800af7e:	2302      	movs	r3, #2
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	e001      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800af84:	2301      	movs	r3, #1
 800af86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800af88:	4b0b      	ldr	r3, [pc, #44]	; (800afb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f023 020f 	bic.w	r2, r3, #15
 800af90:	4909      	ldr	r1, [pc, #36]	; (800afb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4313      	orrs	r3, r2
 800af96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 030f 	and.w	r3, r3, #15
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d001      	beq.n	800afaa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e000      	b.n	800afac <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	46020c00 	.word	0x46020c00
 800afb8:	40022000 	.word	0x40022000

0800afbc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e03e      	b.n	800b050 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d106      	bne.n	800afec <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7f6 fcae 	bl	8001948 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	3308      	adds	r3, #8
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f000 f85c 	bl	800b0b4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	461a      	mov	r2, r3
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	f000 f981 	bl	800b30e <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6858      	ldr	r0, [r3, #4]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	f000 f9ca 	bl	800b3b2 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	6892      	ldr	r2, [r2, #8]
 800b026:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	6892      	ldr	r2, [r2, #8]
 800b032:	f041 0101 	orr.w	r1, r1, #1
 800b036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b03a:	4b07      	ldr	r3, [pc, #28]	; (800b058 <HAL_SRAM_Init+0x9c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a06      	ldr	r2, [pc, #24]	; (800b058 <HAL_SRAM_Init+0x9c>)
 800b040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b044:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	420d0400 	.word	0x420d0400

0800b05c <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7f6 fcad 	bl	80019c4 <HAL_SRAM_MspDeInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */

  /* Configure the SRAM registers with their reset values */
  (void)FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6859      	ldr	r1, [r3, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	461a      	mov	r2, r3
 800b078:	f000 f8ec 	bl	800b254 <FMC_NORSRAM_DeInit>

  /* Reset the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_RESET;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hsram);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(const SRAM_HandleTypeDef *hsram)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  return hsram->State;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0a4:	b2db      	uxtb	r3, r3
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	6812      	ldr	r2, [r2, #0]
 800b0cc:	f023 0101 	bic.w	r1, r3, #1
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	2b08      	cmp	r3, #8
 800b0dc:	d102      	bne.n	800b0e4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b0de:	2340      	movs	r3, #64	; 0x40
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	e001      	b.n	800b0e8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b0f4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b0fa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b100:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b106:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b10c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b112:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b118:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b11e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b124:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b12a:	4313      	orrs	r3, r2
 800b12c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	4313      	orrs	r3, r2
 800b140:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	4313      	orrs	r3, r2
 800b14a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	4313      	orrs	r3, r2
 800b154:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800b156:	4b3e      	ldr	r3, [pc, #248]	; (800b250 <FMC_NORSRAM_Init+0x19c>)
 800b158:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b160:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b168:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800b170:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b178:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	43db      	mvns	r3, r3
 800b188:	ea02 0103 	and.w	r1, r2, r3
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	4319      	orrs	r1, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1a2:	d10c      	bne.n	800b1be <FMC_NORSRAM_Init+0x10a>
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d008      	beq.n	800b1be <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d006      	beq.n	800b1d4 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d12f      	bne.n	800b23e <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	0c1b      	lsrs	r3, r3, #16
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d014      	beq.n	800b222 <FMC_NORSRAM_Init+0x16e>
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d819      	bhi.n	800b230 <FMC_NORSRAM_Init+0x17c>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <FMC_NORSRAM_Init+0x152>
 800b200:	2b02      	cmp	r3, #2
 800b202:	d007      	beq.n	800b214 <FMC_NORSRAM_Init+0x160>
 800b204:	e014      	b.n	800b230 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	621a      	str	r2, [r3, #32]
        break;
 800b212:	e015      	b.n	800b240 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a1b      	ldr	r3, [r3, #32]
 800b218:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	621a      	str	r2, [r3, #32]
        break;
 800b220:	e00e      	b.n	800b240 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	621a      	str	r2, [r3, #32]
        break;
 800b22e:	e007      	b.n	800b240 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a1b      	ldr	r3, [r3, #32]
 800b234:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	621a      	str	r2, [r3, #32]
        break;
 800b23c:	e000      	b.n	800b240 <FMC_NORSRAM_Init+0x18c>
    }
  }
 800b23e:	bf00      	nop

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	371c      	adds	r7, #28
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	0008fb7f 	.word	0x0008fb7f

0800b254 <FMC_NORSRAM_DeInit>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_DeInit(FMC_NORSRAM_TypeDef *Device,
                                     FMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable the FMC_NORSRAM device */
  __FMC_NORSRAM_DISABLE(Device, Bank);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	f023 0101 	bic.w	r1, r3, #1
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* De-initialize the FMC_NORSRAM device */
  /* FMC_NORSRAM_BANK1 */
  if (Bank == FMC_NORSRAM_BANK1)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d106      	bne.n	800b288 <FMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	f243 01db 	movw	r1, #12507	; 0x30db
 800b282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b286:	e005      	b.n	800b294 <FMC_NORSRAM_DeInit+0x40>
  }
  /* FMC_NORSRAM_BANK2, FMC_NORSRAM_BANK3 or FMC_NORSRAM_BANK4 */
  else
  {
    Device->BTCR[Bank] = 0x000030D2U;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	f243 01d2 	movw	r1, #12498	; 0x30d2
 800b290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b29e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]   = 0x0FFFFFFFU;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b2aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* De-initialize PSRAM chip select counter */
  switch (Bank)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b04      	cmp	r3, #4
 800b2b2:	d017      	beq.n	800b2e4 <FMC_NORSRAM_DeInit+0x90>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d81b      	bhi.n	800b2f2 <FMC_NORSRAM_DeInit+0x9e>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <FMC_NORSRAM_DeInit+0x74>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d007      	beq.n	800b2d6 <FMC_NORSRAM_DeInit+0x82>
 800b2c6:	e014      	b.n	800b2f2 <FMC_NORSRAM_DeInit+0x9e>
  {
    case FMC_NORSRAM_BANK1 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	621a      	str	r2, [r3, #32]
      break;
 800b2d4:	e014      	b.n	800b300 <FMC_NORSRAM_DeInit+0xac>

    case FMC_NORSRAM_BANK2 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	621a      	str	r2, [r3, #32]
      break;
 800b2e2:	e00d      	b.n	800b300 <FMC_NORSRAM_DeInit+0xac>

    case FMC_NORSRAM_BANK3 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	621a      	str	r2, [r3, #32]
      break;
 800b2f0:	e006      	b.n	800b300 <FMC_NORSRAM_DeInit+0xac>

    default :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	621a      	str	r2, [r3, #32]
      break;
 800b2fe:	bf00      	nop
  }

  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b30e:	b480      	push	{r7}
 800b310:	b087      	sub	sp, #28
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	431a      	orrs	r2, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	021b      	lsls	r3, r3, #8
 800b336:	431a      	orrs	r2, r3
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	079b      	lsls	r3, r3, #30
 800b33e:	431a      	orrs	r2, r3
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	041b      	lsls	r3, r3, #16
 800b346:	431a      	orrs	r2, r3
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	051b      	lsls	r3, r3, #20
 800b350:	431a      	orrs	r2, r3
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	3b02      	subs	r3, #2
 800b358:	061b      	lsls	r3, r3, #24
 800b35a:	ea42 0103 	orr.w	r1, r2, r3
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	3201      	adds	r2, #1
 800b366:	4319      	orrs	r1, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b37a:	d113      	bne.n	800b3a4 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b384:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	051b      	lsls	r3, r3, #20
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	4313      	orrs	r3, r2
 800b392:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	607a      	str	r2, [r7, #4]
 800b3be:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3c6:	d121      	bne.n	800b40c <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d0:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	6819      	ldr	r1, [r3, #0]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	4319      	orrs	r1, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	021b      	lsls	r3, r3, #8
 800b3e6:	4319      	orrs	r1, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	079b      	lsls	r3, r3, #30
 800b3ee:	4319      	orrs	r1, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	4319      	orrs	r1, r3
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	041b      	lsls	r3, r3, #16
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	ea42 0103 	orr.w	r1, r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b40a:	e005      	b.n	800b418 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
	...

0800b428 <__libc_init_array>:
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	4d0d      	ldr	r5, [pc, #52]	; (800b460 <__libc_init_array+0x38>)
 800b42c:	2600      	movs	r6, #0
 800b42e:	4c0d      	ldr	r4, [pc, #52]	; (800b464 <__libc_init_array+0x3c>)
 800b430:	1b64      	subs	r4, r4, r5
 800b432:	10a4      	asrs	r4, r4, #2
 800b434:	42a6      	cmp	r6, r4
 800b436:	d109      	bne.n	800b44c <__libc_init_array+0x24>
 800b438:	4d0b      	ldr	r5, [pc, #44]	; (800b468 <__libc_init_array+0x40>)
 800b43a:	2600      	movs	r6, #0
 800b43c:	4c0b      	ldr	r4, [pc, #44]	; (800b46c <__libc_init_array+0x44>)
 800b43e:	f000 f81f 	bl	800b480 <_init>
 800b442:	1b64      	subs	r4, r4, r5
 800b444:	10a4      	asrs	r4, r4, #2
 800b446:	42a6      	cmp	r6, r4
 800b448:	d105      	bne.n	800b456 <__libc_init_array+0x2e>
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b450:	3601      	adds	r6, #1
 800b452:	4798      	blx	r3
 800b454:	e7ee      	b.n	800b434 <__libc_init_array+0xc>
 800b456:	f855 3b04 	ldr.w	r3, [r5], #4
 800b45a:	3601      	adds	r6, #1
 800b45c:	4798      	blx	r3
 800b45e:	e7f2      	b.n	800b446 <__libc_init_array+0x1e>
 800b460:	0800cbc0 	.word	0x0800cbc0
 800b464:	0800cbc0 	.word	0x0800cbc0
 800b468:	0800cbc0 	.word	0x0800cbc0
 800b46c:	0800cbc4 	.word	0x0800cbc4

0800b470 <memset>:
 800b470:	4402      	add	r2, r0
 800b472:	4603      	mov	r3, r0
 800b474:	4293      	cmp	r3, r2
 800b476:	d100      	bne.n	800b47a <memset+0xa>
 800b478:	4770      	bx	lr
 800b47a:	f803 1b01 	strb.w	r1, [r3], #1
 800b47e:	e7f9      	b.n	800b474 <memset+0x4>

0800b480 <_init>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	bf00      	nop
 800b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b486:	bc08      	pop	{r3}
 800b488:	469e      	mov	lr, r3
 800b48a:	4770      	bx	lr

0800b48c <_fini>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr
