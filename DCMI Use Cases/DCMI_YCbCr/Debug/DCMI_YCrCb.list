
DCMI_YCrCb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f0  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000172c  0800bc28  0800bc28  0001bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d354  0800d354  0001d354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a5  20000000  0800d35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00026590  200000a8  0800d401  000200a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20026638  0800d401  00026638  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ccc3  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f0e  00000000  00000000  0003cde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017c0  00000000  00000000  00040cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001240  00000000  00000000  000424b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035065  00000000  00000000  000436f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d9a2  00000000  00000000  00078755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d769  00000000  00000000  000960f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000630c  00000000  00000000  001d3860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001d9b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000a8 	.word	0x200000a8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bc10 	.word	0x0800bc10

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000ac 	.word	0x200000ac
 8000274:	0800bc10 	.word	0x0800bc10

08000278 <__aeabi_dmul>:
 8000278:	b570      	push	{r4, r5, r6, lr}
 800027a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800027e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000282:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000286:	bf1d      	ittte	ne
 8000288:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800028c:	ea94 0f0c 	teqne	r4, ip
 8000290:	ea95 0f0c 	teqne	r5, ip
 8000294:	f000 f8de 	bleq	8000454 <__aeabi_dmul+0x1dc>
 8000298:	442c      	add	r4, r5
 800029a:	ea81 0603 	eor.w	r6, r1, r3
 800029e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002aa:	bf18      	it	ne
 80002ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b8:	d038      	beq.n	800032c <__aeabi_dmul+0xb4>
 80002ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80002be:	f04f 0500 	mov.w	r5, #0
 80002c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ce:	f04f 0600 	mov.w	r6, #0
 80002d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002d6:	f09c 0f00 	teq	ip, #0
 80002da:	bf18      	it	ne
 80002dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ec:	d204      	bcs.n	80002f8 <__aeabi_dmul+0x80>
 80002ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002f2:	416d      	adcs	r5, r5
 80002f4:	eb46 0606 	adc.w	r6, r6, r6
 80002f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000300:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000304:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000308:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800030c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000310:	bf88      	it	hi
 8000312:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000316:	d81e      	bhi.n	8000356 <__aeabi_dmul+0xde>
 8000318:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000330:	ea46 0101 	orr.w	r1, r6, r1
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	ea81 0103 	eor.w	r1, r1, r3
 800033c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000340:	bfc2      	ittt	gt
 8000342:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000346:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800034a:	bd70      	popgt	{r4, r5, r6, pc}
 800034c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000350:	f04f 0e00 	mov.w	lr, #0
 8000354:	3c01      	subs	r4, #1
 8000356:	f300 80ab 	bgt.w	80004b0 <__aeabi_dmul+0x238>
 800035a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800035e:	bfde      	ittt	le
 8000360:	2000      	movle	r0, #0
 8000362:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000366:	bd70      	pople	{r4, r5, r6, pc}
 8000368:	f1c4 0400 	rsb	r4, r4, #0
 800036c:	3c20      	subs	r4, #32
 800036e:	da35      	bge.n	80003dc <__aeabi_dmul+0x164>
 8000370:	340c      	adds	r4, #12
 8000372:	dc1b      	bgt.n	80003ac <__aeabi_dmul+0x134>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0520 	rsb	r5, r4, #32
 800037c:	fa00 f305 	lsl.w	r3, r0, r5
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f205 	lsl.w	r2, r1, r5
 8000388:	ea40 0002 	orr.w	r0, r0, r2
 800038c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000394:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000398:	fa21 f604 	lsr.w	r6, r1, r4
 800039c:	eb42 0106 	adc.w	r1, r2, r6
 80003a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f1c4 040c 	rsb	r4, r4, #12
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f304 	lsl.w	r3, r0, r4
 80003b8:	fa20 f005 	lsr.w	r0, r0, r5
 80003bc:	fa01 f204 	lsl.w	r2, r1, r4
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d4:	bf08      	it	eq
 80003d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f1c4 0520 	rsb	r5, r4, #32
 80003e0:	fa00 f205 	lsl.w	r2, r0, r5
 80003e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea43 0302 	orr.w	r3, r3, r2
 80003f4:	fa21 f004 	lsr.w	r0, r1, r4
 80003f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000400:	ea20 0002 	bic.w	r0, r0, r2
 8000404:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f094 0f00 	teq	r4, #0
 8000418:	d10f      	bne.n	800043a <__aeabi_dmul+0x1c2>
 800041a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800041e:	0040      	lsls	r0, r0, #1
 8000420:	eb41 0101 	adc.w	r1, r1, r1
 8000424:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000428:	bf08      	it	eq
 800042a:	3c01      	subeq	r4, #1
 800042c:	d0f7      	beq.n	800041e <__aeabi_dmul+0x1a6>
 800042e:	ea41 0106 	orr.w	r1, r1, r6
 8000432:	f095 0f00 	teq	r5, #0
 8000436:	bf18      	it	ne
 8000438:	4770      	bxne	lr
 800043a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800043e:	0052      	lsls	r2, r2, #1
 8000440:	eb43 0303 	adc.w	r3, r3, r3
 8000444:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000448:	bf08      	it	eq
 800044a:	3d01      	subeq	r5, #1
 800044c:	d0f7      	beq.n	800043e <__aeabi_dmul+0x1c6>
 800044e:	ea43 0306 	orr.w	r3, r3, r6
 8000452:	4770      	bx	lr
 8000454:	ea94 0f0c 	teq	r4, ip
 8000458:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800045c:	bf18      	it	ne
 800045e:	ea95 0f0c 	teqne	r5, ip
 8000462:	d00c      	beq.n	800047e <__aeabi_dmul+0x206>
 8000464:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000468:	bf18      	it	ne
 800046a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800046e:	d1d1      	bne.n	8000414 <__aeabi_dmul+0x19c>
 8000470:	ea81 0103 	eor.w	r1, r1, r3
 8000474:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd70      	pop	{r4, r5, r6, pc}
 800047e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000482:	bf06      	itte	eq
 8000484:	4610      	moveq	r0, r2
 8000486:	4619      	moveq	r1, r3
 8000488:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800048c:	d019      	beq.n	80004c2 <__aeabi_dmul+0x24a>
 800048e:	ea94 0f0c 	teq	r4, ip
 8000492:	d102      	bne.n	800049a <__aeabi_dmul+0x222>
 8000494:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000498:	d113      	bne.n	80004c2 <__aeabi_dmul+0x24a>
 800049a:	ea95 0f0c 	teq	r5, ip
 800049e:	d105      	bne.n	80004ac <__aeabi_dmul+0x234>
 80004a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004a4:	bf1c      	itt	ne
 80004a6:	4610      	movne	r0, r2
 80004a8:	4619      	movne	r1, r3
 80004aa:	d10a      	bne.n	80004c2 <__aeabi_dmul+0x24a>
 80004ac:	ea81 0103 	eor.w	r1, r1, r3
 80004b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004bc:	f04f 0000 	mov.w	r0, #0
 80004c0:	bd70      	pop	{r4, r5, r6, pc}
 80004c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004ca:	bd70      	pop	{r4, r5, r6, pc}

080004cc <__aeabi_drsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e002      	b.n	80004d8 <__adddf3>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dsub>:
 80004d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d8 <__adddf3>:
 80004d8:	b530      	push	{r4, r5, lr}
 80004da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	bf1f      	itttt	ne
 80004ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fe:	f000 80e2 	beq.w	80006c6 <__adddf3+0x1ee>
 8000502:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000506:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800050a:	bfb8      	it	lt
 800050c:	426d      	neglt	r5, r5
 800050e:	dd0c      	ble.n	800052a <__adddf3+0x52>
 8000510:	442c      	add	r4, r5
 8000512:	ea80 0202 	eor.w	r2, r0, r2
 8000516:	ea81 0303 	eor.w	r3, r1, r3
 800051a:	ea82 0000 	eor.w	r0, r2, r0
 800051e:	ea83 0101 	eor.w	r1, r3, r1
 8000522:	ea80 0202 	eor.w	r2, r0, r2
 8000526:	ea81 0303 	eor.w	r3, r1, r3
 800052a:	2d36      	cmp	r5, #54	; 0x36
 800052c:	bf88      	it	hi
 800052e:	bd30      	pophi	{r4, r5, pc}
 8000530:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000534:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000538:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800053c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000540:	d002      	beq.n	8000548 <__adddf3+0x70>
 8000542:	4240      	negs	r0, r0
 8000544:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000548:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800054c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000550:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000554:	d002      	beq.n	800055c <__adddf3+0x84>
 8000556:	4252      	negs	r2, r2
 8000558:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800055c:	ea94 0f05 	teq	r4, r5
 8000560:	f000 80a7 	beq.w	80006b2 <__adddf3+0x1da>
 8000564:	f1a4 0401 	sub.w	r4, r4, #1
 8000568:	f1d5 0e20 	rsbs	lr, r5, #32
 800056c:	db0d      	blt.n	800058a <__adddf3+0xb2>
 800056e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000572:	fa22 f205 	lsr.w	r2, r2, r5
 8000576:	1880      	adds	r0, r0, r2
 8000578:	f141 0100 	adc.w	r1, r1, #0
 800057c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000580:	1880      	adds	r0, r0, r2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	4159      	adcs	r1, r3
 8000588:	e00e      	b.n	80005a8 <__adddf3+0xd0>
 800058a:	f1a5 0520 	sub.w	r5, r5, #32
 800058e:	f10e 0e20 	add.w	lr, lr, #32
 8000592:	2a01      	cmp	r2, #1
 8000594:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000598:	bf28      	it	cs
 800059a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	18c0      	adds	r0, r0, r3
 80005a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	d507      	bpl.n	80005be <__adddf3+0xe6>
 80005ae:	f04f 0e00 	mov.w	lr, #0
 80005b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80005be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005c2:	d31b      	bcc.n	80005fc <__adddf3+0x124>
 80005c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c8:	d30c      	bcc.n	80005e4 <__adddf3+0x10c>
 80005ca:	0849      	lsrs	r1, r1, #1
 80005cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005d4:	f104 0401 	add.w	r4, r4, #1
 80005d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e0:	f080 809a 	bcs.w	8000718 <__adddf3+0x240>
 80005e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	ea41 0105 	orr.w	r1, r1, r5
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000600:	4140      	adcs	r0, r0
 8000602:	eb41 0101 	adc.w	r1, r1, r1
 8000606:	3c01      	subs	r4, #1
 8000608:	bf28      	it	cs
 800060a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800060e:	d2e9      	bcs.n	80005e4 <__adddf3+0x10c>
 8000610:	f091 0f00 	teq	r1, #0
 8000614:	bf04      	itt	eq
 8000616:	4601      	moveq	r1, r0
 8000618:	2000      	moveq	r0, #0
 800061a:	fab1 f381 	clz	r3, r1
 800061e:	bf08      	it	eq
 8000620:	3320      	addeq	r3, #32
 8000622:	f1a3 030b 	sub.w	r3, r3, #11
 8000626:	f1b3 0220 	subs.w	r2, r3, #32
 800062a:	da0c      	bge.n	8000646 <__adddf3+0x16e>
 800062c:	320c      	adds	r2, #12
 800062e:	dd08      	ble.n	8000642 <__adddf3+0x16a>
 8000630:	f102 0c14 	add.w	ip, r2, #20
 8000634:	f1c2 020c 	rsb	r2, r2, #12
 8000638:	fa01 f00c 	lsl.w	r0, r1, ip
 800063c:	fa21 f102 	lsr.w	r1, r1, r2
 8000640:	e00c      	b.n	800065c <__adddf3+0x184>
 8000642:	f102 0214 	add.w	r2, r2, #20
 8000646:	bfd8      	it	le
 8000648:	f1c2 0c20 	rsble	ip, r2, #32
 800064c:	fa01 f102 	lsl.w	r1, r1, r2
 8000650:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000654:	bfdc      	itt	le
 8000656:	ea41 010c 	orrle.w	r1, r1, ip
 800065a:	4090      	lslle	r0, r2
 800065c:	1ae4      	subs	r4, r4, r3
 800065e:	bfa2      	ittt	ge
 8000660:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000664:	4329      	orrge	r1, r5
 8000666:	bd30      	popge	{r4, r5, pc}
 8000668:	ea6f 0404 	mvn.w	r4, r4
 800066c:	3c1f      	subs	r4, #31
 800066e:	da1c      	bge.n	80006aa <__adddf3+0x1d2>
 8000670:	340c      	adds	r4, #12
 8000672:	dc0e      	bgt.n	8000692 <__adddf3+0x1ba>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0220 	rsb	r2, r4, #32
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f302 	lsl.w	r3, r1, r2
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	fa21 f304 	lsr.w	r3, r1, r4
 800068c:	ea45 0103 	orr.w	r1, r5, r3
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	f1c4 040c 	rsb	r4, r4, #12
 8000696:	f1c4 0220 	rsb	r2, r4, #32
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 f304 	lsl.w	r3, r1, r4
 80006a2:	ea40 0003 	orr.w	r0, r0, r3
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	fa21 f004 	lsr.w	r0, r1, r4
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	f094 0f00 	teq	r4, #0
 80006b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ba:	bf06      	itte	eq
 80006bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c0:	3401      	addeq	r4, #1
 80006c2:	3d01      	subne	r5, #1
 80006c4:	e74e      	b.n	8000564 <__adddf3+0x8c>
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf18      	it	ne
 80006cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d0:	d029      	beq.n	8000726 <__adddf3+0x24e>
 80006d2:	ea94 0f05 	teq	r4, r5
 80006d6:	bf08      	it	eq
 80006d8:	ea90 0f02 	teqeq	r0, r2
 80006dc:	d005      	beq.n	80006ea <__adddf3+0x212>
 80006de:	ea54 0c00 	orrs.w	ip, r4, r0
 80006e2:	bf04      	itt	eq
 80006e4:	4619      	moveq	r1, r3
 80006e6:	4610      	moveq	r0, r2
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	ea91 0f03 	teq	r1, r3
 80006ee:	bf1e      	ittt	ne
 80006f0:	2100      	movne	r1, #0
 80006f2:	2000      	movne	r0, #0
 80006f4:	bd30      	popne	{r4, r5, pc}
 80006f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006fa:	d105      	bne.n	8000708 <__adddf3+0x230>
 80006fc:	0040      	lsls	r0, r0, #1
 80006fe:	4149      	adcs	r1, r1
 8000700:	bf28      	it	cs
 8000702:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd30      	pop	{r4, r5, pc}
 8000708:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800070c:	bf3c      	itt	cc
 800070e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000712:	bd30      	popcc	{r4, r5, pc}
 8000714:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000718:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800072a:	bf1a      	itte	ne
 800072c:	4619      	movne	r1, r3
 800072e:	4610      	movne	r0, r2
 8000730:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000734:	bf1c      	itt	ne
 8000736:	460b      	movne	r3, r1
 8000738:	4602      	movne	r2, r0
 800073a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800073e:	bf06      	itte	eq
 8000740:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000744:	ea91 0f03 	teqeq	r1, r3
 8000748:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	bf00      	nop

08000750 <__aeabi_ui2d>:
 8000750:	f090 0f00 	teq	r0, #0
 8000754:	bf04      	itt	eq
 8000756:	2100      	moveq	r1, #0
 8000758:	4770      	bxeq	lr
 800075a:	b530      	push	{r4, r5, lr}
 800075c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000760:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000764:	f04f 0500 	mov.w	r5, #0
 8000768:	f04f 0100 	mov.w	r1, #0
 800076c:	e750      	b.n	8000610 <__adddf3+0x138>
 800076e:	bf00      	nop

08000770 <__aeabi_i2d>:
 8000770:	f090 0f00 	teq	r0, #0
 8000774:	bf04      	itt	eq
 8000776:	2100      	moveq	r1, #0
 8000778:	4770      	bxeq	lr
 800077a:	b530      	push	{r4, r5, lr}
 800077c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000780:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000784:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000788:	bf48      	it	mi
 800078a:	4240      	negmi	r0, r0
 800078c:	f04f 0100 	mov.w	r1, #0
 8000790:	e73e      	b.n	8000610 <__adddf3+0x138>
 8000792:	bf00      	nop

08000794 <__aeabi_f2d>:
 8000794:	0042      	lsls	r2, r0, #1
 8000796:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007a2:	bf1f      	itttt	ne
 80007a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b0:	4770      	bxne	lr
 80007b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007b6:	bf08      	it	eq
 80007b8:	4770      	bxeq	lr
 80007ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007be:	bf04      	itt	eq
 80007c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007c4:	4770      	bxeq	lr
 80007c6:	b530      	push	{r4, r5, lr}
 80007c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	e71c      	b.n	8000610 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_ul2d>:
 80007d8:	ea50 0201 	orrs.w	r2, r0, r1
 80007dc:	bf08      	it	eq
 80007de:	4770      	bxeq	lr
 80007e0:	b530      	push	{r4, r5, lr}
 80007e2:	f04f 0500 	mov.w	r5, #0
 80007e6:	e00a      	b.n	80007fe <__aeabi_l2d+0x16>

080007e8 <__aeabi_l2d>:
 80007e8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007f6:	d502      	bpl.n	80007fe <__aeabi_l2d+0x16>
 80007f8:	4240      	negs	r0, r0
 80007fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000802:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000806:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800080a:	f43f aed8 	beq.w	80005be <__adddf3+0xe6>
 800080e:	f04f 0203 	mov.w	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000826:	f1c2 0320 	rsb	r3, r2, #32
 800082a:	fa00 fc03 	lsl.w	ip, r0, r3
 800082e:	fa20 f002 	lsr.w	r0, r0, r2
 8000832:	fa01 fe03 	lsl.w	lr, r1, r3
 8000836:	ea40 000e 	orr.w	r0, r0, lr
 800083a:	fa21 f102 	lsr.w	r1, r1, r2
 800083e:	4414      	add	r4, r2
 8000840:	e6bd      	b.n	80005be <__adddf3+0xe6>
 8000842:	bf00      	nop

08000844 <__aeabi_d2uiz>:
 8000844:	004a      	lsls	r2, r1, #1
 8000846:	d211      	bcs.n	800086c <__aeabi_d2uiz+0x28>
 8000848:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800084c:	d211      	bcs.n	8000872 <__aeabi_d2uiz+0x2e>
 800084e:	d50d      	bpl.n	800086c <__aeabi_d2uiz+0x28>
 8000850:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000854:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000858:	d40e      	bmi.n	8000878 <__aeabi_d2uiz+0x34>
 800085a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800085e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000862:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000866:	fa23 f002 	lsr.w	r0, r3, r2
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d102      	bne.n	800087e <__aeabi_d2uiz+0x3a>
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	4770      	bx	lr
 800087e:	f04f 0000 	mov.w	r0, #0
 8000882:	4770      	bx	lr

08000884 <MX_DCMIQueue_Config>:
  * @brief  DMA Linked-list DCMIQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DCMIQueue_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000890:	2322      	movs	r3, #34	; 0x22
 8000892:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8000894:	2356      	movs	r3, #86	; 0x56
 8000896:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80008a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008a8:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80008ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008b2:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80008d8:	2300      	movs	r3, #0
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMINode1 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode1);
 80008f0:	463b      	mov	r3, r7
 80008f2:	491f      	ldr	r1, [pc, #124]	; (8000970 <MX_DCMIQueue_Config+0xec>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f007 fc61 	bl	80081bc <HAL_DMAEx_List_BuildNode>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000902:	4313      	orrs	r3, r2
 8000904:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode1 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode1);
 8000908:	4919      	ldr	r1, [pc, #100]	; (8000970 <MX_DCMIQueue_Config+0xec>)
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <MX_DCMIQueue_Config+0xf0>)
 800090c:	f007 fc6c 	bl	80081e8 <HAL_DMAEx_List_InsertNode_Tail>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000918:	4313      	orrs	r3, r2
 800091a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMINode2 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode2);
 800091e:	463b      	mov	r3, r7
 8000920:	4915      	ldr	r1, [pc, #84]	; (8000978 <MX_DCMIQueue_Config+0xf4>)
 8000922:	4618      	mov	r0, r3
 8000924:	f007 fc4a 	bl	80081bc <HAL_DMAEx_List_BuildNode>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000930:	4313      	orrs	r3, r2
 8000932:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode2 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode2);
 8000936:	4910      	ldr	r1, [pc, #64]	; (8000978 <MX_DCMIQueue_Config+0xf4>)
 8000938:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_DCMIQueue_Config+0xf0>)
 800093a:	f007 fc55 	bl	80081e8 <HAL_DMAEx_List_InsertNode_Tail>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000946:	4313      	orrs	r3, r2
 8000948:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&DCMIQueue, &DCMINode1);
 800094c:	4908      	ldr	r1, [pc, #32]	; (8000970 <MX_DCMIQueue_Config+0xec>)
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_DCMIQueue_Config+0xf0>)
 8000950:	f007 fcc2 	bl	80082d8 <HAL_DMAEx_List_SetCircularModeConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800095c:	4313      	orrs	r3, r2
 800095e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8000962:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000966:	4618      	mov	r0, r3
 8000968:	3770      	adds	r7, #112	; 0x70
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000c4 	.word	0x200000c4
 8000974:	200000e8 	.word	0x200000e8
 8000978:	20000100 	.word	0x20000100
 800097c:	00000000 	.word	0x00000000

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f006 f953 	bl	8006c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f96b 	bl	8000c64 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800098e:	f000 f9c5 	bl	8000d1c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */


  /*##-2- LCD configuration  #################################################*/
  /* LCD initialization and display enable*/
  BSP_LCD_Init(0,LCD_ORIENTATION_LANDSCAPE);
 8000992:	2101      	movs	r1, #1
 8000994:	2000      	movs	r0, #0
 8000996:	f005 fc5f 	bl	8006258 <BSP_LCD_Init>
  BSP_LCD_DisplayOn(0);
 800099a:	2000      	movs	r0, #0
 800099c:	f005 fc84 	bl	80062a8 <BSP_LCD_DisplayOn>

  Example_Description();
 80009a0:	f000 feba 	bl	8001718 <Example_Description>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 fae2 	bl	8000f6c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80009a8:	f000 fa1a 	bl	8000de0 <MX_GPDMA1_Init>
  MX_DCMI_Init();
 80009ac:	f000 f9c6 	bl	8000d3c <MX_DCMI_Init>
  MX_ICACHE_Init();
 80009b0:	f000 fa60 	bl	8000e74 <MX_ICACHE_Init>
  MX_FMC_Init();
 80009b4:	f000 fa72 	bl	8000e9c <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  /* Configure the MPU attributes for SRAM */
  MPU_Config();
 80009b8:	f000 fdb2 	bl	8001520 <MPU_Config>

    /*##-1- LEDs and User Button initialization  #################################################*/
  BSP_LED_Init(LED5);
 80009bc:	2000      	movs	r0, #0
 80009be:	f004 fcf1 	bl	80053a4 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f004 fcee 	bl	80053a4 <BSP_LED_Init>
  MX_DCMIQueue_Config();
 80009c8:	f7ff ff5c 	bl	8000884 <MX_DCMIQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &DCMIQueue);
 80009cc:	4998      	ldr	r1, [pc, #608]	; (8000c30 <main+0x2b0>)
 80009ce:	4899      	ldr	r0, [pc, #612]	; (8000c34 <main+0x2b4>)
 80009d0:	f007 fcf0 	bl	80083b4 <HAL_DMAEx_List_LinkQ>
  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 80009d4:	4b98      	ldr	r3, [pc, #608]	; (8000c38 <main+0x2b8>)
 80009d6:	4a97      	ldr	r2, [pc, #604]	; (8000c34 <main+0x2b4>)
 80009d8:	649a      	str	r2, [r3, #72]	; 0x48
 80009da:	4b96      	ldr	r3, [pc, #600]	; (8000c34 <main+0x2b4>)
 80009dc:	4a96      	ldr	r2, [pc, #600]	; (8000c38 <main+0x2b8>)
 80009de:	65da      	str	r2, [r3, #92]	; 0x5c
  /*##-4- Camera Initialization ############################*/
  /* Initialize the Camera in QVGA mode */
  if(OV5640_Config() != 0)
 80009e0:	f000 fddc 	bl	800159c <OV5640_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <main+0x6e>
  {
    Error_Handler();
 80009ea:	f000 ff2f 	bl	800184c <Error_Handler>
  }

  /* Wait for User button press */
  while (UserButtonPressed != SET);
 80009ee:	bf00      	nop
 80009f0:	4b92      	ldr	r3, [pc, #584]	; (8000c3c <main+0x2bc>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d1fa      	bne.n	80009f0 <main+0x70>

  /* Reset for next operation */
  UserButtonPressed = RESET;
 80009fa:	4b90      	ldr	r3, [pc, #576]	; (8000c3c <main+0x2bc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
     The LCD frame size is therefore 320 * 240 half-words of (320*240*2) 8-bit long bytes .
     Since the unit of the DMA associated to DCMI IP is with word , the last parameter of
     HAL_DCMI_Start_DMA is set to:
     FRAME_BUFFER_SIZE = ((FRAME_WIDTH*FRAME_HEIGHT)*2)/4, that is (320 * 240 * 2)/4
   */
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)CAMERA_FRAME_BUFFER, FRAME_BUFFER_SIZE);
 8000a00:	4a8f      	ldr	r2, [pc, #572]	; (8000c40 <main+0x2c0>)
 8000a02:	4b90      	ldr	r3, [pc, #576]	; (8000c44 <main+0x2c4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2100      	movs	r1, #0
 8000a08:	488b      	ldr	r0, [pc, #556]	; (8000c38 <main+0x2b8>)
 8000a0a:	f006 fc03 	bl	8007214 <HAL_DCMI_Start_DMA>


  uint32_t pixelCount = FRAME_BUFFER_SIZE / 2;  // Assuming RGB565 pixel format
 8000a0e:	4b8d      	ldr	r3, [pc, #564]	; (8000c44 <main+0x2c4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
  uint16_t *rgbData = (uint16_t *)CAMERA_FRAME_BUFFER;
 8000a16:	4b8a      	ldr	r3, [pc, #552]	; (8000c40 <main+0x2c0>)
 8000a18:	60fb      	str	r3, [r7, #12]
  uint8_t *ycrcbData = (uint8_t *)CAMERA_FRAME_BUFFER;  // Buffer for Y-only data
 8000a1a:	4b89      	ldr	r3, [pc, #548]	; (8000c40 <main+0x2c0>)
 8000a1c:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
      /* Perform RGB to YCrCb conversion */
      for (uint32_t i = 0; i < pixelCount; ++i)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e09d      	b.n	8000b60 <main+0x1e0>
      {
          uint16_t rgbPixel = rgbData[i];
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	80fb      	strh	r3, [r7, #6]

          uint8_t r = (rgbPixel >> 11) & 0x1F;
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	0adb      	lsrs	r3, r3, #11
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 031f 	and.w	r3, r3, #31
 8000a3c:	717b      	strb	r3, [r7, #5]
          uint8_t g = (rgbPixel >> 5) & 0x3F;
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	095b      	lsrs	r3, r3, #5
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a4a:	713b      	strb	r3, [r7, #4]
          uint8_t b = rgbPixel & 0x1F;
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f003 031f 	and.w	r3, r3, #31
 8000a54:	70fb      	strb	r3, [r7, #3]

          uint8_t y = (uint8_t)(0.299 * r + 0.587 * g + 0.114 * b);
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe89 	bl	8000770 <__aeabi_i2d>
 8000a5e:	a36a      	add	r3, pc, #424	; (adr r3, 8000c08 <main+0x288>)
 8000a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a64:	f7ff fc08 	bl	8000278 <__aeabi_dmul>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	4614      	mov	r4, r2
 8000a6e:	461d      	mov	r5, r3
 8000a70:	793b      	ldrb	r3, [r7, #4]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fe7c 	bl	8000770 <__aeabi_i2d>
 8000a78:	a365      	add	r3, pc, #404	; (adr r3, 8000c10 <main+0x290>)
 8000a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7e:	f7ff fbfb 	bl	8000278 <__aeabi_dmul>
 8000a82:	4602      	mov	r2, r0
 8000a84:	460b      	mov	r3, r1
 8000a86:	4620      	mov	r0, r4
 8000a88:	4629      	mov	r1, r5
 8000a8a:	f7ff fd25 	bl	80004d8 <__adddf3>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	460b      	mov	r3, r1
 8000a92:	4614      	mov	r4, r2
 8000a94:	461d      	mov	r5, r3
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe69 	bl	8000770 <__aeabi_i2d>
 8000a9e:	a35e      	add	r3, pc, #376	; (adr r3, 8000c18 <main+0x298>)
 8000aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa4:	f7ff fbe8 	bl	8000278 <__aeabi_dmul>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	4620      	mov	r0, r4
 8000aae:	4629      	mov	r1, r5
 8000ab0:	f7ff fd12 	bl	80004d8 <__adddf3>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	4610      	mov	r0, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	f7ff fec2 	bl	8000844 <__aeabi_d2uiz>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	70bb      	strb	r3, [r7, #2]
          uint8_t cr = (uint8_t)(128 + 0.564 * (b - y));
 8000ac4:	78fa      	ldrb	r2, [r7, #3]
 8000ac6:	78bb      	ldrb	r3, [r7, #2]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe50 	bl	8000770 <__aeabi_i2d>
 8000ad0:	a353      	add	r3, pc, #332	; (adr r3, 8000c20 <main+0x2a0>)
 8000ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad6:	f7ff fbcf 	bl	8000278 <__aeabi_dmul>
 8000ada:	4602      	mov	r2, r0
 8000adc:	460b      	mov	r3, r1
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	4b58      	ldr	r3, [pc, #352]	; (8000c48 <main+0x2c8>)
 8000ae8:	f7ff fcf6 	bl	80004d8 <__adddf3>
 8000aec:	4602      	mov	r2, r0
 8000aee:	460b      	mov	r3, r1
 8000af0:	4610      	mov	r0, r2
 8000af2:	4619      	mov	r1, r3
 8000af4:	f7ff fea6 	bl	8000844 <__aeabi_d2uiz>
 8000af8:	4603      	mov	r3, r0
 8000afa:	707b      	strb	r3, [r7, #1]
          uint8_t cb = (uint8_t)(128 + 0.713 * (r - y));
 8000afc:	797a      	ldrb	r2, [r7, #5]
 8000afe:	78bb      	ldrb	r3, [r7, #2]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe34 	bl	8000770 <__aeabi_i2d>
 8000b08:	a347      	add	r3, pc, #284	; (adr r3, 8000c28 <main+0x2a8>)
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	f7ff fbb3 	bl	8000278 <__aeabi_dmul>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	; (8000c48 <main+0x2c8>)
 8000b20:	f7ff fcda 	bl	80004d8 <__adddf3>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f7ff fe8a 	bl	8000844 <__aeabi_d2uiz>
 8000b30:	4603      	mov	r3, r0
 8000b32:	703b      	strb	r3, [r7, #0]

          ycrcbData[i] = (y << 8) | (cr << 3) | (cb >> 3);
 8000b34:	78bb      	ldrb	r3, [r7, #2]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b25a      	sxtb	r2, r3
 8000b3a:	787b      	ldrb	r3, [r7, #1]
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b25a      	sxtb	r2, r3
 8000b44:	783b      	ldrb	r3, [r7, #0]
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b259      	sxtb	r1, r3
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	4413      	add	r3, r2
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
      for (uint32_t i = 0; i < pixelCount; ++i)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f4ff af5d 	bcc.w	8000a24 <main+0xa4>
      }

      /* Display the continuous grap */
    UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000b6a:	4838      	ldr	r0, [pc, #224]	; (8000c4c <main+0x2cc>)
 8000b6c:	f000 fe7a 	bl	8001864 <UTIL_LCD_SetFuncDriver>
      BSP_LCD_FillRGBRect(0,0,0,(uint8_t *)ycrcbData,FRAME_WIDTH,FRAME_HEIGHT);
 8000b70:	23f0      	movs	r3, #240	; 0xf0
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	f005 fc5b 	bl	800643c <BSP_LCD_FillRGBRect>

      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_GRAY);
 8000b86:	4832      	ldr	r0, [pc, #200]	; (8000c50 <main+0x2d0>)
 8000b88:	f000 fed6 	bl	8001938 <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8000b8c:	4831      	ldr	r0, [pc, #196]	; (8000c54 <main+0x2d4>)
 8000b8e:	f000 febf 	bl	8001910 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(0, 5, (uint8_t *)"YCrCb Format", CENTER_MODE);
 8000b92:	2301      	movs	r3, #1
 8000b94:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <main+0x2d8>)
 8000b96:	2105      	movs	r1, #5
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 ff5d 	bl	8001a58 <UTIL_LCD_DisplayStringAt>

      /* for any Press Check whether the Continuous capture should be suspended or resumed */
      while (UserButtonPressed != RESET)
 8000b9e:	e01f      	b.n	8000be0 <main+0x260>
      {
        if(frame_suspended == 1)
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <main+0x2dc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d10b      	bne.n	8000bc0 <main+0x240>
        {
          if(HAL_DCMI_Resume(&hdcmi) != HAL_OK)
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <main+0x2b8>)
 8000baa:	f006 fd2d 	bl	8007608 <HAL_DCMI_Resume>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <main+0x238>
          {
            Error_Handler();
 8000bb4:	f000 fe4a 	bl	800184c <Error_Handler>
          }
          frame_suspended=0;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <main+0x2dc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e00c      	b.n	8000bda <main+0x25a>
        }
        else
        {
          if(HAL_DCMI_Suspend(&hdcmi) != HAL_OK)
 8000bc0:	481d      	ldr	r0, [pc, #116]	; (8000c38 <main+0x2b8>)
 8000bc2:	f006 fcc9 	bl	8007558 <HAL_DCMI_Suspend>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <main+0x250>
          {
            Error_Handler();
 8000bcc:	f000 fe3e 	bl	800184c <Error_Handler>
          }
          frame_suspended++;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <main+0x2dc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <main+0x2dc>)
 8000bd8:	6013      	str	r3, [r2, #0]
        }
        UserButtonPressed = RESET;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <main+0x2bc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
      while (UserButtonPressed != RESET)
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <main+0x2bc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1da      	bne.n	8000ba0 <main+0x220>
      }
      /* Check each time for new frame*/
      if(frame_captured != 0)
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <main+0x2e0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <main+0x280>
      {
        frame_captured = 0;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <main+0x2e0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
        BSP_LED_Toggle(LED5);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f004 fc87 	bl	800550c <BSP_LED_Toggle>
 8000bfe:	e70e      	b.n	8000a1e <main+0x9e>
      }
      else
      {
        BSP_LED_Off(LED5);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f004 fc55 	bl	80054b0 <BSP_LED_Off>
      for (uint32_t i = 0; i < pixelCount; ++i)
 8000c06:	e70a      	b.n	8000a1e <main+0x9e>
 8000c08:	e5604189 	.word	0xe5604189
 8000c0c:	3fd322d0 	.word	0x3fd322d0
 8000c10:	39581062 	.word	0x39581062
 8000c14:	3fe2c8b4 	.word	0x3fe2c8b4
 8000c18:	9fbe76c9 	.word	0x9fbe76c9
 8000c1c:	3fbd2f1a 	.word	0x3fbd2f1a
 8000c20:	ba5e353f 	.word	0xba5e353f
 8000c24:	3fe20c49 	.word	0x3fe20c49
 8000c28:	60418937 	.word	0x60418937
 8000c2c:	3fe6d0e5 	.word	0x3fe6d0e5
 8000c30:	200000e8 	.word	0x200000e8
 8000c34:	20000174 	.word	0x20000174
 8000c38:	20000124 	.word	0x20000124
 8000c3c:	20025a54 	.word	0x20025a54
 8000c40:	2000024c 	.word	0x2000024c
 8000c44:	20000000 	.word	0x20000000
 8000c48:	40600000 	.word	0x40600000
 8000c4c:	0800d2a8 	.word	0x0800d2a8
 8000c50:	ff808080 	.word	0xff808080
 8000c54:	ffff0000 	.word	0xffff0000
 8000c58:	0800bc28 	.word	0x0800bc28
 8000c5c:	20000244 	.word	0x20000244
 8000c60:	20000248 	.word	0x20000248

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09e      	sub	sp, #120	; 0x78
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2260      	movs	r2, #96	; 0x60
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00a ff9f 	bl	800bbb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c88:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000c8c:	f009 f9da 	bl	800a044 <HAL_PWREx_ControlVoltageScaling>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000c96:	f000 fdd9 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000cbc:	2350      	movs	r3, #80	; 0x50
 8000cbe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f009 faaf 	bl	800a23c <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ce4:	f000 fdb2 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce8:	231f      	movs	r3, #31
 8000cea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	2303      	movs	r3, #3
 8000cee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	2104      	movs	r1, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f00a f975 	bl	800aff4 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d10:	f000 fd9c 	bl	800184c <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3778      	adds	r7, #120	; 0x78
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000d20:	f009 fa6c 	bl	800a1fc <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d24:	f009 fa7a 	bl	800a21c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f009 fa17 	bl	800a15c <HAL_PWREx_ConfigSupply>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000d34:	f000 fd8a 	bl	800184c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d42:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <MX_DCMI_Init+0x9c>)
 8000d44:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_EMBEDDED;
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d48:	2210      	movs	r2, #16
 8000d4a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d4e:	2220      	movs	r2, #32
 8000d50:	609a      	str	r2, [r3, #8]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.SyncroCode.FrameEndCode = 0xF3;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d60:	22f3      	movs	r2, #243	; 0xf3
 8000d62:	77da      	strb	r2, [r3, #31]
  hdcmi.Init.SyncroCode.FrameStartCode = 0xF4;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d66:	22f4      	movs	r2, #244	; 0xf4
 8000d68:	771a      	strb	r2, [r3, #28]
  hdcmi.Init.SyncroCode.LineStartCode = 0xF2;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d6c:	22f2      	movs	r2, #242	; 0xf2
 8000d6e:	775a      	strb	r2, [r3, #29]
  hdcmi.Init.SyncroCode.LineEndCode = 0xF1;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d72:	22f1      	movs	r2, #241	; 0xf1
 8000d74:	779a      	strb	r2, [r3, #30]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000d96:	f006 f9c3 	bl	8007120 <HAL_DCMI_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_DCMI_Init+0x68>
  {
    Error_Handler();
 8000da0:	f000 fd54 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */
  SyncUnmask.FrameEndUnmask    = 0xFF;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_DCMI_Init+0xa0>)
 8000da6:	22ff      	movs	r2, #255	; 0xff
 8000da8:	70da      	strb	r2, [r3, #3]
  SyncUnmask.FrameStartUnmask  = 0xFF;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_DCMI_Init+0xa0>)
 8000dac:	22ff      	movs	r2, #255	; 0xff
 8000dae:	701a      	strb	r2, [r3, #0]
  SyncUnmask.LineEndUnmask     = 0xFF;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_DCMI_Init+0xa0>)
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	709a      	strb	r2, [r3, #2]
  SyncUnmask.LineStartUnmask   = 0xFF;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_DCMI_Init+0xa0>)
 8000db8:	22ff      	movs	r2, #255	; 0xff
 8000dba:	705a      	strb	r2, [r3, #1]
  if(HAL_DCMI_ConfigSyncUnmask(&hdcmi,&SyncUnmask) != HAL_OK)
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <MX_DCMI_Init+0xa0>)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_DCMI_Init+0x98>)
 8000dc0:	f006 fcfe 	bl	80077c0 <HAL_DCMI_ConfigSyncUnmask>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_DCMI_Init+0x92>
  {
    Error_Handler();
 8000dca:	f000 fd3f 	bl	800184c <Error_Handler>
  }
  /* USER CODE END DCMI_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000124 	.word	0x20000124
 8000dd8:	4202c000 	.word	0x4202c000
 8000ddc:	20025a50 	.word	0x20025a50

08000de0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_GPDMA1_Init+0x88>)
 8000de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <MX_GPDMA1_Init+0x88>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_GPDMA1_Init+0x88>)
 8000df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2054      	movs	r0, #84	; 0x54
 8000e0a:	f006 f894 	bl	8006f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8000e0e:	2054      	movs	r0, #84	; 0x54
 8000e10:	f006 f8ab 	bl	8006f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <MX_GPDMA1_Init+0x90>)
 8000e18:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e30:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e38:	2281      	movs	r2, #129	; 0x81
 8000e3a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e3e:	f006 fffd 	bl	8007e3c <HAL_DMAEx_List_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 8000e48:	f000 fd00 	bl	800184c <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_GPDMA1_Init+0x8c>)
 8000e50:	f006 ff92 	bl	8007d78 <HAL_DMA_ConfigChannelAttributes>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 8000e5a:	f000 fcf7 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	46020c00 	.word	0x46020c00
 8000e6c:	20000174 	.word	0x20000174
 8000e70:	40020650 	.word	0x40020650

08000e74 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f009 f8b3 	bl	8009fe4 <HAL_ICACHE_ConfigAssociativityMode>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000e84:	f000 fce2 	bl	800184c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000e88:	f009 f8cc 	bl	800a024 <HAL_ICACHE_Enable>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000e92:	f000 fcdb 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00a fe84 	bl	800bbb6 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000eb0:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <MX_FMC_Init+0xc8>)
 8000eb2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000eb6:	4a2c      	ldr	r2, [pc, #176]	; (8000f68 <MX_FMC_Init+0xcc>)
 8000eb8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ece:	2210      	movs	r2, #16
 8000ed0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f22:	230f      	movs	r3, #15
 8000f24:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000f26:	230f      	movs	r3, #15
 8000f28:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000f2a:	23ff      	movs	r3, #255	; 0xff
 8000f2c:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f32:	230f      	movs	r3, #15
 8000f34:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f36:	2310      	movs	r3, #16
 8000f38:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f3a:	2311      	movs	r3, #17
 8000f3c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_FMC_Init+0xc4>)
 8000f4a:	f00a fc01 	bl	800b750 <HAL_SRAM_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000f54:	f000 fc7a 	bl	800184c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001ec 	.word	0x200001ec
 8000f64:	420d0400 	.word	0x420d0400
 8000f68:	420d0504 	.word	0x420d0504

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f82:	4bbd      	ldr	r3, [pc, #756]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f88:	4abb      	ldr	r2, [pc, #748]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f92:	4bb9      	ldr	r3, [pc, #740]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	623b      	str	r3, [r7, #32]
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4bb5      	ldr	r3, [pc, #724]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa6:	4ab4      	ldr	r2, [pc, #720]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fb0:	4bb1      	ldr	r3, [pc, #708]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4bae      	ldr	r3, [pc, #696]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fc4:	4aac      	ldr	r2, [pc, #688]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fce:	4baa      	ldr	r3, [pc, #680]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fdc:	4ba6      	ldr	r3, [pc, #664]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fe2:	4aa5      	ldr	r2, [pc, #660]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fec:	4ba2      	ldr	r3, [pc, #648]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b9f      	ldr	r3, [pc, #636]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001000:	4a9d      	ldr	r2, [pc, #628]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800100a:	4b9b      	ldr	r3, [pc, #620]	; (8001278 <MX_GPIO_Init+0x30c>)
 800100c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b97      	ldr	r3, [pc, #604]	; (8001278 <MX_GPIO_Init+0x30c>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800101e:	4a96      	ldr	r2, [pc, #600]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001028:	4b93      	ldr	r3, [pc, #588]	; (8001278 <MX_GPIO_Init+0x30c>)
 800102a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001036:	4b90      	ldr	r3, [pc, #576]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103c:	4a8e      	ldr	r2, [pc, #568]	; (8001278 <MX_GPIO_Init+0x30c>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001046:	4b8c      	ldr	r3, [pc, #560]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001054:	4b88      	ldr	r3, [pc, #544]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105a:	4a87      	ldr	r2, [pc, #540]	; (8001278 <MX_GPIO_Init+0x30c>)
 800105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001060:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001064:	4b84      	ldr	r3, [pc, #528]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800106a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001072:	4b81      	ldr	r3, [pc, #516]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001078:	4a7f      	ldr	r2, [pc, #508]	; (8001278 <MX_GPIO_Init+0x30c>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001082:	4b7d      	ldr	r3, [pc, #500]	; (8001278 <MX_GPIO_Init+0x30c>)
 8001084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CAMERA_XSDN_Pin|CAMERA_RSTI_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	210c      	movs	r1, #12
 8001094:	4879      	ldr	r0, [pc, #484]	; (800127c <MX_GPIO_Init+0x310>)
 8001096:	f008 f8d7 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	4878      	ldr	r0, [pc, #480]	; (8001280 <MX_GPIO_Init+0x314>)
 80010a0:	f008 f8d2 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	4876      	ldr	r0, [pc, #472]	; (8001284 <MX_GPIO_Init+0x318>)
 80010aa:	f008 f8cd 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	4874      	ldr	r0, [pc, #464]	; (8001288 <MX_GPIO_Init+0x31c>)
 80010b6:	f008 f8c7 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c0:	4872      	ldr	r0, [pc, #456]	; (800128c <MX_GPIO_Init+0x320>)
 80010c2:	f008 f8c1 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC10 PC12 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 80010c6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010d8:	230c      	movs	r3, #12
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	486b      	ldr	r0, [pc, #428]	; (8001290 <MX_GPIO_Init+0x324>)
 80010e4:	f007 fde2 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 IBUS_SENSE_Pin VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|IBUS_SENSE_Pin|VBUS_SENSE_Pin;
 80010e8:	f248 0321 	movw	r3, #32801	; 0x8021
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4862      	ldr	r0, [pc, #392]	; (8001288 <MX_GPIO_Init+0x31c>)
 80010fe:	f007 fdd5 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_ACC_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 8001102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001108:	4b62      	ldr	r3, [pc, #392]	; (8001294 <MX_GPIO_Init+0x328>)
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	485b      	ldr	r0, [pc, #364]	; (8001284 <MX_GPIO_Init+0x318>)
 8001118:	f007 fdc8 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 800112c:	2306      	movs	r3, #6
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	4852      	ldr	r0, [pc, #328]	; (8001280 <MX_GPIO_Init+0x314>)
 8001138:	f007 fdb8 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800113c:	2318      	movs	r3, #24
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 800114c:	2303      	movs	r3, #3
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	484a      	ldr	r0, [pc, #296]	; (8001280 <MX_GPIO_Init+0x314>)
 8001158:	f007 fda8 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800115c:	2340      	movs	r3, #64	; 0x40
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800116c:	230d      	movs	r3, #13
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4848      	ldr	r0, [pc, #288]	; (8001298 <MX_GPIO_Init+0x32c>)
 8001178:	f007 fd98 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDCARD_DETECT_Pin;
 800117c:	2301      	movs	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001180:	4b44      	ldr	r3, [pc, #272]	; (8001294 <MX_GPIO_Init+0x328>)
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDCARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	483b      	ldr	r0, [pc, #236]	; (800127c <MX_GPIO_Init+0x310>)
 8001190:	f007 fd8c 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001194:	2310      	movs	r3, #16
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80011a4:	2306      	movs	r3, #6
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	483b      	ldr	r0, [pc, #236]	; (800129c <MX_GPIO_Init+0x330>)
 80011b0:	f007 fd7c 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_PLUG_Pin */
  GPIO_InitStruct.Pin = CAMERA_PLUG_Pin;
 80011b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <MX_GPIO_Init+0x328>)
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAMERA_PLUG_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4835      	ldr	r0, [pc, #212]	; (80012a0 <MX_GPIO_Init+0x334>)
 80011ca:	f007 fd6f 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ce:	2308      	movs	r3, #8
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80011de:	2306      	movs	r3, #6
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	482b      	ldr	r0, [pc, #172]	; (8001298 <MX_GPIO_Init+0x32c>)
 80011ea:	f007 fd5f 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_XSDN_Pin CAMERA_RSTI_Pin */
  GPIO_InitStruct.Pin = CAMERA_XSDN_Pin|CAMERA_RSTI_Pin;
 80011ee:	230c      	movs	r3, #12
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	481d      	ldr	r0, [pc, #116]	; (800127c <MX_GPIO_Init+0x310>)
 8001206:	f007 fd51 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_Pin MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|MFX_IRQ_OUT_Pin;
 800120a:	f242 0320 	movw	r3, #8224	; 0x2020
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_GPIO_Init+0x328>)
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <MX_GPIO_Init+0x324>)
 8001220:	f007 fd44 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_GPIO_Init+0x328>)
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_GPIO_Init+0x314>)
 800123a:	f007 fd37 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	4619      	mov	r1, r3
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <MX_GPIO_Init+0x314>)
 8001256:	f007 fd29 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800125a:	2304      	movs	r3, #4
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001266:	2302      	movs	r3, #2
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800126a:	230c      	movs	r3, #12
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	e016      	b.n	80012a4 <MX_GPIO_Init+0x338>
 8001276:	bf00      	nop
 8001278:	46020c00 	.word	0x46020c00
 800127c:	42022000 	.word	0x42022000
 8001280:	42020400 	.word	0x42020400
 8001284:	42021c00 	.word	0x42021c00
 8001288:	42020000 	.word	0x42020000
 800128c:	42021400 	.word	0x42021400
 8001290:	42020800 	.word	0x42020800
 8001294:	10110000 	.word	0x10110000
 8001298:	42020c00 	.word	0x42020c00
 800129c:	42021000 	.word	0x42021000
 80012a0:	42021800 	.word	0x42021800
 80012a4:	4897      	ldr	r0, [pc, #604]	; (8001504 <MX_GPIO_Init+0x598>)
 80012a6:	f007 fd01 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4891      	ldr	r0, [pc, #580]	; (8001508 <MX_GPIO_Init+0x59c>)
 80012c2:	f007 fcf3 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80012c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d8:	2307      	movs	r3, #7
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	488a      	ldr	r0, [pc, #552]	; (800150c <MX_GPIO_Init+0x5a0>)
 80012e4:	f007 fce2 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80012e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80012fa:	230a      	movs	r3, #10
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4881      	ldr	r0, [pc, #516]	; (800150c <MX_GPIO_Init+0x5a0>)
 8001306:	f007 fcd1 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800131a:	230d      	movs	r3, #13
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	487a      	ldr	r0, [pc, #488]	; (8001510 <MX_GPIO_Init+0x5a4>)
 8001326:	f007 fcc1 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800132a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4872      	ldr	r0, [pc, #456]	; (800150c <MX_GPIO_Init+0x5a0>)
 8001344:	f007 fcb2 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001348:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134e:	2312      	movs	r3, #18
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001352:	2301      	movs	r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800135a:	2304      	movs	r3, #4
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	486b      	ldr	r0, [pc, #428]	; (8001514 <MX_GPIO_Init+0x5a8>)
 8001366:	f007 fca1 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800136a:	23c0      	movs	r3, #192	; 0xc0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800137a:	2309      	movs	r3, #9
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4864      	ldr	r0, [pc, #400]	; (8001518 <MX_GPIO_Init+0x5ac>)
 8001386:	f007 fc91 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 800139c:	2306      	movs	r3, #6
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	485a      	ldr	r0, [pc, #360]	; (8001510 <MX_GPIO_Init+0x5a4>)
 80013a8:	f007 fc80 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ac:	2301      	movs	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80013bc:	2303      	movs	r3, #3
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4854      	ldr	r0, [pc, #336]	; (8001518 <MX_GPIO_Init+0x5ac>)
 80013c8:	f007 fc70 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013cc:	230e      	movs	r3, #14
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80013dc:	230a      	movs	r3, #10
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	484c      	ldr	r0, [pc, #304]	; (8001518 <MX_GPIO_Init+0x5ac>)
 80013e8:	f007 fc60 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA2 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 80013ec:	23cc      	movs	r3, #204	; 0xcc
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80013fc:	230a      	movs	r3, #10
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4841      	ldr	r0, [pc, #260]	; (800150c <MX_GPIO_Init+0x5a0>)
 8001408:	f007 fc50 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1;
 800140c:	2307      	movs	r3, #7
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800141c:	230a      	movs	r3, #10
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	483d      	ldr	r0, [pc, #244]	; (800151c <MX_GPIO_Init+0x5b0>)
 8001428:	f007 fc40 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800142c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001432:	2312      	movs	r3, #18
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001436:	2301      	movs	r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800143e:	2304      	movs	r3, #4
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4834      	ldr	r0, [pc, #208]	; (800151c <MX_GPIO_Init+0x5b0>)
 800144a:	f007 fc2f 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800145e:	2307      	movs	r3, #7
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	482b      	ldr	r0, [pc, #172]	; (8001518 <MX_GPIO_Init+0x5ac>)
 800146a:	f007 fc1f 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001480:	2307      	movs	r3, #7
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4824      	ldr	r0, [pc, #144]	; (800151c <MX_GPIO_Init+0x5b0>)
 800148c:	f007 fc0e 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001496:	2303      	movs	r3, #3
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	481d      	ldr	r0, [pc, #116]	; (800151c <MX_GPIO_Init+0x5b0>)
 80014a6:	f007 fc01 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80014aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4813      	ldr	r0, [pc, #76]	; (8001510 <MX_GPIO_Init+0x5a4>)
 80014c4:	f007 fbf2 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80014c8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80014da:	2309      	movs	r3, #9
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_GPIO_Init+0x5b0>)
 80014e6:	f007 fbe1 	bl	8008cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2018      	movs	r0, #24
 80014f0:	f005 fd21 	bl	8006f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80014f4:	2018      	movs	r0, #24
 80014f6:	f005 fd38 	bl	8006f6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fa:	bf00      	nop
 80014fc:	3738      	adds	r7, #56	; 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	42020c00 	.word	0x42020c00
 8001508:	42021c00 	.word	0x42021c00
 800150c:	42020000 	.word	0x42020000
 8001510:	42021400 	.word	0x42021400
 8001514:	42021800 	.word	0x42021800
 8001518:	42020800 	.word	0x42020800
 800151c:	42020400 	.word	0x42020400

08001520 <MPU_Config>:
  * @note   The Base Address is External SRAM
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
  MPU_Attributes_InitTypeDef   attr;
  MPU_Region_InitTypeDef       region;

  /* Disable MPU before perloading and config update */
  HAL_MPU_Disable();
 8001526:	f005 fd5b 	bl	8006fe0 <HAL_MPU_Disable>

  /* Define cacheable memory via MPU */
  attr.Number             = MPU_ATTRIBUTES_NUMBER0;
 800152a:	2300      	movs	r3, #0
 800152c:	753b      	strb	r3, [r7, #20]
  attr.Attributes         = 0 ;
 800152e:	2300      	movs	r3, #0
 8001530:	757b      	strb	r3, [r7, #21]
  HAL_MPU_ConfigMemoryAttributes(&attr);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4618      	mov	r0, r3
 8001538:	f005 fd72 	bl	8007020 <HAL_MPU_ConfigMemoryAttributes>

  /* BaseAddress-LimitAddress configuration */
  region.Enable           = MPU_REGION_ENABLE;
 800153c:	2301      	movs	r3, #1
 800153e:	713b      	strb	r3, [r7, #4]
  region.Number           = MPU_REGION_NUMBER0;
 8001540:	2300      	movs	r3, #0
 8001542:	717b      	strb	r3, [r7, #5]
  region.AttributesIndex  = MPU_ATTRIBUTES_NUMBER0;
 8001544:	2300      	movs	r3, #0
 8001546:	743b      	strb	r3, [r7, #16]
  region.BaseAddress      = FMC_ADDRESS;
 8001548:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800154c:	60bb      	str	r3, [r7, #8]
  region.LimitAddress     = FMC_ADDRESS + REGION_SIZE - 1;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MPU_Config+0x54>)
 8001550:	60fb      	str	r3, [r7, #12]
  region.AccessPermission = MPU_REGION_ALL_RW;
 8001552:	2301      	movs	r3, #1
 8001554:	747b      	strb	r3, [r7, #17]
  region.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	74bb      	strb	r3, [r7, #18]
  region.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	74fb      	strb	r3, [r7, #19]
  HAL_MPU_ConfigRegion(&region);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f005 fd4f 	bl	8007004 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001566:	2004      	movs	r0, #4
 8001568:	f005 fd1a 	bl	8006fa0 <HAL_MPU_Enable>
}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	78fffffe 	.word	0x78fffffe

08001578 <HAL_DCMI_FrameEventCallback>:

/**
  * @brief  Camera Frame Event callback.
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  frame_captured++;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_DCMI_FrameEventCallback+0x20>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_DCMI_FrameEventCallback+0x20>)
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000248 	.word	0x20000248

0800159c <OV5640_Config>:
  * @param  None
  * @retval 0   OK
  *         !=0 KO
  */
static uint32_t OV5640_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af00      	add	r7, sp, #0
  OV5640_IO_t              IOCtx;
  uint32_t                 id;
  uint32_t                 status = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  static OV5640_Object_t   OV5640Obj;
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the Camera driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 80015a6:	2378      	movs	r3, #120	; 0x78
 80015a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  IOCtx.Init        = BSP_I2C2_Init;
 80015aa:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <OV5640_Config+0x158>)
 80015ac:	61fb      	str	r3, [r7, #28]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <OV5640_Config+0x15c>)
 80015b0:	623b      	str	r3, [r7, #32]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg16;
 80015b2:	4b52      	ldr	r3, [pc, #328]	; (80016fc <OV5640_Config+0x160>)
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  IOCtx.WriteReg    = BSP_I2C2_WriteReg16;
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <OV5640_Config+0x164>)
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  IOCtx.GetTick     = BSP_GetTick;
 80015ba:	4b52      	ldr	r3, [pc, #328]	; (8001704 <OV5640_Config+0x168>)
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Reset sensor */
  gpio_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 80015be:	230c      	movs	r3, #12
 80015c0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Alternate  = GPIO_AF10_DCMI;
 80015ca:	230a      	movs	r3, #10
 80015cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	484d      	ldr	r0, [pc, #308]	; (8001708 <OV5640_Config+0x16c>)
 80015d4:	f007 fb6a 	bl	8008cac <HAL_GPIO_Init>

  /* Camera sensor RESET sequence */
  /* Assert the camera STANDBY pin (active high)  */
  HAL_GPIO_WritePin(XSDN_PORT, XSDN_PIN, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2108      	movs	r1, #8
 80015dc:	484a      	ldr	r0, [pc, #296]	; (8001708 <OV5640_Config+0x16c>)
 80015de:	f007 fe33 	bl	8009248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RSTI_PORT, RSTI_PIN, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2104      	movs	r1, #4
 80015e6:	4848      	ldr	r0, [pc, #288]	; (8001708 <OV5640_Config+0x16c>)
 80015e8:	f007 fe2e 	bl	8009248 <HAL_GPIO_WritePin>
  HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 80015ec:	2064      	movs	r0, #100	; 0x64
 80015ee:	f005 fba3 	bl	8006d38 <HAL_Delay>

  /* De-assert the camera STANDBY pin (active high) */
  HAL_GPIO_WritePin(XSDN_PORT, XSDN_PIN, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2108      	movs	r1, #8
 80015f6:	4844      	ldr	r0, [pc, #272]	; (8001708 <OV5640_Config+0x16c>)
 80015f8:	f007 fe26 	bl	8009248 <HAL_GPIO_WritePin>
  HAL_Delay(3);     /* RST de-asserted and XSDN asserted during 3ms */
 80015fc:	2003      	movs	r0, #3
 80015fe:	f005 fb9b 	bl	8006d38 <HAL_Delay>

  /* De-assert the camera RSTI pin (active low) */
  HAL_GPIO_WritePin(RSTI_PORT, RSTI_PIN, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	2104      	movs	r1, #4
 8001606:	4840      	ldr	r0, [pc, #256]	; (8001708 <OV5640_Config+0x16c>)
 8001608:	f007 fe1e 	bl	8009248 <HAL_GPIO_WritePin>
  HAL_Delay(20);     /* RST de-asserted during 20ms */
 800160c:	2014      	movs	r0, #20
 800160e:	f005 fb93 	bl	8006d38 <HAL_Delay>

  /* Verify that the Camera module is plugged in */
  gpio_init_structure.Pin       = CAM_PLUG_PIN;
 8001612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001616:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(CAM_PLUG_PORT, &gpio_init_structure);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4839      	ldr	r0, [pc, #228]	; (800170c <OV5640_Config+0x170>)
 8001626:	f007 fb41 	bl	8008cac <HAL_GPIO_Init>

  if(((uint32_t)HAL_GPIO_ReadPin(CAM_PLUG_PORT, CAM_PLUG_PIN) & CAM_PLUG_PIN) == CAM_PLUG_PIN)
 800162a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162e:	4837      	ldr	r0, [pc, #220]	; (800170c <OV5640_Config+0x170>)
 8001630:	f007 fdf2 	bl	8009218 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163e:	d101      	bne.n	8001644 <OV5640_Config+0xa8>
  {
    status = 1;
 8001640:	2301      	movs	r3, #1
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /**/
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4831      	ldr	r0, [pc, #196]	; (8001710 <OV5640_Config+0x174>)
 800164c:	f003 f8cc 	bl	80047e8 <OV5640_RegisterBusIO>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <OV5640_Config+0xc0>
  {
    status = OV5640_ERROR;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /*Read ID*/
  if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4619      	mov	r1, r3
 8001662:	482b      	ldr	r0, [pc, #172]	; (8001710 <OV5640_Config+0x174>)
 8001664:	f003 fc4c 	bl	8004f00 <OV5640_ReadID>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <OV5640_Config+0xd8>
  {
    status = OV5640_ERROR;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if(id == OV5640_ID)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f245 6240 	movw	r2, #22080	; 0x5640
 800167a:	4293      	cmp	r3, r2
 800167c:	d131      	bne.n	80016e2 <OV5640_Config+0x146>
  {
    /*Initialize*/
    if(OV5640_Init(&OV5640Obj, CAMERA_R320x240, CAMERA_PF_RGB565) != OV5640_OK)
 800167e:	2200      	movs	r2, #0
 8001680:	2101      	movs	r1, #1
 8001682:	4823      	ldr	r0, [pc, #140]	; (8001710 <OV5640_Config+0x174>)
 8001684:	f003 f8f2 	bl	800486c <OV5640_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <OV5640_Config+0xf8>
    {
      status = OV5640_ERROR;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Enable and set SynchroCodes CCIR to the camera Module */
    pSyncroCodes.FrameStartCode = 0xF4;
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <OV5640_Config+0x178>)
 8001696:	22f4      	movs	r2, #244	; 0xf4
 8001698:	701a      	strb	r2, [r3, #0]
    pSyncroCodes.FrameEndCode   = 0xF3;
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <OV5640_Config+0x178>)
 800169c:	22f3      	movs	r2, #243	; 0xf3
 800169e:	70da      	strb	r2, [r3, #3]
    pSyncroCodes.LineStartCode  = 0xF2;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <OV5640_Config+0x178>)
 80016a2:	22f2      	movs	r2, #242	; 0xf2
 80016a4:	705a      	strb	r2, [r3, #1]
    pSyncroCodes.LineEndCode    = 0xF1;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <OV5640_Config+0x178>)
 80016a8:	22f1      	movs	r2, #241	; 0xf1
 80016aa:	709a      	strb	r2, [r3, #2]

    if(OV5640_EmbeddedSynchroConfig(&OV5640Obj,&pSyncroCodes) !=OV5640_OK)
 80016ac:	4919      	ldr	r1, [pc, #100]	; (8001714 <OV5640_Config+0x178>)
 80016ae:	4818      	ldr	r0, [pc, #96]	; (8001710 <OV5640_Config+0x174>)
 80016b0:	f003 fd62 	bl	8005178 <OV5640_EmbeddedSynchroConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <OV5640_Config+0x124>
    {
      status = OV5640_ERROR;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
    }

    HAL_Delay(100);
 80016c0:	2064      	movs	r0, #100	; 0x64
 80016c2:	f005 fb39 	bl	8006d38 <HAL_Delay>
    /* Disable Flip and mirror effect */
    if(OV5640_MirrorFlipConfig(&OV5640Obj, OV5640_MIRROR_FLIP_NONE)!= OV5640_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4811      	ldr	r0, [pc, #68]	; (8001710 <OV5640_Config+0x174>)
 80016ca:	f003 fc6c 	bl	8004fa6 <OV5640_MirrorFlipConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <OV5640_Config+0x13e>
    {
      status = OV5640_ERROR;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	; 0x64
 80016dc:	f005 fb2c 	bl	8006d38 <HAL_Delay>
 80016e0:	e002      	b.n	80016e8 <OV5640_Config+0x14c>
  }
  else
  {
    status = OV5640_ERROR;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return status;
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3738      	adds	r7, #56	; 0x38
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08005569 	.word	0x08005569
 80016f8:	080055dd 	.word	0x080055dd
 80016fc:	080057bd 	.word	0x080057bd
 8001700:	08005761 	.word	0x08005761
 8001704:	08005819 	.word	0x08005819
 8001708:	42022000 	.word	0x42022000
 800170c:	42021800 	.word	0x42021800
 8001710:	20025a58 	.word	0x20025a58
 8001714:	20025a4c 	.word	0x20025a4c

08001718 <Example_Description>:
  * @brief  Display main example messages
  * @param  None
  * @retval None
  */
static void Example_Description(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af02      	add	r7, sp, #8
  /* Set GUI functions */
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800171e:	4835      	ldr	r0, [pc, #212]	; (80017f4 <Example_Description+0xdc>)
 8001720:	f000 f8a0 	bl	8001864 <UTIL_LCD_SetFuncDriver>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f94a 	bl	80019c0 <UTIL_LCD_Clear>

  /* Set font */
  UTIL_LCD_SetFont(&Font16);
 800172c:	4832      	ldr	r0, [pc, #200]	; (80017f8 <Example_Description+0xe0>)
 800172e:	f000 f917 	bl	8001960 <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8001732:	f04f 30ff 	mov.w	r0, #4294967295
 8001736:	f000 f943 	bl	80019c0 <UTIL_LCD_Clear>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800173a:	f04f 30ff 	mov.w	r0, #4294967295
 800173e:	f000 f8e7 	bl	8001910 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_DARKBLUE);
 8001742:	482e      	ldr	r0, [pc, #184]	; (80017fc <Example_Description+0xe4>)
 8001744:	f000 f8f8 	bl	8001938 <UTIL_LCD_SetBackColor>

  /* Display LCD messages */
  UTIL_LCD_FillRect(0, 5, 320, 80, UTIL_LCD_COLOR_DARKBLUE);
 8001748:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <Example_Description+0xe4>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2350      	movs	r3, #80	; 0x50
 800174e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001752:	2105      	movs	r1, #5
 8001754:	2000      	movs	r0, #0
 8001756:	f000 fa2d 	bl	8001bb4 <UTIL_LCD_FillRect>
  UTIL_LCD_DisplayStringAt(0, 5, (uint8_t *)" Continuous Capture in ", CENTER_MODE);
 800175a:	2301      	movs	r3, #1
 800175c:	4a28      	ldr	r2, [pc, #160]	; (8001800 <Example_Description+0xe8>)
 800175e:	2105      	movs	r1, #5
 8001760:	2000      	movs	r0, #0
 8001762:	f000 f979 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 20, (uint8_t *)"Embedded Synchronization Mode", CENTER_MODE);
 8001766:	2301      	movs	r3, #1
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <Example_Description+0xec>)
 800176a:	2114      	movs	r1, #20
 800176c:	2000      	movs	r0, #0
 800176e:	f000 f973 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)" and Suspend-Resume ", CENTER_MODE);
 8001772:	2301      	movs	r3, #1
 8001774:	4a24      	ldr	r2, [pc, #144]	; (8001808 <Example_Description+0xf0>)
 8001776:	2123      	movs	r1, #35	; 0x23
 8001778:	2000      	movs	r0, #0
 800177a:	f000 f96d 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 50, (uint8_t *)" example: YCrCb Format ", CENTER_MODE);
 800177e:	2301      	movs	r3, #1
 8001780:	4a22      	ldr	r2, [pc, #136]	; (800180c <Example_Description+0xf4>)
 8001782:	2132      	movs	r1, #50	; 0x32
 8001784:	2000      	movs	r0, #0
 8001786:	f000 f967 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 800178a:	4821      	ldr	r0, [pc, #132]	; (8001810 <Example_Description+0xf8>)
 800178c:	f000 f8e8 	bl	8001960 <UTIL_LCD_SetFont>
  UTIL_LCD_FillRect(0, 150, 320, 50, UTIL_LCD_COLOR_DARKBLUE);
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <Example_Description+0xe4>)
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2332      	movs	r3, #50	; 0x32
 8001796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800179a:	2196      	movs	r1, #150	; 0x96
 800179c:	2000      	movs	r0, #0
 800179e:	f000 fa09 	bl	8001bb4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80017a2:	f04f 30ff 	mov.w	r0, #4294967295
 80017a6:	f000 f8b3 	bl	8001910 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_DARKBLUE);
 80017aa:	4814      	ldr	r0, [pc, #80]	; (80017fc <Example_Description+0xe4>)
 80017ac:	f000 f8c4 	bl	8001938 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"Press USER push-button", CENTER_MODE);
 80017b0:	2301      	movs	r3, #1
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <Example_Description+0xfc>)
 80017b4:	2196      	movs	r1, #150	; 0x96
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f94e 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 165, (uint8_t *)"to start:", CENTER_MODE);
 80017bc:	2301      	movs	r3, #1
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <Example_Description+0x100>)
 80017c0:	21a5      	movs	r1, #165	; 0xa5
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f948 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 180, (uint8_t *)"then to Suspend/Resume ", CENTER_MODE);
 80017c8:	2301      	movs	r3, #1
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <Example_Description+0x104>)
 80017cc:	21b4      	movs	r1, #180	; 0xb4
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f942 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_GRAY);
 80017d4:	4812      	ldr	r0, [pc, #72]	; (8001820 <Example_Description+0x108>)
 80017d6:	f000 f8af 	bl	8001938 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ORANGE);
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <Example_Description+0x10c>)
 80017dc:	f000 f898 	bl	8001910 <UTIL_LCD_SetTextColor>
  UTIL_LCD_DisplayStringAt(0, 210, (uint8_t *)"CREATED BY : JAAFER HOSNI ", CENTER_MODE);
 80017e0:	2301      	movs	r3, #1
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <Example_Description+0x110>)
 80017e4:	21d2      	movs	r1, #210	; 0xd2
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f936 	bl	8001a58 <UTIL_LCD_DisplayStringAt>
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	0800d2a8 	.word	0x0800d2a8
 80017f8:	20000004 	.word	0x20000004
 80017fc:	ff000080 	.word	0xff000080
 8001800:	0800bc38 	.word	0x0800bc38
 8001804:	0800bc50 	.word	0x0800bc50
 8001808:	0800bc70 	.word	0x0800bc70
 800180c:	0800bc88 	.word	0x0800bc88
 8001810:	2000000c 	.word	0x2000000c
 8001814:	0800bca0 	.word	0x0800bca0
 8001818:	0800bcb8 	.word	0x0800bcb8
 800181c:	0800bcc4 	.word	0x0800bcc4
 8001820:	ff808080 	.word	0xff808080
 8001824:	ffffa500 	.word	0xffffa500
 8001828:	0800bcdc 	.word	0x0800bcdc

0800182c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  UserButtonPressed = SET;
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	20025a54 	.word	0x20025a54

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    BSP_LED_Toggle(LED6);
 8001854:	2001      	movs	r0, #1
 8001856:	f003 fe59 	bl	800550c <BSP_LED_Toggle>
    HAL_Delay(100);
 800185a:	2064      	movs	r0, #100	; 0x64
 800185c:	f005 fa6c 	bl	8006d38 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 8001860:	e7f8      	b.n	8001854 <Error_Handler+0x8>
	...

08001864 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 8001872:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 800187a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a1e      	ldr	r2, [pc, #120]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 8001882:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 800188a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 8001892:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 800189a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a16      	ldr	r2, [pc, #88]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018a2:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018aa:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018b2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	4a10      	ldr	r2, [pc, #64]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018ba:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018c2:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <UTIL_LCD_SetFuncDriver+0x9c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <UTIL_LCD_SetFuncDriver+0x9c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <UTIL_LCD_SetFuncDriver+0xa0>)
 80018d6:	4611      	mov	r1, r2
 80018d8:	2000      	movs	r0, #0
 80018da:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a09      	ldr	r2, [pc, #36]	; (8001908 <UTIL_LCD_SetFuncDriver+0xa4>)
 80018e2:	4611      	mov	r1, r2
 80018e4:	2000      	movs	r0, #0
 80018e6:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <UTIL_LCD_SetFuncDriver+0x98>)
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <UTIL_LCD_SetFuncDriver+0xa8>)
 80018ee:	4611      	mov	r1, r2
 80018f0:	2000      	movs	r0, #0
 80018f2:	4798      	blx	r3
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20025ac0 	.word	0x20025ac0
 8001900:	20025a80 	.word	0x20025a80
 8001904:	20025a94 	.word	0x20025a94
 8001908:	20025a98 	.word	0x20025a98
 800190c:	20025a9c 	.word	0x20025a9c

08001910 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <UTIL_LCD_SetTextColor+0x24>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <UTIL_LCD_SetTextColor+0x24>)
 800191e:	015b      	lsls	r3, r3, #5
 8001920:	4413      	add	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20025a80 	.word	0x20025a80

08001938 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <UTIL_LCD_SetBackColor+0x24>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <UTIL_LCD_SetBackColor+0x24>)
 8001946:	015b      	lsls	r3, r3, #5
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20025a80 	.word	0x20025a80

08001960 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <UTIL_LCD_SetFont+0x24>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <UTIL_LCD_SetFont+0x24>)
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	4413      	add	r3, r2
 8001972:	3308      	adds	r3, #8
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20025a80 	.word	0x20025a80

08001988 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b087      	sub	sp, #28
 800198c:	af02      	add	r7, sp, #8
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <UTIL_LCD_FillRGBRect+0x30>)
 8001998:	685c      	ldr	r4, [r3, #4]
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <UTIL_LCD_FillRGBRect+0x34>)
 800199c:	6918      	ldr	r0, [r3, #16]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	47a0      	blx	r4
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20025ac0 	.word	0x20025ac0
 80019bc:	20025a80 	.word	0x20025a80

080019c0 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <UTIL_LCD_Clear+0x28>)
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <UTIL_LCD_Clear+0x28>)
 80019ce:	6999      	ldr	r1, [r3, #24]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	460b      	mov	r3, r1
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f8eb 	bl	8001bb4 <UTIL_LCD_FillRect>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20025a80 	.word	0x20025a80

080019ec <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	4613      	mov	r3, r2
 80019f8:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <UTIL_LCD_DisplayChar+0x68>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <UTIL_LCD_DisplayChar+0x68>)
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	4413      	add	r3, r2
 8001a04:	3308      	adds	r3, #8
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8001a0e:	4911      	ldr	r1, [pc, #68]	; (8001a54 <UTIL_LCD_DisplayChar+0x68>)
 8001a10:	68c9      	ldr	r1, [r1, #12]
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <UTIL_LCD_DisplayChar+0x68>)
 8001a14:	0149      	lsls	r1, r1, #5
 8001a16:	4401      	add	r1, r0
 8001a18:	3108      	adds	r1, #8
 8001a1a:	6809      	ldr	r1, [r1, #0]
 8001a1c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001a1e:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <UTIL_LCD_DisplayChar+0x68>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <UTIL_LCD_DisplayChar+0x68>)
 8001a28:	015b      	lsls	r3, r3, #5
 8001a2a:	4403      	add	r3, r0
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	3307      	adds	r3, #7
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da00      	bge.n	8001a3a <UTIL_LCD_DisplayChar+0x4e>
 8001a38:	3307      	adds	r3, #7
 8001a3a:	10db      	asrs	r3, r3, #3
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001a40:	4413      	add	r3, r2
 8001a42:	461a      	mov	r2, r3
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f8ee 	bl	8001c28 <DrawChar>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20025a80 	.word	0x20025a80

08001a58 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001a7a:	e002      	b.n	8001a82 <UTIL_LCD_DisplayStringAt+0x2a>
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	61ba      	str	r2, [r7, #24]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f6      	bne.n	8001a7c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001a8e:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	4946      	ldr	r1, [pc, #280]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a98:	0152      	lsls	r2, r2, #5
 8001a9a:	440a      	add	r2, r1
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	8892      	ldrh	r2, [r2, #4]
 8001aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d018      	beq.n	8001ae0 <UTIL_LCD_DisplayStringAt+0x88>
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	dc2a      	bgt.n	8001b08 <UTIL_LCD_DisplayStringAt+0xb0>
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d002      	beq.n	8001abc <UTIL_LCD_DisplayStringAt+0x64>
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d015      	beq.n	8001ae6 <UTIL_LCD_DisplayStringAt+0x8e>
 8001aba:	e025      	b.n	8001b08 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001ac4:	68d2      	ldr	r2, [r2, #12]
 8001ac6:	493a      	ldr	r1, [pc, #232]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001ac8:	0152      	lsls	r2, r2, #5
 8001aca:	440a      	add	r2, r1
 8001acc:	3208      	adds	r2, #8
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	8892      	ldrh	r2, [r2, #4]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001ade:	e016      	b.n	8001b0e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001ae4:	e013      	b.n	8001b0e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001aee:	68d2      	ldr	r2, [r2, #12]
 8001af0:	492f      	ldr	r1, [pc, #188]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001af2:	0152      	lsls	r2, r2, #5
 8001af4:	440a      	add	r2, r1
 8001af6:	3208      	adds	r2, #8
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	8892      	ldrh	r2, [r2, #4]
 8001afc:	fb03 f202 	mul.w	r2, r3, r2
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b06:	e002      	b.n	8001b0e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b0c:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <UTIL_LCD_DisplayStringAt+0xc4>
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b1a:	d31b      	bcc.n	8001b54 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001b20:	e018      	b.n	8001b54 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2c:	f7ff ff5e 	bl	80019ec <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	4413      	add	r3, r2
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	889b      	ldrh	r3, [r3, #4]
 8001b40:	461a      	mov	r2, r3
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	4413      	add	r3, r2
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
    i++;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	3301      	adds	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b64:	6959      	ldr	r1, [r3, #20]
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b6c:	015b      	lsls	r3, r3, #5
 8001b6e:	4403      	add	r3, r0
 8001b70:	3308      	adds	r3, #8
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	889b      	ldrh	r3, [r3, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	fb00 f303 	mul.w	r3, r0, r3
 8001b7e:	1acb      	subs	r3, r1, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	490b      	ldr	r1, [pc, #44]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b84:	68c9      	ldr	r1, [r1, #12]
 8001b86:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b88:	0149      	lsls	r1, r1, #5
 8001b8a:	4401      	add	r1, r0
 8001b8c:	3108      	adds	r1, #8
 8001b8e:	6809      	ldr	r1, [r1, #0]
 8001b90:	8889      	ldrh	r1, [r1, #4]
 8001b92:	428b      	cmp	r3, r1
 8001b94:	bf2c      	ite	cs
 8001b96:	2301      	movcs	r3, #1
 8001b98:	2300      	movcc	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1be      	bne.n	8001b22 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20025a80 	.word	0x20025a80

08001bb4 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <UTIL_LCD_FillRect+0x6c>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d11a      	bne.n	8001c00 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <UTIL_LCD_FillRect+0x70>)
 8001bcc:	691c      	ldr	r4, [r3, #16]
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <UTIL_LCD_FillRect+0x6c>)
 8001bd0:	6918      	ldr	r0, [r3, #16]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	f003 021f 	and.w	r2, r3, #31
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	0a9b      	lsrs	r3, r3, #10
 8001bde:	015b      	lsls	r3, r3, #5
 8001be0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001be4:	431a      	orrs	r2, r3
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	0cdb      	lsrs	r3, r3, #19
 8001bea:	02db      	lsls	r3, r3, #11
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001bfe:	e00b      	b.n	8001c18 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <UTIL_LCD_FillRect+0x70>)
 8001c02:	691c      	ldr	r4, [r3, #16]
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <UTIL_LCD_FillRect+0x6c>)
 8001c06:	6918      	ldr	r0, [r3, #16]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	47a0      	blx	r4
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	20025a80 	.word	0x20025a80
 8001c24:	20025ac0 	.word	0x20025ac0

08001c28 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b2      	sub	sp, #200	; 0xc8
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001c40:	4ba5      	ldr	r3, [pc, #660]	; (8001ed8 <DrawChar+0x2b0>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4aa4      	ldr	r2, [pc, #656]	; (8001ed8 <DrawChar+0x2b0>)
 8001c46:	015b      	lsls	r3, r3, #5
 8001c48:	4413      	add	r3, r2
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	88db      	ldrh	r3, [r3, #6]
 8001c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001c54:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <DrawChar+0x2b0>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a9f      	ldr	r2, [pc, #636]	; (8001ed8 <DrawChar+0x2b0>)
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3308      	adds	r3, #8
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	889b      	ldrh	r3, [r3, #4]
 8001c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8001c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c6c:	3307      	adds	r3, #7
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001c82:	e11c      	b.n	8001ebe <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8001c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c88:	3307      	adds	r3, #7
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8001c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ca0:	3307      	adds	r3, #7
 8001ca2:	08db      	lsrs	r3, r3, #3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d002      	beq.n	8001cae <DrawChar+0x86>
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d006      	beq.n	8001cba <DrawChar+0x92>
 8001cac:	e011      	b.n	8001cd2 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8001cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001cb8:	e01d      	b.n	8001cf6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001cc6:	3201      	adds	r2, #1
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001cd0:	e011      	b.n	8001cf6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cde:	3301      	adds	r3, #1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001cea:	3202      	adds	r2, #2
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001cf4:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001cf6:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <DrawChar+0x2b0>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	; (8001ed8 <DrawChar+0x2b0>)
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	4413      	add	r3, r2
 8001d00:	331c      	adds	r3, #28
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	f040 808c 	bne.w	8001e22 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d10:	e074      	b.n	8001dfc <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001d12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d20:	4413      	add	r3, r2
 8001d22:	3b01      	subs	r3, #1
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d02d      	beq.n	8001d92 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <DrawChar+0x2b0>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <DrawChar+0x2b0>)
 8001d3c:	015b      	lsls	r3, r3, #5
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <DrawChar+0x2b0>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4961      	ldr	r1, [pc, #388]	; (8001ed8 <DrawChar+0x2b0>)
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	440b      	add	r3, r1
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0a9b      	lsrs	r3, r3, #10
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <DrawChar+0x2b0>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	495a      	ldr	r1, [pc, #360]	; (8001ed8 <DrawChar+0x2b0>)
 8001d70:	015b      	lsls	r3, r3, #5
 8001d72:	440b      	add	r3, r1
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0cdb      	lsrs	r3, r3, #19
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	02db      	lsls	r3, r3, #11
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	33c0      	adds	r3, #192	; 0xc0
 8001d8a:	443b      	add	r3, r7
 8001d8c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8001d90:	e02f      	b.n	8001df2 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8001d92:	4b51      	ldr	r3, [pc, #324]	; (8001ed8 <DrawChar+0x2b0>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a50      	ldr	r2, [pc, #320]	; (8001ed8 <DrawChar+0x2b0>)
 8001d98:	015b      	lsls	r3, r3, #5
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	08db      	lsrs	r3, r3, #3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <DrawChar+0x2b0>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	494a      	ldr	r1, [pc, #296]	; (8001ed8 <DrawChar+0x2b0>)
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	440b      	add	r3, r1
 8001db4:	3304      	adds	r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0a9b      	lsrs	r3, r3, #10
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <DrawChar+0x2b0>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	4942      	ldr	r1, [pc, #264]	; (8001ed8 <DrawChar+0x2b0>)
 8001dd0:	015b      	lsls	r3, r3, #5
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0cdb      	lsrs	r3, r3, #19
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	02db      	lsls	r3, r3, #11
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4313      	orrs	r3, r2
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	33c0      	adds	r3, #192	; 0xc0
 8001dec:	443b      	add	r3, r7
 8001dee:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8001df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001df6:	3301      	adds	r3, #1
 8001df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d384      	bcc.n	8001d12 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	1c4b      	adds	r3, r1, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001e12:	2301      	movs	r3, #1
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff fdb4 	bl	8001988 <UTIL_LCD_FillRGBRect>
 8001e20:	e048      	b.n	8001eb4 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e28:	e032      	b.n	8001e90 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001e2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <DrawChar+0x2b0>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <DrawChar+0x2b0>)
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	4413      	add	r3, r2
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	33c0      	adds	r3, #192	; 0xc0
 8001e62:	443b      	add	r3, r7
 8001e64:	f843 2cac 	str.w	r2, [r3, #-172]
 8001e68:	e00d      	b.n	8001e86 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <DrawChar+0x2b0>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <DrawChar+0x2b0>)
 8001e70:	015b      	lsls	r3, r3, #5
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	33c0      	adds	r3, #192	; 0xc0
 8001e80:	443b      	add	r3, r7
 8001e82:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8001e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3c6      	bcc.n	8001e2a <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	1c4b      	adds	r3, r1, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	f107 0214 	add.w	r2, r7, #20
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fd6a 	bl	8001988 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ebe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	f4ff aedc 	bcc.w	8001c84 <DrawChar+0x5c>
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	37c0      	adds	r7, #192	; 0xc0
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20025a80 	.word	0x20025a80

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_MspInit+0x34>)
 8001ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee8:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_MspInit+0x34>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_MspInit+0x34>)
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f00:	2004      	movs	r0, #4
 8001f02:	f005 f80d 	bl	8006f20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	46020c00 	.word	0x46020c00

08001f14 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_DCMI_MspInit+0xd8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d155      	bne.n	8001fe2 <HAL_DCMI_MspInit+0xce>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5a:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_DCMI_MspInit+0xdc>)
 8001f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    PH9     ------> DCMI_D0
    PH5     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8001f90:	23f0      	movs	r3, #240	; 0xf0
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001fa0:	230a      	movs	r3, #10
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4812      	ldr	r0, [pc, #72]	; (8001ff4 <HAL_DCMI_MspInit+0xe0>)
 8001fac:	f006 fe7e 	bl	8008cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_11
 8001fb0:	f645 7320 	movw	r3, #24352	; 0x5f20
 8001fb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480a      	ldr	r0, [pc, #40]	; (8001ff8 <HAL_DCMI_MspInit+0xe4>)
 8001fce:	f006 fe6d 	bl	8008cac <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2077      	movs	r0, #119	; 0x77
 8001fd8:	f004 ffad 	bl	8006f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8001fdc:	2077      	movs	r0, #119	; 0x77
 8001fde:	f004 ffc4 	bl	8006f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	4202c000 	.word	0x4202c000
 8001ff0:	46020c00 	.word	0x46020c00
 8001ff4:	42022000 	.word	0x42022000
 8001ff8:	42021c00 	.word	0x42021c00

08001ffc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_FMC_MspInit+0xcc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d152      	bne.n	80020be <HAL_FMC_MspInit+0xc2>
    return;
  }
  FMC_Initialized = 1;
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_FMC_MspInit+0xcc>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800201e:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <HAL_FMC_MspInit+0xd0>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_FMC_MspInit+0xd0>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202e:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_FMC_MspInit+0xd0>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
  PD11   ------> FMC_A16
  PF15   ------> FMC_A9
  PE12   ------> FMC_DA9
  PE12   ------> FMC_D9
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_5
 800203c:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8002040:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800204e:	230c      	movs	r3, #12
 8002050:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	481e      	ldr	r0, [pc, #120]	; (80020d0 <HAL_FMC_MspInit+0xd4>)
 8002058:	f006 fe28 	bl	8008cac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|FMC_A22_LCD_RS_Pin
 800205c:	f64f 73cb 	movw	r3, #65483	; 0xffcb
 8002060:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800206e:	230c      	movs	r3, #12
 8002070:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4817      	ldr	r0, [pc, #92]	; (80020d4 <HAL_FMC_MspInit+0xd8>)
 8002078:	f006 fe18 	bl	8008cac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 800207c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002080:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800208e:	230c      	movs	r3, #12
 8002090:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4810      	ldr	r0, [pc, #64]	; (80020d8 <HAL_FMC_MspInit+0xdc>)
 8002098:	f006 fe08 	bl	8008cac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_0
 800209c:	f241 033f 	movw	r3, #4159	; 0x103f
 80020a0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020ae:	230c      	movs	r3, #12
 80020b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4809      	ldr	r0, [pc, #36]	; (80020dc <HAL_FMC_MspInit+0xe0>)
 80020b8:	f006 fdf8 	bl	8008cac <HAL_GPIO_Init>
 80020bc:	e000      	b.n	80020c0 <HAL_FMC_MspInit+0xc4>
    return;
 80020be:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20025aec 	.word	0x20025aec
 80020cc:	46020c00 	.word	0x46020c00
 80020d0:	42020c00 	.word	0x42020c00
 80020d4:	42021000 	.word	0x42021000
 80020d8:	42021400 	.word	0x42021400
 80020dc:	42021800 	.word	0x42021800

080020e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80020e8:	f7ff ff88 	bl	8001ffc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_FMC_MspDeInit+0x50>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11f      	bne.n	8002140 <HAL_FMC_MspDeInit+0x4c>
    return;
  }
  FMC_DeInitialized = 1;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_FMC_MspDeInit+0x50>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_FMC_MspDeInit+0x54>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_FMC_MspDeInit+0x54>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  PD11   ------> FMC_A16
  PF15   ------> FMC_A9
  PE12   ------> FMC_DA9
  PE12   ------> FMC_D9
  */
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_5
 8002116:	f64f 71b3 	movw	r1, #65459	; 0xffb3
 800211a:	480c      	ldr	r0, [pc, #48]	; (800214c <HAL_FMC_MspDeInit+0x58>)
 800211c:	f006 ff9e 	bl	800905c <HAL_GPIO_DeInit>
                          |GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|FMC_A22_LCD_RS_Pin
 8002120:	f64f 71cb 	movw	r1, #65483	; 0xffcb
 8002124:	480a      	ldr	r0, [pc, #40]	; (8002150 <HAL_FMC_MspDeInit+0x5c>)
 8002126:	f006 ff99 	bl	800905c <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15
                          |GPIO_PIN_12);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 800212a:	f24f 013f 	movw	r1, #61503	; 0xf03f
 800212e:	4809      	ldr	r0, [pc, #36]	; (8002154 <HAL_FMC_MspDeInit+0x60>)
 8002130:	f006 ff94 	bl	800905c <HAL_GPIO_DeInit>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_13|GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_0
 8002134:	f241 013f 	movw	r1, #4159	; 0x103f
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <HAL_FMC_MspDeInit+0x64>)
 800213a:	f006 ff8f 	bl	800905c <HAL_GPIO_DeInit>
 800213e:	e000      	b.n	8002142 <HAL_FMC_MspDeInit+0x4e>
    return;
 8002140:	bf00      	nop
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_2);

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20025af0 	.word	0x20025af0
 8002148:	46020c00 	.word	0x46020c00
 800214c:	42020c00 	.word	0x42020c00
 8002150:	42021000 	.word	0x42021000
 8002154:	42021400 	.word	0x42021400
 8002158:	42021800 	.word	0x42021800

0800215c <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8002164:	f7ff ffc6 	bl	80020f4 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f004 fd9c 	bl	8006cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80021c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021cc:	f007 f86e 	bl	80092ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <GPDMA1_Channel12_IRQHandler+0x10>)
 80021da:	f005 fc53 	bl	8007a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000174 	.word	0x20000174

080021e8 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DCMI_PSSI_IRQHandler+0x10>)
 80021ee:	f005 fa37 	bl	8007660 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000124 	.word	0x20000124

080021fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <SystemInit+0x68>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <SystemInit+0x68>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <SystemInit+0x6c>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <SystemInit+0x6c>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <SystemInit+0x6c>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <SystemInit+0x6c>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <SystemInit+0x6c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <SystemInit+0x6c>)
 800222e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002232:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002236:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <SystemInit+0x6c>)
 800223a:	2200      	movs	r2, #0
 800223c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <SystemInit+0x6c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <SystemInit+0x6c>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <SystemInit+0x6c>)
 800224c:	2200      	movs	r2, #0
 800224e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SystemInit+0x68>)
 8002252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002256:	609a      	str	r2, [r3, #8]
  #endif
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00
 8002268:	46020c00 	.word	0x46020c00

0800226c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002270:	f7ff ffc4 	bl	80021fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002274:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002276:	e003      	b.n	8002280 <LoopCopyDataInit>

08002278 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800227a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800227c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800227e:	3104      	adds	r1, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002280:	480a      	ldr	r0, [pc, #40]	; (80022ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002284:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002286:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002288:	d3f6      	bcc.n	8002278 <CopyDataInit>
	ldr	r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800228c:	e002      	b.n	8002294 <LoopFillZerobss>

0800228e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800228e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002290:	f842 3b04 	str.w	r3, [r2], #4

08002294 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <LoopForever+0x16>)
	cmp	r2, r3
 8002296:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002298:	d3f9      	bcc.n	800228e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229a:	f009 fc95 	bl	800bbc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800229e:	f7fe fb6f 	bl	8000980 <main>

080022a2 <LoopForever>:

LoopForever:
    b LoopForever
 80022a2:	e7fe      	b.n	80022a2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80022a4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80022a8:	0800d35c 	.word	0x0800d35c
	ldr	r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022b0:	200000a5 	.word	0x200000a5
	ldr	r2, =_sbss
 80022b4:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 80022b8:	20026638 	.word	0x20026638

080022bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_IRQHandler>
	...

080022c0 <HX8347I_RegisterBusIO>:
  * @param  pObj Component object pointer.
  * @param  pIO  Component IO pointer.
  * @retval Error status.
  */
int32_t HX8347I_RegisterBusIO(HX8347I_Object_t *pObj, HX8347I_IO_t *pIO)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <HX8347I_RegisterBusIO+0x18>
  {
    ret = HX8347I_ERROR;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e02c      	b.n	8002332 <HX8347I_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	891a      	ldrh	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = HX8347I_ReadRegWrap;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <HX8347I_RegisterBusIO+0x7c>)
 800230c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = HX8347I_WriteRegWrap;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HX8347I_RegisterBusIO+0x80>)
 8002312:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HX8347I_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4798      	blx	r3
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	e002      	b.n	8002332 <HX8347I_RegisterBusIO+0x72>
    }
    else
    {
      ret = HX8347I_ERROR;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	08003af7 	.word	0x08003af7
 8002340:	08003b25 	.word	0x08003b25

08002344 <HX8347I_Init>:
  * @param  ColorCoding Color coding.
  * @param  Orientation Orientation.
  * @retval Component status.
  */
int32_t HX8347I_Init(HX8347I_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  int32_t ret = HX8347I_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  uint8_t pData[2];

  pData[1] = 0x00U;
 8002354:	2300      	movs	r3, #0
 8002356:	747b      	strb	r3, [r7, #17]

  if (pObj->IsInitialized == 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 81bb 	bne.w	80026da <HX8347I_Init+0x396>
  {
    /* Set color mode */
    pData[0] = (uint8_t) ColorCoding;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLMOD_CTRL, pData, 1); /* default 0x06 262k color,  0x05 65k color */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f103 0018 	add.w	r0, r3, #24
 8002370:	f107 0210 	add.w	r2, r7, #16
 8002374:	2301      	movs	r3, #1
 8002376:	2117      	movs	r1, #23
 8002378:	f001 fc1a 	bl	8003bb0 <hx8347i_write_reg>
 800237c:	4602      	mov	r2, r0
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4413      	add	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

    /* Set display frame rate */
    pData[0] = 0x36U;
 8002384:	2336      	movs	r3, #54	; 0x36
 8002386:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_OSC_CTRL1, pData, 1); /* Display frame rate = 60Hz */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f103 0018 	add.w	r0, r3, #24
 800238e:	f107 0210 	add.w	r2, r7, #16
 8002392:	2301      	movs	r3, #1
 8002394:	2118      	movs	r1, #24
 8002396:	f001 fc0b 	bl	8003bb0 <hx8347i_write_reg>
 800239a:	4602      	mov	r2, r0
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

    /* Set panel */
    pData[0] = 0x09U;
 80023a2:	2309      	movs	r3, #9
 80023a4:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_PANEL_CTRL, pData,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f103 0018 	add.w	r0, r3, #24
 80023ac:	f107 0210 	add.w	r2, r7, #16
 80023b0:	2301      	movs	r3, #1
 80023b2:	2136      	movs	r1, #54	; 0x36
 80023b4:	f001 fbfc 	bl	8003bb0 <hx8347i_write_reg>
 80023b8:	4602      	mov	r2, r0
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	4413      	add	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
                             1); /* SS_PANEL = 1, GS_PANEL = 0, REV_PANEL = 0, BGR_PANEL = 1 */

    /* Set GRAM Area - Partial Display Control */
    pData[0] = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_MODE_CTRL, pData, 1); /* DP_STB=0, DP_STB_S=0, SCROLL=0, */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f103 0018 	add.w	r0, r3, #24
 80023ca:	f107 0210 	add.w	r2, r7, #16
 80023ce:	2301      	movs	r3, #1
 80023d0:	2101      	movs	r1, #1
 80023d2:	f001 fbed 	bl	8003bb0 <hx8347i_write_reg>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4413      	add	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f103 0018 	add.w	r0, r3, #24
 80023e4:	f107 0210 	add.w	r2, r7, #16
 80023e8:	2301      	movs	r3, #1
 80023ea:	2106      	movs	r1, #6
 80023ec:	f001 fbe0 	bl	8003bb0 <hx8347i_write_reg>
 80023f0:	4602      	mov	r2, r0
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4413      	add	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f103 0018 	add.w	r0, r3, #24
 80023fe:	f107 0210 	add.w	r2, r7, #16
 8002402:	2301      	movs	r3, #1
 8002404:	2107      	movs	r1, #7
 8002406:	f001 fbd3 	bl	8003bb0 <hx8347i_write_reg>
 800240a:	4602      	mov	r2, r0
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	4413      	add	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
    if ((Orientation == HX8347I_ORIENTATION_PORTRAIT) || (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HX8347I_Init+0xda>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d11e      	bne.n	800245c <HX8347I_Init+0x118>
    {
      /* 320 lines */
      pData[0] = 0x01U;
 800241e:	2301      	movs	r3, #1
 8002420:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f103 0018 	add.w	r0, r3, #24
 8002428:	f107 0210 	add.w	r2, r7, #16
 800242c:	2301      	movs	r3, #1
 800242e:	2108      	movs	r1, #8
 8002430:	f001 fbbe 	bl	8003bb0 <hx8347i_write_reg>
 8002434:	4602      	mov	r2, r0
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4413      	add	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
      pData[0] = 0x3FU;
 800243c:	233f      	movs	r3, #63	; 0x3f
 800243e:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f103 0018 	add.w	r0, r3, #24
 8002446:	f107 0210 	add.w	r2, r7, #16
 800244a:	2301      	movs	r3, #1
 800244c:	2109      	movs	r1, #9
 800244e:	f001 fbaf 	bl	8003bb0 <hx8347i_write_reg>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	4413      	add	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e01d      	b.n	8002498 <HX8347I_Init+0x154>
    }
    else
    {
      /* 240 lines */
      pData[0] = 0x00U;
 800245c:	2300      	movs	r3, #0
 800245e:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f103 0018 	add.w	r0, r3, #24
 8002466:	f107 0210 	add.w	r2, r7, #16
 800246a:	2301      	movs	r3, #1
 800246c:	2108      	movs	r1, #8
 800246e:	f001 fb9f 	bl	8003bb0 <hx8347i_write_reg>
 8002472:	4602      	mov	r2, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	4413      	add	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
      pData[0] = 0xEFU;
 800247a:	23ef      	movs	r3, #239	; 0xef
 800247c:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f103 0018 	add.w	r0, r3, #24
 8002484:	f107 0210 	add.w	r2, r7, #16
 8002488:	2301      	movs	r3, #1
 800248a:	2109      	movs	r1, #9
 800248c:	f001 fb90 	bl	8003bb0 <hx8347i_write_reg>
 8002490:	4602      	mov	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4413      	add	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
    }
    pData[0] = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f103 0018 	add.w	r0, r3, #24
 80024a2:	f107 0210 	add.w	r2, r7, #16
 80024a6:	2301      	movs	r3, #1
 80024a8:	2102      	movs	r1, #2
 80024aa:	f001 fb81 	bl	8003bb0 <hx8347i_write_reg>
 80024ae:	4602      	mov	r2, r0
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4413      	add	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f103 0018 	add.w	r0, r3, #24
 80024bc:	f107 0210 	add.w	r2, r7, #16
 80024c0:	2301      	movs	r3, #1
 80024c2:	2103      	movs	r1, #3
 80024c4:	f001 fb74 	bl	8003bb0 <hx8347i_write_reg>
 80024c8:	4602      	mov	r2, r0
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
    if ((Orientation == HX8347I_ORIENTATION_PORTRAIT) || (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HX8347I_Init+0x198>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d11e      	bne.n	800251a <HX8347I_Init+0x1d6>
    {
      /* 240 columns */
      pData[0] = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f103 0018 	add.w	r0, r3, #24
 80024e6:	f107 0210 	add.w	r2, r7, #16
 80024ea:	2301      	movs	r3, #1
 80024ec:	2104      	movs	r1, #4
 80024ee:	f001 fb5f 	bl	8003bb0 <hx8347i_write_reg>
 80024f2:	4602      	mov	r2, r0
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
      pData[0] = 0xEFU;
 80024fa:	23ef      	movs	r3, #239	; 0xef
 80024fc:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f103 0018 	add.w	r0, r3, #24
 8002504:	f107 0210 	add.w	r2, r7, #16
 8002508:	2301      	movs	r3, #1
 800250a:	2105      	movs	r1, #5
 800250c:	f001 fb50 	bl	8003bb0 <hx8347i_write_reg>
 8002510:	4602      	mov	r2, r0
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e01d      	b.n	8002556 <HX8347I_Init+0x212>
    }
    else
    {
      /* 320 columns */
      pData[0] = 0x01U;
 800251a:	2301      	movs	r3, #1
 800251c:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f103 0018 	add.w	r0, r3, #24
 8002524:	f107 0210 	add.w	r2, r7, #16
 8002528:	2301      	movs	r3, #1
 800252a:	2104      	movs	r1, #4
 800252c:	f001 fb40 	bl	8003bb0 <hx8347i_write_reg>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
      pData[0] = 0x3FU;
 8002538:	233f      	movs	r3, #63	; 0x3f
 800253a:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f103 0018 	add.w	r0, r3, #24
 8002542:	f107 0210 	add.w	r2, r7, #16
 8002546:	2301      	movs	r3, #1
 8002548:	2105      	movs	r1, #5
 800254a:	f001 fb31 	bl	8003bb0 <hx8347i_write_reg>
 800254e:	4602      	mov	r2, r0
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4413      	add	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
    }
    if (Orientation == HX8347I_ORIENTATION_PORTRAIT)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <HX8347I_Init+0x238>
    {
      pData[0] = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f103 0018 	add.w	r0, r3, #24
 8002566:	f107 0210 	add.w	r2, r7, #16
 800256a:	2301      	movs	r3, #1
 800256c:	2116      	movs	r1, #22
 800256e:	f001 fb1f 	bl	8003bb0 <hx8347i_write_reg>
 8002572:	4602      	mov	r2, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	4413      	add	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e034      	b.n	80025e6 <HX8347I_Init+0x2a2>
                               1); /* Memory access control: MY = 0, MX = 0, MV = 0, ML = 0 */
    }
    else if (Orientation == HX8347I_ORIENTATION_LANDSCAPE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10f      	bne.n	80025a2 <HX8347I_Init+0x25e>
    {
      pData[0] = 0xA0U;
 8002582:	23a0      	movs	r3, #160	; 0xa0
 8002584:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f103 0018 	add.w	r0, r3, #24
 800258c:	f107 0210 	add.w	r2, r7, #16
 8002590:	2301      	movs	r3, #1
 8002592:	2116      	movs	r1, #22
 8002594:	f001 fb0c 	bl	8003bb0 <hx8347i_write_reg>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4413      	add	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e021      	b.n	80025e6 <HX8347I_Init+0x2a2>
                               1); /* Memory access control: MY = 1, MX = 0, MV = 1, ML = 0 */
    }
    else if (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d10f      	bne.n	80025c8 <HX8347I_Init+0x284>
    {
      pData[0] = 0xC0U;
 80025a8:	23c0      	movs	r3, #192	; 0xc0
 80025aa:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f103 0018 	add.w	r0, r3, #24
 80025b2:	f107 0210 	add.w	r2, r7, #16
 80025b6:	2301      	movs	r3, #1
 80025b8:	2116      	movs	r1, #22
 80025ba:	f001 faf9 	bl	8003bb0 <hx8347i_write_reg>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e00e      	b.n	80025e6 <HX8347I_Init+0x2a2>
                               1); /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
    }
    else
    {
      pData[0] = 0x60U;
 80025c8:	2360      	movs	r3, #96	; 0x60
 80025ca:	743b      	strb	r3, [r7, #16]
      ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f103 0018 	add.w	r0, r3, #24
 80025d2:	f107 0210 	add.w	r2, r7, #16
 80025d6:	2301      	movs	r3, #1
 80025d8:	2116      	movs	r1, #22
 80025da:	f001 fae9 	bl	8003bb0 <hx8347i_write_reg>
 80025de:	4602      	mov	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4413      	add	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
                               1); /* Memory access control: MY = 0, MX = 1, MV =1, ML = 0 */
    }

    /* Power On sequence */
    pData[0] = 0x01U;
 80025e6:	2301      	movs	r3, #1
 80025e8:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_OSC_CTRL2, pData, 1); /* OSC_EN = 1 */
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f103 0018 	add.w	r0, r3, #24
 80025f0:	f107 0210 	add.w	r2, r7, #16
 80025f4:	2301      	movs	r3, #1
 80025f6:	2119      	movs	r1, #25
 80025f8:	f001 fada 	bl	8003bb0 <hx8347i_write_reg>
 80025fc:	4602      	mov	r2, r0
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4413      	add	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 8002604:	210a      	movs	r1, #10
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f001 faa3 	bl	8003b52 <HX8347I_Delay>
    pData[0] = 0x03U;
 800260c:	2303      	movs	r3, #3
 800260e:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL3, pData, 1); /* AP[2:0] = 011 */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f103 0018 	add.w	r0, r3, #24
 8002616:	f107 0210 	add.w	r2, r7, #16
 800261a:	2301      	movs	r3, #1
 800261c:	211c      	movs	r1, #28
 800261e:	f001 fac7 	bl	8003bb0 <hx8347i_write_reg>
 8002622:	4602      	mov	r2, r0
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	4413      	add	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f103 0018 	add.w	r0, r3, #24
 8002630:	f107 0210 	add.w	r2, r7, #16
 8002634:	2301      	movs	r3, #1
 8002636:	211f      	movs	r1, #31
 8002638:	f001 faa5 	bl	8003b86 <hx8347i_read_reg>
 800263c:	4602      	mov	r2, r0
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4413      	add	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
    pData[1] = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	747b      	strb	r3, [r7, #17]
    pData[0] &= 0xFEU;
 8002648:	7c3b      	ldrb	r3, [r7, #16]
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* STB = 0 */
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f103 0018 	add.w	r0, r3, #24
 8002658:	f107 0210 	add.w	r2, r7, #16
 800265c:	2301      	movs	r3, #1
 800265e:	211f      	movs	r1, #31
 8002660:	f001 faa6 	bl	8003bb0 <hx8347i_write_reg>
 8002664:	4602      	mov	r2, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	4413      	add	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 800266c:	210a      	movs	r1, #10
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f001 fa6f 	bl	8003b52 <HX8347I_Delay>
    pData[0] &= 0xF7U;
 8002674:	7c3b      	ldrb	r3, [r7, #16]
 8002676:	f023 0308 	bic.w	r3, r3, #8
 800267a:	b2db      	uxtb	r3, r3
 800267c:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* DK = 0 */
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f103 0018 	add.w	r0, r3, #24
 8002684:	f107 0210 	add.w	r2, r7, #16
 8002688:	2301      	movs	r3, #1
 800268a:	211f      	movs	r1, #31
 800268c:	f001 fa90 	bl	8003bb0 <hx8347i_write_reg>
 8002690:	4602      	mov	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	4413      	add	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
    pData[0] |= 0x10U;
 8002698:	7c3b      	ldrb	r3, [r7, #16]
 800269a:	f043 0310 	orr.w	r3, r3, #16
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	743b      	strb	r3, [r7, #16]
    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 80026a2:	210a      	movs	r1, #10
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f001 fa54 	bl	8003b52 <HX8347I_Delay>
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* PON = 1 */
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f103 0018 	add.w	r0, r3, #24
 80026b0:	f107 0210 	add.w	r2, r7, #16
 80026b4:	2301      	movs	r3, #1
 80026b6:	211f      	movs	r1, #31
 80026b8:	f001 fa7a 	bl	8003bb0 <hx8347i_write_reg>
 80026bc:	4602      	mov	r2, r0
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	4413      	add	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

    HX8347I_Delay(pObj, 10); /* Wait at least 5ms */
 80026c4:	210a      	movs	r1, #10
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f001 fa43 	bl	8003b52 <HX8347I_Delay>
    pObj->IsInitialized = 1U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    pObj->Orientation   = Orientation;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if (ret != HX8347I_OK)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HX8347I_Init+0x3a2>
  {
    ret = HX8347I_ERROR;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80026e6:	697b      	ldr	r3, [r7, #20]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HX8347I_DeInit>:
  * @brief  De-Initialize the LCD driver component.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t HX8347I_DeInit(HX8347I_Object_t *pObj)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  int32_t ret = HX8347I_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  uint8_t pData[2];

  if (pObj->IsInitialized != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d051      	beq.n	80027aa <HX8347I_DeInit+0xba>
  {
    ret += HX8347I_DisplayOff(pObj);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8bd 	bl	8002886 <HX8347I_DisplayOff>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

    /* Power Off sequence ---------------------------------------------------------*/
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f103 0018 	add.w	r0, r3, #24
 800271a:	f107 0208 	add.w	r2, r7, #8
 800271e:	2301      	movs	r3, #1
 8002720:	211f      	movs	r1, #31
 8002722:	f001 fa30 	bl	8003b86 <hx8347i_read_reg>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
    pData[1] = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	727b      	strb	r3, [r7, #9]
    pData[0] &= 0xAFU;
 8002732:	7a3b      	ldrb	r3, [r7, #8]
 8002734:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8002738:	b2db      	uxtb	r3, r3
 800273a:	723b      	strb	r3, [r7, #8]
    pData[0] |= 0x08U;
 800273c:	7a3b      	ldrb	r3, [r7, #8]
 800273e:	f043 0308 	orr.w	r3, r3, #8
 8002742:	b2db      	uxtb	r3, r3
 8002744:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* PON = 0, VCOMG = 0 and DK = 1 */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0018 	add.w	r0, r3, #24
 800274c:	f107 0208 	add.w	r2, r7, #8
 8002750:	2301      	movs	r3, #1
 8002752:	211f      	movs	r1, #31
 8002754:	f001 fa2c 	bl	8003bb0 <hx8347i_write_reg>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    pData[0] |= 0x01U;
 8002760:	7a3b      	ldrb	r3, [r7, #8]
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_POWER_CTRL6, pData, 1); /* STB = 1 */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f103 0018 	add.w	r0, r3, #24
 8002770:	f107 0208 	add.w	r2, r7, #8
 8002774:	2301      	movs	r3, #1
 8002776:	211f      	movs	r1, #31
 8002778:	f001 fa1a 	bl	8003bb0 <hx8347i_write_reg>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
    pData[0] = 0x00U;
 8002784:	2300      	movs	r3, #0
 8002786:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_OSC_CTRL2, pData, 1); /* OSC_EN = 0 */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0018 	add.w	r0, r3, #24
 800278e:	f107 0208 	add.w	r2, r7, #8
 8002792:	2301      	movs	r3, #1
 8002794:	2119      	movs	r1, #25
 8002796:	f001 fa0b 	bl	8003bb0 <hx8347i_write_reg>
 800279a:	4602      	mov	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if (ret != HX8347I_OK)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HX8347I_DeInit+0xc8>
  {
    ret = HX8347I_ERROR;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e00b      	b.n	80027d0 <HX8347I_DeInit+0xe0>
  }
  else
  {
    if (pObj->IO.DeInit != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <HX8347I_DeInit+0xda>
    {
      ret = pObj->IO.DeInit();
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4798      	blx	r3
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	e002      	b.n	80027d0 <HX8347I_DeInit+0xe0>
    }
    else
    {
      ret = HX8347I_ERROR;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80027d0:	68fb      	ldr	r3, [r7, #12]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HX8347I_ReadID>:
  * @param  pObj pointer to component object.
  * @param  Id   pointer to component id.
  * @retval Component status.
  */
int32_t HX8347I_ReadID(HX8347I_Object_t *pObj, uint32_t *Id)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t hx8347i_id[2];

  /* Get ID from component */
  ret = hx8347i_read_reg(&pObj->Ctx, HX8347I_HIMAX_ID, hx8347i_id, 1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0018 	add.w	r0, r3, #24
 80027ea:	f107 0208 	add.w	r2, r7, #8
 80027ee:	2301      	movs	r3, #1
 80027f0:	2100      	movs	r1, #0
 80027f2:	f001 f9c8 	bl	8003b86 <hx8347i_read_reg>
 80027f6:	60f8      	str	r0, [r7, #12]

  *Id = (uint32_t)hx8347i_id[0] | ((uint32_t)hx8347i_id[1] << 8U);
 80027f8:	7a3b      	ldrb	r3, [r7, #8]
 80027fa:	461a      	mov	r2, r3
 80027fc:	7a7b      	ldrb	r3, [r7, #9]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	431a      	orrs	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	601a      	str	r2, [r3, #0]

  if (ret != HX8347I_OK)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HX8347I_ReadID+0x38>
  {
    ret = HX8347I_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HX8347I_DisplayOn>:
  * @brief  Set the display on.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t HX8347I_DisplayOn(HX8347I_Object_t *pObj)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  int32_t ret = HX8347I_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  uint8_t pData[2];

  pData[1] = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	727b      	strb	r3, [r7, #9]

  /* Display On */
  pData[0] = 0x38U;
 800282c:	2338      	movs	r3, #56	; 0x38
 800282e:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 0018 	add.w	r0, r3, #24
 8002836:	f107 0208 	add.w	r2, r7, #8
 800283a:	2301      	movs	r3, #1
 800283c:	2128      	movs	r1, #40	; 0x28
 800283e:	f001 f9b7 	bl	8003bb0 <hx8347i_write_reg>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  HX8347I_Delay(pObj, 40); /* Wait at least 2 frames */
 800284a:	2128      	movs	r1, #40	; 0x28
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f001 f980 	bl	8003b52 <HX8347I_Delay>
  pData[0] = 0x3CU;
 8002852:	233c      	movs	r3, #60	; 0x3c
 8002854:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 0018 	add.w	r0, r3, #24
 800285c:	f107 0208 	add.w	r2, r7, #8
 8002860:	2301      	movs	r3, #1
 8002862:	2128      	movs	r1, #40	; 0x28
 8002864:	f001 f9a4 	bl	8003bb0 <hx8347i_write_reg>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

  if (ret != HX8347I_OK)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HX8347I_DisplayOn+0x60>
  {
    ret = HX8347I_ERROR;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800287c:	68fb      	ldr	r3, [r7, #12]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HX8347I_DisplayOff>:
  * @brief  Set the display off.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t HX8347I_DisplayOff(HX8347I_Object_t *pObj)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  int32_t ret = HX8347I_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  uint8_t pData[2];

  pData[1] = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	727b      	strb	r3, [r7, #9]

  /* Display Off */
  pData[0] = 0x38U;
 8002896:	2338      	movs	r3, #56	; 0x38
 8002898:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 0018 	add.w	r0, r3, #24
 80028a0:	f107 0208 	add.w	r2, r7, #8
 80028a4:	2301      	movs	r3, #1
 80028a6:	2128      	movs	r1, #40	; 0x28
 80028a8:	f001 f982 	bl	8003bb0 <hx8347i_write_reg>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  HX8347I_Delay(pObj, 40); /* Wait at least 2 frames */
 80028b4:	2128      	movs	r1, #40	; 0x28
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f001 f94b 	bl	8003b52 <HX8347I_Delay>
  pData[0] = 0x04U;
 80028bc:	2304      	movs	r3, #4
 80028be:	723b      	strb	r3, [r7, #8]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_DISPLAY_CTRL3, pData, 1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 0018 	add.w	r0, r3, #24
 80028c6:	f107 0208 	add.w	r2, r7, #8
 80028ca:	2301      	movs	r3, #1
 80028cc:	2128      	movs	r1, #40	; 0x28
 80028ce:	f001 f96f 	bl	8003bb0 <hx8347i_write_reg>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  if (ret != HX8347I_OK)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HX8347I_DisplayOff+0x60>
  {
    ret = HX8347I_ERROR;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HX8347I_SetBrightness>:
  * @param  pObj Pointer to component object.
  * @param  Brightness Display brightness to be set.
  * @retval Component status.
  */
int32_t HX8347I_SetBrightness(HX8347I_Object_t *pObj, uint32_t Brightness)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return HX8347I_ERROR;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HX8347I_GetBrightness>:
  * @param  pObj Pointer to component object.
  * @param  Brightness Current display brightness.
  * @retval Component status.
  */
int32_t HX8347I_GetBrightness(HX8347I_Object_t *pObj, uint32_t *Brightness)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return HX8347I_ERROR;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HX8347I_SetOrientation>:
  * @param  pObj Pointer to component object.
  * @param  Orientation Display orientation to be set.
  * @retval Component status.
  */
int32_t HX8347I_SetOrientation(HX8347I_Object_t *pObj, uint32_t Orientation)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  uint8_t  pData[2];

  pData[1] = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	727b      	strb	r3, [r7, #9]

  /* Update GRAM Area - Partial Display Control */
  if ((Orientation == HX8347I_ORIENTATION_PORTRAIT) || (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HX8347I_SetOrientation+0x1e>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d13c      	bne.n	80029bc <HX8347I_SetOrientation+0x98>
  {
    /* 320 lines */
    pData[0] = 0x01U;
 8002942:	2301      	movs	r3, #1
 8002944:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f103 0018 	add.w	r0, r3, #24
 800294c:	f107 0208 	add.w	r2, r7, #8
 8002950:	2301      	movs	r3, #1
 8002952:	2108      	movs	r1, #8
 8002954:	f001 f92c 	bl	8003bb0 <hx8347i_write_reg>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
    pData[0] = 0x3FU;
 8002960:	233f      	movs	r3, #63	; 0x3f
 8002962:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f103 0018 	add.w	r0, r3, #24
 800296a:	f107 0208 	add.w	r2, r7, #8
 800296e:	2301      	movs	r3, #1
 8002970:	2109      	movs	r1, #9
 8002972:	f001 f91d 	bl	8003bb0 <hx8347i_write_reg>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
    /* 240 columns */
    pData[0] = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f103 0018 	add.w	r0, r3, #24
 8002988:	f107 0208 	add.w	r2, r7, #8
 800298c:	2301      	movs	r3, #1
 800298e:	2104      	movs	r1, #4
 8002990:	f001 f90e 	bl	8003bb0 <hx8347i_write_reg>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4413      	add	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
    pData[0] = 0xEFU;
 800299c:	23ef      	movs	r3, #239	; 0xef
 800299e:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f103 0018 	add.w	r0, r3, #24
 80029a6:	f107 0208 	add.w	r2, r7, #8
 80029aa:	2301      	movs	r3, #1
 80029ac:	2105      	movs	r1, #5
 80029ae:	f001 f8ff 	bl	8003bb0 <hx8347i_write_reg>
 80029b2:	4602      	mov	r2, r0
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e03b      	b.n	8002a34 <HX8347I_SetOrientation+0x110>
  }
  else
  {
    /* 240 lines */
    pData[0] = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f103 0018 	add.w	r0, r3, #24
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	2301      	movs	r3, #1
 80029cc:	2108      	movs	r1, #8
 80029ce:	f001 f8ef 	bl	8003bb0 <hx8347i_write_reg>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    pData[0] = 0xEFU;
 80029da:	23ef      	movs	r3, #239	; 0xef
 80029dc:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f103 0018 	add.w	r0, r3, #24
 80029e4:	f107 0208 	add.w	r2, r7, #8
 80029e8:	2301      	movs	r3, #1
 80029ea:	2109      	movs	r1, #9
 80029ec:	f001 f8e0 	bl	8003bb0 <hx8347i_write_reg>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
    /* 320 columns */
    pData[0] = 0x01U;
 80029f8:	2301      	movs	r3, #1
 80029fa:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f103 0018 	add.w	r0, r3, #24
 8002a02:	f107 0208 	add.w	r2, r7, #8
 8002a06:	2301      	movs	r3, #1
 8002a08:	2104      	movs	r1, #4
 8002a0a:	f001 f8d1 	bl	8003bb0 <hx8347i_write_reg>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
    pData[0] = 0x3FU;
 8002a16:	233f      	movs	r3, #63	; 0x3f
 8002a18:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f103 0018 	add.w	r0, r3, #24
 8002a20:	f107 0208 	add.w	r2, r7, #8
 8002a24:	2301      	movs	r3, #1
 8002a26:	2105      	movs	r1, #5
 8002a28:	f001 f8c2 	bl	8003bb0 <hx8347i_write_reg>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }
  if (Orientation == HX8347I_ORIENTATION_PORTRAIT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10f      	bne.n	8002a5a <HX8347I_SetOrientation+0x136>
  {
    pData[0] = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 0018 	add.w	r0, r3, #24
 8002a44:	f107 0208 	add.w	r2, r7, #8
 8002a48:	2301      	movs	r3, #1
 8002a4a:	2116      	movs	r1, #22
 8002a4c:	f001 f8b0 	bl	8003bb0 <hx8347i_write_reg>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4413      	add	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e034      	b.n	8002ac4 <HX8347I_SetOrientation+0x1a0>
                             1); /* Memory access control: MY = 0, MX = 0, MV = 0, ML = 0 */
  }
  else if (Orientation == HX8347I_ORIENTATION_LANDSCAPE)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10f      	bne.n	8002a80 <HX8347I_SetOrientation+0x15c>
  {
    pData[0] = 0xA0U;
 8002a60:	23a0      	movs	r3, #160	; 0xa0
 8002a62:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f103 0018 	add.w	r0, r3, #24
 8002a6a:	f107 0208 	add.w	r2, r7, #8
 8002a6e:	2301      	movs	r3, #1
 8002a70:	2116      	movs	r1, #22
 8002a72:	f001 f89d 	bl	8003bb0 <hx8347i_write_reg>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e021      	b.n	8002ac4 <HX8347I_SetOrientation+0x1a0>
                             1); /* Memory access control: MY = 1, MX = 0, MV = 1, ML = 0 */
  }
  else if (Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d10f      	bne.n	8002aa6 <HX8347I_SetOrientation+0x182>
  {
    pData[0] = 0xC0U;
 8002a86:	23c0      	movs	r3, #192	; 0xc0
 8002a88:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f103 0018 	add.w	r0, r3, #24
 8002a90:	f107 0208 	add.w	r2, r7, #8
 8002a94:	2301      	movs	r3, #1
 8002a96:	2116      	movs	r1, #22
 8002a98:	f001 f88a 	bl	8003bb0 <hx8347i_write_reg>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e00e      	b.n	8002ac4 <HX8347I_SetOrientation+0x1a0>
                             1); /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  }
  else
  {
    pData[0] = 0x60U;
 8002aa6:	2360      	movs	r3, #96	; 0x60
 8002aa8:	723b      	strb	r3, [r7, #8]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f103 0018 	add.w	r0, r3, #24
 8002ab0:	f107 0208 	add.w	r2, r7, #8
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	2116      	movs	r1, #22
 8002ab8:	f001 f87a 	bl	8003bb0 <hx8347i_write_reg>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
                             1); /* Memory access control: MY = 0, MX = 1, MV =1, ML = 0 */
  }

  pObj->Orientation   = Orientation;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28

  return ret;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HX8347I_GetOrientation>:
  * @param  pObj Pointer to component object.
  * @param  Orientation Current display orientation.
  * @retval Component status.
  */
int32_t HX8347I_GetOrientation(HX8347I_Object_t *pObj, uint32_t *Orientation)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]

  *Orientation = pObj->Orientation;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	601a      	str	r2, [r3, #0]

  return ret;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HX8347I_SetCursor>:
  * @param  Xpos X position on LCD.
  * @param  Ypos Y position on LCD.
  * @retval Component status.
  */
int32_t HX8347I_SetCursor(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  int32_t ret = HX8347I_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  uint8_t pData[2];

  pData[1] = 0x00U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	747b      	strb	r3, [r7, #17]

  pData[0] = (uint8_t)(Ypos >> 8);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f103 0018 	add.w	r0, r3, #24
 8002b1a:	f107 0210 	add.w	r2, r7, #16
 8002b1e:	2301      	movs	r3, #1
 8002b20:	2106      	movs	r1, #6
 8002b22:	f001 f845 	bl	8003bb0 <hx8347i_write_reg>
 8002b26:	4602      	mov	r2, r0
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  pData[0] = (uint8_t)(Ypos & 0xFFU);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f103 0018 	add.w	r0, r3, #24
 8002b3a:	f107 0210 	add.w	r2, r7, #16
 8002b3e:	2301      	movs	r3, #1
 8002b40:	2107      	movs	r1, #7
 8002b42:	f001 f835 	bl	8003bb0 <hx8347i_write_reg>
 8002b46:	4602      	mov	r2, r0
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
  pData[0] = (uint8_t)(Xpos >> 8);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f103 0018 	add.w	r0, r3, #24
 8002b5c:	f107 0210 	add.w	r2, r7, #16
 8002b60:	2301      	movs	r3, #1
 8002b62:	2102      	movs	r1, #2
 8002b64:	f001 f824 	bl	8003bb0 <hx8347i_write_reg>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
  pData[0] = (uint8_t)(Xpos & 0xFFU);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f103 0018 	add.w	r0, r3, #24
 8002b7c:	f107 0210 	add.w	r2, r7, #16
 8002b80:	2301      	movs	r3, #1
 8002b82:	2103      	movs	r1, #3
 8002b84:	f001 f814 	bl	8003bb0 <hx8347i_write_reg>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  if (ret != HX8347I_OK)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HX8347I_SetCursor+0xa4>
  {
    ret = HX8347I_ERROR;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002b9c:	697b      	ldr	r3, [r7, #20]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HX8347I_DrawBitmap>:
  * @param  Ypos Y position on LCD.
  * @param  pBmp Pointer to bitmap.
  * @retval Component status.
  */
int32_t HX8347I_DrawBitmap(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b08c      	sub	sp, #48	; 0x30
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t height;
  uint32_t Ystart;
  uint32_t Ystop;

  /* Read file size */
  size = ((uint32_t)pBmp[5] << 24) | ((uint32_t)pBmp[4] << 16) | ((uint32_t)pBmp[3] << 8) | (uint32_t)pBmp[2];
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3305      	adds	r3, #5
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	061a      	lsls	r2, r3, #24
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	3303      	adds	r3, #3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	3202      	adds	r2, #2
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	623b      	str	r3, [r7, #32]
  /* Get bitmap data address offset */
  index = ((uint32_t)pBmp[13] << 24) | ((uint32_t)pBmp[12] << 16) | ((uint32_t)pBmp[11] << 8) | (uint32_t)pBmp[10];
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	330d      	adds	r3, #13
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	061a      	lsls	r2, r3, #24
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	330b      	adds	r3, #11
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	320a      	adds	r2, #10
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61fb      	str	r3, [r7, #28]
  /* Get image width */
  width = ((uint32_t)pBmp[21] << 24) | ((uint32_t)pBmp[20] << 16) | ((uint32_t)pBmp[19] << 8) | (uint32_t)pBmp[18];
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3315      	adds	r3, #21
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	061a      	lsls	r2, r3, #24
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3314      	adds	r3, #20
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3313      	adds	r3, #19
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	3212      	adds	r2, #18
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
  width--;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	61bb      	str	r3, [r7, #24]
  /* Get image height */
  height = ((uint32_t)pBmp[25] << 24) | ((uint32_t)pBmp[24] << 16) | ((uint32_t)pBmp[23] << 8) | (uint32_t)pBmp[22];
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3319      	adds	r3, #25
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	061a      	lsls	r2, r3, #24
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	3318      	adds	r3, #24
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	431a      	orrs	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3317      	adds	r3, #23
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	3216      	adds	r2, #22
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
  height--;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
  /* Get size of data */
  size = size - index;
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	623b      	str	r3, [r7, #32]
  size = size / 2U;
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	623b      	str	r3, [r7, #32]

  /* Compute new Y start and stop values */
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HX8347I_DrawBitmap+0xd4>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d10c      	bne.n	8002c94 <HX8347I_DrawBitmap+0xee>
  {
    Ystart = 319U - (Ypos + height);
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c84:	3301      	adds	r3, #1
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
    Ystop  = 319U - Ypos;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c8e:	3301      	adds	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e009      	b.n	8002ca8 <HX8347I_DrawBitmap+0x102>
  }
  else
  {
    Ystart = 239U - (Ypos + height);
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    Ystop  = 239U - Ypos;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set GRAM Area - Partial Display Control */
  pData[1] = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	747b      	strb	r3, [r7, #17]
  pData[0] = (uint8_t)((Xpos >> 8) & 0xFFU);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f103 0018 	add.w	r0, r3, #24
 8002cba:	f107 0210 	add.w	r2, r7, #16
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	f000 ff75 	bl	8003bb0 <hx8347i_write_reg>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	4413      	add	r3, r2
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(Xpos & 0xFFU);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f103 0018 	add.w	r0, r3, #24
 8002cda:	f107 0210 	add.w	r2, r7, #16
 8002cde:	2301      	movs	r3, #1
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	f000 ff65 	bl	8003bb0 <hx8347i_write_reg>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	4413      	add	r3, r2
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(((Xpos + width) >> 8) & 0xFFU);
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f103 0018 	add.w	r0, r3, #24
 8002d00:	f107 0210 	add.w	r2, r7, #16
 8002d04:	2301      	movs	r3, #1
 8002d06:	2104      	movs	r1, #4
 8002d08:	f000 ff52 	bl	8003bb0 <hx8347i_write_reg>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	4413      	add	r3, r2
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)((Xpos + width) & 0xFFU);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f103 0018 	add.w	r0, r3, #24
 8002d28:	f107 0210 	add.w	r2, r7, #16
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	2105      	movs	r1, #5
 8002d30:	f000 ff3e 	bl	8003bb0 <hx8347i_write_reg>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	4413      	add	r3, r2
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)((Ystart >> 8) & 0xFFU);
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f103 0018 	add.w	r0, r3, #24
 8002d4a:	f107 0210 	add.w	r2, r7, #16
 8002d4e:	2301      	movs	r3, #1
 8002d50:	2106      	movs	r1, #6
 8002d52:	f000 ff2d 	bl	8003bb0 <hx8347i_write_reg>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(Ystart & 0xFFU);
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f103 0018 	add.w	r0, r3, #24
 8002d6a:	f107 0210 	add.w	r2, r7, #16
 8002d6e:	2301      	movs	r3, #1
 8002d70:	2107      	movs	r1, #7
 8002d72:	f000 ff1d 	bl	8003bb0 <hx8347i_write_reg>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	4413      	add	r3, r2
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)((Ystop >> 8) & 0xFFU);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f103 0018 	add.w	r0, r3, #24
 8002d8c:	f107 0210 	add.w	r2, r7, #16
 8002d90:	2301      	movs	r3, #1
 8002d92:	2108      	movs	r1, #8
 8002d94:	f000 ff0c 	bl	8003bb0 <hx8347i_write_reg>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	4413      	add	r3, r2
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pData[0] = (uint8_t)(Ystop & 0xFFU);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	743b      	strb	r3, [r7, #16]
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f103 0018 	add.w	r0, r3, #24
 8002dac:	f107 0210 	add.w	r2, r7, #16
 8002db0:	2301      	movs	r3, #1
 8002db2:	2109      	movs	r1, #9
 8002db4:	f000 fefc 	bl	8003bb0 <hx8347i_write_reg>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	4413      	add	r3, r2
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HX8347I_DrawBitmap+0x22a>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d12b      	bne.n	8002e28 <HX8347I_DrawBitmap+0x282>
  {
    /* Memory access control: Invert MY */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f103 0018 	add.w	r0, r3, #24
 8002dd6:	f107 0210 	add.w	r2, r7, #16
 8002dda:	2301      	movs	r3, #1
 8002ddc:	2116      	movs	r1, #22
 8002dde:	f000 fed2 	bl	8003b86 <hx8347i_read_reg>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	4413      	add	r3, r2
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x80U) != 0U)
 8002dee:	7c3b      	ldrb	r3, [r7, #16]
 8002df0:	b25b      	sxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da05      	bge.n	8002e02 <HX8347I_DrawBitmap+0x25c>
    {
      pData[0] &= 0x7FU;
 8002df6:	7c3b      	ldrb	r3, [r7, #16]
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	743b      	strb	r3, [r7, #16]
 8002e00:	e004      	b.n	8002e0c <HX8347I_DrawBitmap+0x266>
    }
    else
    {
      pData[0] |= 0x80U;
 8002e02:	7c3b      	ldrb	r3, [r7, #16]
 8002e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f103 0018 	add.w	r0, r3, #24
 8002e12:	f107 0210 	add.w	r2, r7, #16
 8002e16:	2301      	movs	r3, #1
 8002e18:	2116      	movs	r1, #22
 8002e1a:	f000 fec9 	bl	8003bb0 <hx8347i_write_reg>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	4413      	add	r3, r2
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e26:	e02b      	b.n	8002e80 <HX8347I_DrawBitmap+0x2da>
  }
  else
  {
    /* Memory access control: Invert MX */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f103 0018 	add.w	r0, r3, #24
 8002e2e:	f107 0210 	add.w	r2, r7, #16
 8002e32:	2301      	movs	r3, #1
 8002e34:	2116      	movs	r1, #22
 8002e36:	f000 fea6 	bl	8003b86 <hx8347i_read_reg>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	4413      	add	r3, r2
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x40U) != 0U)
 8002e46:	7c3b      	ldrb	r3, [r7, #16]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HX8347I_DrawBitmap+0x2b6>
    {
      pData[0] &= 0xBFU;
 8002e50:	7c3b      	ldrb	r3, [r7, #16]
 8002e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	743b      	strb	r3, [r7, #16]
 8002e5a:	e004      	b.n	8002e66 <HX8347I_DrawBitmap+0x2c0>
    }
    else
    {
      pData[0] |= 0x40U;
 8002e5c:	7c3b      	ldrb	r3, [r7, #16]
 8002e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f103 0018 	add.w	r0, r3, #24
 8002e6c:	f107 0210 	add.w	r2, r7, #16
 8002e70:	2301      	movs	r3, #1
 8002e72:	2116      	movs	r1, #22
 8002e74:	f000 fe9c 	bl	8003bb0 <hx8347i_write_reg>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	4413      	add	r3, r2
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write GRAM */
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, &pBmp[index], size);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f103 0018 	add.w	r0, r3, #24
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2122      	movs	r1, #34	; 0x22
 8002e90:	f000 fe8e 	bl	8003bb0 <hx8347i_write_reg>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	4413      	add	r3, r2
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Restore GRAM Area - Partial Display Control */
  pData[1] = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	747b      	strb	r3, [r7, #17]
  pData[0] = 0x00U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	743b      	strb	r3, [r7, #16]
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HX8347I_DrawBitmap+0x30e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d170      	bne.n	8002f96 <HX8347I_DrawBitmap+0x3f0>
  {
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f103 0018 	add.w	r0, r3, #24
 8002eba:	f107 0210 	add.w	r2, r7, #16
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	f000 fe75 	bl	8003bb0 <hx8347i_write_reg>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eca:	4413      	add	r3, r2
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f103 0018 	add.w	r0, r3, #24
 8002ed4:	f107 0210 	add.w	r2, r7, #16
 8002ed8:	2301      	movs	r3, #1
 8002eda:	2103      	movs	r1, #3
 8002edc:	f000 fe68 	bl	8003bb0 <hx8347i_write_reg>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	4413      	add	r3, r2
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f103 0018 	add.w	r0, r3, #24
 8002eee:	f107 0210 	add.w	r2, r7, #16
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	2104      	movs	r1, #4
 8002ef6:	f000 fe5b 	bl	8003bb0 <hx8347i_write_reg>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	4413      	add	r3, r2
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0xEFU;
 8002f02:	23ef      	movs	r3, #239	; 0xef
 8002f04:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f103 0018 	add.w	r0, r3, #24
 8002f0c:	f107 0210 	add.w	r2, r7, #16
 8002f10:	2301      	movs	r3, #1
 8002f12:	2105      	movs	r1, #5
 8002f14:	f000 fe4c 	bl	8003bb0 <hx8347i_write_reg>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	4413      	add	r3, r2
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x00U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f103 0018 	add.w	r0, r3, #24
 8002f2a:	f107 0210 	add.w	r2, r7, #16
 8002f2e:	2301      	movs	r3, #1
 8002f30:	2106      	movs	r1, #6
 8002f32:	f000 fe3d 	bl	8003bb0 <hx8347i_write_reg>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	4413      	add	r3, r2
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f103 0018 	add.w	r0, r3, #24
 8002f44:	f107 0210 	add.w	r2, r7, #16
 8002f48:	2301      	movs	r3, #1
 8002f4a:	2107      	movs	r1, #7
 8002f4c:	f000 fe30 	bl	8003bb0 <hx8347i_write_reg>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	4413      	add	r3, r2
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x01U;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f103 0018 	add.w	r0, r3, #24
 8002f62:	f107 0210 	add.w	r2, r7, #16
 8002f66:	2301      	movs	r3, #1
 8002f68:	2108      	movs	r1, #8
 8002f6a:	f000 fe21 	bl	8003bb0 <hx8347i_write_reg>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	4413      	add	r3, r2
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x3FU;
 8002f76:	233f      	movs	r3, #63	; 0x3f
 8002f78:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f103 0018 	add.w	r0, r3, #24
 8002f80:	f107 0210 	add.w	r2, r7, #16
 8002f84:	2301      	movs	r3, #1
 8002f86:	2109      	movs	r1, #9
 8002f88:	f000 fe12 	bl	8003bb0 <hx8347i_write_reg>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	4413      	add	r3, r2
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f94:	e06f      	b.n	8003076 <HX8347I_DrawBitmap+0x4d0>
  }
  else
  {
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START2, pData, 1); /* SC */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f103 0018 	add.w	r0, r3, #24
 8002f9c:	f107 0210 	add.w	r2, r7, #16
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	f000 fe04 	bl	8003bb0 <hx8347i_write_reg>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	4413      	add	r3, r2
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_START1, pData, 1); /* SC */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f103 0018 	add.w	r0, r3, #24
 8002fb6:	f107 0210 	add.w	r2, r7, #16
 8002fba:	2301      	movs	r3, #1
 8002fbc:	2103      	movs	r1, #3
 8002fbe:	f000 fdf7 	bl	8003bb0 <hx8347i_write_reg>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	4413      	add	r3, r2
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x01U;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f103 0018 	add.w	r0, r3, #24
 8002fd4:	f107 0210 	add.w	r2, r7, #16
 8002fd8:	2301      	movs	r3, #1
 8002fda:	2104      	movs	r1, #4
 8002fdc:	f000 fde8 	bl	8003bb0 <hx8347i_write_reg>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	4413      	add	r3, r2
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x3FU;
 8002fe8:	233f      	movs	r3, #63	; 0x3f
 8002fea:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f103 0018 	add.w	r0, r3, #24
 8002ff2:	f107 0210 	add.w	r2, r7, #16
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	f000 fdd9 	bl	8003bb0 <hx8347i_write_reg>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	4413      	add	r3, r2
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START2, pData, 1); /* SP */
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f103 0018 	add.w	r0, r3, #24
 8003010:	f107 0210 	add.w	r2, r7, #16
 8003014:	2301      	movs	r3, #1
 8003016:	2106      	movs	r1, #6
 8003018:	f000 fdca 	bl	8003bb0 <hx8347i_write_reg>
 800301c:	4602      	mov	r2, r0
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	4413      	add	r3, r2
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_START1, pData, 1); /* SP */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f103 0018 	add.w	r0, r3, #24
 800302a:	f107 0210 	add.w	r2, r7, #16
 800302e:	2301      	movs	r3, #1
 8003030:	2107      	movs	r1, #7
 8003032:	f000 fdbd 	bl	8003bb0 <hx8347i_write_reg>
 8003036:	4602      	mov	r2, r0
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	4413      	add	r3, r2
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f103 0018 	add.w	r0, r3, #24
 8003044:	f107 0210 	add.w	r2, r7, #16
 8003048:	2301      	movs	r3, #1
 800304a:	2108      	movs	r1, #8
 800304c:	f000 fdb0 	bl	8003bb0 <hx8347i_write_reg>
 8003050:	4602      	mov	r2, r0
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	4413      	add	r3, r2
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[0] = 0xEFU;
 8003058:	23ef      	movs	r3, #239	; 0xef
 800305a:	743b      	strb	r3, [r7, #16]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f103 0018 	add.w	r0, r3, #24
 8003062:	f107 0210 	add.w	r2, r7, #16
 8003066:	2301      	movs	r3, #1
 8003068:	2109      	movs	r1, #9
 800306a:	f000 fda1 	bl	8003bb0 <hx8347i_write_reg>
 800306e:	4602      	mov	r2, r0
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	4413      	add	r3, r2
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HX8347I_DrawBitmap+0x4e0>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	2b02      	cmp	r3, #2
 8003084:	d12b      	bne.n	80030de <HX8347I_DrawBitmap+0x538>
  {
    /* Memory access control: Re-invert MY */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f103 0018 	add.w	r0, r3, #24
 800308c:	f107 0210 	add.w	r2, r7, #16
 8003090:	2301      	movs	r3, #1
 8003092:	2116      	movs	r1, #22
 8003094:	f000 fd77 	bl	8003b86 <hx8347i_read_reg>
 8003098:	4602      	mov	r2, r0
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	4413      	add	r3, r2
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x80U) != 0U)
 80030a4:	7c3b      	ldrb	r3, [r7, #16]
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da05      	bge.n	80030b8 <HX8347I_DrawBitmap+0x512>
    {
      pData[0] &= 0x7FU;
 80030ac:	7c3b      	ldrb	r3, [r7, #16]
 80030ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	743b      	strb	r3, [r7, #16]
 80030b6:	e004      	b.n	80030c2 <HX8347I_DrawBitmap+0x51c>
    }
    else
    {
      pData[0] |= 0x80U;
 80030b8:	7c3b      	ldrb	r3, [r7, #16]
 80030ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f103 0018 	add.w	r0, r3, #24
 80030c8:	f107 0210 	add.w	r2, r7, #16
 80030cc:	2301      	movs	r3, #1
 80030ce:	2116      	movs	r1, #22
 80030d0:	f000 fd6e 	bl	8003bb0 <hx8347i_write_reg>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	4413      	add	r3, r2
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030dc:	e02b      	b.n	8003136 <HX8347I_DrawBitmap+0x590>
  }
  else
  {
    /* Memory access control: Re-invert MX */
    ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f103 0018 	add.w	r0, r3, #24
 80030e4:	f107 0210 	add.w	r2, r7, #16
 80030e8:	2301      	movs	r3, #1
 80030ea:	2116      	movs	r1, #22
 80030ec:	f000 fd4b 	bl	8003b86 <hx8347i_read_reg>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	4413      	add	r3, r2
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pData[1] = 0x00U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	747b      	strb	r3, [r7, #17]
    if ((pData[0] & 0x40U) != 0U)
 80030fc:	7c3b      	ldrb	r3, [r7, #16]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HX8347I_DrawBitmap+0x56c>
    {
      pData[0] &= 0xBFU;
 8003106:	7c3b      	ldrb	r3, [r7, #16]
 8003108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310c:	b2db      	uxtb	r3, r3
 800310e:	743b      	strb	r3, [r7, #16]
 8003110:	e004      	b.n	800311c <HX8347I_DrawBitmap+0x576>
    }
    else
    {
      pData[0] |= 0x40U;
 8003112:	7c3b      	ldrb	r3, [r7, #16]
 8003114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003118:	b2db      	uxtb	r3, r3
 800311a:	743b      	strb	r3, [r7, #16]
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f103 0018 	add.w	r0, r3, #24
 8003122:	f107 0210 	add.w	r2, r7, #16
 8003126:	2301      	movs	r3, #1
 8003128:	2116      	movs	r1, #22
 800312a:	f000 fd41 	bl	8003bb0 <hx8347i_write_reg>
 800312e:	4602      	mov	r2, r0
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	4413      	add	r3, r2
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (ret != HX8347I_OK)
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HX8347I_DrawBitmap+0x59c>
  {
    ret = HX8347I_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003144:	4618      	mov	r0, r3
 8003146:	3730      	adds	r7, #48	; 0x30
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HX8347I_FillRGBRect>:
  * @param  Height Height of the rectangle.
  * @retval Component status.
  */
int32_t HX8347I_FillRGBRect(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width,
                            uint32_t Height)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8003152:	af00      	add	r7, sp, #0
 8003154:	f507 7428 	add.w	r4, r7, #672	; 0x2a0
 8003158:	f5a4 7425 	sub.w	r4, r4, #660	; 0x294
 800315c:	6020      	str	r0, [r4, #0]
 800315e:	f507 7028 	add.w	r0, r7, #672	; 0x2a0
 8003162:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
 8003166:	6001      	str	r1, [r0, #0]
 8003168:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 800316c:	f5a1 7127 	sub.w	r1, r1, #668	; 0x29c
 8003170:	600a      	str	r2, [r1, #0]
 8003172:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003176:	f5a2 7228 	sub.w	r2, r2, #672	; 0x2a0
 800317a:	6013      	str	r3, [r2, #0]
  int32_t  ret = HX8347I_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
  uint8_t  buffer[640];
  uint8_t *pTmp;
  uint32_t i;
  uint32_t j;

  pTmp = pData;
 8003182:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003186:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

  for (i = 0; i < Height; i++)
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8003196:	e062      	b.n	800325e <HX8347I_FillRGBRect+0x112>
  {
    /* Set Cursor */
    ret += HX8347I_SetCursor(pObj, Xpos, Ypos + i);
 8003198:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800319c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80031a6:	441a      	add	r2, r3
 80031a8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80031ac:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 80031b0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80031b4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80031b8:	6809      	ldr	r1, [r1, #0]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	f7ff fc9c 	bl	8002af8 <HX8347I_SetCursor>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80031c6:	4413      	add	r3, r2
 80031c8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* Sent a complete line */
    for (j = 0; j < Width; j++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80031d2:	e025      	b.n	8003220 <HX8347I_FillRGBRect+0xd4>
    {
      buffer[2U * j]      = *pTmp;
 80031d4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80031de:	7811      	ldrb	r1, [r2, #0]
 80031e0:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80031e4:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 80031e8:	54d1      	strb	r1, [r2, r3]
      pTmp++;
 80031ea:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80031ee:	3301      	adds	r3, #1
 80031f0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
      buffer[(2U * j) + 1U] = *pTmp;
 80031f4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	3301      	adds	r3, #1
 80031fc:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8003200:	7811      	ldrb	r1, [r2, #0]
 8003202:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003206:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 800320a:	54d1      	strb	r1, [r2, r3]
      pTmp++;
 800320c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8003210:	3301      	adds	r3, #1
 8003212:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (j = 0; j < Width; j++)
 8003216:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800321a:	3301      	adds	r3, #1
 800321c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8003220:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8003224:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8003228:	429a      	cmp	r2, r3
 800322a:	d3d3      	bcc.n	80031d4 <HX8347I_FillRGBRect+0x88>
    }
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, buffer, Width);
 800322c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003230:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f103 0018 	add.w	r0, r3, #24
 800323a:	f107 0210 	add.w	r2, r7, #16
 800323e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8003242:	2122      	movs	r1, #34	; 0x22
 8003244:	f000 fcb4 	bl	8003bb0 <hx8347i_write_reg>
 8003248:	4602      	mov	r2, r0
 800324a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800324e:	4413      	add	r3, r2
 8003250:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
  for (i = 0; i < Height; i++)
 8003254:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003258:	3301      	adds	r3, #1
 800325a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800325e:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8003262:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8003266:	429a      	cmp	r2, r3
 8003268:	d396      	bcc.n	8003198 <HX8347I_FillRGBRect+0x4c>
  }

  if (ret != HX8347I_OK)
 800326a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HX8347I_FillRGBRect+0x12e>
  {
    ret = HX8347I_ERROR;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
  }

  return ret;
 800327a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
}
 800327e:	4618      	mov	r0, r3
 8003280:	f507 7729 	add.w	r7, r7, #676	; 0x2a4
 8003284:	46bd      	mov	sp, r7
 8003286:	bd90      	pop	{r4, r7, pc}

08003288 <HX8347I_DrawHLine>:
  * @param  Length Length of the line.
  * @param  Color  Color of the line.
  * @retval Component status.
  */
int32_t HX8347I_DrawHLine(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 800328e:	af00      	add	r7, sp, #0
 8003290:	f507 7426 	add.w	r4, r7, #664	; 0x298
 8003294:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 8003298:	6020      	str	r0, [r4, #0]
 800329a:	f507 7026 	add.w	r0, r7, #664	; 0x298
 800329e:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 80032a2:	6001      	str	r1, [r0, #0]
 80032a4:	f507 7126 	add.w	r1, r7, #664	; 0x298
 80032a8:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 80032ac:	600a      	str	r2, [r1, #0]
 80032ae:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80032b2:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 80032b6:	6013      	str	r3, [r2, #0]
  int32_t  ret = HX8347I_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  uint8_t  pData[640];
  uint32_t i;

  pData[1] = 0x00U;
 80032be:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80032c2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80032c6:	2200      	movs	r2, #0
 80032c8:	705a      	strb	r2, [r3, #1]

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Xpos, Ypos);
 80032ca:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80032ce:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80032d2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80032d6:	f5a3 7124 	sub.w	r1, r3, #656	; 0x290
 80032da:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80032de:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	6809      	ldr	r1, [r1, #0]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	f7ff fc06 	bl	8002af8 <HX8347I_SetCursor>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80032f2:	4413      	add	r3, r2
 80032f4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Sent a complete line */
  for (i = 0; i < Length; i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80032fe:	e01c      	b.n	800333a <HX8347I_DrawHLine+0xb2>
  {
    pData[2U * i]      = (uint8_t)(Color & 0xFFU);
 8003300:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800330a:	b2d1      	uxtb	r1, r2
 800330c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8003310:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8003314:	54d1      	strb	r1, [r2, r3]
    pData[(2U * i) + 1U] = (uint8_t)((Color >> 8) & 0xFFU);
 8003316:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800331a:	0a1a      	lsrs	r2, r3, #8
 800331c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	3301      	adds	r3, #1
 8003324:	b2d1      	uxtb	r1, r2
 8003326:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800332a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 800332e:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < Length; i++)
 8003330:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003334:	3301      	adds	r3, #1
 8003336:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800333a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800333e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8003342:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3d9      	bcc.n	8003300 <HX8347I_DrawHLine+0x78>
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, pData, Length);
 800334c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003350:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f103 0018 	add.w	r0, r3, #24
 800335a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800335e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8003362:	f107 0210 	add.w	r2, r7, #16
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2122      	movs	r1, #34	; 0x22
 800336a:	f000 fc21 	bl	8003bb0 <hx8347i_write_reg>
 800336e:	4602      	mov	r2, r0
 8003370:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003374:	4413      	add	r3, r2
 8003376:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  if (ret != HX8347I_OK)
 800337a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HX8347I_DrawHLine+0x102>
  {
    ret = HX8347I_ERROR;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }

  return ret;
 800338a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
}
 800338e:	4618      	mov	r0, r3
 8003390:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}

08003398 <HX8347I_DrawVLine>:
  * @param  Length Length of the line.
  * @param  Color  Color of the line.
  * @retval Component status.
  */
int32_t HX8347I_DrawVLine(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 800339e:	af00      	add	r7, sp, #0
 80033a0:	f507 7426 	add.w	r4, r7, #664	; 0x298
 80033a4:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 80033a8:	6020      	str	r0, [r4, #0]
 80033aa:	f507 7026 	add.w	r0, r7, #664	; 0x298
 80033ae:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 80033b2:	6001      	str	r1, [r0, #0]
 80033b4:	f507 7126 	add.w	r1, r7, #664	; 0x298
 80033b8:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 80033bc:	600a      	str	r2, [r1, #0]
 80033be:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80033c2:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 80033c6:	6013      	str	r3, [r2, #0]
  int32_t  ret = HX8347I_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  uint8_t  pData[640];
  uint32_t i;

  pData[1] = 0x00U;
 80033ce:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80033d2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80033d6:	2200      	movs	r2, #0
 80033d8:	705a      	strb	r2, [r3, #1]

  /* Invert row and column end addresses */
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 80033da:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80033de:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <HX8347I_DrawVLine+0x62>
 80033ea:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80033ee:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d164      	bne.n	80034c4 <HX8347I_DrawVLine+0x12c>
  {
    pData[0] = 0x00U;
 80033fa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80033fe:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8003406:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800340a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f103 0018 	add.w	r0, r3, #24
 8003414:	f107 0210 	add.w	r2, r7, #16
 8003418:	2301      	movs	r3, #1
 800341a:	2108      	movs	r1, #8
 800341c:	f000 fbc8 	bl	8003bb0 <hx8347i_write_reg>
 8003420:	4602      	mov	r2, r0
 8003422:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003426:	4413      	add	r3, r2
 8003428:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 800342c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003430:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003434:	22ef      	movs	r2, #239	; 0xef
 8003436:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8003438:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800343c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f103 0018 	add.w	r0, r3, #24
 8003446:	f107 0210 	add.w	r2, r7, #16
 800344a:	2301      	movs	r3, #1
 800344c:	2109      	movs	r1, #9
 800344e:	f000 fbaf 	bl	8003bb0 <hx8347i_write_reg>
 8003452:	4602      	mov	r2, r0
 8003454:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003458:	4413      	add	r3, r2
 800345a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x01U;
 800345e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003462:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 800346a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800346e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f103 0018 	add.w	r0, r3, #24
 8003478:	f107 0210 	add.w	r2, r7, #16
 800347c:	2301      	movs	r3, #1
 800347e:	2104      	movs	r1, #4
 8003480:	f000 fb96 	bl	8003bb0 <hx8347i_write_reg>
 8003484:	4602      	mov	r2, r0
 8003486:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800348a:	4413      	add	r3, r2
 800348c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 8003490:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003494:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 800349c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80034a0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f103 0018 	add.w	r0, r3, #24
 80034aa:	f107 0210 	add.w	r2, r7, #16
 80034ae:	2301      	movs	r3, #1
 80034b0:	2105      	movs	r1, #5
 80034b2:	f000 fb7d 	bl	8003bb0 <hx8347i_write_reg>
 80034b6:	4602      	mov	r2, r0
 80034b8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80034bc:	4413      	add	r3, r2
 80034be:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80034c2:	e063      	b.n	800358c <HX8347I_DrawVLine+0x1f4>
  }
  else
  {
    pData[0] = 0x01U;
 80034c4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80034c8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 80034d0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80034d4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f103 0018 	add.w	r0, r3, #24
 80034de:	f107 0210 	add.w	r2, r7, #16
 80034e2:	2301      	movs	r3, #1
 80034e4:	2108      	movs	r1, #8
 80034e6:	f000 fb63 	bl	8003bb0 <hx8347i_write_reg>
 80034ea:	4602      	mov	r2, r0
 80034ec:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80034f0:	4413      	add	r3, r2
 80034f2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 80034f6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80034fa:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80034fe:	223f      	movs	r2, #63	; 0x3f
 8003500:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8003502:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003506:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f103 0018 	add.w	r0, r3, #24
 8003510:	f107 0210 	add.w	r2, r7, #16
 8003514:	2301      	movs	r3, #1
 8003516:	2109      	movs	r1, #9
 8003518:	f000 fb4a 	bl	8003bb0 <hx8347i_write_reg>
 800351c:	4602      	mov	r2, r0
 800351e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003522:	4413      	add	r3, r2
 8003524:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x00U;
 8003528:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800352c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8003534:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003538:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f103 0018 	add.w	r0, r3, #24
 8003542:	f107 0210 	add.w	r2, r7, #16
 8003546:	2301      	movs	r3, #1
 8003548:	2104      	movs	r1, #4
 800354a:	f000 fb31 	bl	8003bb0 <hx8347i_write_reg>
 800354e:	4602      	mov	r2, r0
 8003550:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003554:	4413      	add	r3, r2
 8003556:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 800355a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800355e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003562:	22ef      	movs	r2, #239	; 0xef
 8003564:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8003566:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800356a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f103 0018 	add.w	r0, r3, #24
 8003574:	f107 0210 	add.w	r2, r7, #16
 8003578:	2301      	movs	r3, #1
 800357a:	2105      	movs	r1, #5
 800357c:	f000 fb18 	bl	8003bb0 <hx8347i_write_reg>
 8003580:	4602      	mov	r2, r0
 8003582:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003586:	4413      	add	r3, r2
 8003588:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }
  /* Memory access control: Invert MV */
  ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 800358c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003590:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f103 0018 	add.w	r0, r3, #24
 800359a:	f107 0210 	add.w	r2, r7, #16
 800359e:	2301      	movs	r3, #1
 80035a0:	2116      	movs	r1, #22
 80035a2:	f000 faf0 	bl	8003b86 <hx8347i_read_reg>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80035ac:	4413      	add	r3, r2
 80035ae:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  pData[1] = 0x00U;
 80035b2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80035b6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80035ba:	2200      	movs	r2, #0
 80035bc:	705a      	strb	r2, [r3, #1]
  if ((pData[0] & 0x20U) != 0U)
 80035be:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80035c2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HX8347I_DrawVLine+0x254>
  {
    pData[0] &= 0xDFU;
 80035d0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80035d4:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f023 0320 	bic.w	r3, r3, #32
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80035e4:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e00c      	b.n	8003606 <HX8347I_DrawVLine+0x26e>
  }
  else
  {
    pData[0] |= 0x20U;
 80035ec:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80035f0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003600:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003604:	701a      	strb	r2, [r3, #0]
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8003606:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800360a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f103 0018 	add.w	r0, r3, #24
 8003614:	f107 0210 	add.w	r2, r7, #16
 8003618:	2301      	movs	r3, #1
 800361a:	2116      	movs	r1, #22
 800361c:	f000 fac8 	bl	8003bb0 <hx8347i_write_reg>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003626:	4413      	add	r3, r2
 8003628:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Ypos, Xpos);
 800362c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003630:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8003634:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003638:	f5a3 7125 	sub.w	r1, r3, #660	; 0x294
 800363c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003640:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f7ff fa55 	bl	8002af8 <HX8347I_SetCursor>
 800364e:	4602      	mov	r2, r0
 8003650:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003654:	4413      	add	r3, r2
 8003656:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Sent a complete line */
  for (i = 0; i < Length; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8003660:	e01c      	b.n	800369c <HX8347I_DrawVLine+0x304>
  {
    pData[2U * i]      = (uint8_t)(Color & 0xFFU);
 8003662:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800366c:	b2d1      	uxtb	r1, r2
 800366e:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8003672:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8003676:	54d1      	strb	r1, [r2, r3]
    pData[(2U * i) + 1U] = (uint8_t)((Color >> 8) & 0xFFU);
 8003678:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800367c:	0a1a      	lsrs	r2, r3, #8
 800367e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	3301      	adds	r3, #1
 8003686:	b2d1      	uxtb	r1, r2
 8003688:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800368c:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8003690:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < Length; i++)
 8003692:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003696:	3301      	adds	r3, #1
 8003698:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800369c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80036a0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80036a4:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3d9      	bcc.n	8003662 <HX8347I_DrawVLine+0x2ca>
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, pData, Length);
 80036ae:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80036b2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f103 0018 	add.w	r0, r3, #24
 80036bc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80036c0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80036c4:	f107 0210 	add.w	r2, r7, #16
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2122      	movs	r1, #34	; 0x22
 80036cc:	f000 fa70 	bl	8003bb0 <hx8347i_write_reg>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80036d6:	4413      	add	r3, r2
 80036d8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  /* Restore row and column end addresses */
  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 80036dc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80036e0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HX8347I_DrawVLine+0x364>
 80036ec:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80036f0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d16a      	bne.n	80037d2 <HX8347I_DrawVLine+0x43a>
  {
    pData[1] = 0x00U;
 80036fc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003700:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003704:	2200      	movs	r2, #0
 8003706:	705a      	strb	r2, [r3, #1]
    pData[0] = 0x01U;
 8003708:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800370c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 8003714:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003718:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f103 0018 	add.w	r0, r3, #24
 8003722:	f107 0210 	add.w	r2, r7, #16
 8003726:	2301      	movs	r3, #1
 8003728:	2108      	movs	r1, #8
 800372a:	f000 fa41 	bl	8003bb0 <hx8347i_write_reg>
 800372e:	4602      	mov	r2, r0
 8003730:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003734:	4413      	add	r3, r2
 8003736:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 800373a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800373e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003742:	223f      	movs	r2, #63	; 0x3f
 8003744:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 8003746:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800374a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f103 0018 	add.w	r0, r3, #24
 8003754:	f107 0210 	add.w	r2, r7, #16
 8003758:	2301      	movs	r3, #1
 800375a:	2109      	movs	r1, #9
 800375c:	f000 fa28 	bl	8003bb0 <hx8347i_write_reg>
 8003760:	4602      	mov	r2, r0
 8003762:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003766:	4413      	add	r3, r2
 8003768:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x00U;
 800376c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003770:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 8003778:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800377c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f103 0018 	add.w	r0, r3, #24
 8003786:	f107 0210 	add.w	r2, r7, #16
 800378a:	2301      	movs	r3, #1
 800378c:	2104      	movs	r1, #4
 800378e:	f000 fa0f 	bl	8003bb0 <hx8347i_write_reg>
 8003792:	4602      	mov	r2, r0
 8003794:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003798:	4413      	add	r3, r2
 800379a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 800379e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80037a2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80037a6:	22ef      	movs	r2, #239	; 0xef
 80037a8:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 80037aa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80037ae:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f103 0018 	add.w	r0, r3, #24
 80037b8:	f107 0210 	add.w	r2, r7, #16
 80037bc:	2301      	movs	r3, #1
 80037be:	2105      	movs	r1, #5
 80037c0:	f000 f9f6 	bl	8003bb0 <hx8347i_write_reg>
 80037c4:	4602      	mov	r2, r0
 80037c6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80037ca:	4413      	add	r3, r2
 80037cc:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80037d0:	e069      	b.n	80038a6 <HX8347I_DrawVLine+0x50e>
  }
  else
  {
    pData[1] = 0x00U;
 80037d2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80037d6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80037da:	2200      	movs	r2, #0
 80037dc:	705a      	strb	r2, [r3, #1]
    pData[0] = 0x00U;
 80037de:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80037e2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END2, pData, 1); /* EP */
 80037ea:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80037ee:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f103 0018 	add.w	r0, r3, #24
 80037f8:	f107 0210 	add.w	r2, r7, #16
 80037fc:	2301      	movs	r3, #1
 80037fe:	2108      	movs	r1, #8
 8003800:	f000 f9d6 	bl	8003bb0 <hx8347i_write_reg>
 8003804:	4602      	mov	r2, r0
 8003806:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800380a:	4413      	add	r3, r2
 800380c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0xEFU;
 8003810:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003814:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003818:	22ef      	movs	r2, #239	; 0xef
 800381a:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_ROW_ADDRESS_END1, pData, 1); /* EP */
 800381c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003820:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f103 0018 	add.w	r0, r3, #24
 800382a:	f107 0210 	add.w	r2, r7, #16
 800382e:	2301      	movs	r3, #1
 8003830:	2109      	movs	r1, #9
 8003832:	f000 f9bd 	bl	8003bb0 <hx8347i_write_reg>
 8003836:	4602      	mov	r2, r0
 8003838:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800383c:	4413      	add	r3, r2
 800383e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x01U;
 8003842:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003846:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END2, pData, 1); /* EC */
 800384e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003852:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f103 0018 	add.w	r0, r3, #24
 800385c:	f107 0210 	add.w	r2, r7, #16
 8003860:	2301      	movs	r3, #1
 8003862:	2104      	movs	r1, #4
 8003864:	f000 f9a4 	bl	8003bb0 <hx8347i_write_reg>
 8003868:	4602      	mov	r2, r0
 800386a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800386e:	4413      	add	r3, r2
 8003870:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    pData[0] = 0x3FU;
 8003874:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003878:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	701a      	strb	r2, [r3, #0]
    ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_COLUMN_ADDRESS_END1, pData, 1); /* EC */
 8003880:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003884:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f103 0018 	add.w	r0, r3, #24
 800388e:	f107 0210 	add.w	r2, r7, #16
 8003892:	2301      	movs	r3, #1
 8003894:	2105      	movs	r1, #5
 8003896:	f000 f98b 	bl	8003bb0 <hx8347i_write_reg>
 800389a:	4602      	mov	r2, r0
 800389c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80038a0:	4413      	add	r3, r2
 80038a2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }
  /* Memory access control: Re-invert MV */
  ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 80038a6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80038aa:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f103 0018 	add.w	r0, r3, #24
 80038b4:	f107 0210 	add.w	r2, r7, #16
 80038b8:	2301      	movs	r3, #1
 80038ba:	2116      	movs	r1, #22
 80038bc:	f000 f963 	bl	8003b86 <hx8347i_read_reg>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80038c6:	4413      	add	r3, r2
 80038c8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  pData[1] = 0x00U;
 80038cc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80038d0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80038d4:	2200      	movs	r2, #0
 80038d6:	705a      	strb	r2, [r3, #1]
  if ((pData[0] & 0x20U) != 0U)
 80038d8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80038dc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <HX8347I_DrawVLine+0x56e>
  {
    pData[0] &= 0xDFU;
 80038ea:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80038ee:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	f023 0320 	bic.w	r3, r3, #32
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80038fe:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e00c      	b.n	8003920 <HX8347I_DrawVLine+0x588>
  }
  else
  {
    pData[0] |= 0x20U;
 8003906:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800390a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f043 0320 	orr.w	r3, r3, #32
 8003914:	b2da      	uxtb	r2, r3
 8003916:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800391a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800391e:	701a      	strb	r2, [r3, #0]
  }
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_MEMORY_ACCESS_CTRL, pData, 1);
 8003920:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003924:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f103 0018 	add.w	r0, r3, #24
 800392e:	f107 0210 	add.w	r2, r7, #16
 8003932:	2301      	movs	r3, #1
 8003934:	2116      	movs	r1, #22
 8003936:	f000 f93b 	bl	8003bb0 <hx8347i_write_reg>
 800393a:	4602      	mov	r2, r0
 800393c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003940:	4413      	add	r3, r2
 8003942:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

  if (ret != HX8347I_OK)
 8003946:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HX8347I_DrawVLine+0x5be>
  {
    ret = HX8347I_ERROR;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  }

  return ret;
 8003956:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
}
 800395a:	4618      	mov	r0, r3
 800395c:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 8003960:	46bd      	mov	sp, r7
 8003962:	bd90      	pop	{r4, r7, pc}

08003964 <HX8347I_FillRect>:
  * @param  Color  Color of the rectangle.
  * @retval Component status.
  */
int32_t HX8347I_FillRect(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                         uint32_t Color)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t i;

  for (i = 0U; i < Height; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e013      	b.n	80039a4 <HX8347I_FillRect+0x40>
  {
    if (HX8347I_DrawHLine(pObj, Xpos, (i + Ypos), Width, Color) != HX8347I_OK)
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	441a      	add	r2, r3
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fc7c 	bl	8003288 <HX8347I_DrawHLine>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HX8347I_FillRect+0x3a>
    {
      ret = HX8347I_ERROR;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	617b      	str	r3, [r7, #20]
      break;
 800399c:	e006      	b.n	80039ac <HX8347I_FillRect+0x48>
  for (i = 0U; i < Height; i++)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3301      	adds	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3e7      	bcc.n	800397c <HX8347I_FillRect+0x18>
    }
  }

  return ret;
 80039ac:	697b      	ldr	r3, [r7, #20]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HX8347I_GetPixel>:
  * @param  Ypos Y position on LCD.
  * @param  Color Color of the pixel.
  * @retval Component status.
  */
int32_t HX8347I_GetPixel(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b088      	sub	sp, #32
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
  uint8_t  pData[6];

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Xpos, Ypos);
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff f893 	bl	8002af8 <HX8347I_SetCursor>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	61fb      	str	r3, [r7, #28]

  /* read pixel */
  ret += hx8347i_read_reg(&pObj->Ctx, HX8347I_READ_DATA, pData, 3);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f103 0018 	add.w	r0, r3, #24
 80039e0:	f107 0214 	add.w	r2, r7, #20
 80039e4:	2303      	movs	r3, #3
 80039e6:	2122      	movs	r1, #34	; 0x22
 80039e8:	f000 f8cd 	bl	8003b86 <hx8347i_read_reg>
 80039ec:	4602      	mov	r2, r0
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	61fb      	str	r3, [r7, #28]

  /* Set color in RGB565 format */
  *Color = ((((uint32_t)pData[3] << 8) & 0xF800U) |
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	f403 4278 	and.w	r2, r3, #63488	; 0xf800
            (((uint32_t)pData[2] << 3) & 0x07E0U) |
 80039fc:	7dbb      	ldrb	r3, [r7, #22]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
  *Color = ((((uint32_t)pData[3] << 8) & 0xF800U) |
 8003a04:	431a      	orrs	r2, r3
            (((uint32_t)pData[5] >> 3) & 0x001FU));
 8003a06:	7e7b      	ldrb	r3, [r7, #25]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 031f 	and.w	r3, r3, #31
            (((uint32_t)pData[2] << 3) & 0x07E0U) |
 8003a10:	431a      	orrs	r2, r3
  *Color = ((((uint32_t)pData[3] << 8) & 0xF800U) |
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	601a      	str	r2, [r3, #0]

  if (ret != HX8347I_OK)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HX8347I_GetPixel+0x6c>
  {
    ret = HX8347I_ERROR;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a20:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8003a22:	69fb      	ldr	r3, [r7, #28]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HX8347I_SetPixel>:
  * @param  Ypos Y position on LCD.
  * @param  Color Color of the pixel.
  * @retval Component status.
  */
int32_t HX8347I_SetPixel(HX8347I_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Set Cursor */
  ret += HX8347I_SetCursor(pObj, Xpos, Ypos);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff f858 	bl	8002af8 <HX8347I_SetCursor>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* read pixel */
  ret += hx8347i_write_reg(&pObj->Ctx, HX8347I_READ_DATA, (uint8_t *) &Color, 1);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f103 0018 	add.w	r0, r3, #24
 8003a56:	463a      	mov	r2, r7
 8003a58:	2301      	movs	r3, #1
 8003a5a:	2122      	movs	r1, #34	; 0x22
 8003a5c:	f000 f8a8 	bl	8003bb0 <hx8347i_write_reg>
 8003a60:	4602      	mov	r2, r0
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	4413      	add	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  if (ret != HX8347I_OK)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HX8347I_SetPixel+0x48>
  {
    ret = HX8347I_ERROR;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a74:	697b      	ldr	r3, [r7, #20]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HX8347I_GetXSize>:
  * @param  pObj Pointer to component object.
  * @param  Xsize X size of LCD.
  * @retval Component status.
  */
int32_t HX8347I_GetXSize(HX8347I_Object_t *pObj, uint32_t *Xsize)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]

  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HX8347I_GetXSize+0x1e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d103      	bne.n	8003aa4 <HX8347I_GetXSize+0x26>
  {
    *Xsize = HX8347I_SIZE_240;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	22f0      	movs	r2, #240	; 0xf0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e003      	b.n	8003aac <HX8347I_GetXSize+0x2e>
  }
  else
  {
    *Xsize = HX8347I_SIZE_320;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003aac:	68fb      	ldr	r3, [r7, #12]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HX8347I_GetYSize>:
  * @param  pObj Pointer to component object.
  * @param  Ysize Y size of LCD.
  * @retval Component status.
  */
int32_t HX8347I_GetYSize(HX8347I_Object_t *pObj, uint32_t *Ysize)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  int32_t  ret = HX8347I_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  if ((pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT) || (pObj->Orientation == HX8347I_ORIENTATION_PORTRAIT_ROT180))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HX8347I_GetYSize+0x1e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d104      	bne.n	8003ae2 <HX8347I_GetYSize+0x28>
  {
    *Ysize = HX8347I_SIZE_320;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e002      	b.n	8003ae8 <HX8347I_GetYSize+0x2e>
  }
  else
  {
    *Ysize = HX8347I_SIZE_240;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	22f0      	movs	r2, #240	; 0xf0
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HX8347I_ReadRegWrap>:
  * @param  pData   The target register value to be red.
  * @param  Length  Buffer size to be red.
  * @retval error status.
  */
static int32_t HX8347I_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 8003af6:	b590      	push	{r4, r7, lr}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	460b      	mov	r3, r1
 8003b04:	817b      	strh	r3, [r7, #10]
  HX8347I_Object_t *pObj = (HX8347I_Object_t *)handle;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	691c      	ldr	r4, [r3, #16]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	8918      	ldrh	r0, [r3, #8]
 8003b12:	8979      	ldrh	r1, [r7, #10]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	47a0      	blx	r4
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd90      	pop	{r4, r7, pc}

08003b24 <HX8347I_WriteRegWrap>:
  * @param  pData  The target register value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t HX8347I_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	460b      	mov	r3, r1
 8003b32:	817b      	strh	r3, [r7, #10]
  HX8347I_Object_t *pObj = (HX8347I_Object_t *)handle;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	68dc      	ldr	r4, [r3, #12]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	8918      	ldrh	r0, [r3, #8]
 8003b40:	8979      	ldrh	r1, [r7, #10]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	47a0      	blx	r4
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}

08003b52 <HX8347I_Delay>:
  * @brief  HX8347I delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static void HX8347I_Delay(HX8347I_Object_t *pObj, uint32_t Delay)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	4798      	blx	r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8003b66:	bf00      	nop
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	4798      	blx	r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d8f5      	bhi.n	8003b68 <HX8347I_Delay+0x16>
  {
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <hx8347i_read_reg>:
  * Description   : Generic Reading function.
  * Input         : Driver context, register Address, length of buffer.
  * Output        : Status.
  *******************************************************************************/
int32_t hx8347i_read_reg(HX8347I_ctx_t *ctx, uint16_t reg, uint8_t *data, uint32_t length)
{
 8003b86:	b590      	push	{r4, r7, lr}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	460b      	mov	r3, r1
 8003b94:	817b      	strh	r3, [r7, #10]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685c      	ldr	r4, [r3, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6898      	ldr	r0, [r3, #8]
 8003b9e:	8979      	ldrh	r1, [r7, #10]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	47a0      	blx	r4
 8003ba6:	4603      	mov	r3, r0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd90      	pop	{r4, r7, pc}

08003bb0 <hx8347i_write_reg>:
  * Input         : Driver context, Register Address, data to be written,
                  length of buffer.
  * Output        : Status.
  *******************************************************************************/
int32_t hx8347i_write_reg(HX8347I_ctx_t *ctx, uint16_t reg, uint8_t *data, uint32_t length)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	817b      	strh	r3, [r7, #10]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681c      	ldr	r4, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6898      	ldr	r0, [r3, #8]
 8003bc8:	8979      	ldrh	r1, [r7, #10]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	47a0      	blx	r4
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}

08003bda <MFXSTM32L152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Init(MFXSTM32L152_Object_t *pObj)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d11c      	bne.n	8003c2a <MFXSTM32L152_Init+0x50>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4798      	blx	r3

    if (MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8d6 	bl	8003daa <MFXSTM32L152_SetIrqOutPinPolarity>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <MFXSTM32L152_Init+0x32>
    {
      ret = MFXSTM32L152_ERROR;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e00e      	b.n	8003c2a <MFXSTM32L152_Init+0x50>
    }
    else if (MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f901 	bl	8003e16 <MFXSTM32L152_SetIrqOutPinType>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <MFXSTM32L152_Init+0x48>
    {
      ret = MFXSTM32L152_ERROR;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e003      	b.n	8003c2a <MFXSTM32L152_Init+0x50>
    }
    else
    {
      pObj->IsInitialized = 1U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }

  return ret;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <MFXSTM32L152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d106      	bne.n	8003c54 <MFXSTM32L152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    pObj->IO.DeInit();
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4798      	blx	r3
    pObj->IsInitialized = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  return MFXSTM32L152_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <MFXSTM32L152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Reset(MFXSTM32L152_Object_t *pObj)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = MFXSTM32L152_SWRST;
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	72fb      	strb	r3, [r7, #11]

  /* Soft Reset */
  if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f103 0018 	add.w	r0, r3, #24
 8003c74:	f107 020b 	add.w	r2, r7, #11
 8003c78:	2301      	movs	r3, #1
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	f000 fd9c 	bl	80047b8 <mfxstm32l152_write_reg>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <MFXSTM32L152_Reset+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <MFXSTM32L152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  pObj   Pointer to component object.
  * @retval The Device ID (two bytes).
  */
int32_t MFXSTM32L152_ReadID(MFXSTM32L152_Object_t *pObj, uint32_t *Id)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  uint8_t id;

  /* Initialize IO BUS layer */
  pObj->IO.Init();
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4798      	blx	r3

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f103 0018 	add.w	r0, r3, #24
 8003cb0:	f107 020b 	add.w	r2, r7, #11
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f000 fd67 	bl	800478a <mfxstm32l152_read_reg>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <MFXSTM32L152_ReadID+0x34>
  {
    ret = MFXSTM32L152_ERROR;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e003      	b.n	8003cd2 <MFXSTM32L152_ReadID+0x3c>
  }
  else
  {
    /* Store the device ID value */
    *Id = id;
 8003cca:	7afb      	ldrb	r3, [r7, #11]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <MFXSTM32L152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_EnableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f103 0018 	add.w	r0, r3, #24
 8003cf2:	f107 020b 	add.w	r2, r7, #11
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	2142      	movs	r1, #66	; 0x42
 8003cfa:	f000 fd46 	bl	800478a <mfxstm32l152_read_reg>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <MFXSTM32L152_EnableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e013      	b.n	8003d34 <MFXSTM32L152_EnableITSource+0x58>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp |= Source;
 8003d0c:	7afa      	ldrb	r2, [r7, #11]
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f103 0018 	add.w	r0, r3, #24
 8003d1c:	f107 020b 	add.w	r2, r7, #11
 8003d20:	2301      	movs	r3, #1
 8003d22:	2142      	movs	r1, #66	; 0x42
 8003d24:	f000 fd48 	bl	80047b8 <mfxstm32l152_write_reg>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <MFXSTM32L152_EnableITSource+0x58>
    {
      ret = MFXSTM32L152_ERROR;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003d34:	68fb      	ldr	r3, [r7, #12]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <MFXSTM32L152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_DisableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f103 0018 	add.w	r0, r3, #24
 8003d54:	f107 020b 	add.w	r2, r7, #11
 8003d58:	2301      	movs	r3, #1
 8003d5a:	2142      	movs	r1, #66	; 0x42
 8003d5c:	f000 fd15 	bl	800478a <mfxstm32l152_read_reg>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <MFXSTM32L152_DisableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e018      	b.n	8003da0 <MFXSTM32L152_DisableITSource+0x62>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp &= ~Source;
 8003d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	7afb      	ldrb	r3, [r7, #11]
 8003d78:	b25b      	sxtb	r3, r3
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f103 0018 	add.w	r0, r3, #24
 8003d88:	f107 020b 	add.w	r2, r7, #11
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	2142      	movs	r1, #66	; 0x42
 8003d90:	f000 fd12 	bl	80047b8 <mfxstm32l152_write_reg>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <MFXSTM32L152_DisableITSource+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <MFXSTM32L152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinPolarity(MFXSTM32L152_Object_t *pObj, uint8_t Polarity)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f103 0018 	add.w	r0, r3, #24
 8003dc0:	f107 020b 	add.w	r2, r7, #11
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	2141      	movs	r1, #65	; 0x41
 8003dc8:	f000 fcdf 	bl	800478a <mfxstm32l152_read_reg>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <MFXSTM32L152_SetIrqOutPinPolarity+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e018      	b.n	8003e0c <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  }
  else
  {
    /* Mask the polarity bits */
    tmp &= ~(uint8_t)0x02;
 8003dda:	7afb      	ldrb	r3, [r7, #11]
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Polarity;
 8003de4:	7afa      	ldrb	r2, [r7, #11]
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f103 0018 	add.w	r0, r3, #24
 8003df4:	f107 020b 	add.w	r2, r7, #11
 8003df8:	2301      	movs	r3, #1
 8003dfa:	2141      	movs	r1, #65	; 0x41
 8003dfc:	f000 fcdc 	bl	80047b8 <mfxstm32l152_write_reg>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <MFXSTM32L152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinType(MFXSTM32L152_Object_t *pObj, uint8_t Type)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0018 	add.w	r0, r3, #24
 8003e2c:	f107 020b 	add.w	r2, r7, #11
 8003e30:	2301      	movs	r3, #1
 8003e32:	2141      	movs	r1, #65	; 0x41
 8003e34:	f000 fca9 	bl	800478a <mfxstm32l152_read_reg>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <MFXSTM32L152_SetIrqOutPinType+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e018      	b.n	8003e78 <MFXSTM32L152_SetIrqOutPinType+0x62>
  }
  else
  {
    /* Mask the type bits */
    tmp &= ~(uint8_t)0x01;
 8003e46:	7afb      	ldrb	r3, [r7, #11]
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Type;
 8003e50:	7afa      	ldrb	r2, [r7, #11]
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f103 0018 	add.w	r0, r3, #24
 8003e60:	f107 020b 	add.w	r2, r7, #11
 8003e64:	2301      	movs	r3, #1
 8003e66:	2141      	movs	r1, #65	; 0x41
 8003e68:	f000 fca6 	bl	80047b8 <mfxstm32l152_write_reg>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <MFXSTM32L152_SetIrqOutPinType+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003e78:	68fb      	ldr	r3, [r7, #12]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <MFXSTM32L152_IO_Start>:
  * @param  pObj   Pointer to component object.
  * @param  IO_Pin IO pin
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Start(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  uint8_t mode;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f103 0018 	add.w	r0, r3, #24
 8003e96:	f107 020b 	add.w	r2, r7, #11
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	f000 fc74 	bl	800478a <mfxstm32l152_read_reg>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <MFXSTM32L152_IO_Start+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	e022      	b.n	8003ef6 <MFXSTM32L152_IO_Start+0x74>
  }
  else
  {
    /* Set the IO Functionalities to be Enabled */
    mode |= MFXSTM32L152_GPIO_EN;
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	72fb      	strb	r3, [r7, #11]
    /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
    /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
    /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
    /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
    /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
    if (IO_Pin > 0xFFFFU)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d305      	bcc.n	8003ece <MFXSTM32L152_IO_Start+0x4c>
    {
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003ec2:	7afb      	ldrb	r3, [r7, #11]
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	72fb      	strb	r3, [r7, #11]
 8003ecc:	e004      	b.n	8003ed8 <MFXSTM32L152_IO_Start+0x56>
    }
    else
    {
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003ece:	7afb      	ldrb	r3, [r7, #11]
 8003ed0:	f023 0308 	bic.w	r3, r3, #8
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	72fb      	strb	r3, [r7, #11]
    }

    /* Write the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f103 0018 	add.w	r0, r3, #24
 8003ede:	f107 020b 	add.w	r2, r7, #11
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	f000 fc67 	bl	80047b8 <mfxstm32l152_write_reg>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <MFXSTM32L152_IO_Start+0x74>
    {
      ret = MFXSTM32L152_ERROR;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <MFXSTM32L152_IO_Init>:
  * @param  IoInit Pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Init(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_Init_t *IoInit)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* IT enable/disable */
  switch (IoInit->Mode)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d903      	bls.n	8003f1e <MFXSTM32L152_IO_Init+0x1e>
 8003f16:	3b05      	subs	r3, #5
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d813      	bhi.n	8003f44 <MFXSTM32L152_IO_Init+0x44>
 8003f1c:	e00a      	b.n	8003f34 <MFXSTM32L152_IO_Init+0x34>
    case MFXSTM32L152_GPIO_MODE_OFF:
    case MFXSTM32L152_GPIO_MODE_ANALOG:
    case MFXSTM32L152_GPIO_MODE_INPUT:
    case MFXSTM32L152_GPIO_MODE_OUTPUT_OD:
    case MFXSTM32L152_GPIO_MODE_OUTPUT_PP:
      ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fa53 	bl	80043d0 <MFXSTM32L152_IO_DisablePinIT>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
      break;
 8003f32:	e008      	b.n	8003f46 <MFXSTM32L152_IO_Init+0x46>

    case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
    case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
    case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
    case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
      ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fa09 	bl	800434c <MFXSTM32L152_IO_EnableIT>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
      break;
 8003f42:	e000      	b.n	8003f46 <MFXSTM32L152_IO_Init+0x46>
    default:
      break;
 8003f44:	bf00      	nop
  }

  /* Set direction IN/OUT */
  if ((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d003      	beq.n	8003f56 <MFXSTM32L152_IO_Init+0x56>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d10b      	bne.n	8003f6e <MFXSTM32L152_IO_Init+0x6e>
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f936 	bl	80041d0 <MFXSTM32L152_IO_InitPin>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e00a      	b.n	8003f84 <MFXSTM32L152_IO_Init+0x84>
  }
  else
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f92a 	bl	80041d0 <MFXSTM32L152_IO_InitPin>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set Push-Pull type */
  switch (IoInit->Pull)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <MFXSTM32L152_IO_Init+0x94>
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d818      	bhi.n	8003fc4 <MFXSTM32L152_IO_Init+0xc4>
 8003f92:	e00b      	b.n	8003fac <MFXSTM32L152_IO_Init+0xac>
  {
    case MFXSTM32L152_GPIO_NOPULL:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2164      	movs	r1, #100	; 0x64
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb05 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
                                            MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
      break;
 8003faa:	e00c      	b.n	8003fc6 <MFXSTM32L152_IO_Init+0xc6>
    case MFXSTM32L152_GPIO_PULLUP:
    case MFXSTM32L152_GPIO_PULLDOWN:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 faf9 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
                                            MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
      break;
 8003fc2:	e000      	b.n	8003fc6 <MFXSTM32L152_IO_Init+0xc6>
    default:
      break;
 8003fc4:	bf00      	nop
  }

  if (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d10a      	bne.n	8003fe4 <MFXSTM32L152_IO_Init+0xe4>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2164      	movs	r1, #100	; 0x64
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fae8 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
                                          MFXSTM32L152_GPO_PUSH_PULL);
  }

  if (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d10a      	bne.n	8004002 <MFXSTM32L152_IO_Init+0x102>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	2164      	movs	r1, #100	; 0x64
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fad9 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
                                          MFXSTM32L152_GPO_OPEN_DRAIN);
  }

  /* Set Pullup-Pulldown */
  switch (IoInit->Pull)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d033      	beq.n	8004072 <MFXSTM32L152_IO_Init+0x172>
 800400a:	2b02      	cmp	r3, #2
 800400c:	d83d      	bhi.n	800408a <MFXSTM32L152_IO_Init+0x18a>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <MFXSTM32L152_IO_Init+0x118>
 8004012:	2b01      	cmp	r3, #1
 8004014:	d021      	beq.n	800405a <MFXSTM32L152_IO_Init+0x15a>
    case MFXSTM32L152_GPIO_PULLDOWN:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
                                            MFXSTM32L152_GPIO_PULL_DOWN);
      break;
    default:
      break;
 8004016:	e038      	b.n	800408a <MFXSTM32L152_IO_Init+0x18a>
      if ((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d003      	beq.n	8004028 <MFXSTM32L152_IO_Init+0x128>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d10c      	bne.n	8004042 <MFXSTM32L152_IO_Init+0x142>
        ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2168      	movs	r1, #104	; 0x68
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fabb 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8004036:	4602      	mov	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
                                              MFXSTM32L152_GPIO_PULL_DOWN);
 800403e:	bf00      	nop
      break;
 8004040:	e024      	b.n	800408c <MFXSTM32L152_IO_Init+0x18c>
        ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	2301      	movs	r3, #1
 8004048:	2168      	movs	r1, #104	; 0x68
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 faae 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
      break;
 8004058:	e018      	b.n	800408c <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2301      	movs	r3, #1
 8004060:	2168      	movs	r1, #104	; 0x68
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 faa2 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4413      	add	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
      break;
 8004070:	e00c      	b.n	800408c <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	2168      	movs	r1, #104	; 0x68
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fa96 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
      break;
 8004088:	e000      	b.n	800408c <MFXSTM32L152_IO_Init+0x18c>
      break;
 800408a:	bf00      	nop
  }

  /* Set Irq event and type mode */
  switch (IoInit->Mode)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	3b05      	subs	r3, #5
 8004092:	2b03      	cmp	r3, #3
 8004094:	f200 8090 	bhi.w	80041b8 <MFXSTM32L152_IO_Init+0x2b8>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <MFXSTM32L152_IO_Init+0x1a0>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040b1 	.word	0x080040b1
 80040a4:	080040f3 	.word	0x080040f3
 80040a8:	08004177 	.word	0x08004177
 80040ac:	08004135 	.word	0x08004135
  {
    case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2201      	movs	r2, #1
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8a3 	bl	8004204 <MFXSTM32L152_IO_SetIrqEvtMode>
 80040be:	4602      	mov	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8b2 	bl	8004238 <MFXSTM32L152_IO_SetIrqTypeMode>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f95c 	bl	80043a0 <MFXSTM32L152_IO_EnablePinIT>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4413      	add	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
      break;
 80040f0:	e063      	b.n	80041ba <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2201      	movs	r2, #1
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f882 	bl	8004204 <MFXSTM32L152_IO_SetIrqEvtMode>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f891 	bl	8004238 <MFXSTM32L152_IO_SetIrqTypeMode>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f93b 	bl	80043a0 <MFXSTM32L152_IO_EnablePinIT>
 800412a:	4602      	mov	r2, r0
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
      break;
 8004132:	e042      	b.n	80041ba <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f861 	bl	8004204 <MFXSTM32L152_IO_SetIrqEvtMode>
 8004142:	4602      	mov	r2, r0
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2201      	movs	r2, #1
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f870 	bl	8004238 <MFXSTM32L152_IO_SetIrqTypeMode>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f91a 	bl	80043a0 <MFXSTM32L152_IO_EnablePinIT>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
      break;
 8004174:	e021      	b.n	80041ba <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f840 	bl	8004204 <MFXSTM32L152_IO_SetIrqEvtMode>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f84f 	bl	8004238 <MFXSTM32L152_IO_SetIrqTypeMode>
 800419a:	4602      	mov	r2, r0
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f8f9 	bl	80043a0 <MFXSTM32L152_IO_EnablePinIT>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
      break;
 80041b6:	e000      	b.n	80041ba <MFXSTM32L152_IO_Init+0x2ba>
    default:
      break;
 80041b8:	bf00      	nop
  }

  if (ret != MFXSTM32L152_OK)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <MFXSTM32L152_IO_Init+0x2c6>
  {
    ret = MFXSTM32L152_ERROR;
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <MFXSTM32L152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_InitPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Direction)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	2160      	movs	r1, #96	; 0x60
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f9df 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <MFXSTM32L152_IO_InitPin+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295
 80041f8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80041fa:	697b      	ldr	r3, [r7, #20]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <MFXSTM32L152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqEvtMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Evt)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	214c      	movs	r1, #76	; 0x4c
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f9c5 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <MFXSTM32L152_IO_SetIrqEvtMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800422e:	697b      	ldr	r3, [r7, #20]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <MFXSTM32L152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqTypeMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Type)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	2150      	movs	r1, #80	; 0x50
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f9ab 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <MFXSTM32L152_IO_SetIrqTypeMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
 8004260:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <MFXSTM32L152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_WritePin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t PinState)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

  /* Apply the bit value to the selected pin */
  if (PinState != 0U)
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00c      	beq.n	800429e <MFXSTM32L152_IO_WritePin+0x32>
  {
    /* Set the SET register */
    if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 8004284:	2301      	movs	r3, #1
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	216c      	movs	r1, #108	; 0x6c
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f98e 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00f      	beq.n	80042b6 <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e00b      	b.n	80042b6 <MFXSTM32L152_IO_WritePin+0x4a>
    }
  }
  else
  {
    /* Set the CLEAR register */
    if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 800429e:	2301      	movs	r3, #1
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	2170      	movs	r1, #112	; 0x70
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f981 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80042b6:	697b      	ldr	r3, [r7, #20]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <MFXSTM32L152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
int32_t MFXSTM32L152_IO_ReadPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint8_t tmpreg[3];
  uint32_t tmp;

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f103 0018 	add.w	r0, r3, #24
 80042d0:	f107 0208 	add.w	r2, r7, #8
 80042d4:	2301      	movs	r3, #1
 80042d6:	2110      	movs	r1, #16
 80042d8:	f000 fa57 	bl	800478a <mfxstm32l152_read_reg>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <MFXSTM32L152_IO_ReadPin+0x28>
  {
    return MFXSTM32L152_ERROR;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	e02d      	b.n	8004344 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f103 0018 	add.w	r0, r3, #24
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	2301      	movs	r3, #1
 80042f6:	2111      	movs	r1, #17
 80042f8:	f000 fa47 	bl	800478a <mfxstm32l152_read_reg>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <MFXSTM32L152_IO_ReadPin+0x48>
  {
    return MFXSTM32L152_ERROR;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	e01d      	b.n	8004344 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f103 0018 	add.w	r0, r3, #24
 800430e:	f107 0308 	add.w	r3, r7, #8
 8004312:	1c9a      	adds	r2, r3, #2
 8004314:	2301      	movs	r3, #1
 8004316:	2112      	movs	r1, #18
 8004318:	f000 fa37 	bl	800478a <mfxstm32l152_read_reg>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <MFXSTM32L152_IO_ReadPin+0x68>
  {
    return MFXSTM32L152_ERROR;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	e00d      	b.n	8004344 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 8004328:	7a3b      	ldrb	r3, [r7, #8]
 800432a:	461a      	mov	r2, r3
 800432c:	7a7b      	ldrb	r3, [r7, #9]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	441a      	add	r2, r3
 8004332:	7abb      	ldrb	r3, [r7, #10]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	4413      	add	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4013      	ands	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  return (int32_t)(tmp);
 8004342:	68fb      	ldr	r3, [r7, #12]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <MFXSTM32L152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnableIT(MFXSTM32L152_Object_t *pObj)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]

  /* Enable global IO IT source */
  if (MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8004358:	2101      	movs	r1, #1
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fcbe 	bl	8003cdc <MFXSTM32L152_EnableITSource>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <MFXSTM32L152_IO_EnableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <MFXSTM32L152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisableIT(MFXSTM32L152_Object_t *pObj)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]

  /* Disable global IO IT source */
  if (MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8004382:	2101      	movs	r1, #1
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fcda 	bl	8003d3e <MFXSTM32L152_DisableITSource>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <MFXSTM32L152_IO_DisableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <MFXSTM32L152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 80043ae:	2301      	movs	r3, #1
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	2148      	movs	r1, #72	; 0x48
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8f9 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <MFXSTM32L152_IO_EnablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <MFXSTM32L152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 80043de:	2300      	movs	r3, #0
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	2148      	movs	r1, #72	; 0x48
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8e1 	bl	80045ac <MFXSTM32L152_reg24_setPinValue>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <MFXSTM32L152_IO_DisablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80043f6:	68fb      	ldr	r3, [r7, #12]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <MFXSTM32L152_IO_ITStatus>:
  * @param  IO_Pin The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
int32_t MFXSTM32L152_IO_ITStatus(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  /* Get the Interrupt status */
  uint8_t tmpreg[3];
  uint32_t tmp;

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f103 0018 	add.w	r0, r3, #24
 8004410:	f107 0208 	add.w	r2, r7, #8
 8004414:	2301      	movs	r3, #1
 8004416:	210c      	movs	r1, #12
 8004418:	f000 f9b7 	bl	800478a <mfxstm32l152_read_reg>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <MFXSTM32L152_IO_ITStatus+0x28>
  {
    return MFXSTM32L152_ERROR;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e02d      	b.n	8004484 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f103 0018 	add.w	r0, r3, #24
 800442e:	f107 0308 	add.w	r3, r7, #8
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	2301      	movs	r3, #1
 8004436:	210d      	movs	r1, #13
 8004438:	f000 f9a7 	bl	800478a <mfxstm32l152_read_reg>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <MFXSTM32L152_IO_ITStatus+0x48>
  {
    return MFXSTM32L152_ERROR;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295
 8004446:	e01d      	b.n	8004484 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 0018 	add.w	r0, r3, #24
 800444e:	f107 0308 	add.w	r3, r7, #8
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	2301      	movs	r3, #1
 8004456:	210e      	movs	r1, #14
 8004458:	f000 f997 	bl	800478a <mfxstm32l152_read_reg>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <MFXSTM32L152_IO_ITStatus+0x68>
  {
    return MFXSTM32L152_ERROR;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	e00d      	b.n	8004484 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 8004468:	7a3b      	ldrb	r3, [r7, #8]
 800446a:	461a      	mov	r2, r3
 800446c:	7a7b      	ldrb	r3, [r7, #9]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	441a      	add	r2, r3
 8004472:	7abb      	ldrb	r3, [r7, #10]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  return (int32_t)tmp;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <MFXSTM32L152_IO_ClearIT>:
  * @param  IO_Pin the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_ClearIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* normally this function is called under interrupt */
  uint8_t pin_0_7;
  uint8_t pin_8_15;
  uint8_t pin_16_23;

  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
 80044a4:	7bbb      	ldrb	r3, [r7, #14]
 80044a6:	73bb      	strb	r3, [r7, #14]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	737b      	strb	r3, [r7, #13]

  if (pin_0_7 != 0U)
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <MFXSTM32L152_IO_ClearIT+0x48>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f103 0018 	add.w	r0, r3, #24
 80044bc:	f107 020f 	add.w	r2, r7, #15
 80044c0:	2301      	movs	r3, #1
 80044c2:	2154      	movs	r1, #84	; 0x54
 80044c4:	f000 f978 	bl	80047b8 <mfxstm32l152_write_reg>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <MFXSTM32L152_IO_ClearIT+0x48>
    {
      return MFXSTM32L152_ERROR;
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295
 80044d2:	e024      	b.n	800451e <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_8_15 != 0U)
 80044d4:	7bbb      	ldrb	r3, [r7, #14]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <MFXSTM32L152_IO_ClearIT+0x6c>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f103 0018 	add.w	r0, r3, #24
 80044e0:	f107 020e 	add.w	r2, r7, #14
 80044e4:	2301      	movs	r3, #1
 80044e6:	2155      	movs	r1, #85	; 0x55
 80044e8:	f000 f966 	bl	80047b8 <mfxstm32l152_write_reg>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <MFXSTM32L152_IO_ClearIT+0x6c>
    {
      return MFXSTM32L152_ERROR;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	e012      	b.n	800451e <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_16_23 != 0U)
 80044f8:	7b7b      	ldrb	r3, [r7, #13]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00e      	beq.n	800451c <MFXSTM32L152_IO_ClearIT+0x90>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f103 0018 	add.w	r0, r3, #24
 8004504:	f107 020d 	add.w	r2, r7, #13
 8004508:	2301      	movs	r3, #1
 800450a:	2156      	movs	r1, #86	; 0x56
 800450c:	f000 f954 	bl	80047b8 <mfxstm32l152_write_reg>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <MFXSTM32L152_IO_ClearIT+0x90>
    {
      return MFXSTM32L152_ERROR;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	e000      	b.n	800451e <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }

  return MFXSTM32L152_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <MFXSTM32L152_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Component status
  */
int32_t MFXSTM32L152_RegisterBusIO(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_t *pIO)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <MFXSTM32L152_RegisterBusIO+0x18>
  {
    ret = MFXSTM32L152_ERROR;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e02c      	b.n	800459a <MFXSTM32L152_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	891a      	ldrh	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <MFXSTM32L152_RegisterBusIO+0x7c>)
 8004574:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <MFXSTM32L152_RegisterBusIO+0x80>)
 800457a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <MFXSTM32L152_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4798      	blx	r3
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	e002      	b.n	800459a <MFXSTM32L152_RegisterBusIO+0x72>
    }
    else
    {
      ret = MFXSTM32L152_ERROR;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800459a:	68fb      	ldr	r3, [r7, #12]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	08004727 	.word	0x08004727
 80045a8:	08004759 	.word	0x08004759

080045ac <MFXSTM32L152_reg24_setPinValue>:
  * @param  PinValue: 0/1
  * @retval Component status
  */
static int32_t MFXSTM32L152_reg24_setPinValue(MFXSTM32L152_Object_t *pObj, uint8_t RegisterAddr, uint32_t PinPosition,
                                              uint8_t PinValue)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	460b      	mov	r3, r1
 80045ba:	72fb      	strb	r3, [r7, #11]
 80045bc:	4613      	mov	r3, r2
 80045be:	72bb      	strb	r3, [r7, #10]
  int32_t ret = MFXSTM32L152_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  uint8_t tmp;
  uint8_t pin_0_7;
  uint8_t pin_8_15;
  uint8_t pin_16_23;

  pin_0_7   = (uint8_t)(PinPosition & 0x0000ffU);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	74fb      	strb	r3, [r7, #19]
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	74bb      	strb	r3, [r7, #18]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	747b      	strb	r3, [r7, #17]

  if (pin_0_7 != 0U)
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02e      	beq.n	8004638 <MFXSTM32L152_reg24_setPinValue+0x8c>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f103 0018 	add.w	r0, r3, #24
 80045e0:	7afb      	ldrb	r3, [r7, #11]
 80045e2:	b299      	uxth	r1, r3
 80045e4:	f107 0210 	add.w	r2, r7, #16
 80045e8:	2301      	movs	r3, #1
 80045ea:	f000 f8ce 	bl	800478a <mfxstm32l152_read_reg>
 80045ee:	4602      	mov	r2, r0
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4413      	add	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 80045f6:	7abb      	ldrb	r3, [r7, #10]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <MFXSTM32L152_reg24_setPinValue+0x5c>
    {
      tmp |= (uint8_t)pin_0_7;
 80045fc:	7c3a      	ldrb	r2, [r7, #16]
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	4313      	orrs	r3, r2
 8004602:	b2db      	uxtb	r3, r3
 8004604:	743b      	strb	r3, [r7, #16]
 8004606:	e009      	b.n	800461c <MFXSTM32L152_reg24_setPinValue+0x70>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8004608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800460c:	43db      	mvns	r3, r3
 800460e:	b25a      	sxtb	r2, r3
 8004610:	7c3b      	ldrb	r3, [r7, #16]
 8004612:	b25b      	sxtb	r3, r3
 8004614:	4013      	ands	r3, r2
 8004616:	b25b      	sxtb	r3, r3
 8004618:	b2db      	uxtb	r3, r3
 800461a:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f103 0018 	add.w	r0, r3, #24
 8004622:	7afb      	ldrb	r3, [r7, #11]
 8004624:	b299      	uxth	r1, r3
 8004626:	f107 0210 	add.w	r2, r7, #16
 800462a:	2301      	movs	r3, #1
 800462c:	f000 f8c4 	bl	80047b8 <mfxstm32l152_write_reg>
 8004630:	4602      	mov	r2, r0
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4413      	add	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  }

  if (pin_8_15 != 0U)
 8004638:	7cbb      	ldrb	r3, [r7, #18]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d032      	beq.n	80046a4 <MFXSTM32L152_reg24_setPinValue+0xf8>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 1U), &tmp, 1);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f103 0018 	add.w	r0, r3, #24
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	b29b      	uxth	r3, r3
 8004648:	3301      	adds	r3, #1
 800464a:	b299      	uxth	r1, r3
 800464c:	f107 0210 	add.w	r2, r7, #16
 8004650:	2301      	movs	r3, #1
 8004652:	f000 f89a 	bl	800478a <mfxstm32l152_read_reg>
 8004656:	4602      	mov	r2, r0
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 800465e:	7abb      	ldrb	r3, [r7, #10]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <MFXSTM32L152_reg24_setPinValue+0xc4>
    {
      tmp |= (uint8_t)pin_8_15;
 8004664:	7c3a      	ldrb	r2, [r7, #16]
 8004666:	7cbb      	ldrb	r3, [r7, #18]
 8004668:	4313      	orrs	r3, r2
 800466a:	b2db      	uxtb	r3, r3
 800466c:	743b      	strb	r3, [r7, #16]
 800466e:	e009      	b.n	8004684 <MFXSTM32L152_reg24_setPinValue+0xd8>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8004670:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8004674:	43db      	mvns	r3, r3
 8004676:	b25a      	sxtb	r2, r3
 8004678:	7c3b      	ldrb	r3, [r7, #16]
 800467a:	b25b      	sxtb	r3, r3
 800467c:	4013      	ands	r3, r2
 800467e:	b25b      	sxtb	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 1U), &tmp, 1);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f103 0018 	add.w	r0, r3, #24
 800468a:	7afb      	ldrb	r3, [r7, #11]
 800468c:	b29b      	uxth	r3, r3
 800468e:	3301      	adds	r3, #1
 8004690:	b299      	uxth	r1, r3
 8004692:	f107 0210 	add.w	r2, r7, #16
 8004696:	2301      	movs	r3, #1
 8004698:	f000 f88e 	bl	80047b8 <mfxstm32l152_write_reg>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4413      	add	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  if (pin_16_23 != 0U)
 80046a4:	7c7b      	ldrb	r3, [r7, #17]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d032      	beq.n	8004710 <MFXSTM32L152_reg24_setPinValue+0x164>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 2U), &tmp, 1);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f103 0018 	add.w	r0, r3, #24
 80046b0:	7afb      	ldrb	r3, [r7, #11]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3302      	adds	r3, #2
 80046b6:	b299      	uxth	r1, r3
 80046b8:	f107 0210 	add.w	r2, r7, #16
 80046bc:	2301      	movs	r3, #1
 80046be:	f000 f864 	bl	800478a <mfxstm32l152_read_reg>
 80046c2:	4602      	mov	r2, r0
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4413      	add	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 80046ca:	7abb      	ldrb	r3, [r7, #10]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <MFXSTM32L152_reg24_setPinValue+0x130>
    {
      tmp |= (uint8_t)pin_16_23;
 80046d0:	7c3a      	ldrb	r2, [r7, #16]
 80046d2:	7c7b      	ldrb	r3, [r7, #17]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	743b      	strb	r3, [r7, #16]
 80046da:	e009      	b.n	80046f0 <MFXSTM32L152_reg24_setPinValue+0x144>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 80046dc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	b25a      	sxtb	r2, r3
 80046e4:	7c3b      	ldrb	r3, [r7, #16]
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	4013      	ands	r3, r2
 80046ea:	b25b      	sxtb	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 2U), &tmp, 1);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f103 0018 	add.w	r0, r3, #24
 80046f6:	7afb      	ldrb	r3, [r7, #11]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3302      	adds	r3, #2
 80046fc:	b299      	uxth	r1, r3
 80046fe:	f107 0210 	add.w	r2, r7, #16
 8004702:	2301      	movs	r3, #1
 8004704:	f000 f858 	bl	80047b8 <mfxstm32l152_write_reg>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4413      	add	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
  }

  if (ret != MFXSTM32L152_OK)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <MFXSTM32L152_reg24_setPinValue+0x170>
  {
    ret = MFXSTM32L152_ERROR;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800471c:	697b      	ldr	r3, [r7, #20]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004726:	b590      	push	{r4, r7, lr}
 8004728:	b087      	sub	sp, #28
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	461a      	mov	r2, r3
 8004732:	460b      	mov	r3, r1
 8004734:	817b      	strh	r3, [r7, #10]
 8004736:	4613      	mov	r3, r2
 8004738:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	691c      	ldr	r4, [r3, #16]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	8918      	ldrh	r0, [r3, #8]
 8004746:	893b      	ldrh	r3, [r7, #8]
 8004748:	8979      	ldrh	r1, [r7, #10]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	47a0      	blx	r4
 800474e:	4603      	mov	r3, r0
}
 8004750:	4618      	mov	r0, r3
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	bd90      	pop	{r4, r7, pc}

08004758 <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	461a      	mov	r2, r3
 8004764:	460b      	mov	r3, r1
 8004766:	817b      	strh	r3, [r7, #10]
 8004768:	4613      	mov	r3, r2
 800476a:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	68dc      	ldr	r4, [r3, #12]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	8918      	ldrh	r0, [r3, #8]
 8004778:	893b      	ldrh	r3, [r7, #8]
 800477a:	8979      	ldrh	r1, [r7, #10]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	47a0      	blx	r4
 8004780:	4603      	mov	r3, r0
}
 8004782:	4618      	mov	r0, r3
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd90      	pop	{r4, r7, pc}

0800478a <mfxstm32l152_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : Data Read
  *******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800478a:	b590      	push	{r4, r7, lr}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	461a      	mov	r2, r3
 8004796:	460b      	mov	r3, r1
 8004798:	817b      	strh	r3, [r7, #10]
 800479a:	4613      	mov	r3, r2
 800479c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685c      	ldr	r4, [r3, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6898      	ldr	r0, [r3, #8]
 80047a6:	893b      	ldrh	r3, [r7, #8]
 80047a8:	8979      	ldrh	r1, [r7, #10]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	47a0      	blx	r4
 80047ae:	4603      	mov	r3, r0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}

080047b8 <mfxstm32l152_write_reg>:
  *                 I2C or SPI writing function
  * Input         : Register Address, Data to be written, length of buffer
  * Output        : None
  *******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	461a      	mov	r2, r3
 80047c4:	460b      	mov	r3, r1
 80047c6:	817b      	strh	r3, [r7, #10]
 80047c8:	4613      	mov	r3, r2
 80047ca:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681c      	ldr	r4, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6898      	ldr	r0, [r3, #8]
 80047d4:	893b      	ldrh	r3, [r7, #8]
 80047d6:	8979      	ldrh	r1, [r7, #10]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	47a0      	blx	r4
 80047dc:	4603      	mov	r3, r0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}
	...

080047e8 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	e02c      	b.n	800485a <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	891a      	ldrh	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <OV5640_RegisterBusIO+0x7c>)
 8004834:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a0b      	ldr	r2, [pc, #44]	; (8004868 <OV5640_RegisterBusIO+0x80>)
 800483a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4798      	blx	r3
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	e002      	b.n	800485a <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800485a:	68fb      	ldr	r3, [r7, #12]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	080052e5 	.word	0x080052e5
 8004868:	08005317 	.word	0x08005317

0800486c <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d165      	bne.n	8004952 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d80e      	bhi.n	80048aa <OV5640_Init+0x3e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00f      	beq.n	80048b2 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d00c      	beq.n	80048b2 <OV5640_Init+0x46>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d009      	beq.n	80048b2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b07      	cmp	r3, #7
 80048a2:	d006      	beq.n	80048b2 <OV5640_Init+0x46>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d003      	beq.n	80048b2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	e04f      	b.n	8004952 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e01f      	b.n	80048f8 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d018      	beq.n	80048f2 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <OV5640_Init+0xf0>)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	885b      	ldrh	r3, [r3, #2]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f103 0018 	add.w	r0, r3, #24
 80048d4:	4a21      	ldr	r2, [pc, #132]	; (800495c <OV5640_Init+0xf0>)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80048dc:	f107 0217 	add.w	r2, r7, #23
 80048e0:	2301      	movs	r3, #1
 80048e2:	f000 fd48 	bl	8005376 <ov5640_write_reg>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80048ec:	f04f 33ff 	mov.w	r3, #4294967295
 80048f0:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2bfd      	cmp	r3, #253	; 0xfd
 80048fc:	d9dc      	bls.n	80048b8 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d126      	bne.n	8004952 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f9be 	bl	8004c88 <OV5640_SetResolution>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	e01b      	b.n	8004952 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f81f 	bl	8004960 <OV5640_SetPixelFormat>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e010      	b.n	8004952 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8004930:	2300      	movs	r3, #0
 8004932:	2201      	movs	r2, #1
 8004934:	2101      	movs	r1, #1
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fa9c 	bl	8004e74 <OV5640_SetPolarities>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e003      	b.n	8004952 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8004952:	69bb      	ldr	r3, [r7, #24]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	0800cda4 	.word	0x0800cda4

08004960 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00f      	beq.n	8004994 <OV5640_SetPixelFormat+0x34>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d00c      	beq.n	8004994 <OV5640_SetPixelFormat+0x34>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d009      	beq.n	8004994 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b07      	cmp	r3, #7
 8004984:	d006      	beq.n	8004994 <OV5640_SetPixelFormat+0x34>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d003      	beq.n	8004994 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e16a      	b.n	8004c6a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	3b01      	subs	r3, #1
 8004998:	2b07      	cmp	r3, #7
 800499a:	f200 80c3 	bhi.w	8004b24 <OV5640_SetPixelFormat+0x1c4>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <OV5640_SetPixelFormat+0x44>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	08004a1d 	.word	0x08004a1d
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	08004b25 	.word	0x08004b25
 80049b0:	08004b25 	.word	0x08004b25
 80049b4:	08004b25 	.word	0x08004b25
 80049b8:	08004b25 	.word	0x08004b25
 80049bc:	08004a75 	.word	0x08004a75
 80049c0:	08004acd 	.word	0x08004acd
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	e024      	b.n	8004a14 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d01d      	beq.n	8004a0e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80049d2:	4aa8      	ldr	r2, [pc, #672]	; (8004c74 <OV5640_SetPixelFormat+0x314>)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	885b      	ldrh	r3, [r3, #2]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f103 0018 	add.w	r0, r3, #24
 80049e6:	4aa3      	ldr	r2, [pc, #652]	; (8004c74 <OV5640_SetPixelFormat+0x314>)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80049ee:	f107 020f 	add.w	r2, r7, #15
 80049f2:	2301      	movs	r3, #1
 80049f4:	f000 fcbf 	bl	8005376 <ov5640_write_reg>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e003      	b.n	8004a0e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8004a06:	2101      	movs	r1, #1
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fc51 	bl	80052b0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3301      	adds	r3, #1
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d9d7      	bls.n	80049ca <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8004a1a:	e0af      	b.n	8004b7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e024      	b.n	8004a6c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d01d      	beq.n	8004a66 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8004a2a:	4a93      	ldr	r2, [pc, #588]	; (8004c78 <OV5640_SetPixelFormat+0x318>)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	885b      	ldrh	r3, [r3, #2]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f103 0018 	add.w	r0, r3, #24
 8004a3e:	4a8e      	ldr	r2, [pc, #568]	; (8004c78 <OV5640_SetPixelFormat+0x318>)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004a46:	f107 020f 	add.w	r2, r7, #15
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f000 fc93 	bl	8005376 <ov5640_write_reg>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e003      	b.n	8004a66 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fc25 	bl	80052b0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d9d7      	bls.n	8004a22 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8004a72:	e083      	b.n	8004b7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	e024      	b.n	8004ac4 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d01d      	beq.n	8004abe <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8004a82:	4a7e      	ldr	r2, [pc, #504]	; (8004c7c <OV5640_SetPixelFormat+0x31c>)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	885b      	ldrh	r3, [r3, #2]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f103 0018 	add.w	r0, r3, #24
 8004a96:	4a79      	ldr	r2, [pc, #484]	; (8004c7c <OV5640_SetPixelFormat+0x31c>)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004a9e:	f107 020f 	add.w	r2, r7, #15
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f000 fc67 	bl	8005376 <ov5640_write_reg>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e003      	b.n	8004abe <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fbf9 	bl	80052b0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d9d7      	bls.n	8004a7a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8004aca:	e057      	b.n	8004b7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	e024      	b.n	8004b1c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d01d      	beq.n	8004b16 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8004ada:	4a69      	ldr	r2, [pc, #420]	; (8004c80 <OV5640_SetPixelFormat+0x320>)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	885b      	ldrh	r3, [r3, #2]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f103 0018 	add.w	r0, r3, #24
 8004aee:	4a64      	ldr	r2, [pc, #400]	; (8004c80 <OV5640_SetPixelFormat+0x320>)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004af6:	f107 020f 	add.w	r2, r7, #15
 8004afa:	2301      	movs	r3, #1
 8004afc:	f000 fc3b 	bl	8005376 <ov5640_write_reg>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e003      	b.n	8004b16 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8004b0e:	2101      	movs	r1, #1
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fbcd 	bl	80052b0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d9d7      	bls.n	8004ad2 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8004b22:	e02b      	b.n	8004b7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e024      	b.n	8004b74 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d01d      	beq.n	8004b6e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8004b32:	4a54      	ldr	r2, [pc, #336]	; (8004c84 <OV5640_SetPixelFormat+0x324>)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	885b      	ldrh	r3, [r3, #2]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f103 0018 	add.w	r0, r3, #24
 8004b46:	4a4f      	ldr	r2, [pc, #316]	; (8004c84 <OV5640_SetPixelFormat+0x324>)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004b4e:	f107 020f 	add.w	r2, r7, #15
 8004b52:	2301      	movs	r3, #1
 8004b54:	f000 fc0f 	bl	8005376 <ov5640_write_reg>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	e003      	b.n	8004b6e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8004b66:	2101      	movs	r1, #1
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fba1 	bl	80052b0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3301      	adds	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d9d7      	bls.n	8004b2a <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8004b7a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d173      	bne.n	8004c6a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f103 0018 	add.w	r0, r3, #24
 8004b88:	f107 020f 	add.w	r2, r7, #15
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f643 0121 	movw	r1, #14369	; 0x3821
 8004b92:	f000 fbd9 	bl	8005348 <ov5640_read_reg>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e062      	b.n	8004c6a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	f043 0320 	orr.w	r3, r3, #32
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f103 0018 	add.w	r0, r3, #24
 8004bb4:	f107 020f 	add.w	r2, r7, #15
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f643 0121 	movw	r1, #14369	; 0x3821
 8004bbe:	f000 fbda 	bl	8005376 <ov5640_write_reg>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e04c      	b.n	8004c6a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f103 0018 	add.w	r0, r3, #24
 8004bd6:	f107 020f 	add.w	r2, r7, #15
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f243 0102 	movw	r1, #12290	; 0x3002
 8004be0:	f000 fbb2 	bl	8005348 <ov5640_read_reg>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e03b      	b.n	8004c6a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	f023 031c 	bic.w	r3, r3, #28
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f103 0018 	add.w	r0, r3, #24
 8004c02:	f107 020f 	add.w	r2, r7, #15
 8004c06:	2301      	movs	r3, #1
 8004c08:	f243 0102 	movw	r1, #12290	; 0x3002
 8004c0c:	f000 fbb3 	bl	8005376 <ov5640_write_reg>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e025      	b.n	8004c6a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f103 0018 	add.w	r0, r3, #24
 8004c24:	f107 020f 	add.w	r2, r7, #15
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f243 0106 	movw	r1, #12294	; 0x3006
 8004c2e:	f000 fb8b 	bl	8005348 <ov5640_read_reg>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8004c38:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e014      	b.n	8004c6a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f103 0018 	add.w	r0, r3, #24
 8004c50:	f107 020f 	add.w	r2, r7, #15
 8004c54:	2301      	movs	r3, #1
 8004c56:	f243 0106 	movw	r1, #12294	; 0x3006
 8004c5a:	f000 fb8c 	bl	8005376 <ov5640_write_reg>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
 8004c68:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	0800d19c 	.word	0x0800d19c
 8004c78:	0800d1a4 	.word	0x0800d1a4
 8004c7c:	0800d1ac 	.word	0x0800d1ac
 8004c80:	0800d1b4 	.word	0x0800d1b4
 8004c84:	0800d1bc 	.word	0x0800d1bc

08004c88 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d903      	bls.n	8004ca4 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e0d8      	b.n	8004e56 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	f200 80d1 	bhi.w	8004e4e <OV5640_SetResolution+0x1c6>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <OV5640_SetResolution+0x2c>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cc9 	.word	0x08004cc9
 8004cb8:	08004d17 	.word	0x08004d17
 8004cbc:	08004d65 	.word	0x08004d65
 8004cc0:	08004db3 	.word	0x08004db3
 8004cc4:	08004e01 	.word	0x08004e01
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	e01f      	b.n	8004d0e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d018      	beq.n	8004d08 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8004cd6:	4a62      	ldr	r2, [pc, #392]	; (8004e60 <OV5640_SetResolution+0x1d8>)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	885b      	ldrh	r3, [r3, #2]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f103 0018 	add.w	r0, r3, #24
 8004cea:	4a5d      	ldr	r2, [pc, #372]	; (8004e60 <OV5640_SetResolution+0x1d8>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004cf2:	f107 020f 	add.w	r2, r7, #15
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f000 fb3d 	bl	8005376 <ov5640_write_reg>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d9dc      	bls.n	8004cce <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8004d14:	e09f      	b.n	8004e56 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	e01f      	b.n	8004d5c <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d018      	beq.n	8004d56 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8004d24:	4a4f      	ldr	r2, [pc, #316]	; (8004e64 <OV5640_SetResolution+0x1dc>)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	885b      	ldrh	r3, [r3, #2]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f103 0018 	add.w	r0, r3, #24
 8004d38:	4a4a      	ldr	r2, [pc, #296]	; (8004e64 <OV5640_SetResolution+0x1dc>)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004d40:	f107 020f 	add.w	r2, r7, #15
 8004d44:	2301      	movs	r3, #1
 8004d46:	f000 fb16 	bl	8005376 <ov5640_write_reg>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
 8004d54:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d9dc      	bls.n	8004d1c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8004d62:	e078      	b.n	8004e56 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	e01f      	b.n	8004daa <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d018      	beq.n	8004da4 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8004d72:	4a3d      	ldr	r2, [pc, #244]	; (8004e68 <OV5640_SetResolution+0x1e0>)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	885b      	ldrh	r3, [r3, #2]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f103 0018 	add.w	r0, r3, #24
 8004d86:	4a38      	ldr	r2, [pc, #224]	; (8004e68 <OV5640_SetResolution+0x1e0>)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004d8e:	f107 020f 	add.w	r2, r7, #15
 8004d92:	2301      	movs	r3, #1
 8004d94:	f000 faef 	bl	8005376 <ov5640_write_reg>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004da2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3301      	adds	r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d9dc      	bls.n	8004d6a <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8004db0:	e051      	b.n	8004e56 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	e01f      	b.n	8004df8 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d018      	beq.n	8004df2 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8004dc0:	4a2a      	ldr	r2, [pc, #168]	; (8004e6c <OV5640_SetResolution+0x1e4>)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	885b      	ldrh	r3, [r3, #2]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f103 0018 	add.w	r0, r3, #24
 8004dd4:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <OV5640_SetResolution+0x1e4>)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004ddc:	f107 020f 	add.w	r2, r7, #15
 8004de0:	2301      	movs	r3, #1
 8004de2:	f000 fac8 	bl	8005376 <ov5640_write_reg>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8004dec:	f04f 33ff 	mov.w	r3, #4294967295
 8004df0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d9dc      	bls.n	8004db8 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8004dfe:	e02a      	b.n	8004e56 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e01f      	b.n	8004e46 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d018      	beq.n	8004e40 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <OV5640_SetResolution+0x1e8>)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	885b      	ldrh	r3, [r3, #2]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f103 0018 	add.w	r0, r3, #24
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <OV5640_SetResolution+0x1e8>)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004e2a:	f107 020f 	add.w	r2, r7, #15
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f000 faa1 	bl	8005376 <ov5640_write_reg>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	3301      	adds	r3, #1
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d9dc      	bls.n	8004e06 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8004e4c:	e003      	b.n	8004e56 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	617b      	str	r3, [r7, #20]
        break;
 8004e54:	bf00      	nop
    }
  }

  return ret;
 8004e56:	697b      	ldr	r3, [r7, #20]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	0800d1c4 	.word	0x0800d1c4
 8004e64:	0800d1d4 	.word	0x0800d1d4
 8004e68:	0800d1e4 	.word	0x0800d1e4
 8004e6c:	0800d1f4 	.word	0x0800d1f4
 8004e70:	0800d204 	.word	0x0800d204

08004e74 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d011      	beq.n	8004eb0 <OV5640_SetPolarities+0x3c>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <OV5640_SetPolarities+0x24>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10b      	bne.n	8004eb0 <OV5640_SetPolarities+0x3c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <OV5640_SetPolarities+0x3c>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d006      	beq.n	8004eb8 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e01e      	b.n	8004ef6 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	015b      	lsls	r3, r3, #5
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f103 0018 	add.w	r0, r3, #24
 8004edc:	f107 0213 	add.w	r2, r7, #19
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f244 7140 	movw	r1, #18240	; 0x4740
 8004ee6:	f000 fa46 	bl	8005376 <ov5640_write_reg>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004ef6:	697b      	ldr	r3, [r7, #20]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f103 0018 	add.w	r0, r3, #24
 8004f1a:	f107 020b 	add.w	r2, r7, #11
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f243 0108 	movw	r1, #12296	; 0x3008
 8004f24:	f000 fa27 	bl	8005376 <ov5640_write_reg>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8004f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e032      	b.n	8004f9c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8004f36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f9b8 	bl	80052b0 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f103 0018 	add.w	r0, r3, #24
 8004f46:	f107 020b 	add.w	r2, r7, #11
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f243 010a 	movw	r1, #12298	; 0x300a
 8004f50:	f000 f9fa 	bl	8005348 <ov5640_read_reg>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e01c      	b.n	8004f9c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	021a      	lsls	r2, r3, #8
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f103 0018 	add.w	r0, r3, #24
 8004f70:	f107 020b 	add.w	r2, r7, #11
 8004f74:	2301      	movs	r3, #1
 8004f76:	f243 010b 	movw	r1, #12299	; 0x300b
 8004f7a:	f000 f9e5 	bl	8005348 <ov5640_read_reg>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8004f84:	f04f 33ff 	mov.w	r3, #4294967295
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e007      	b.n	8004f9c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	7afa      	ldrb	r2, [r7, #11]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f103 0018 	add.w	r0, r3, #24
 8004fba:	f107 020b 	add.w	r2, r7, #11
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f643 0120 	movw	r1, #14368	; 0x3820
 8004fc4:	f000 f9c0 	bl	8005348 <ov5640_read_reg>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e0cb      	b.n	800516e <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8004fd6:	7afb      	ldrb	r3, [r7, #11]
 8004fd8:	f023 0306 	bic.w	r3, r3, #6
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f103 0018 	add.w	r0, r3, #24
 8004fe6:	f107 020a 	add.w	r2, r7, #10
 8004fea:	2301      	movs	r3, #1
 8004fec:	f643 0121 	movw	r1, #14369	; 0x3821
 8004ff0:	f000 f9aa 	bl	8005348 <ov5640_read_reg>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e0b5      	b.n	800516e <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8005006:	7abb      	ldrb	r3, [r7, #10]
 8005008:	f023 0306 	bic.w	r3, r3, #6
 800500c:	b2db      	uxtb	r3, r3
 800500e:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d056      	beq.n	80050c4 <OV5640_MirrorFlipConfig+0x11e>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d87f      	bhi.n	800511c <OV5640_MirrorFlipConfig+0x176>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d029      	beq.n	8005076 <OV5640_MirrorFlipConfig+0xd0>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d179      	bne.n	800511c <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f103 0018 	add.w	r0, r3, #24
 800502e:	f107 020b 	add.w	r2, r7, #11
 8005032:	2301      	movs	r3, #1
 8005034:	f643 0120 	movw	r1, #14368	; 0x3820
 8005038:	f000 f99d 	bl	8005376 <ov5640_write_reg>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295
 8005046:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8005048:	e08a      	b.n	8005160 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 800504a:	7abb      	ldrb	r3, [r7, #10]
 800504c:	f043 0306 	orr.w	r3, r3, #6
 8005050:	b2db      	uxtb	r3, r3
 8005052:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f103 0018 	add.w	r0, r3, #24
 800505a:	f107 020a 	add.w	r2, r7, #10
 800505e:	2301      	movs	r3, #1
 8005060:	f643 0121 	movw	r1, #14369	; 0x3821
 8005064:	f000 f987 	bl	8005376 <ov5640_write_reg>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d078      	beq.n	8005160 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	60fb      	str	r3, [r7, #12]
          break;
 8005074:	e074      	b.n	8005160 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8005076:	7afb      	ldrb	r3, [r7, #11]
 8005078:	f043 0306 	orr.w	r3, r3, #6
 800507c:	b2db      	uxtb	r3, r3
 800507e:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f103 0018 	add.w	r0, r3, #24
 8005086:	f107 020b 	add.w	r2, r7, #11
 800508a:	2301      	movs	r3, #1
 800508c:	f643 0120 	movw	r1, #14368	; 0x3820
 8005090:	f000 f971 	bl	8005376 <ov5640_write_reg>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80050a0:	e060      	b.n	8005164 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f103 0018 	add.w	r0, r3, #24
 80050a8:	f107 020a 	add.w	r2, r7, #10
 80050ac:	2301      	movs	r3, #1
 80050ae:	f643 0121 	movw	r1, #14369	; 0x3821
 80050b2:	f000 f960 	bl	8005376 <ov5640_write_reg>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d053      	beq.n	8005164 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295
 80050c0:	60fb      	str	r3, [r7, #12]
          break;
 80050c2:	e04f      	b.n	8005164 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 80050c4:	7afb      	ldrb	r3, [r7, #11]
 80050c6:	f043 0306 	orr.w	r3, r3, #6
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f103 0018 	add.w	r0, r3, #24
 80050d4:	f107 020b 	add.w	r2, r7, #11
 80050d8:	2301      	movs	r3, #1
 80050da:	f643 0120 	movw	r1, #14368	; 0x3820
 80050de:	f000 f94a 	bl	8005376 <ov5640_write_reg>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ec:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80050ee:	e03b      	b.n	8005168 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 80050f0:	7abb      	ldrb	r3, [r7, #10]
 80050f2:	f043 0306 	orr.w	r3, r3, #6
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 0018 	add.w	r0, r3, #24
 8005100:	f107 020a 	add.w	r2, r7, #10
 8005104:	2301      	movs	r3, #1
 8005106:	f643 0121 	movw	r1, #14369	; 0x3821
 800510a:	f000 f934 	bl	8005376 <ov5640_write_reg>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d029      	beq.n	8005168 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
 8005118:	60fb      	str	r3, [r7, #12]
          break;
 800511a:	e025      	b.n	8005168 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f103 0018 	add.w	r0, r3, #24
 8005122:	f107 020b 	add.w	r2, r7, #11
 8005126:	2301      	movs	r3, #1
 8005128:	f643 0120 	movw	r1, #14368	; 0x3820
 800512c:	f000 f923 	bl	8005376 <ov5640_write_reg>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800513c:	e016      	b.n	800516c <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f103 0018 	add.w	r0, r3, #24
 8005144:	f107 020a 	add.w	r2, r7, #10
 8005148:	2301      	movs	r3, #1
 800514a:	f643 0121 	movw	r1, #14369	; 0x3821
 800514e:	f000 f912 	bl	8005376 <ov5640_write_reg>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	60fb      	str	r3, [r7, #12]
          break;
 800515e:	e005      	b.n	800516c <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8005160:	bf00      	nop
 8005162:	e004      	b.n	800516e <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8005164:	bf00      	nop
 8005166:	e002      	b.n	800516e <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800516c:	bf00      	nop
      }
    }
  }

  return ret;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <OV5640_EmbeddedSynchroConfig>:
  * @param  pSyncCodes  pointer to Embedded Codes
  * @retval Component status
  */

int32_t OV5640_EmbeddedSynchroConfig(OV5640_Object_t *pObj, OV5640_SyncCodes_t *pSyncCodes)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_ERROR;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	60fb      	str	r3, [r7, #12]

  /*[7] : SYNC code from reg 0x4732-0x4732, [1]: Enable Clip ,[0]: Enable CCIR656 */
  tmp = 0x83;
 8005188:	2383      	movs	r3, #131	; 0x83
 800518a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_CTRL00, &tmp, 1) == OV5640_OK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f103 0018 	add.w	r0, r3, #24
 8005192:	f107 020b 	add.w	r2, r7, #11
 8005196:	2301      	movs	r3, #1
 8005198:	f244 7130 	movw	r1, #18224	; 0x4730
 800519c:	f000 f8eb 	bl	8005376 <ov5640_write_reg>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d153      	bne.n	800524e <OV5640_EmbeddedSynchroConfig+0xd6>
  {
    tmp = pSyncCodes->FrameStartCode;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	72fb      	strb	r3, [r7, #11]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_FS, &tmp, 1) == OV5640_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f103 0018 	add.w	r0, r3, #24
 80051b2:	f107 020b 	add.w	r2, r7, #11
 80051b6:	2301      	movs	r3, #1
 80051b8:	f244 7132 	movw	r1, #18226	; 0x4732
 80051bc:	f000 f8db 	bl	8005376 <ov5640_write_reg>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d143      	bne.n	800524e <OV5640_EmbeddedSynchroConfig+0xd6>
    {
      tmp = pSyncCodes->FrameEndCode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	78db      	ldrb	r3, [r3, #3]
 80051ca:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_FE, &tmp, 1) != OV5640_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f103 0018 	add.w	r0, r3, #24
 80051d2:	f107 020b 	add.w	r2, r7, #11
 80051d6:	2301      	movs	r3, #1
 80051d8:	f244 7133 	movw	r1, #18227	; 0x4733
 80051dc:	f000 f8cb 	bl	8005376 <ov5640_write_reg>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <OV5640_EmbeddedSynchroConfig+0x74>
      {
        return OV5640_ERROR;
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	e05d      	b.n	80052a8 <OV5640_EmbeddedSynchroConfig+0x130>
      }
      tmp = pSyncCodes->LineStartCode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_LS, &tmp, 1) == OV5640_OK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f103 0018 	add.w	r0, r3, #24
 80051f8:	f107 020b 	add.w	r2, r7, #11
 80051fc:	2301      	movs	r3, #1
 80051fe:	f244 7134 	movw	r1, #18228	; 0x4734
 8005202:	f000 f8b8 	bl	8005376 <ov5640_write_reg>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d120      	bne.n	800524e <OV5640_EmbeddedSynchroConfig+0xd6>
      {
        tmp = pSyncCodes->LineEndCode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	789b      	ldrb	r3, [r3, #2]
 8005210:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_CCIR656_LE, &tmp, 1) == OV5640_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f103 0018 	add.w	r0, r3, #24
 8005218:	f107 020b 	add.w	r2, r7, #11
 800521c:	2301      	movs	r3, #1
 800521e:	f244 7135 	movw	r1, #18229	; 0x4735
 8005222:	f000 f8a8 	bl	8005376 <ov5640_write_reg>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d110      	bne.n	800524e <OV5640_EmbeddedSynchroConfig+0xd6>
        {
          /*Adding 1 dummy line */
          tmp = 0x01;
 800522c:	2301      	movs	r3, #1
 800522e:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_656_DUMMY_LINE, &tmp, 1) == OV5640_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f103 0018 	add.w	r0, r3, #24
 8005236:	f107 020b 	add.w	r2, r7, #11
 800523a:	2301      	movs	r3, #1
 800523c:	f244 7115 	movw	r1, #18197	; 0x4715
 8005240:	f000 f899 	bl	8005376 <ov5640_write_reg>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <OV5640_EmbeddedSynchroConfig+0xd6>
          {
            ret = OV5640_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* max clip value[9:8], to avoid SYNC code clipping */
  tmp = 0x2;
 800524e:	2302      	movs	r3, #2
 8005250:	72fb      	strb	r3, [r7, #11]
  if (ret == OV5640_OK)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <OV5640_EmbeddedSynchroConfig+0xf6>
  {
    ret = ov5640_write_reg(&pObj->Ctx, 0x4302, &tmp, 1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f103 0018 	add.w	r0, r3, #24
 800525e:	f107 020b 	add.w	r2, r7, #11
 8005262:	2301      	movs	r3, #1
 8005264:	f244 3102 	movw	r1, #17154	; 0x4302
 8005268:	f000 f885 	bl	8005376 <ov5640_write_reg>
 800526c:	60f8      	str	r0, [r7, #12]
  }
  if (ret == OV5640_OK)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <OV5640_EmbeddedSynchroConfig+0x112>
  {
    ret = ov5640_write_reg(&pObj->Ctx, 0x4306, &tmp, 1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f103 0018 	add.w	r0, r3, #24
 800527a:	f107 020b 	add.w	r2, r7, #11
 800527e:	2301      	movs	r3, #1
 8005280:	f244 3106 	movw	r1, #17158	; 0x4306
 8005284:	f000 f877 	bl	8005376 <ov5640_write_reg>
 8005288:	60f8      	str	r0, [r7, #12]
  }
  if (ret == OV5640_OK)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <OV5640_EmbeddedSynchroConfig+0x12e>
  {
    ret = ov5640_write_reg(&pObj->Ctx, 0x430A, &tmp, 1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f103 0018 	add.w	r0, r3, #24
 8005296:	f107 020b 	add.w	r2, r7, #11
 800529a:	2301      	movs	r3, #1
 800529c:	f244 310a 	movw	r1, #17162	; 0x430a
 80052a0:	f000 f869 	bl	8005376 <ov5640_write_reg>
 80052a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052a6:	68fb      	ldr	r3, [r7, #12]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	4798      	blx	r3
 80052c0:	4603      	mov	r3, r0
 80052c2:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80052c4:	bf00      	nop
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	4798      	blx	r3
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d8f5      	bhi.n	80052c6 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	460b      	mov	r3, r1
 80052f2:	817b      	strh	r3, [r7, #10]
 80052f4:	4613      	mov	r3, r2
 80052f6:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	691c      	ldr	r4, [r3, #16]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	8918      	ldrh	r0, [r3, #8]
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	8979      	ldrh	r1, [r7, #10]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	47a0      	blx	r4
 800530c:	4603      	mov	r3, r0
}
 800530e:	4618      	mov	r0, r3
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd90      	pop	{r4, r7, pc}

08005316 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005316:	b590      	push	{r4, r7, lr}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	461a      	mov	r2, r3
 8005322:	460b      	mov	r3, r1
 8005324:	817b      	strh	r3, [r7, #10]
 8005326:	4613      	mov	r3, r2
 8005328:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	68dc      	ldr	r4, [r3, #12]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	8918      	ldrh	r0, [r3, #8]
 8005336:	893b      	ldrh	r3, [r7, #8]
 8005338:	8979      	ldrh	r1, [r7, #10]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	47a0      	blx	r4
 800533e:	4603      	mov	r3, r0
}
 8005340:	4618      	mov	r0, r3
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	461a      	mov	r2, r3
 8005354:	460b      	mov	r3, r1
 8005356:	817b      	strh	r3, [r7, #10]
 8005358:	4613      	mov	r3, r2
 800535a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685c      	ldr	r4, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6898      	ldr	r0, [r3, #8]
 8005364:	893b      	ldrh	r3, [r7, #8]
 8005366:	8979      	ldrh	r1, [r7, #10]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	47a0      	blx	r4
 800536c:	4603      	mov	r3, r0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	bd90      	pop	{r4, r7, pc}

08005376 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8005376:	b590      	push	{r4, r7, lr}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	461a      	mov	r2, r3
 8005382:	460b      	mov	r3, r1
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	4613      	mov	r3, r2
 8005388:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681c      	ldr	r4, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6898      	ldr	r0, [r3, #8]
 8005392:	893b      	ldrh	r3, [r7, #8]
 8005394:	8979      	ldrh	r1, [r7, #10]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	47a0      	blx	r4
 800539a:	4603      	mov	r3, r0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd90      	pop	{r4, r7, pc}

080053a4 <BSP_LED_Init>:
  *            @arg  LED7 only if IO expander is used
  *            @arg  LED8 only if IO expander is used
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /* (USE_BSP_IO_CLASS > 0) */
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led == LED5) || (Led == LED6))
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <BSP_LED_Init+0x1a>
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d144      	bne.n	8005448 <BSP_LED_Init+0xa4>
  {
    /* Enable the GPIO_LED clock */
    if (Led == LED5)
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10f      	bne.n	80053e4 <BSP_LED_Init+0x40>
    {
      LED5_GPIO_CLK_ENABLE();
 80053c4:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <BSP_LED_Init+0x100>)
 80053c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ca:	4a36      	ldr	r2, [pc, #216]	; (80054a4 <BSP_LED_Init+0x100>)
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053d4:	4b33      	ldr	r3, [pc, #204]	; (80054a4 <BSP_LED_Init+0x100>)
 80053d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	e00e      	b.n	8005402 <BSP_LED_Init+0x5e>
    }
    else
    {
      LED6_GPIO_CLK_ENABLE();
 80053e4:	4b2f      	ldr	r3, [pc, #188]	; (80054a4 <BSP_LED_Init+0x100>)
 80053e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ea:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <BSP_LED_Init+0x100>)
 80053ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053f4:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <BSP_LED_Init+0x100>)
 80053f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
    }

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8005402:	2301      	movs	r3, #1
 8005404:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005406:	2302      	movs	r3, #2
 8005408:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800540a:	2302      	movs	r3, #2
 800540c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pin = LED_PIN [Led];
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <BSP_LED_Init+0x104>)
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	4a24      	ldr	r2, [pc, #144]	; (80054ac <BSP_LED_Init+0x108>)
 800541c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005420:	f107 0214 	add.w	r2, r7, #20
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f003 fc40 	bl	8008cac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_RESET);
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <BSP_LED_Init+0x108>)
 8005430:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <BSP_LED_Init+0x104>)
 8005438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543c:	b29b      	uxth	r3, r3
 800543e:	2200      	movs	r2, #0
 8005440:	4619      	mov	r1, r3
 8005442:	f003 ff01 	bl	8009248 <HAL_GPIO_WritePin>
 8005446:	e027      	b.n	8005498 <BSP_LED_Init+0xf4>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)

    io_init_structure.Pin  = LED_PIN[Led];
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <BSP_LED_Init+0x104>)
 800544c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
    io_init_structure.Pull = IO_PULLDOWN;
 8005452:	2302      	movs	r3, #2
 8005454:	633b      	str	r3, [r7, #48]	; 0x30
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 8005456:	2304      	movs	r3, #4
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Initialize IO expander */
    if (BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 800545a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800545e:	4619      	mov	r1, r3
 8005460:	2000      	movs	r0, #0
 8005462:	f000 fd69 	bl	8005f38 <BSP_IO_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <BSP_LED_Init+0xd0>
    {
      ret = BSP_ERROR_NO_INIT;
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
 8005472:	e00e      	b.n	8005492 <BSP_LED_Init+0xee>
    }
    else
    {
      if (BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET) != BSP_ERROR_NONE)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	4a0c      	ldr	r2, [pc, #48]	; (80054a8 <BSP_LED_Init+0x104>)
 8005478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547c:	2200      	movs	r2, #0
 800547e:	4619      	mov	r1, r3
 8005480:	2000      	movs	r0, #0
 8005482:	f000 fdb9 	bl	8005ff8 <BSP_IO_WritePin>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <BSP_LED_Init+0xee>
      {
        ret = BSP_ERROR_NO_INIT;
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    HAL_Delay(1);
 8005492:	2001      	movs	r0, #1
 8005494:	f001 fc50 	bl	8006d38 <HAL_Delay>
#endif /* (USE_BSP_IO_CLASS > 0) */
  }

  return ret;
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800549a:	4618      	mov	r0, r3
 800549c:	3738      	adds	r7, #56	; 0x38
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	46020c00 	.word	0x46020c00
 80054a8:	0800d214 	.word	0x0800d214
 80054ac:	20000090 	.word	0x20000090

080054b0 <BSP_LED_Off>:
  *            @arg  LED7 only if IO expander is used
  *            @arg  LED8 only if IO expander is used
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  if ((Led == LED5) || (Led == LED6))
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <BSP_LED_Off+0x16>
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10f      	bne.n	80054e6 <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <BSP_LED_Off+0x54>)
 80054ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	4a0d      	ldr	r2, [pc, #52]	; (8005508 <BSP_LED_Off+0x58>)
 80054d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2200      	movs	r2, #0
 80054da:	4619      	mov	r1, r3
 80054dc:	f003 feb4 	bl	8009248 <HAL_GPIO_WritePin>
    ret = BSP_ERROR_NONE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e009      	b.n	80054fa <BSP_LED_Off+0x4a>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	4a07      	ldr	r2, [pc, #28]	; (8005508 <BSP_LED_Off+0x58>)
 80054ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ee:	2200      	movs	r2, #0
 80054f0:	4619      	mov	r1, r3
 80054f2:	2000      	movs	r0, #0
 80054f4:	f000 fd80 	bl	8005ff8 <BSP_IO_WritePin>
 80054f8:	60f8      	str	r0, [r7, #12]
#else
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* (USE_BSP_IO_CLASS > 0) */
  }
  return ret;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20000090 	.word	0x20000090
 8005508:	0800d214 	.word	0x0800d214

0800550c <BSP_LED_Toggle>:
  *            @arg  LED7 only if IO expander is used
  *            @arg  LED8 only if IO expander is used
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  if ((Led == LED5) || (Led == LED6))
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <BSP_LED_Toggle+0x16>
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10f      	bne.n	8005542 <BSP_LED_Toggle+0x36>
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	4a0e      	ldr	r2, [pc, #56]	; (8005560 <BSP_LED_Toggle+0x54>)
 8005526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	490d      	ldr	r1, [pc, #52]	; (8005564 <BSP_LED_Toggle+0x58>)
 800552e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005532:	b29b      	uxth	r3, r3
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f003 fe9e 	bl	8009278 <HAL_GPIO_TogglePin>
    ret = BSP_ERROR_NONE;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e008      	b.n	8005554 <BSP_LED_Toggle+0x48>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_TogglePin(0, LED_PIN[Led]);
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	4a07      	ldr	r2, [pc, #28]	; (8005564 <BSP_LED_Toggle+0x58>)
 8005546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554a:	4619      	mov	r1, r3
 800554c:	2000      	movs	r0, #0
 800554e:	f000 fd85 	bl	800605c <BSP_IO_TogglePin>
 8005552:	60f8      	str	r0, [r7, #12]
#else
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* (USE_BSP_IO_CLASS > 0) */
  }
  return ret;
 8005554:	68fb      	ldr	r3, [r7, #12]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000090 	.word	0x20000090
 8005564:	0800d214 	.word	0x0800d214

08005568 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800556e:	2300      	movs	r3, #0
 8005570:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <BSP_I2C2_Init+0x64>)
 8005574:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <BSP_I2C2_Init+0x68>)
 8005576:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8005578:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <BSP_I2C2_Init+0x6c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11f      	bne.n	80055c0 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <BSP_I2C2_Init+0x6c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <BSP_I2C2_Init+0x6c>)
 8005588:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 800558a:	4810      	ldr	r0, [pc, #64]	; (80055cc <BSP_I2C2_Init+0x64>)
 800558c:	f004 f9c0 	bl	8009910 <HAL_I2C_GetState>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d114      	bne.n	80055c0 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8005596:	480d      	ldr	r0, [pc, #52]	; (80055cc <BSP_I2C2_Init+0x64>)
 8005598:	f000 fbbc 	bl	8005d14 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* BSP_USE_CMSIS_OS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 800559c:	f006 f83e 	bl	800b61c <HAL_RCC_GetPCLK1Freq>
 80055a0:	4603      	mov	r3, r0
 80055a2:	490d      	ldr	r1, [pc, #52]	; (80055d8 <BSP_I2C2_Init+0x70>)
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f93f 	bl	8005828 <I2C_GetTiming>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4619      	mov	r1, r3
 80055ae:	4807      	ldr	r0, [pc, #28]	; (80055cc <BSP_I2C2_Init+0x64>)
 80055b0:	f000 f838 	bl	8005624 <MX_I2C2_Init>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80055ba:	f06f 0307 	mvn.w	r3, #7
 80055be:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 80055c0:	687b      	ldr	r3, [r7, #4]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	200264fc 	.word	0x200264fc
 80055d0:	40005800 	.word	0x40005800
 80055d4:	20025af4 	.word	0x20025af4
 80055d8:	00061a80 	.word	0x00061a80

080055dc <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <BSP_I2C2_DeInit+0x40>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	4a0b      	ldr	r2, [pc, #44]	; (800561c <BSP_I2C2_DeInit+0x40>)
 80055ee:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 80055f0:	4b0a      	ldr	r3, [pc, #40]	; (800561c <BSP_I2C2_DeInit+0x40>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 80055f8:	4809      	ldr	r0, [pc, #36]	; (8005620 <BSP_I2C2_DeInit+0x44>)
 80055fa:	f000 fbf3 	bl	8005de4 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 80055fe:	4808      	ldr	r0, [pc, #32]	; (8005620 <BSP_I2C2_DeInit+0x44>)
 8005600:	f003 ff14 	bl	800942c <HAL_I2C_DeInit>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800560a:	f06f 0307 	mvn.w	r3, #7
 800560e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8005610:	687b      	ldr	r3, [r7, #4]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20025af4 	.word	0x20025af4
 8005620:	200264fc 	.word	0x200264fc

08005624 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f003 fe53 	bl	800930e <HAL_I2C_Init>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	e014      	b.n	800569e <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f004 fc1a 	bl	8009eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	e008      	b.n	800569e <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800568c:	2100      	movs	r1, #0
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f004 fc5b 	bl	8009f4a <HAL_I2CEx_ConfigDigitalFilter>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60ba      	str	r2, [r7, #8]
 80056b0:	461a      	mov	r2, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	81fb      	strh	r3, [r7, #14]
 80056b6:	460b      	mov	r3, r1
 80056b8:	81bb      	strh	r3, [r7, #12]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80056be:	89b9      	ldrh	r1, [r7, #12]
 80056c0:	89f8      	ldrh	r0, [r7, #14]
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f000 fbaf 	bl	8005e2c <I2C2_WriteReg>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e00c      	b.n	80056f4 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 80056da:	4809      	ldr	r0, [pc, #36]	; (8005700 <BSP_I2C2_WriteReg+0x58>)
 80056dc:	f004 f926 	bl	800992c <HAL_I2C_GetError>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d103      	bne.n	80056ee <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80056e6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e002      	b.n	80056f4 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80056ee:	f06f 0303 	mvn.w	r3, #3
 80056f2:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80056f4:	697b      	ldr	r3, [r7, #20]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200264fc 	.word	0x200264fc

08005704 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60ba      	str	r2, [r7, #8]
 800570c:	461a      	mov	r2, r3
 800570e:	4603      	mov	r3, r0
 8005710:	81fb      	strh	r3, [r7, #14]
 8005712:	460b      	mov	r3, r1
 8005714:	81bb      	strh	r3, [r7, #12]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800571a:	89b9      	ldrh	r1, [r7, #12]
 800571c:	89f8      	ldrh	r0, [r7, #14]
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2201      	movs	r2, #1
 8005726:	f000 fba7 	bl	8005e78 <I2C2_ReadReg>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e00c      	b.n	8005750 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8005736:	4809      	ldr	r0, [pc, #36]	; (800575c <BSP_I2C2_ReadReg+0x58>)
 8005738:	f004 f8f8 	bl	800992c <HAL_I2C_GetError>
 800573c:	4603      	mov	r3, r0
 800573e:	2b04      	cmp	r3, #4
 8005740:	d103      	bne.n	800574a <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005742:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e002      	b.n	8005750 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800574a:	f06f 0303 	mvn.w	r3, #3
 800574e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8005750:	697b      	ldr	r3, [r7, #20]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200264fc 	.word	0x200264fc

08005760 <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	60ba      	str	r2, [r7, #8]
 8005768:	461a      	mov	r2, r3
 800576a:	4603      	mov	r3, r0
 800576c:	81fb      	strh	r3, [r7, #14]
 800576e:	460b      	mov	r3, r1
 8005770:	81bb      	strh	r3, [r7, #12]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8005776:	89b9      	ldrh	r1, [r7, #12]
 8005778:	89f8      	ldrh	r0, [r7, #14]
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2202      	movs	r2, #2
 8005782:	f000 fb53 	bl	8005e2c <I2C2_WriteReg>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <BSP_I2C2_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e00c      	b.n	80057ac <BSP_I2C2_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8005792:	4809      	ldr	r0, [pc, #36]	; (80057b8 <BSP_I2C2_WriteReg16+0x58>)
 8005794:	f004 f8ca 	bl	800992c <HAL_I2C_GetError>
 8005798:	4603      	mov	r3, r0
 800579a:	2b04      	cmp	r3, #4
 800579c:	d103      	bne.n	80057a6 <BSP_I2C2_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800579e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e002      	b.n	80057ac <BSP_I2C2_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80057a6:	f06f 0303 	mvn.w	r3, #3
 80057aa:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80057ac:	697b      	ldr	r3, [r7, #20]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	200264fc 	.word	0x200264fc

080057bc <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60ba      	str	r2, [r7, #8]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	81fb      	strh	r3, [r7, #14]
 80057ca:	460b      	mov	r3, r1
 80057cc:	81bb      	strh	r3, [r7, #12]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80057d2:	89b9      	ldrh	r1, [r7, #12]
 80057d4:	89f8      	ldrh	r0, [r7, #14]
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2202      	movs	r2, #2
 80057de:	f000 fb4b 	bl	8005e78 <I2C2_ReadReg>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <BSP_I2C2_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e00c      	b.n	8005808 <BSP_I2C2_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 80057ee:	4809      	ldr	r0, [pc, #36]	; (8005814 <BSP_I2C2_ReadReg16+0x58>)
 80057f0:	f004 f89c 	bl	800992c <HAL_I2C_GetError>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d103      	bne.n	8005802 <BSP_I2C2_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80057fa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e002      	b.n	8005808 <BSP_I2C2_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005802:	f06f 0303 	mvn.w	r3, #3
 8005806:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8005808:	697b      	ldr	r3, [r7, #20]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	200264fc 	.word	0x200264fc

08005818 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800581c:	f001 fa80 	bl	8006d20 <HAL_GetTick>
 8005820:	4603      	mov	r3, r0
}
 8005822:	4618      	mov	r0, r3
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d06b      	beq.n	8005914 <I2C_GetTiming+0xec>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d068      	beq.n	8005914 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e060      	b.n	800590a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005848:	4a35      	ldr	r2, [pc, #212]	; (8005920 <I2C_GetTiming+0xf8>)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	212c      	movs	r1, #44	; 0x2c
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d352      	bcc.n	8005904 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800585e:	4a30      	ldr	r2, [pc, #192]	; (8005920 <I2C_GetTiming+0xf8>)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	212c      	movs	r1, #44	; 0x2c
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	3308      	adds	r3, #8
 800586c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d847      	bhi.n	8005904 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005874:	6939      	ldr	r1, [r7, #16]
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f856 	bl	8005928 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800587c:	6939      	ldr	r1, [r7, #16]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f940 	bl	8005b04 <I2C_Compute_SCLL_SCLH>
 8005884:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b7f      	cmp	r3, #127	; 0x7f
 800588a:	d842      	bhi.n	8005912 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800588c:	4925      	ldr	r1, [pc, #148]	; (8005924 <I2C_GetTiming+0xfc>)
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 800589e:	4821      	ldr	r0, [pc, #132]	; (8005924 <I2C_GetTiming+0xfc>)
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4403      	add	r3, r0
 80058ac:	3304      	adds	r3, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	051b      	lsls	r3, r3, #20
 80058b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80058b6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80058b8:	481a      	ldr	r0, [pc, #104]	; (8005924 <I2C_GetTiming+0xfc>)
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4403      	add	r3, r0
 80058c6:	3308      	adds	r3, #8
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80058d0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 80058d2:	4814      	ldr	r0, [pc, #80]	; (8005924 <I2C_GetTiming+0xfc>)
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4403      	add	r3, r0
 80058e0:	330c      	adds	r3, #12
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80058e8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80058ea:	480e      	ldr	r0, [pc, #56]	; (8005924 <I2C_GetTiming+0xfc>)
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4403      	add	r3, r0
 80058f8:	3310      	adds	r3, #16
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80058fe:	430b      	orrs	r3, r1
 8005900:	617b      	str	r3, [r7, #20]
        }
        break;
 8005902:	e006      	b.n	8005912 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	3301      	adds	r3, #1
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d99b      	bls.n	8005848 <I2C_GetTiming+0x20>
 8005910:	e000      	b.n	8005914 <I2C_GetTiming+0xec>
        break;
 8005912:	bf00      	nop
      }
    }
  }

  return ret;
 8005914:	697b      	ldr	r3, [r7, #20]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	0800d224 	.word	0x0800d224
 8005924:	20025af8 	.word	0x20025af8

08005928 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005928:	b480      	push	{r7}
 800592a:	b08f      	sub	sp, #60	; 0x3c
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005932:	2310      	movs	r3, #16
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	085a      	lsrs	r2, r3, #1
 800593a:	4b6e      	ldr	r3, [pc, #440]	; (8005af4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800593c:	4413      	add	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	fbb3 f3f2 	udiv	r3, r3, r2
 8005944:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8005946:	2332      	movs	r3, #50	; 0x32
 8005948:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800594a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800594e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005950:	4a69      	ldr	r2, [pc, #420]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	212c      	movs	r1, #44	; 0x2c
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	4413      	add	r3, r2
 800595c:	3324      	adds	r3, #36	; 0x24
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	212c      	movs	r1, #44	; 0x2c
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	4413      	add	r3, r2
 800596e:	330c      	adds	r3, #12
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005974:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005976:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005978:	495f      	ldr	r1, [pc, #380]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	202c      	movs	r0, #44	; 0x2c
 800597e:	fb00 f303 	mul.w	r3, r0, r3
 8005982:	440b      	add	r3, r1
 8005984:	3328      	adds	r3, #40	; 0x28
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3303      	adds	r3, #3
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005994:	4a58      	ldr	r2, [pc, #352]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	212c      	movs	r1, #44	; 0x2c
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	3310      	adds	r3, #16
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	4a54      	ldr	r2, [pc, #336]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	212c      	movs	r1, #44	; 0x2c
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	3320      	adds	r3, #32
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80059b8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80059ba:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80059bc:	494e      	ldr	r1, [pc, #312]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	202c      	movs	r0, #44	; 0x2c
 80059c2:	fb00 f303 	mul.w	r3, r0, r3
 80059c6:	440b      	add	r3, r1
 80059c8:	3328      	adds	r3, #40	; 0x28
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3304      	adds	r3, #4
 80059ce:	69f9      	ldr	r1, [r7, #28]
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80059d8:	4a47      	ldr	r2, [pc, #284]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	212c      	movs	r1, #44	; 0x2c
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	3320      	adds	r3, #32
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	4a43      	ldr	r2, [pc, #268]	; (8005af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	212c      	movs	r1, #44	; 0x2c
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	4413      	add	r3, r2
 80059f6:	3314      	adds	r3, #20
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4403      	add	r3, r0
 80059fc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dc01      	bgt.n	8005a08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dc01      	bgt.n	8005a12 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a16:	e062      	b.n	8005ade <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1c:	e059      	b.n	8005ad2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	3301      	adds	r3, #1
 8005a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a24:	3201      	adds	r2, #1
 8005a26:	fb03 f202 	mul.w	r2, r3, r2
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d348      	bcc.n	8005acc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	e042      	b.n	8005ac6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	3301      	adds	r3, #1
 8005a44:	6a3a      	ldr	r2, [r7, #32]
 8005a46:	fb03 f202 	mul.w	r2, r3, r2
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fb02 f303 	mul.w	r3, r2, r3
 8005a50:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d332      	bcc.n	8005ac0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d82e      	bhi.n	8005ac0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8005a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d02a      	beq.n	8005ac0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4924      	ldr	r1, [pc, #144]	; (8005b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a7c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005a7e:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	491f      	ldr	r1, [pc, #124]	; (8005b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3304      	adds	r3, #4
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005a94:	4b19      	ldr	r3, [pc, #100]	; (8005afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4919      	ldr	r1, [pc, #100]	; (8005b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	4a11      	ldr	r2, [pc, #68]	; (8005afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005ab6:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005ab8:	4b10      	ldr	r3, [pc, #64]	; (8005afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b7f      	cmp	r3, #127	; 0x7f
 8005abe:	d812      	bhi.n	8005ae6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	2b0f      	cmp	r3, #15
 8005aca:	d9b9      	bls.n	8005a40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	3301      	adds	r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	2b0f      	cmp	r3, #15
 8005ad6:	d9a2      	bls.n	8005a1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	3301      	adds	r3, #1
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	2b0f      	cmp	r3, #15
 8005ae2:	d999      	bls.n	8005a18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8005ae4:	e000      	b.n	8005ae8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8005ae6:	bf00      	nop
          }
        }
      }
    }
  }
}
 8005ae8:	373c      	adds	r7, #60	; 0x3c
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	3b9aca00 	.word	0x3b9aca00
 8005af8:	0800d224 	.word	0x0800d224
 8005afc:	200264f8 	.word	0x200264f8
 8005b00:	20025af8 	.word	0x20025af8

08005b04 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b093      	sub	sp, #76	; 0x4c
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	085a      	lsrs	r2, r3, #1
 8005b18:	4b7a      	ldr	r3, [pc, #488]	; (8005d04 <I2C_Compute_SCLL_SCLH+0x200>)
 8005b1a:	4413      	add	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8005b24:	4a78      	ldr	r2, [pc, #480]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	212c      	movs	r1, #44	; 0x2c
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	085a      	lsrs	r2, r3, #1
 8005b34:	4b73      	ldr	r3, [pc, #460]	; (8005d04 <I2C_Compute_SCLL_SCLH+0x200>)
 8005b36:	4413      	add	r3, r2
 8005b38:	4973      	ldr	r1, [pc, #460]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	202c      	movs	r0, #44	; 0x2c
 8005b3e:	fb00 f202 	mul.w	r2, r0, r2
 8005b42:	440a      	add	r2, r1
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8005b4c:	2332      	movs	r3, #50	; 0x32
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8005b50:	4a6d      	ldr	r2, [pc, #436]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	212c      	movs	r1, #44	; 0x2c
 8005b56:	fb01 f303 	mul.w	r3, r1, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3328      	adds	r3, #40	; 0x28
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005b68:	4a67      	ldr	r2, [pc, #412]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	212c      	movs	r1, #44	; 0x2c
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	4413      	add	r3, r2
 8005b74:	3304      	adds	r3, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a62      	ldr	r2, [pc, #392]	; (8005d04 <I2C_Compute_SCLL_SCLH+0x200>)
 8005b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005b80:	4a61      	ldr	r2, [pc, #388]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	212c      	movs	r1, #44	; 0x2c
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a5c      	ldr	r2, [pc, #368]	; (8005d04 <I2C_Compute_SCLL_SCLH+0x200>)
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba0:	e0a3      	b.n	8005cea <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005ba2:	495a      	ldr	r1, [pc, #360]	; (8005d0c <I2C_Compute_SCLL_SCLH+0x208>)
 8005ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc0:	e08c      	b.n	8005cdc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	441a      	add	r2, r3
 8005bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bca:	3301      	adds	r3, #1
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	fb03 f101 	mul.w	r1, r3, r1
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	440b      	add	r3, r1
 8005bd8:	4413      	add	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005bdc:	4a4a      	ldr	r2, [pc, #296]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	212c      	movs	r1, #44	; 0x2c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	3318      	adds	r3, #24
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d971      	bls.n	8005cd6 <I2C_Compute_SCLL_SCLH+0x1d2>
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	089b      	lsrs	r3, r3, #2
 8005bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d268      	bcs.n	8005cd6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005c04:	2300      	movs	r3, #0
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c08:	e062      	b.n	8005cd0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	441a      	add	r2, r3
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	3301      	adds	r3, #1
 8005c14:	6979      	ldr	r1, [r7, #20]
 8005c16:	fb03 f101 	mul.w	r1, r3, r1
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	440b      	add	r3, r1
 8005c20:	4413      	add	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	441a      	add	r2, r3
 8005c2a:	4937      	ldr	r1, [pc, #220]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	202c      	movs	r0, #44	; 0x2c
 8005c30:	fb00 f303 	mul.w	r3, r0, r3
 8005c34:	440b      	add	r3, r1
 8005c36:	3320      	adds	r3, #32
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	441a      	add	r2, r3
 8005c3c:	4932      	ldr	r1, [pc, #200]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	202c      	movs	r0, #44	; 0x2c
 8005c42:	fb00 f303 	mul.w	r3, r0, r3
 8005c46:	440b      	add	r3, r1
 8005c48:	3324      	adds	r3, #36	; 0x24
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d338      	bcc.n	8005cca <I2C_Compute_SCLL_SCLH+0x1c6>
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d834      	bhi.n	8005cca <I2C_Compute_SCLL_SCLH+0x1c6>
 8005c60:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <I2C_Compute_SCLL_SCLH+0x204>)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	331c      	adds	r3, #28
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d329      	bcc.n	8005cca <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d225      	bcs.n	8005cca <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	da02      	bge.n	8005c92 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	425b      	negs	r3, r3
 8005c90:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d917      	bls.n	8005cca <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8005c9e:	491b      	ldr	r1, [pc, #108]	; (8005d0c <I2C_Compute_SCLL_SCLH+0x208>)
 8005ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	3310      	adds	r3, #16
 8005cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cb0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005cb2:	4916      	ldr	r1, [pc, #88]	; (8005d0c <I2C_Compute_SCLL_SCLH+0x208>)
 8005cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cc4:	601a      	str	r2, [r3, #0]
              ret = count;
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	3301      	adds	r3, #1
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	2bff      	cmp	r3, #255	; 0xff
 8005cd4:	d999      	bls.n	8005c0a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd8:	3301      	adds	r3, #1
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	f67f af6f 	bls.w	8005bc2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <I2C_Compute_SCLL_SCLH+0x20c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	f4ff af56 	bcc.w	8005ba2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	374c      	adds	r7, #76	; 0x4c
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	3b9aca00 	.word	0x3b9aca00
 8005d08:	0800d224 	.word	0x0800d224
 8005d0c:	20025af8 	.word	0x20025af8
 8005d10:	200264f8 	.word	0x200264f8

08005d14 <I2C2_MspInit>:
  * @brief  Initializes I2C2 MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(const I2C_HandleTypeDef *hI2c)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	; 0x28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8005d1c:	4b2f      	ldr	r3, [pc, #188]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d22:	4a2e      	ldr	r2, [pc, #184]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005d24:	f043 0302 	orr.w	r3, r3, #2
 8005d28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8005d3a:	4b28      	ldr	r3, [pc, #160]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005d42:	f043 0302 	orr.w	r3, r3, #2
 8005d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d4a:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 8005d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8005d5e:	2312      	movs	r3, #18
 8005d60:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005d66:	2302      	movs	r3, #2
 8005d68:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8005d6e:	f107 0314 	add.w	r3, r7, #20
 8005d72:	4619      	mov	r1, r3
 8005d74:	481a      	ldr	r0, [pc, #104]	; (8005de0 <I2C2_MspInit+0xcc>)
 8005d76:	f002 ff99 	bl	8008cac <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 8005d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d7e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8005d80:	2312      	movs	r3, #18
 8005d82:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005d84:	2301      	movs	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	4619      	mov	r1, r3
 8005d96:	4812      	ldr	r0, [pc, #72]	; (8005de0 <I2C2_MspInit+0xcc>)
 8005d98:	f002 ff88 	bl	8008cac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8005d9c:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da2:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005da8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbe:	4a07      	ldr	r2, [pc, #28]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dc4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dca:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <I2C2_MspInit+0xc8>)
 8005dcc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005dd0:	6753      	str	r3, [r2, #116]	; 0x74
}
 8005dd2:	bf00      	nop
 8005dd4:	3728      	adds	r7, #40	; 0x28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	46020c00 	.word	0x46020c00
 8005de0:	42020400 	.word	0x42020400

08005de4 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8005dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005df0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4619      	mov	r1, r3
 8005df6:	480b      	ldr	r0, [pc, #44]	; (8005e24 <I2C2_MspDeInit+0x40>)
 8005df8:	f003 f930 	bl	800905c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 8005dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4619      	mov	r1, r3
 8005e06:	4807      	ldr	r0, [pc, #28]	; (8005e24 <I2C2_MspDeInit+0x40>)
 8005e08:	f003 f928 	bl	800905c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <I2C2_MspDeInit+0x44>)
 8005e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e12:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <I2C2_MspDeInit+0x44>)
 8005e14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005e18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8005e1c:	bf00      	nop
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	42020400 	.word	0x42020400
 8005e28:	46020c00 	.word	0x46020c00

08005e2c <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af04      	add	r7, sp, #16
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	4603      	mov	r3, r0
 8005e36:	81fb      	strh	r3, [r7, #14]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	81bb      	strh	r3, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005e40:	8978      	ldrh	r0, [r7, #10]
 8005e42:	89ba      	ldrh	r2, [r7, #12]
 8005e44:	89f9      	ldrh	r1, [r7, #14]
 8005e46:	f242 7310 	movw	r3, #10000	; 0x2710
 8005e4a:	9302      	str	r3, [sp, #8]
 8005e4c:	8b3b      	ldrh	r3, [r7, #24]
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4603      	mov	r3, r0
 8005e56:	4807      	ldr	r0, [pc, #28]	; (8005e74 <I2C2_WriteReg+0x48>)
 8005e58:	f003 fb2c 	bl	80094b4 <HAL_I2C_Mem_Write>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e001      	b.n	8005e6a <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005e66:	f06f 0307 	mvn.w	r3, #7
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200264fc 	.word	0x200264fc

08005e78 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	4603      	mov	r3, r0
 8005e82:	81fb      	strh	r3, [r7, #14]
 8005e84:	460b      	mov	r3, r1
 8005e86:	81bb      	strh	r3, [r7, #12]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005e8c:	8978      	ldrh	r0, [r7, #10]
 8005e8e:	89ba      	ldrh	r2, [r7, #12]
 8005e90:	89f9      	ldrh	r1, [r7, #14]
 8005e92:	f242 7310 	movw	r3, #10000	; 0x2710
 8005e96:	9302      	str	r3, [sp, #8]
 8005e98:	8b3b      	ldrh	r3, [r7, #24]
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4807      	ldr	r0, [pc, #28]	; (8005ec0 <I2C2_ReadReg+0x48>)
 8005ea4:	f003 fc1a 	bl	80096dc <HAL_I2C_Mem_Read>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e001      	b.n	8005eb6 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005eb2:	f06f 0307 	mvn.w	r3, #7
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200264fc 	.word	0x200264fc

08005ec4 <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32U575I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <BSP_IOEXPANDER_Init+0x1a>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d003      	beq.n	8005ee6 <BSP_IOEXPANDER_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ede:	f06f 0301 	mvn.w	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e01d      	b.n	8005f22 <BSP_IOEXPANDER_Init+0x5e>
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 8005ee6:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <BSP_IOEXPANDER_Init+0x68>)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10e      	bne.n	8005f10 <BSP_IOEXPANDER_Init+0x4c>
    {
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f94c 	bl	8006190 <MFXSTM32L152_Probe>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <BSP_IOEXPANDER_Init+0x42>
      {
        ret = BSP_ERROR_NO_INIT;
 8005efe:	f04f 33ff 	mov.w	r3, #4294967295
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e004      	b.n	8005f10 <BSP_IOEXPANDER_Init+0x4c>
      }
      else
      {
        IO_Ctx[Instance].IsInitialized = 1;
 8005f06:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <BSP_IOEXPANDER_Init+0x68>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      }
    }

    if (IO_Ctx[Instance].IsInitialized == 1U)
 8005f10:	4a06      	ldr	r2, [pc, #24]	; (8005f2c <BSP_IOEXPANDER_Init+0x68>)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d102      	bne.n	8005f22 <BSP_IOEXPANDER_Init+0x5e>
    {
      Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <BSP_IOEXPANDER_Init+0x6c>)
 8005f1e:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <BSP_IOEXPANDER_Init+0x70>)
 8005f20:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20026550 	.word	0x20026550
 8005f30:	20026580 	.word	0x20026580
 8005f34:	20000064 	.word	0x20000064

08005f38 <BSP_IO_Init>:
  * @param  Init     pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval BSP status
  */
int32_t BSP_IO_Init(const uint32_t Instance, BSP_IO_Init_t *Init)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <BSP_IO_Init+0x1a>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <BSP_IO_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f52:	f06f 0301 	mvn.w	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	e043      	b.n	8005fe2 <BSP_IO_Init+0xaa>
  }
  else
  {
    if ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 8005f5a:	4a24      	ldr	r2, [pc, #144]	; (8005fec <BSP_IO_Init+0xb4>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4413      	add	r3, r2
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d124      	bne.n	8005fb6 <BSP_IO_Init+0x7e>
    {
      if (BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ffa8 	bl	8005ec4 <BSP_IOEXPANDER_Init>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <BSP_IO_Init+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f7a:	f06f 0304 	mvn.w	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e019      	b.n	8005fb6 <BSP_IO_Init+0x7e>
      }
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <BSP_IO_Init+0xb8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005f8c:	4819      	ldr	r0, [pc, #100]	; (8005ff4 <BSP_IO_Init+0xbc>)
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	da03      	bge.n	8005f9e <BSP_IO_Init+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f96:	f06f 0304 	mvn.w	r3, #4
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e00b      	b.n	8005fb6 <BSP_IO_Init+0x7e>
      }
      else
      {
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <BSP_IO_Init+0xb4>)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f043 0201 	orr.w	r2, r3, #1
 8005fac:	490f      	ldr	r1, [pc, #60]	; (8005fec <BSP_IO_Init+0xb4>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	440b      	add	r3, r1
 8005fb4:	605a      	str	r2, [r3, #4]
      }
    }

    if (ret == BSP_ERROR_NONE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d112      	bne.n	8005fe2 <BSP_IO_Init+0xaa>
    {
      /* If IT mode is selected, configures MFX low level interrupt */
      if (Init->Mode >= IO_MODE_IT_RISING_EDGE)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d902      	bls.n	8005fca <BSP_IO_Init+0x92>
      {
        BSP_IOEXPANDER_ITConfig(Instance);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f897 	bl	80060f8 <BSP_IOEXPANDER_ITConfig>
      }

      /* Initializes IO pin */
      if (Io_Drv->Init(&Io_CompObj, Init) < 0)
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <BSP_IO_Init+0xb8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	4808      	ldr	r0, [pc, #32]	; (8005ff4 <BSP_IO_Init+0xbc>)
 8005fd4:	4798      	blx	r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da02      	bge.n	8005fe2 <BSP_IO_Init+0xaa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fdc:	f06f 0304 	mvn.w	r3, #4
 8005fe0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20026550 	.word	0x20026550
 8005ff0:	20026580 	.word	0x20026580
 8005ff4:	20026558 	.word	0x20026558

08005ff8 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState  New pins state to write
  * @retval BSP status
  */
int32_t BSP_IO_WritePin(uint32_t Instance, uint32_t IoPin, uint32_t PinState)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d108      	bne.n	8006020 <BSP_IO_WritePin+0x28>
      ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <BSP_IO_WritePin+0x58>)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	4413      	add	r3, r2
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0301 	and.w	r3, r3, #1
  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <BSP_IO_WritePin+0x30>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006020:	f06f 0301 	mvn.w	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e00d      	b.n	8006044 <BSP_IO_WritePin+0x4c>
  }
  else
  {
    /* Set the Pin state */
    if (Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <BSP_IO_WritePin+0x5c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	4808      	ldr	r0, [pc, #32]	; (8006058 <BSP_IO_WritePin+0x60>)
 8006036:	4798      	blx	r3
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	da02      	bge.n	8006044 <BSP_IO_WritePin+0x4c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800603e:	f06f 0304 	mvn.w	r3, #4
 8006042:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006044:	697b      	ldr	r3, [r7, #20]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20026550 	.word	0x20026550
 8006054:	20026580 	.word	0x20026580
 8006058:	20026558 	.word	0x20026558

0800605c <BSP_IO_TogglePin>:
  *          This parameter can be any combination of the IO pins.
  * @note   This function is only used to toggle one pin in the same time
  * @retval None
  */
int32_t BSP_IO_TogglePin(uint32_t Instance, uint32_t IoPin)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
  int32_t pinState;

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d108      	bne.n	8006082 <BSP_IO_TogglePin+0x26>
      ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8006070:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <BSP_IO_TogglePin+0x90>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	4413      	add	r3, r2
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 0301 	and.w	r3, r3, #1
  if ((Instance >= IOEXPANDER_INSTANCES_NBR) ||
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <BSP_IO_TogglePin+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006082:	f06f 0301 	mvn.w	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e02b      	b.n	80060e2 <BSP_IO_TogglePin+0x86>
  }
  else
  {
    /* Toggle the current pin state */
    pinState = Io_Drv->ReadPin(&Io_CompObj, IoPin);
 800608a:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <BSP_IO_TogglePin+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	4818      	ldr	r0, [pc, #96]	; (80060f4 <BSP_IO_TogglePin+0x98>)
 8006094:	4798      	blx	r3
 8006096:	60b8      	str	r0, [r7, #8]
    if (pinState < 0)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da03      	bge.n	80060a6 <BSP_IO_TogglePin+0x4a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800609e:	f06f 0304 	mvn.w	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e01d      	b.n	80060e2 <BSP_IO_TogglePin+0x86>
    }
    else
    {
      if (pinState == 0) /* Reset state */
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10d      	bne.n	80060c8 <BSP_IO_TogglePin+0x6c>
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_SET) < 0)
 80060ac:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <BSP_IO_TogglePin+0x94>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2201      	movs	r2, #1
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	480f      	ldr	r0, [pc, #60]	; (80060f4 <BSP_IO_TogglePin+0x98>)
 80060b8:	4798      	blx	r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	da10      	bge.n	80060e2 <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80060c0:	f06f 0304 	mvn.w	r3, #4
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e00c      	b.n	80060e2 <BSP_IO_TogglePin+0x86>
        }
      }
      else /* Set state */
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_RESET) < 0)
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <BSP_IO_TogglePin+0x94>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	4808      	ldr	r0, [pc, #32]	; (80060f4 <BSP_IO_TogglePin+0x98>)
 80060d4:	4798      	blx	r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da02      	bge.n	80060e2 <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80060dc:	f06f 0304 	mvn.w	r3, #4
 80060e0:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80060e2:	68fb      	ldr	r3, [r7, #12]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20026550 	.word	0x20026550
 80060f0:	20026580 	.word	0x20026580
 80060f4:	20026558 	.word	0x20026558

080060f8 <BSP_IOEXPANDER_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void BSP_IOEXPANDER_ITConfig(uint32_t Instance)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  if (mfx_io_it_enabled == 0U)
 8006100:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <BSP_IOEXPANDER_ITConfig+0x88>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d136      	bne.n	8006176 <BSP_IOEXPANDER_ITConfig+0x7e>
  {
    mfx_io_it_enabled = 1U;
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <BSP_IOEXPANDER_ITConfig+0x88>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
    /* Enable the GPIO EXTI clock */
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <BSP_IOEXPANDER_ITConfig+0x8c>)
 8006110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <BSP_IOEXPANDER_ITConfig+0x8c>)
 8006116:	f043 0304 	orr.w	r3, r3, #4
 800611a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800611e:	4b19      	ldr	r3, [pc, #100]	; (8006184 <BSP_IOEXPANDER_ITConfig+0x8c>)
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612c:	4b15      	ldr	r3, [pc, #84]	; (8006184 <BSP_IOEXPANDER_ITConfig+0x8c>)
 800612e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006132:	4a14      	ldr	r2, [pc, #80]	; (8006184 <BSP_IOEXPANDER_ITConfig+0x8c>)
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <BSP_IOEXPANDER_ITConfig+0x8c>)
 800613e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 800614a:	2320      	movs	r3, #32
 800614c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8006152:	2300      	movs	r3, #0
 8006154:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <BSP_IOEXPANDER_ITConfig+0x90>)
 8006158:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	4619      	mov	r1, r3
 8006160:	480a      	ldr	r0, [pc, #40]	; (800618c <BSP_IOEXPANDER_ITConfig+0x94>)
 8006162:	f002 fda3 	bl	8008cac <HAL_GPIO_Init>

    /* Enable and set GPIO EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQ), BSP_IOEXPANDER_IT_PRIORITY, 0x00);
 8006166:	2200      	movs	r2, #0
 8006168:	210f      	movs	r1, #15
 800616a:	2010      	movs	r0, #16
 800616c:	f000 fee3 	bl	8006f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQ));
 8006170:	2010      	movs	r0, #16
 8006172:	f000 fefa 	bl	8006f6a <HAL_NVIC_EnableIRQ>
  }
}
 8006176:	bf00      	nop
 8006178:	3728      	adds	r7, #40	; 0x28
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20026584 	.word	0x20026584
 8006184:	46020c00 	.word	0x46020c00
 8006188:	10110000 	.word	0x10110000
 800618c:	42020800 	.word	0x42020800

08006190 <MFXSTM32L152_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	; 0x30
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  int32_t              ret = BSP_ERROR_NONE;
 8006198:	2300      	movs	r3, #0
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id;
  uint32_t             i;
  const uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 800619c:	f248 6384 	movw	r3, #34436	; 0x8684
 80061a0:	813b      	strh	r3, [r7, #8]

  /* Configure the audio driver */
  IOCtx.Init        = BSP_I2C2_Init;
 80061a2:	4b27      	ldr	r3, [pc, #156]	; (8006240 <MFXSTM32L152_Probe+0xb0>)
 80061a4:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80061a6:	4b27      	ldr	r3, [pc, #156]	; (8006244 <MFXSTM32L152_Probe+0xb4>)
 80061a8:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80061aa:	4b27      	ldr	r3, [pc, #156]	; (8006248 <MFXSTM32L152_Probe+0xb8>)
 80061ac:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80061ae:	4b27      	ldr	r3, [pc, #156]	; (800624c <MFXSTM32L152_Probe+0xbc>)
 80061b0:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 80061b2:	4b27      	ldr	r3, [pc, #156]	; (8006250 <MFXSTM32L152_Probe+0xc0>)
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24

  for (i = 0U; i < 2U; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ba:	e036      	b.n	800622a <MFXSTM32L152_Probe+0x9a>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80061bc:	f107 0208 	add.w	r2, r7, #8
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	4413      	add	r3, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	833b      	strh	r3, [r7, #24]
    if (MFXSTM32L152_RegisterBusIO(&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 80061ca:	f107 0310 	add.w	r3, r7, #16
 80061ce:	4619      	mov	r1, r3
 80061d0:	4820      	ldr	r0, [pc, #128]	; (8006254 <MFXSTM32L152_Probe+0xc4>)
 80061d2:	f7fe f9a9 	bl	8004528 <MFXSTM32L152_RegisterBusIO>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <MFXSTM32L152_Probe+0x54>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80061dc:	f06f 0307 	mvn.w	r3, #7
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e2:	e01f      	b.n	8006224 <MFXSTM32L152_Probe+0x94>
    }
    else if (MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	4619      	mov	r1, r3
 80061ea:	481a      	ldr	r0, [pc, #104]	; (8006254 <MFXSTM32L152_Probe+0xc4>)
 80061ec:	f7fd fd53 	bl	8003c96 <MFXSTM32L152_ReadID>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <MFXSTM32L152_Probe+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80061f6:	f06f 0303 	mvn.w	r3, #3
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fc:	e012      	b.n	8006224 <MFXSTM32L152_Probe+0x94>
    }
    else
    {
      if ((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b7b      	cmp	r3, #123	; 0x7b
 8006202:	d002      	beq.n	800620a <MFXSTM32L152_Probe+0x7a>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b79      	cmp	r3, #121	; 0x79
 8006208:	d109      	bne.n	800621e <MFXSTM32L152_Probe+0x8e>
      {
        if (MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 800620a:	4812      	ldr	r0, [pc, #72]	; (8006254 <MFXSTM32L152_Probe+0xc4>)
 800620c:	f7fd fce5 	bl	8003bda <MFXSTM32L152_Init>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <MFXSTM32L152_Probe+0xa2>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006216:	f06f 0304 	mvn.w	r3, #4
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 800621c:	e009      	b.n	8006232 <MFXSTM32L152_Probe+0xa2>
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800621e:	f06f 0306 	mvn.w	r3, #6
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (i = 0U; i < 2U; i++)
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	3301      	adds	r3, #1
 8006228:	62bb      	str	r3, [r7, #40]	; 0x28
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	2b01      	cmp	r3, #1
 800622e:	d9c5      	bls.n	80061bc <MFXSTM32L152_Probe+0x2c>
 8006230:	e000      	b.n	8006234 <MFXSTM32L152_Probe+0xa4>
        break;
 8006232:	bf00      	nop
      }
    }
  }

  return ret;
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006236:	4618      	mov	r0, r3
 8006238:	3730      	adds	r7, #48	; 0x30
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	08005569 	.word	0x08005569
 8006244:	080055dd 	.word	0x080055dd
 8006248:	08005705 	.word	0x08005705
 800624c:	080056a9 	.word	0x080056a9
 8006250:	08005819 	.word	0x08005819
 8006254:	20026558 	.word	0x20026558

08006258 <BSP_LCD_Init>:
  * @param  Orientation LCD_ORIENTATION_PORTRAIT, LCD_ORIENTATION_LANDSCAPE,
  *                     LCD_ORIENTATION_PORTRAIT_ROT180 or LCD_ORIENTATION_LANDSCAPE_ROT180.
  * @retval BSP status.
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <BSP_LCD_Init+0x1a>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d903      	bls.n	800627a <BSP_LCD_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006272:	f06f 0301 	mvn.w	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e011      	b.n	800629e <BSP_LCD_Init+0x46>
  }
  else
  {
    /* Power up LCD */
    if (HX8347I_PowerUp() != BSP_ERROR_NONE)
 800627a:	f000 fadf 	bl	800683c <HX8347I_PowerUp>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <BSP_LCD_Init+0x34>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006284:	f06f 0304 	mvn.w	r3, #4
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	e008      	b.n	800629e <BSP_LCD_Init+0x46>
    }
    else
    {
      /* Probe the LCD driver */
      if (HX8347I_Probe(Orientation) != BSP_ERROR_NONE)
 800628c:	6838      	ldr	r0, [r7, #0]
 800628e:	f000 fa61 	bl	8006754 <HX8347I_Probe>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <BSP_LCD_Init+0x46>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8006298:	f06f 0304 	mvn.w	r3, #4
 800629c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
 800629e:	68fb      	ldr	r3, [r7, #12]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <BSP_LCD_DisplayOn>:
  * @brief  Set the display on.
  * @param  Instance LCD Instance.
  * @retval BSP status.
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <BSP_LCD_DisplayOn+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80062ba:	f06f 0301 	mvn.w	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e016      	b.n	80062f0 <BSP_LCD_DisplayOn+0x48>
  }
  else
  {
    /* Set display backlight on */
    HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_PORT, LCD_BACKLIGHT_GPIO_PIN, GPIO_PIN_RESET);
 80062c2:	2200      	movs	r2, #0
 80062c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062c8:	480c      	ldr	r0, [pc, #48]	; (80062fc <BSP_LCD_DisplayOn+0x54>)
 80062ca:	f002 ffbd 	bl	8009248 <HAL_GPIO_WritePin>

    /* Set the display on */
    if (Lcd_Drv[Instance]->DisplayOn(Lcd_CompObj[Instance]) < 0)
 80062ce:	4a0c      	ldr	r2, [pc, #48]	; (8006300 <BSP_LCD_DisplayOn+0x58>)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	490a      	ldr	r1, [pc, #40]	; (8006304 <BSP_LCD_DisplayOn+0x5c>)
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da02      	bge.n	80062f0 <BSP_LCD_DisplayOn+0x48>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80062ea:	f06f 0304 	mvn.w	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	42020000 	.word	0x42020000
 8006300:	200265e4 	.word	0x200265e4
 8006304:	200265e0 	.word	0x200265e0

08006308 <BSP_LCD_GetXSize>:
  * @param  Instance LCD Instance.
  * @param  Xsize LCD X size.
  * @retval BSP status.
  */
int32_t BSP_LCD_GetXSize(const uint32_t Instance, uint32_t *Xsize)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Xsize == NULL))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <BSP_LCD_GetXSize+0x1a>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <BSP_LCD_GetXSize+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006322:	f06f 0301 	mvn.w	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e011      	b.n	800634e <BSP_LCD_GetXSize+0x46>
  }
  else
  {
    /* Get the display Xsize */
    if (Lcd_Drv[Instance]->GetXSize(Lcd_CompObj[Instance], Xsize) < 0)
 800632a:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <BSP_LCD_GetXSize+0x50>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006334:	4909      	ldr	r1, [pc, #36]	; (800635c <BSP_LCD_GetXSize+0x54>)
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	4610      	mov	r0, r2
 8006340:	4798      	blx	r3
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	da02      	bge.n	800634e <BSP_LCD_GetXSize+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006348:	f06f 0304 	mvn.w	r3, #4
 800634c:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800634e:	68fb      	ldr	r3, [r7, #12]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200265e4 	.word	0x200265e4
 800635c:	200265e0 	.word	0x200265e0

08006360 <BSP_LCD_GetYSize>:
  * @param  Instance LCD Instance.
  * @param  Ysize LCD Y size.
  * @retval BSP status.
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *Ysize)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Ysize == NULL))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <BSP_LCD_GetYSize+0x1a>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <BSP_LCD_GetYSize+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800637a:	f06f 0301 	mvn.w	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	e011      	b.n	80063a6 <BSP_LCD_GetYSize+0x46>
  }
  else
  {
    /* Get the display Ysize */
    if (Lcd_Drv[Instance]->GetYSize(Lcd_CompObj[Instance], Ysize) < 0)
 8006382:	4a0b      	ldr	r2, [pc, #44]	; (80063b0 <BSP_LCD_GetYSize+0x50>)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800638c:	4909      	ldr	r1, [pc, #36]	; (80063b4 <BSP_LCD_GetYSize+0x54>)
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	4610      	mov	r0, r2
 8006398:	4798      	blx	r3
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	da02      	bge.n	80063a6 <BSP_LCD_GetYSize+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80063a0:	f06f 0304 	mvn.w	r3, #4
 80063a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80063a6:	68fb      	ldr	r3, [r7, #12]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	200265e4 	.word	0x200265e4
 80063b4:	200265e0 	.word	0x200265e0

080063b8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance LCD Instance.
  * @param  LayerIndex Active layer index.
  * @retval BSP status.
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  int32_t status;

  if (Instance >= LCD_INSTANCES_NBR)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <BSP_LCD_SetActiveLayer+0x18>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80063c8:	f06f 0301 	mvn.w	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e002      	b.n	80063d6 <BSP_LCD_SetActiveLayer+0x1e>
  {
    /* Nothing to do */
    UNUSED(LayerIndex);

    /* Feature not supported */
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80063d0:	f06f 030a 	mvn.w	r3, #10
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  return status;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Y position.
  * @param  pBmp Pointer to bitmap.
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawBitmap(const uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <BSP_LCD_DrawBitmap+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80063fc:	f06f 0301 	mvn.w	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e012      	b.n	800642a <BSP_LCD_DrawBitmap+0x46>
  }
  else
  {
    /* Draw the bitmap on LCD */
    if (Lcd_Drv[Instance]->DrawBitmap(Lcd_CompObj[Instance], Xpos, Ypos, pBmp) < 0)
 8006404:	4a0b      	ldr	r2, [pc, #44]	; (8006434 <BSP_LCD_DrawBitmap+0x50>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800640e:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <BSP_LCD_DrawBitmap+0x54>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	47a0      	blx	r4
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	da02      	bge.n	800642a <BSP_LCD_DrawBitmap+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006424:	f06f 0304 	mvn.w	r3, #4
 8006428:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800642a:	697b      	ldr	r3, [r7, #20]
}
 800642c:	4618      	mov	r0, r3
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	bd90      	pop	{r4, r7, pc}
 8006434:	200265e4 	.word	0x200265e4
 8006438:	200265e0 	.word	0x200265e0

0800643c <BSP_LCD_FillRGBRect>:
  * @param  Height Height of the rectangle.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(const uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width,
                            uint32_t Height)
{
 800643c:	b590      	push	{r4, r7, lr}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <BSP_LCD_FillRGBRect+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006454:	f06f 0301 	mvn.w	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	e016      	b.n	800648a <BSP_LCD_FillRGBRect+0x4e>
  }
  else
  {
    /* Fill rectangle on LCD */
    if (Lcd_Drv[Instance]->FillRGBRect(Lcd_CompObj[Instance], Xpos, Ypos, pData, Width, Height) < 0)
 800645c:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <BSP_LCD_FillRGBRect+0x58>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006464:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006466:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <BSP_LCD_FillRGBRect+0x5c>)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	47a0      	blx	r4
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	da02      	bge.n	800648a <BSP_LCD_FillRGBRect+0x4e>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006484:	f06f 0304 	mvn.w	r3, #4
 8006488:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800648a:	697b      	ldr	r3, [r7, #20]
}
 800648c:	4618      	mov	r0, r3
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	bd90      	pop	{r4, r7, pc}
 8006494:	200265e4 	.word	0x200265e4
 8006498:	200265e0 	.word	0x200265e0

0800649c <BSP_LCD_DrawHLine>:
  * @param  Length Length of the line.
  * @param  Color Color of the line.
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b089      	sub	sp, #36	; 0x24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <BSP_LCD_DrawHLine+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80064b4:	f06f 0301 	mvn.w	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	e014      	b.n	80064e6 <BSP_LCD_DrawHLine+0x4a>
  }
  else
  {
    /* Draw the horizontal line on LCD */
    if (Lcd_Drv[Instance]->DrawHLine(Lcd_CompObj[Instance], Xpos, Ypos, Length, Color) < 0)
 80064bc:	4a0c      	ldr	r2, [pc, #48]	; (80064f0 <BSP_LCD_DrawHLine+0x54>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80064c6:	4a0b      	ldr	r2, [pc, #44]	; (80064f4 <BSP_LCD_DrawHLine+0x58>)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	47a0      	blx	r4
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	da02      	bge.n	80064e6 <BSP_LCD_DrawHLine+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80064e0:	f06f 0304 	mvn.w	r3, #4
 80064e4:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80064e6:	697b      	ldr	r3, [r7, #20]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd90      	pop	{r4, r7, pc}
 80064f0:	200265e4 	.word	0x200265e4
 80064f4:	200265e0 	.word	0x200265e0

080064f8 <BSP_LCD_DrawVLine>:
  * @param  Length Length of the line.
  * @param  Color Color of the line.
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b089      	sub	sp, #36	; 0x24
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <BSP_LCD_DrawVLine+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006510:	f06f 0301 	mvn.w	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e014      	b.n	8006542 <BSP_LCD_DrawVLine+0x4a>
  }
  else
  {
    /* Draw the vertical line on LCD */
    if (Lcd_Drv[Instance]->DrawVLine(Lcd_CompObj[Instance], Xpos, Ypos, Length, Color) < 0)
 8006518:	4a0c      	ldr	r2, [pc, #48]	; (800654c <BSP_LCD_DrawVLine+0x54>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006520:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006522:	4a0b      	ldr	r2, [pc, #44]	; (8006550 <BSP_LCD_DrawVLine+0x58>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	47a0      	blx	r4
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	da02      	bge.n	8006542 <BSP_LCD_DrawVLine+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800653c:	f06f 0304 	mvn.w	r3, #4
 8006540:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8006542:	697b      	ldr	r3, [r7, #20]
}
 8006544:	4618      	mov	r0, r3
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	bd90      	pop	{r4, r7, pc}
 800654c:	200265e4 	.word	0x200265e4
 8006550:	200265e0 	.word	0x200265e0

08006554 <BSP_LCD_FillRect>:
  * @param  Color Color of the rectangle.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                         uint32_t Color)
{
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b089      	sub	sp, #36	; 0x24
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <BSP_LCD_FillRect+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800656c:	f06f 0301 	mvn.w	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	e016      	b.n	80065a2 <BSP_LCD_FillRect+0x4e>
  }
  else
  {
    /* Draw and fill rectangle on LCD */
    if (Lcd_Drv[Instance]->FillRect(Lcd_CompObj[Instance], Xpos, Ypos, Width, Height, Color) < 0)
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <BSP_LCD_FillRect+0x58>)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800657c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800657e:	4a0c      	ldr	r2, [pc, #48]	; (80065b0 <BSP_LCD_FillRect+0x5c>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	47a0      	blx	r4
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	da02      	bge.n	80065a2 <BSP_LCD_FillRect+0x4e>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800659c:	f06f 0304 	mvn.w	r3, #4
 80065a0:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}
 80065ac:	200265e4 	.word	0x200265e4
 80065b0:	200265e0 	.word	0x200265e0

080065b4 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position.
  * @param  Color Pointer to the pixel.
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(const uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <BSP_LCD_ReadPixel+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80065cc:	f06f 0301 	mvn.w	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e012      	b.n	80065fa <BSP_LCD_ReadPixel+0x46>
  }
  else
  {
    /* Read pixel on LCD */
    if (Lcd_Drv[Instance]->GetPixel(Lcd_CompObj[Instance], Xpos, Ypos, Color) < 0)
 80065d4:	4a0b      	ldr	r2, [pc, #44]	; (8006604 <BSP_LCD_ReadPixel+0x50>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065dc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80065de:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <BSP_LCD_ReadPixel+0x54>)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	47a0      	blx	r4
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da02      	bge.n	80065fa <BSP_LCD_ReadPixel+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80065f4:	f06f 0304 	mvn.w	r3, #4
 80065f8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80065fa:	697b      	ldr	r3, [r7, #20]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	bd90      	pop	{r4, r7, pc}
 8006604:	200265e4 	.word	0x200265e4
 8006608:	200265e0 	.word	0x200265e0

0800660c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position.
  * @param  Color Pixel.
  * @retval BSP status.
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <BSP_LCD_WritePixel+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006624:	f06f 0301 	mvn.w	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	e012      	b.n	8006652 <BSP_LCD_WritePixel+0x46>
  }
  else
  {
    /* Write pixel on LCD */
    if (Lcd_Drv[Instance]->SetPixel(Lcd_CompObj[Instance], Xpos, Ypos, Color) < 0)
 800662c:	4a0b      	ldr	r2, [pc, #44]	; (800665c <BSP_LCD_WritePixel+0x50>)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006634:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006636:	4a0a      	ldr	r2, [pc, #40]	; (8006660 <BSP_LCD_WritePixel+0x54>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	47a0      	blx	r4
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	da02      	bge.n	8006652 <BSP_LCD_WritePixel+0x46>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800664c:	f06f 0304 	mvn.w	r3, #4
 8006650:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8006652:	697b      	ldr	r3, [r7, #20]
}
 8006654:	4618      	mov	r0, r3
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	bd90      	pop	{r4, r7, pc}
 800665c:	200265e4 	.word	0x200265e4
 8006660:	200265e0 	.word	0x200265e0

08006664 <BSP_LCD_GetPixelFormat>:
  * @param  Instance LCD Instance.
  * @param  Format Pointer on pixel format.
  * @retval BSP status.
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *Format)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <BSP_LCD_GetPixelFormat+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006678:	f06f 0301 	mvn.w	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e002      	b.n	8006686 <BSP_LCD_GetPixelFormat+0x22>
  }
  else
  {
    /* Get pixel format supported by LCD */
    *Format = LCD_PIXEL_FORMAT_RGB565;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2202      	movs	r2, #2
 8006684:	601a      	str	r2, [r3, #0]
  }

  return status;
 8006686:	68fb      	ldr	r3, [r7, #12]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <MX_FMC_BANK4_Init>:
  * @brief  MX FMC BANK4 initialization.
  * @param  hSram SRAM handle.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_FMC_BANK4_Init(SRAM_HandleTypeDef *hSram)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  static FMC_NORSRAM_TimingTypeDef  SramTiming = {0};

  /* SRAM device configuration */
  hSram->Init.DataAddressMux         = FMC_DATA_ADDRESS_MUX_DISABLE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	60da      	str	r2, [r3, #12]
  hSram->Init.MemoryType             = FMC_MEMORY_TYPE_SRAM;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	611a      	str	r2, [r3, #16]
  hSram->Init.MemoryDataWidth        = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2210      	movs	r2, #16
 80066ac:	615a      	str	r2, [r3, #20]
  hSram->Init.BurstAccessMode        = FMC_BURST_ACCESS_MODE_DISABLE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	619a      	str	r2, [r3, #24]
  hSram->Init.WaitSignalPolarity     = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	61da      	str	r2, [r3, #28]
  hSram->Init.WaitSignalActive       = FMC_WAIT_TIMING_BEFORE_WS;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	621a      	str	r2, [r3, #32]
  hSram->Init.WriteOperation         = FMC_WRITE_OPERATION_ENABLE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066c6:	625a      	str	r2, [r3, #36]	; 0x24
  hSram->Init.WaitSignal             = FMC_WAIT_SIGNAL_DISABLE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	629a      	str	r2, [r3, #40]	; 0x28
  hSram->Init.ExtendedMode           = FMC_EXTENDED_MODE_DISABLE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hSram->Init.AsynchronousWait       = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
  hSram->Init.WriteBurst             = FMC_WRITE_BURST_DISABLE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	635a      	str	r2, [r3, #52]	; 0x34
  hSram->Init.ContinuousClock        = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
  hSram->Init.WriteFifo              = FMC_WRITE_FIFO_DISABLE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80066ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hSram->Init.PageSize               = FMC_PAGE_SIZE_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
  hSram->Init.NBLSetupTime           = FMC_NBL_SETUPTIME_0;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	645a      	str	r2, [r3, #68]	; 0x44
  hSram->Init.MaxChipSelectPulse     = DISABLE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  hSram->Init.MaxChipSelectPulseTime = 1;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	64da      	str	r2, [r3, #76]	; 0x4c

  SramTiming.AddressSetupTime      = 10;
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 800670c:	220a      	movs	r2, #10
 800670e:	601a      	str	r2, [r3, #0]
  SramTiming.AddressHoldTime       = 10;
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 8006712:	220a      	movs	r2, #10
 8006714:	605a      	str	r2, [r3, #4]
  SramTiming.DataSetupTime         = 10;
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 8006718:	220a      	movs	r2, #10
 800671a:	609a      	str	r2, [r3, #8]
  SramTiming.DataHoldTime          = 3;
 800671c:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 800671e:	2203      	movs	r2, #3
 8006720:	60da      	str	r2, [r3, #12]
  SramTiming.BusTurnAroundDuration = 1;
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 8006724:	2201      	movs	r2, #1
 8006726:	611a      	str	r2, [r3, #16]
  SramTiming.CLKDivision           = 2;
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 800672a:	2202      	movs	r2, #2
 800672c:	615a      	str	r2, [r3, #20]
  SramTiming.DataLatency           = 2;
 800672e:	4b08      	ldr	r3, [pc, #32]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 8006730:	2202      	movs	r2, #2
 8006732:	619a      	str	r2, [r3, #24]
  SramTiming.AccessMode            = FMC_ACCESS_MODE_A;
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 8006736:	2200      	movs	r2, #0
 8006738:	61da      	str	r2, [r3, #28]

  return HAL_SRAM_Init(hSram, &SramTiming, &SramTiming);
 800673a:	4a05      	ldr	r2, [pc, #20]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 800673c:	4904      	ldr	r1, [pc, #16]	; (8006750 <MX_FMC_BANK4_Init+0xbc>)
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f005 f806 	bl	800b750 <HAL_SRAM_Init>
 8006744:	4603      	mov	r3, r0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200265e8 	.word	0x200265e8

08006754 <HX8347I_Probe>:
  * @brief  Probe the HX8347I LCD driver.
  * @param  Orientation LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE.
  * @retval BSP status.
  */
static int32_t HX8347I_Probe(uint32_t Orientation)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08c      	sub	sp, #48	; 0x30
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t                 hx8347i_id;
  static HX8347I_Object_t  HX8347IObj;
  uint32_t                 lcd_orientation;

  /* Configure the LCD driver */
  IOCtx.Address     = LCD_FMC_ADDRESS;
 800675c:	2301      	movs	r3, #1
 800675e:	833b      	strh	r3, [r7, #24]
  IOCtx.Init        = LCD_FMC_Init;
 8006760:	4b2d      	ldr	r3, [pc, #180]	; (8006818 <HX8347I_Probe+0xc4>)
 8006762:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = LCD_FMC_DeInit;
 8006764:	4b2d      	ldr	r3, [pc, #180]	; (800681c <HX8347I_Probe+0xc8>)
 8006766:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = LCD_FMC_ReadReg16;
 8006768:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <HX8347I_Probe+0xcc>)
 800676a:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = LCD_FMC_WriteReg16;
 800676c:	4b2d      	ldr	r3, [pc, #180]	; (8006824 <HX8347I_Probe+0xd0>)
 800676e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = LCD_FMC_GetTick;
 8006770:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <HX8347I_Probe+0xd4>)
 8006772:	627b      	str	r3, [r7, #36]	; 0x24

  if (HX8347I_RegisterBusIO(&HX8347IObj, &IOCtx) != HX8347I_OK)
 8006774:	f107 0310 	add.w	r3, r7, #16
 8006778:	4619      	mov	r1, r3
 800677a:	482c      	ldr	r0, [pc, #176]	; (800682c <HX8347I_Probe+0xd8>)
 800677c:	f7fb fda0 	bl	80022c0 <HX8347I_RegisterBusIO>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HX8347I_Probe+0x3a>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8006786:	f06f 0307 	mvn.w	r3, #7
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678c:	e03e      	b.n	800680c <HX8347I_Probe+0xb8>
  }
  else if (HX8347I_ReadID(&HX8347IObj, &hx8347i_id) != HX8347I_OK)
 800678e:	f107 030c 	add.w	r3, r7, #12
 8006792:	4619      	mov	r1, r3
 8006794:	4825      	ldr	r0, [pc, #148]	; (800682c <HX8347I_Probe+0xd8>)
 8006796:	f7fc f820 	bl	80027da <HX8347I_ReadID>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HX8347I_Probe+0x54>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 80067a0:	f06f 0304 	mvn.w	r3, #4
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a6:	e031      	b.n	800680c <HX8347I_Probe+0xb8>
  }
  else if (hx8347i_id != HX8347I_ID)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b95      	cmp	r3, #149	; 0x95
 80067ac:	d003      	beq.n	80067b6 <HX8347I_Probe+0x62>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 80067ae:	f06f 0306 	mvn.w	r3, #6
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b4:	e02a      	b.n	800680c <HX8347I_Probe+0xb8>
  }
  else
  {
    Lcd_CompObj[0] = &HX8347IObj;
 80067b6:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <HX8347I_Probe+0xdc>)
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HX8347I_Probe+0xd8>)
 80067ba:	601a      	str	r2, [r3, #0]
    Lcd_Drv[0] = (LCD_Drv_t *) &HX8347I_Driver;
 80067bc:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HX8347I_Probe+0xe0>)
 80067be:	4a1e      	ldr	r2, [pc, #120]	; (8006838 <HX8347I_Probe+0xe4>)
 80067c0:	601a      	str	r2, [r3, #0]
    if (Orientation == LCD_ORIENTATION_PORTRAIT)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <HX8347I_Probe+0x7a>
    {
      lcd_orientation = HX8347I_ORIENTATION_PORTRAIT;
 80067c8:	2300      	movs	r3, #0
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80067cc:	e00d      	b.n	80067ea <HX8347I_Probe+0x96>
    }
    else if (Orientation == LCD_ORIENTATION_LANDSCAPE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d102      	bne.n	80067da <HX8347I_Probe+0x86>
    {
      lcd_orientation = HX8347I_ORIENTATION_LANDSCAPE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d8:	e007      	b.n	80067ea <HX8347I_Probe+0x96>
    }
    else if (Orientation == LCD_ORIENTATION_PORTRAIT_ROT180)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d102      	bne.n	80067e6 <HX8347I_Probe+0x92>
    {
      lcd_orientation = HX8347I_ORIENTATION_PORTRAIT_ROT180;
 80067e0:	2302      	movs	r3, #2
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e4:	e001      	b.n	80067ea <HX8347I_Probe+0x96>
    }
    else
    {
      lcd_orientation = HX8347I_ORIENTATION_LANDSCAPE_ROT180;
 80067e6:	2303      	movs	r3, #3
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (Lcd_Drv[0]->Init(Lcd_CompObj[0], HX8347I_FORMAT_RBG565, lcd_orientation) < 0)
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <HX8347I_Probe+0xe0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0f      	ldr	r2, [pc, #60]	; (8006830 <HX8347I_Probe+0xdc>)
 80067f2:	6810      	ldr	r0, [r2, #0]
 80067f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f6:	2105      	movs	r1, #5
 80067f8:	4798      	blx	r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	da03      	bge.n	8006808 <HX8347I_Probe+0xb4>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006800:	f06f 0304 	mvn.w	r3, #4
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006806:	e001      	b.n	800680c <HX8347I_Probe+0xb8>
    }
    else
    {
      status = BSP_ERROR_NONE;
 8006808:	2300      	movs	r3, #0
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  return status;
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800680e:	4618      	mov	r0, r3
 8006810:	3730      	adds	r7, #48	; 0x30
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	0800690d 	.word	0x0800690d
 800681c:	08006965 	.word	0x08006965
 8006820:	08006a15 	.word	0x08006a15
 8006824:	08006995 	.word	0x08006995
 8006828:	08006a97 	.word	0x08006a97
 800682c:	20026608 	.word	0x20026608
 8006830:	200265e0 	.word	0x200265e0
 8006834:	200265e4 	.word	0x200265e4
 8006838:	20000018 	.word	0x20000018

0800683c <HX8347I_PowerUp>:
/**
  * @brief  Un-reset HX8347I and activate backlight.
  * @retval BSP status.
  */
static int32_t HX8347I_PowerUp(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af00      	add	r7, sp, #0
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t    IO_Init;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Initialize the BSP IO driver and configure the HX8347I reset pin */
  IO_Init.Pin  = IO_PIN_12;
 8006842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006846:	61bb      	str	r3, [r7, #24]
  IO_Init.Mode = IO_MODE_OUTPUT_OD;
 8006848:	2303      	movs	r3, #3
 800684a:	61fb      	str	r3, [r7, #28]
  IO_Init.Pull = IO_NOPULL;
 800684c:	2300      	movs	r3, #0
 800684e:	623b      	str	r3, [r7, #32]
  status = BSP_IO_Init(0, &IO_Init);
 8006850:	f107 0318 	add.w	r3, r7, #24
 8006854:	4619      	mov	r1, r3
 8006856:	2000      	movs	r0, #0
 8006858:	f7ff fb6e 	bl	8005f38 <BSP_IO_Init>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24
  if (status == BSP_ERROR_NONE)
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d149      	bne.n	80068f8 <HX8347I_PowerUp+0xbc>
  {
    /* Un-reset the HX8347I */
    status = BSP_IO_WritePin(0, IO_PIN_12, IO_PIN_SET);
 8006864:	2201      	movs	r2, #1
 8006866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800686a:	2000      	movs	r0, #0
 800686c:	f7ff fbc4 	bl	8005ff8 <BSP_IO_WritePin>
 8006870:	6278      	str	r0, [r7, #36]	; 0x24
    if (status == BSP_ERROR_NONE)
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d13f      	bne.n	80068f8 <HX8347I_PowerUp+0xbc>
    {
      HAL_Delay(5);
 8006878:	2005      	movs	r0, #5
 800687a:	f000 fa5d 	bl	8006d38 <HAL_Delay>
      /* Reset the HX8347I */
      status = BSP_IO_WritePin(0, IO_PIN_12, IO_PIN_RESET);
 800687e:	2200      	movs	r2, #0
 8006880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006884:	2000      	movs	r0, #0
 8006886:	f7ff fbb7 	bl	8005ff8 <BSP_IO_WritePin>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24
      if (status == BSP_ERROR_NONE)
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d132      	bne.n	80068f8 <HX8347I_PowerUp+0xbc>
      {
        HAL_Delay(5);
 8006892:	2005      	movs	r0, #5
 8006894:	f000 fa50 	bl	8006d38 <HAL_Delay>
        /* Un-reset the HX8347I */
        status = BSP_IO_WritePin(0, IO_PIN_12, IO_PIN_SET);
 8006898:	2201      	movs	r2, #1
 800689a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800689e:	2000      	movs	r0, #0
 80068a0:	f7ff fbaa 	bl	8005ff8 <BSP_IO_WritePin>
 80068a4:	6278      	str	r0, [r7, #36]	; 0x24
        if (status == BSP_ERROR_NONE)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d125      	bne.n	80068f8 <HX8347I_PowerUp+0xbc>
        {
          /* Initialize GPIO for backlight control and enable backlight */
          LCD_BACKLIGHT_GPIO_CLOCK_ENABLE();
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <HX8347I_PowerUp+0xc8>)
 80068ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b2:	4a14      	ldr	r2, [pc, #80]	; (8006904 <HX8347I_PowerUp+0xc8>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068bc:	4b11      	ldr	r3, [pc, #68]	; (8006904 <HX8347I_PowerUp+0xc8>)
 80068be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]
          GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 80068ca:	2301      	movs	r3, #1
 80068cc:	60bb      	str	r3, [r7, #8]
          GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80068ce:	2301      	movs	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
          GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM ;
 80068d2:	2301      	movs	r3, #1
 80068d4:	613b      	str	r3, [r7, #16]
          GPIO_InitStruct.Pin       = LCD_BACKLIGHT_GPIO_PIN;
 80068d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068da:	607b      	str	r3, [r7, #4]
          HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_PORT, &GPIO_InitStruct);
 80068dc:	1d3b      	adds	r3, r7, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4809      	ldr	r0, [pc, #36]	; (8006908 <HX8347I_PowerUp+0xcc>)
 80068e2:	f002 f9e3 	bl	8008cac <HAL_GPIO_Init>
          HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_PORT, LCD_BACKLIGHT_GPIO_PIN, GPIO_PIN_RESET);
 80068e6:	2200      	movs	r2, #0
 80068e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068ec:	4806      	ldr	r0, [pc, #24]	; (8006908 <HX8347I_PowerUp+0xcc>)
 80068ee:	f002 fcab 	bl	8009248 <HAL_GPIO_WritePin>

          /* Wait 120ms according HX8347I datasheet */
          HAL_Delay(120);
 80068f2:	2078      	movs	r0, #120	; 0x78
 80068f4:	f000 fa20 	bl	8006d38 <HAL_Delay>
  }
#else /* USE_BSP_IO_CLASS > 0 */
  status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* USE_BSP_IO_CLASS > 0 */

  return status;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	46020c00 	.word	0x46020c00
 8006908:	42020000 	.word	0x42020000

0800690c <LCD_FMC_Init>:
/**
  * @brief  Initialize FMC.
  * @retval BSP status.
  */
static int32_t LCD_FMC_Init(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]

  hlcd_sram[0].Instance    = FMC_NORSRAM_DEVICE;
 8006916:	4b10      	ldr	r3, [pc, #64]	; (8006958 <LCD_FMC_Init+0x4c>)
 8006918:	4a10      	ldr	r2, [pc, #64]	; (800695c <LCD_FMC_Init+0x50>)
 800691a:	601a      	str	r2, [r3, #0]
  hlcd_sram[0].Extended    = FMC_NORSRAM_EXTENDED_DEVICE;
 800691c:	4b0e      	ldr	r3, [pc, #56]	; (8006958 <LCD_FMC_Init+0x4c>)
 800691e:	4a10      	ldr	r2, [pc, #64]	; (8006960 <LCD_FMC_Init+0x54>)
 8006920:	605a      	str	r2, [r3, #4]
  hlcd_sram[0].Init.NSBank = FMC_NORSRAM_BANK4;
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <LCD_FMC_Init+0x4c>)
 8006924:	2206      	movs	r2, #6
 8006926:	609a      	str	r2, [r3, #8]

  if (HAL_SRAM_GetState(&hlcd_sram[0]) == HAL_SRAM_STATE_RESET)
 8006928:	480b      	ldr	r0, [pc, #44]	; (8006958 <LCD_FMC_Init+0x4c>)
 800692a:	f004 ff7e 	bl	800b82a <HAL_SRAM_GetState>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <LCD_FMC_Init+0x40>
  {
#if (USE_HAL_SRAM_REGISTER_CALLBACKS == 0)
    /* Init the FMC Msp */
    FMC_MspInit(&hlcd_sram[0]);
 8006934:	4808      	ldr	r0, [pc, #32]	; (8006958 <LCD_FMC_Init+0x4c>)
 8006936:	f000 f8b9 	bl	8006aac <FMC_MspInit>

    if (MX_FMC_BANK4_Init(&hlcd_sram[0]) != HAL_OK)
 800693a:	4807      	ldr	r0, [pc, #28]	; (8006958 <LCD_FMC_Init+0x4c>)
 800693c:	f7ff feaa 	bl	8006694 <MX_FMC_BANK4_Init>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <LCD_FMC_Init+0x40>
    {
      status = BSP_ERROR_BUS_FAILURE;
 8006946:	f06f 0307 	mvn.w	r3, #7
 800694a:	607b      	str	r3, [r7, #4]
        status = BSP_ERROR_BUS_FAILURE;
      }
    }
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }
  return status;
 800694c:	687b      	ldr	r3, [r7, #4]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20026588 	.word	0x20026588
 800695c:	420d0400 	.word	0x420d0400
 8006960:	420d0504 	.word	0x420d0504

08006964 <LCD_FMC_DeInit>:
/**
  * @brief  DeInitialize BSP FMC.
  * @retval BSP status.
  */
static int32_t LCD_FMC_DeInit(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 800696a:	2300      	movs	r3, #0
 800696c:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SRAM_REGISTER_CALLBACKS == 0)
  FMC_MspDeInit(&hlcd_sram[0]);
 800696e:	4808      	ldr	r0, [pc, #32]	; (8006990 <LCD_FMC_DeInit+0x2c>)
 8006970:	f000 f92e 	bl	8006bd0 <FMC_MspDeInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */

  /* De-Init the FMC */
  if (HAL_SRAM_DeInit(&hlcd_sram[0]) != HAL_OK)
 8006974:	4806      	ldr	r0, [pc, #24]	; (8006990 <LCD_FMC_DeInit+0x2c>)
 8006976:	f004 ff3b 	bl	800b7f0 <HAL_SRAM_DeInit>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <LCD_FMC_DeInit+0x22>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
 8006980:	f06f 0303 	mvn.w	r3, #3
 8006984:	607b      	str	r3, [r7, #4]
  }

  return status;
 8006986:	687b      	ldr	r3, [r7, #4]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20026588 	.word	0x20026588

08006994 <LCD_FMC_WriteReg16>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
static int32_t LCD_FMC_WriteReg16(const uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60ba      	str	r2, [r7, #8]
 800699c:	607b      	str	r3, [r7, #4]
 800699e:	4603      	mov	r3, r0
 80069a0:	81fb      	strh	r3, [r7, #14]
 80069a2:	460b      	mov	r3, r1
 80069a4:	81bb      	strh	r3, [r7, #12]
  int32_t  ret = BSP_ERROR_NONE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]

  if ((DevAddr != LCD_FMC_ADDRESS) || (pData == NULL) || (Length == 0U))
 80069ae:	89fb      	ldrh	r3, [r7, #14]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d105      	bne.n	80069c0 <LCD_FMC_WriteReg16+0x2c>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <LCD_FMC_WriteReg16+0x2c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <LCD_FMC_WriteReg16+0x34>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069c0:	f06f 0301 	mvn.w	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	e01e      	b.n	8006a06 <LCD_FMC_WriteReg16+0x72>
  }
  else
  {
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 80069c8:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 80069cc:	89bb      	ldrh	r3, [r7, #12]
 80069ce:	8013      	strh	r3, [r2, #0]
    while (i < (2U * Length))
 80069d0:	e014      	b.n	80069fc <LCD_FMC_WriteReg16+0x68>
    {
      /* Write register value */
      *(uint16_t *)LCD_DATA_ADDR = (((uint16_t)pData[i + 1U] << 8U) & 0xFF00U) | ((uint16_t)pData[i] & 0x00FFU);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	3301      	adds	r3, #1
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4413      	add	r3, r2
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	440b      	add	r3, r1
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f04f 41d9 	mov.w	r1, #1820327936	; 0x6c800000
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	800b      	strh	r3, [r1, #0]
      /* Update data pointer */
      i += 2U;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3302      	adds	r3, #2
 80069fa:	613b      	str	r3, [r7, #16]
    while (i < (2U * Length))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3e5      	bcc.n	80069d2 <LCD_FMC_WriteReg16+0x3e>
    }
  }

  /* BSP status */
  return ret;
 8006a06:	697b      	ldr	r3, [r7, #20]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <LCD_FMC_ReadReg16>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
static int32_t LCD_FMC_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b089      	sub	sp, #36	; 0x24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60ba      	str	r2, [r7, #8]
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	4603      	mov	r3, r0
 8006a20:	81fb      	strh	r3, [r7, #14]
 8006a22:	460b      	mov	r3, r1
 8006a24:	81bb      	strh	r3, [r7, #12]
  int32_t  ret = BSP_ERROR_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
  uint32_t i = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	61bb      	str	r3, [r7, #24]
  uint16_t tmp;

  if ((DevAddr != LCD_FMC_ADDRESS) || (pData == NULL) || (Length == 0U))
 8006a2e:	89fb      	ldrh	r3, [r7, #14]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d105      	bne.n	8006a40 <LCD_FMC_ReadReg16+0x2c>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <LCD_FMC_ReadReg16+0x2c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <LCD_FMC_ReadReg16+0x34>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a40:	f06f 0301 	mvn.w	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	e01f      	b.n	8006a88 <LCD_FMC_ReadReg16+0x74>
  }
  else
  {
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 8006a48:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 8006a4c:	89bb      	ldrh	r3, [r7, #12]
 8006a4e:	8013      	strh	r3, [r2, #0]
    while (i < (2U * Length))
 8006a50:	e015      	b.n	8006a7e <LCD_FMC_ReadReg16+0x6a>
    {
      tmp = *(uint16_t *)LCD_DATA_ADDR;
 8006a52:	f04f 43d9 	mov.w	r3, #1820327936	; 0x6c800000
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	82fb      	strh	r3, [r7, #22]
      pData[i]    = (uint8_t) tmp;
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	4413      	add	r3, r2
 8006a60:	8afa      	ldrh	r2, [r7, #22]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
      pData[i + 1U] = (uint8_t)(tmp >> 8U);
 8006a66:	8afb      	ldrh	r3, [r7, #22]
 8006a68:	0a1b      	lsrs	r3, r3, #8
 8006a6a:	b299      	uxth	r1, r3
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	4413      	add	r3, r2
 8006a74:	b2ca      	uxtb	r2, r1
 8006a76:	701a      	strb	r2, [r3, #0]
      /* Update data pointer */
      i += 2U;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	61bb      	str	r3, [r7, #24]
    while (i < (2U * Length))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d3e4      	bcc.n	8006a52 <LCD_FMC_ReadReg16+0x3e>
    }
  }

  /* BSP status */
  return ret;
 8006a88:	69fb      	ldr	r3, [r7, #28]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3724      	adds	r7, #36	; 0x24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <LCD_FMC_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
static int32_t LCD_FMC_GetTick(void)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 8006a9c:	f000 f940 	bl	8006d20 <HAL_GetTick>
 8006aa0:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 8006aa2:	687b      	ldr	r3, [r7, #4]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <FMC_MspInit>:
  * @brief  Initializes FMC MSP.
  * @param  hSram : SRAM handler
  * @retval None
  */
static void  FMC_MspInit(const SRAM_HandleTypeDef *hSram)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	; 0x30
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hSram);

  /*** Configure the GPIOs ***/

  /* Enable VddIO2 for GPIOG */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ab4:	4b42      	ldr	r3, [pc, #264]	; (8006bc0 <FMC_MspInit+0x114>)
 8006ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aba:	4a41      	ldr	r2, [pc, #260]	; (8006bc0 <FMC_MspInit+0x114>)
 8006abc:	f043 0304 	orr.w	r3, r3, #4
 8006ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006ac4:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <FMC_MspInit+0x114>)
 8006ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8006ad2:	f003 fb93 	bl	800a1fc <HAL_PWREx_EnableVddIO2>

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ad6:	4b3a      	ldr	r3, [pc, #232]	; (8006bc0 <FMC_MspInit+0x114>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	4a38      	ldr	r2, [pc, #224]	; (8006bc0 <FMC_MspInit+0x114>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae6:	4b36      	ldr	r3, [pc, #216]	; (8006bc0 <FMC_MspInit+0x114>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006af4:	4b32      	ldr	r3, [pc, #200]	; (8006bc0 <FMC_MspInit+0x114>)
 8006af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afa:	4a31      	ldr	r2, [pc, #196]	; (8006bc0 <FMC_MspInit+0x114>)
 8006afc:	f043 0308 	orr.w	r3, r3, #8
 8006b00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b04:	4b2e      	ldr	r3, [pc, #184]	; (8006bc0 <FMC_MspInit+0x114>)
 8006b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b12:	4b2b      	ldr	r3, [pc, #172]	; (8006bc0 <FMC_MspInit+0x114>)
 8006b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b18:	4a29      	ldr	r2, [pc, #164]	; (8006bc0 <FMC_MspInit+0x114>)
 8006b1a:	f043 0310 	orr.w	r3, r3, #16
 8006b1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b22:	4b27      	ldr	r3, [pc, #156]	; (8006bc0 <FMC_MspInit+0x114>)
 8006b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b30:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <FMC_MspInit+0x114>)
 8006b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b36:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <FMC_MspInit+0x114>)
 8006b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b40:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <FMC_MspInit+0x114>)
 8006b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	60bb      	str	r3, [r7, #8]
 8006b4c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_MEDIUM ;
 8006b52:	2301      	movs	r3, #1
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006b56:	230c      	movs	r3, #12
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* NE configuration */
  /* NE4 : LCD */
  gpio_init_structure.Pin = GPIO_PIN_12;
 8006b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006b64:	f107 031c 	add.w	r3, r7, #28
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4816      	ldr	r0, [pc, #88]	; (8006bc4 <FMC_MspInit+0x118>)
 8006b6c:	f002 f89e 	bl	8008cac <HAL_GPIO_Init>

  /* NOE and NWE configuration */
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8006b70:	2330      	movs	r3, #48	; 0x30
 8006b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006b74:	f107 031c 	add.w	r3, r7, #28
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4813      	ldr	r0, [pc, #76]	; (8006bc8 <FMC_MspInit+0x11c>)
 8006b7c:	f002 f896 	bl	8008cac <HAL_GPIO_Init>

  /* RS configuration */
  gpio_init_structure.Pin = GPIO_PIN_6;
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006b84:	f107 031c 	add.w	r3, r7, #28
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4810      	ldr	r0, [pc, #64]	; (8006bcc <FMC_MspInit+0x120>)
 8006b8c:	f002 f88e 	bl	8008cac <HAL_GPIO_Init>

  /* Data Bus */
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_8 | GPIO_PIN_9 | \
 8006b94:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006b98:	61fb      	str	r3, [r7, #28]
                            GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006b9a:	f107 031c 	add.w	r3, r7, #28
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4809      	ldr	r0, [pc, #36]	; (8006bc8 <FMC_MspInit+0x11c>)
 8006ba2:	f002 f883 	bl	8008cac <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin = GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | \
 8006ba6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8006baa:	61fb      	str	r3, [r7, #28]
                            GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | \
                            GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006bac:	f107 031c 	add.w	r3, r7, #28
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4806      	ldr	r0, [pc, #24]	; (8006bcc <FMC_MspInit+0x120>)
 8006bb4:	f002 f87a 	bl	8008cac <HAL_GPIO_Init>
}
 8006bb8:	bf00      	nop
 8006bba:	3730      	adds	r7, #48	; 0x30
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	46020c00 	.word	0x46020c00
 8006bc4:	42021800 	.word	0x42021800
 8006bc8:	42020c00 	.word	0x42020c00
 8006bcc:	42021000 	.word	0x42021000

08006bd0 <FMC_MspDeInit>:
  * @brief  DeInitializes FMC MSP.
  * @param  hSram : SRAM handler
  * @retval None
  */
static void FMC_MspDeInit(const SRAM_HandleTypeDef *hSram)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSram);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  | \
 8006bd8:	f24c 7333 	movw	r3, #50995	; 0xc733
 8006bdc:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_14 | \
                              GPIO_PIN_15;
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4619      	mov	r1, r3
 8006be2:	480f      	ldr	r0, [pc, #60]	; (8006c20 <FMC_MspDeInit+0x50>)
 8006be4:	f002 fa3a 	bl	800905c <HAL_GPIO_DeInit>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_6  | GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | \
 8006be8:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8006bec:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | \
                              GPIO_PIN_14 | GPIO_PIN_15;
  \

  HAL_GPIO_DeInit(GPIOE, gpio_init_structure.Pin);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	480c      	ldr	r0, [pc, #48]	; (8006c24 <FMC_MspDeInit+0x54>)
 8006bf4:	f002 fa32 	bl	800905c <HAL_GPIO_DeInit>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_12;
 8006bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4619      	mov	r1, r3
 8006c02:	4809      	ldr	r0, [pc, #36]	; (8006c28 <FMC_MspDeInit+0x58>)
 8006c04:	f002 fa2a 	bl	800905c <HAL_GPIO_DeInit>

  /* Disable FMC clock */
  __HAL_RCC_FMC_CLK_DISABLE();
 8006c08:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <FMC_MspDeInit+0x5c>)
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0e:	4a07      	ldr	r2, [pc, #28]	; (8006c2c <FMC_MspDeInit+0x5c>)
 8006c10:	f023 0301 	bic.w	r3, r3, #1
 8006c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c18:	bf00      	nop
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	42020c00 	.word	0x42020c00
 8006c24:	42021000 	.word	0x42021000
 8006c28:	42021800 	.word	0x42021800
 8006c2c:	46020c00 	.word	0x46020c00

08006c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <HAL_Init+0x4c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <HAL_Init+0x4c>)
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c40:	2003      	movs	r0, #3
 8006c42:	f000 f96d 	bl	8006f20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006c46:	f004 fbc7 	bl	800b3d8 <HAL_RCC_GetSysClockFreq>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <HAL_Init+0x50>)
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	490b      	ldr	r1, [pc, #44]	; (8006c84 <HAL_Init+0x54>)
 8006c56:	5ccb      	ldrb	r3, [r1, r3]
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <HAL_Init+0x58>)
 8006c5e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c60:	2000      	movs	r0, #0
 8006c62:	f000 f813 	bl	8006c8c <HAL_InitTick>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e002      	b.n	8006c76 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c70:	f7fb f934 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40022000 	.word	0x40022000
 8006c80:	46020c00 	.word	0x46020c00
 8006c84:	0800cd4c 	.word	0x0800cd4c
 8006c88:	20000014 	.word	0x20000014

08006c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8006c94:	4b15      	ldr	r3, [pc, #84]	; (8006cec <HAL_InitTick+0x60>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e021      	b.n	8006ce4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006ca0:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_InitTick+0x64>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	4b11      	ldr	r3, [pc, #68]	; (8006cec <HAL_InitTick+0x60>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f965 	bl	8006f86 <HAL_SYSTICK_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e00e      	b.n	8006ce4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d80a      	bhi.n	8006ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ccc:	2200      	movs	r2, #0
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	f000 f92f 	bl	8006f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cd8:	4a06      	ldr	r2, [pc, #24]	; (8006cf4 <HAL_InitTick+0x68>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e000      	b.n	8006ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	200000a4 	.word	0x200000a4
 8006cf0:	20000014 	.word	0x20000014
 8006cf4:	200000a0 	.word	0x200000a0

08006cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_IncTick+0x20>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <HAL_IncTick+0x24>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4413      	add	r3, r2
 8006d08:	4a04      	ldr	r2, [pc, #16]	; (8006d1c <HAL_IncTick+0x24>)
 8006d0a:	6013      	str	r3, [r2, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	200000a4 	.word	0x200000a4
 8006d1c:	20026634 	.word	0x20026634

08006d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  return uwTick;
 8006d24:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <HAL_GetTick+0x14>)
 8006d26:	681b      	ldr	r3, [r3, #0]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	20026634 	.word	0x20026634

08006d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d40:	f7ff ffee 	bl	8006d20 <HAL_GetTick>
 8006d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d005      	beq.n	8006d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d52:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <HAL_Delay+0x44>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d5e:	bf00      	nop
 8006d60:	f7ff ffde 	bl	8006d20 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d8f7      	bhi.n	8006d60 <HAL_Delay+0x28>
  {
  }
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	200000a4 	.word	0x200000a4

08006d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d90:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006db2:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	60d3      	str	r3, [r2, #12]
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	e000ed00 	.word	0xe000ed00

08006dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dcc:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <__NVIC_GetPriorityGrouping+0x18>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	0a1b      	lsrs	r3, r3, #8
 8006dd2:	f003 0307 	and.w	r3, r3, #7
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	e000ed00 	.word	0xe000ed00

08006de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	db0b      	blt.n	8006e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	f003 021f 	and.w	r2, r3, #31
 8006dfc:	4907      	ldr	r1, [pc, #28]	; (8006e1c <__NVIC_EnableIRQ+0x38>)
 8006dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	2001      	movs	r0, #1
 8006e06:	fa00 f202 	lsl.w	r2, r0, r2
 8006e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	e000e100 	.word	0xe000e100

08006e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	db0a      	blt.n	8006e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	490c      	ldr	r1, [pc, #48]	; (8006e6c <__NVIC_SetPriority+0x4c>)
 8006e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3e:	0112      	lsls	r2, r2, #4
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	440b      	add	r3, r1
 8006e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e48:	e00a      	b.n	8006e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	4908      	ldr	r1, [pc, #32]	; (8006e70 <__NVIC_SetPriority+0x50>)
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	3b04      	subs	r3, #4
 8006e58:	0112      	lsls	r2, r2, #4
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	761a      	strb	r2, [r3, #24]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	e000e100 	.word	0xe000e100
 8006e70:	e000ed00 	.word	0xe000ed00

08006e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b089      	sub	sp, #36	; 0x24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f1c3 0307 	rsb	r3, r3, #7
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	bf28      	it	cs
 8006e92:	2304      	movcs	r3, #4
 8006e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	2b06      	cmp	r3, #6
 8006e9c:	d902      	bls.n	8006ea4 <NVIC_EncodePriority+0x30>
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	3b03      	subs	r3, #3
 8006ea2:	e000      	b.n	8006ea6 <NVIC_EncodePriority+0x32>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	43da      	mvns	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	401a      	ands	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec6:	43d9      	mvns	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ecc:	4313      	orrs	r3, r2
         );
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3724      	adds	r7, #36	; 0x24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eec:	d301      	bcc.n	8006ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e00f      	b.n	8006f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ef2:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <SysTick_Config+0x40>)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006efa:	210f      	movs	r1, #15
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	f7ff ff8e 	bl	8006e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <SysTick_Config+0x40>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <SysTick_Config+0x40>)
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	e000e010 	.word	0xe000e010

08006f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff ff29 	bl	8006d80 <__NVIC_SetPriorityGrouping>
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
 8006f42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f44:	f7ff ff40 	bl	8006dc8 <__NVIC_GetPriorityGrouping>
 8006f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff ff90 	bl	8006e74 <NVIC_EncodePriority>
 8006f54:	4602      	mov	r2, r0
 8006f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ff5f 	bl	8006e20 <__NVIC_SetPriority>
}
 8006f62:	bf00      	nop
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	4603      	mov	r3, r0
 8006f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff33 	bl	8006de4 <__NVIC_EnableIRQ>
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ffa4 	bl	8006edc <SysTick_Config>
 8006f94:	4603      	mov	r3, r0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006fa8:	4a0b      	ldr	r2, [pc, #44]	; (8006fd8 <HAL_MPU_Enable+0x38>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f043 0301 	orr.w	r3, r3, #1
 8006fb0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <HAL_MPU_Enable+0x3c>)
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <HAL_MPU_Enable+0x3c>)
 8006fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fbc:	6253      	str	r3, [r2, #36]	; 0x24
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006fbe:	f3bf 8f5f 	dmb	sy
}
 8006fc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006fc4:	f3bf 8f6f 	isb	sy
}
 8006fc8:	bf00      	nop

  /* Follow ARM recommendation with */
  /* - Data Memory Barrier and Instruction Synchronization to insure MPU usage */
  __DMB(); /* Force memory writes before continuing */
  __ISB(); /* Flush and refill pipeline with updated permissions */
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	e000ed90 	.word	0xe000ed90
 8006fdc:	e000ed00 	.word	0xe000ed00

08006fe0 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006fe4:	f3bf 8f5f 	dmb	sy
}
 8006fe8:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_MPU_Disable+0x20>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	4a04      	ldr	r2, [pc, #16]	; (8007000 <HAL_MPU_Disable+0x20>)
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	6053      	str	r3, [r2, #4]
}
 8006ff6:	bf00      	nop
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	e000ed90 	.word	0xe000ed90

08007004 <HAL_MPU_ConfigRegion>:
  * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, pMPU_RegionInit);
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4803      	ldr	r0, [pc, #12]	; (800701c <HAL_MPU_ConfigRegion+0x18>)
 8007010:	f000 f814 	bl	800703c <MPU_ConfigRegion>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	e000ed90 	.word	0xe000ed90

08007020 <HAL_MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4803      	ldr	r0, [pc, #12]	; (8007038 <HAL_MPU_ConfigMemoryAttributes+0x18>)
 800702c:	f000 f842 	bl	80070b4 <MPU_ConfigMemoryAttributes>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed90 	.word	0xe000ed90

0800703c <MPU_ConfigRegion>:

/** @addtogroup CORTEX_Private_Functions
  * @{
  */
static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8007046:	f3bf 8f5f 	dmb	sy
}
 800704a:	bf00      	nop

  /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
  __DMB();

  /* Set the Region number */
  MPUx->RNR = pMPU_RegionInit->Number;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	461a      	mov	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]

  if (pMPU_RegionInit->Enable != MPU_REGION_DISABLE)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01e      	beq.n	800709c <MPU_ConfigRegion+0x60>
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(pMPU_RegionInit->DisableExec));
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(pMPU_RegionInit->AccessPermission));
    assert_param(IS_MPU_ACCESS_SHAREABLE(pMPU_RegionInit->IsShareable));

    MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	7bdb      	ldrb	r3, [r3, #15]
 800706a:	00db      	lsls	r3, r3, #3
    MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 800706c:	431a      	orrs	r2, r3
                  ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	7b5b      	ldrb	r3, [r3, #13]
 8007072:	005b      	lsls	r3, r3, #1
                  ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 8007074:	4313      	orrs	r3, r2
                  ((uint32_t)pMPU_RegionInit->DisableExec           << MPU_RBAR_XN_Pos));
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	7b92      	ldrb	r2, [r2, #14]
                  ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 800707a:	431a      	orrs	r2, r3
    MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]

    MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	7b1b      	ldrb	r3, [r3, #12]
 800708c:	005b      	lsls	r3, r3, #1
    MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 800708e:	4313      	orrs	r3, r2
                  ((uint32_t)pMPU_RegionInit->Enable                << MPU_RLAR_EN_Pos));
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 8007094:	431a      	orrs	r2, r3
    MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	611a      	str	r2, [r3, #16]
  else
  {
    MPUx->RLAR = 0U;
    MPUx->RBAR = 0U;
  }
}
 800709a:	e005      	b.n	80070a8 <MPU_ConfigRegion+0x6c>
    MPUx->RLAR = 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	611a      	str	r2, [r3, #16]
    MPUx->RBAR = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	60da      	str	r2, [r3, #12]
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <MPU_ConfigMemoryAttributes>:

static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80070be:	f3bf 8f5f 	dmb	sy
}
 80070c2:	bf00      	nop
  /* No need to check Attributes value as all 0x0..0xFF possible */

  /* Follow ARM recommendation with Data Memory Barrier prior to MPUx configuration */
  __DMB();

  if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d806      	bhi.n	80070da <MPU_ConfigMemoryAttributes+0x26>
  {
    /* Program MPU_MAIR0 */
    p_mair = &(MPUx->MAIR0);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3330      	adds	r3, #48	; 0x30
 80070d0:	617b      	str	r3, [r7, #20]
    attr_number = pMPU_AttributesInit->Number;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	e006      	b.n	80070e8 <MPU_ConfigMemoryAttributes+0x34>
  }
  else
  {
    /* Program MPU_MAIR1 */
    p_mair = &(MPUx->MAIR1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3334      	adds	r3, #52	; 0x34
 80070de:	617b      	str	r3, [r7, #20]
    attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	3b04      	subs	r3, #4
 80070e6:	613b      	str	r3, [r7, #16]
  }

  attr_values = *(p_mair);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]
  attr_values &=  ~(0xFFUL << (attr_number * 8U));
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	22ff      	movs	r2, #255	; 0xff
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	43db      	mvns	r3, r3
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4013      	ands	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	461a      	mov	r2, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	409a      	lsls	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	431a      	orrs	r2, r3
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e069      	b.n	8007206 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fa fee8 	bl	8001f14 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	4b2a      	ldr	r3, [pc, #168]	; (8007210 <HAL_DCMI_Init+0xf0>)
 8007166:	400b      	ands	r3, r1
 8007168:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800717e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800718a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007196:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80071a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80071ae:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b10      	cmp	r3, #16
 80071be:	d112      	bne.n	80071e6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7f1b      	ldrb	r3, [r3, #28]
 80071c4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	7f5b      	ldrb	r3, [r3, #29]
 80071ca:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80071cc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7f9b      	ldrb	r3, [r3, #30]
 80071d2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80071d4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7fdb      	ldrb	r3, [r3, #31]
 80071dc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80071e2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80071e4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 021e 	orr.w	r2, r2, #30
 80071f4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	ffe0f007 	.word	0xffe0f007

08007214 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_DCMI_Start_DMA+0x26>
 8007236:	2302      	movs	r3, #2
 8007238:	e189      	b.n	800754e <HAL_DCMI_Start_DMA+0x33a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007258:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0202 	bic.w	r2, r2, #2
 8007268:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6819      	ldr	r1, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	430a      	orrs	r2, r1
 8007278:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727e:	4a99      	ldr	r2, [pc, #612]	; (80074e4 <HAL_DCMI_Start_DMA+0x2d0>)
 8007280:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007286:	4a98      	ldr	r2, [pc, #608]	; (80074e8 <HAL_DCMI_Start_DMA+0x2d4>)
 8007288:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728e:	2200      	movs	r2, #0
 8007290:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b6:	d24c      	bcs.n	8007352 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d037      	beq.n	8007336 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d023      	beq.n	8007318 <HAL_DCMI_Start_DMA+0x104>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01d      	beq.n	8007318 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fec2 	bl	8008094 <HAL_DMAEx_List_Start_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007316:	e0f9      	b.n	800750c <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2240      	movs	r2, #64	; 0x40
 800731c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007334:	e0ea      	b.n	800750c <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3328      	adds	r3, #40	; 0x28
 8007340:	4619      	mov	r1, r3
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	f000 fb14 	bl	8007972 <HAL_DMA_Start_IT>
 800734a:	4603      	mov	r3, r0
 800734c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007350:	e0dc      	b.n	800750c <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8007364:	e009      	b.n	800737a <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736a:	085a      	lsrs	r2, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	005a      	lsls	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007382:	d2f0      	bcs.n	8007366 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	1e5a      	subs	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80a3 	beq.w	80074ec <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 808a 	beq.w	80074c6 <HAL_DCMI_Start_DMA+0x2b2>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8083 	beq.w	80074c6 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073cc:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d04b      	beq.n	80074a8 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800741e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8007430:	6979      	ldr	r1, [r7, #20]
 8007432:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007436:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007438:	4313      	orrs	r3, r2
 800743a:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	0c1b      	lsrs	r3, r3, #16
 800744e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8007450:	6979      	ldr	r1, [r7, #20]
 8007452:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007456:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007458:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 800745a:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 800745c:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8007468:	6978      	ldr	r0, [r7, #20]
 800746a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800746e:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007470:	4313      	orrs	r3, r2
 8007472:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8007478:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fe08 	bl	8008094 <HAL_DMAEx_List_Start_IT>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d03f      	beq.n	800750a <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2240      	movs	r2, #64	; 0x40
 800748e:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80074a6:	e030      	b.n	800750a <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2240      	movs	r2, #64	; 0x40
 80074ac:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80074c4:	e021      	b.n	800750a <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2240      	movs	r2, #64	; 0x40
 80074ca:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074e2:	e013      	b.n	800750c <HAL_DCMI_Start_DMA+0x2f8>
 80074e4:	0800782d 	.word	0x0800782d
 80074e8:	08007939 	.word	0x08007939
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2240      	movs	r2, #64	; 0x40
 80074f0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007508:	e000      	b.n	800750c <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800750a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800750c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10c      	bne.n	800752e <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800752c:	e00d      	b.n	800754a <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 800754a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800754e:	4618      	mov	r0, r3
 8007550:	3728      	adds	r7, #40	; 0x28
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop

08007558 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8007560:	4b27      	ldr	r3, [pc, #156]	; (8007600 <HAL_DCMI_Suspend+0xa8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a27      	ldr	r2, [pc, #156]	; (8007604 <HAL_DCMI_Suspend+0xac>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	0a5b      	lsrs	r3, r3, #9
 800756c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_DCMI_Suspend+0x30>
 8007584:	2302      	movs	r3, #2
 8007586:	e034      	b.n	80075f2 <HAL_DCMI_Suspend+0x9a>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d125      	bne.n	80075e8 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2205      	movs	r2, #5
 80075a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c4:	f043 0220 	orr.w	r2, r3, #32
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	72fb      	strb	r3, [r7, #11]
        break;
 80075d8:	e006      	b.n	80075e8 <HAL_DCMI_Suspend+0x90>
      }
    } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000014 	.word	0x20000014
 8007604:	10624dd3 	.word	0x10624dd3

08007608 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_DCMI_Resume+0x16>
 800761a:	2302      	movs	r3, #2
 800761c:	e01a      	b.n	8007654 <HAL_DCMI_Resume+0x4c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b05      	cmp	r3, #5
 8007630:	d10b      	bne.n	800764a <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2202      	movs	r2, #2
 8007636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01e      	beq.n	80076b8 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2204      	movs	r2, #4
 8007680:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007686:	f043 0202 	orr.w	r2, r3, #2
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2204      	movs	r2, #4
 8007692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769a:	4a39      	ldr	r2, [pc, #228]	; (8007780 <HAL_DCMI_IRQHandler+0x120>)
 800769c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f9c5 	bl	8007a32 <HAL_DMA_Abort_IT>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d004      	beq.n	80076b8 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f940 	bl	8007938 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01e      	beq.n	8007700 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2202      	movs	r2, #2
 80076c8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ce:	f043 0201 	orr.w	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2204      	movs	r2, #4
 80076da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e2:	4a27      	ldr	r2, [pc, #156]	; (8007780 <HAL_DCMI_IRQHandler+0x120>)
 80076e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f9a1 	bl	8007a32 <HAL_DMA_Abort_IT>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f91c 	bl	8007938 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	2b00      	cmp	r3, #0
 8007708:	d006      	beq.n	8007718 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2210      	movs	r2, #16
 8007710:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f840 	bl	8007798 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d006      	beq.n	8007730 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2208      	movs	r2, #8
 8007728:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f83e 	bl	80077ac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01d      	beq.n	8007776 <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b02      	cmp	r3, #2
 8007746:	d107      	bne.n	8007758 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 021e 	bic.w	r2, r2, #30
 8007756:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2201      	movs	r2, #1
 800776e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7f9 ff01 	bl	8001578 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	08007939 	.word	0x08007939

08007784 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_DCMI_ConfigSyncUnmask>:
  * @param  SyncUnmask pointer to a DCMI_SyncUnmaskTypeDef structure that contains
  *                    the embedded synchronization delimiters unmasks.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCMI_ConfigSyncUnmask(DCMI_HandleTypeDef *hdcmi, DCMI_SyncUnmaskTypeDef *SyncUnmask)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_DCMI_ConfigSyncUnmask+0x18>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e023      	b.n	8007820 <HAL_DCMI_ConfigSyncUnmask+0x60>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Write DCMI embedded synchronization unmask register */
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
                           ((uint32_t)SyncUnmask->LineStartUnmask << DCMI_ESUR_LSU_Pos) | \
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	021b      	lsls	r3, r3, #8
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 80077f4:	431a      	orrs	r2, r3
                           ((uint32_t)SyncUnmask->LineEndUnmask << DCMI_ESUR_LEU_Pos) | \
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	789b      	ldrb	r3, [r3, #2]
 80077fa:	041b      	lsls	r3, r3, #16
                           ((uint32_t)SyncUnmask->LineStartUnmask << DCMI_ESUR_LSU_Pos) | \
 80077fc:	ea42 0103 	orr.w	r1, r2, r3
                           ((uint32_t)SyncUnmask->FrameEndUnmask << DCMI_ESUR_FEU_Pos));
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	78db      	ldrb	r3, [r3, #3]
 8007804:	061a      	lsls	r2, r3, #24
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
                           ((uint32_t)SyncUnmask->LineEndUnmask << DCMI_ESUR_LEU_Pos) | \
 800780a:	430a      	orrs	r2, r1
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) | \
 800780c:	61da      	str	r2, [r3, #28]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800782c:	b480      	push	{r7}
 800782e:	b08b      	sub	sp, #44	; 0x2c
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d061      	beq.n	8007906 <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007858:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007862:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007866:	4013      	ands	r3, r2
 8007868:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	0c1b      	lsrs	r3, r3, #16
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	2b01      	cmp	r3, #1
 8007886:	d910      	bls.n	80078aa <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	3302      	adds	r3, #2
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	fb03 f202 	mul.w	r2, r3, r2
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	441a      	add	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	1e5a      	subs	r2, r3, #1
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 80078a8:	e040      	b.n	800792c <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d109      	bne.n	80078c6 <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	1e5a      	subs	r2, r3, #1
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80078c4:	e032      	b.n	800792c <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ce:	441a      	add	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
 80078ea:	e003      	b.n	80078f4 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	60da      	str	r2, [r3, #12]
}
 8007904:	e012      	b.n	800792c <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b02      	cmp	r3, #2
 8007922:	d103      	bne.n	800792c <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800792c:	bf00      	nop
 800792e:	372c      	adds	r7, #44	; 0x2c
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007944:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794c:	2b02      	cmp	r3, #2
 800794e:	d009      	beq.n	8007964 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff ff0d 	bl	8007784 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e04f      	b.n	8007a2a <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_DMA_Start_IT+0x26>
 8007994:	2302      	movs	r3, #2
 8007996:	e048      	b.n	8007a2a <HAL_DMA_Start_IT+0xb8>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d136      	bne.n	8007a1a <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 fa15 	bl	8007df0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	695a      	ldr	r2, [r3, #20]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80079d4:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695a      	ldr	r2, [r3, #20]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ec:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695a      	ldr	r2, [r3, #20]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a04:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0201 	orr.w	r2, r2, #1
 8007a14:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e007      	b.n	8007a2a <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2240      	movs	r2, #64	; 0x40
 8007a1e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e019      	b.n	8007a78 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d004      	beq.n	8007a5a <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e00e      	b.n	8007a78 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a70:	f043 0304 	orr.w	r3, r3, #4
 8007a74:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007a94:	f023 030f 	bic.w	r3, r3, #15
 8007a98:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa2:	3b50      	subs	r3, #80	; 0x50
 8007aa4:	09db      	lsrs	r3, r3, #7
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	2201      	movs	r2, #1
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8154 	beq.w	8007d6c <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d011      	beq.n	8007af6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ae8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	f043 0201 	orr.w	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d011      	beq.n	8007b28 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b1a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b20:	f043 0202 	orr.w	r2, r3, #2
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d011      	beq.n	8007b5a <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b4c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b52:	f043 0204 	orr.w	r2, r3, #4
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d011      	beq.n	8007b8c <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b7e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b84:	f043 0208 	orr.w	r2, r3, #8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d013      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb0:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d059      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d052      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007be6:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d13b      	bne.n	8007c6c <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c02:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695a      	ldr	r2, [r3, #20]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0202 	orr.w	r2, r2, #2
 8007c12:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2203      	movs	r2, #3
 8007c26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007c2a:	e003      	b.n	8007c34 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c44:	2201      	movs	r2, #1
 8007c46:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8087 	beq.w	8007d70 <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
        }

        return;
 8007c6a:	e081      	b.n	8007d70 <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2205      	movs	r2, #5
 8007c70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d039      	beq.n	8007d06 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d032      	beq.n	8007d06 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d012      	beq.n	8007cd2 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d116      	bne.n	8007ce4 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d111      	bne.n	8007ce4 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ccc:	2201      	movs	r2, #1
 8007cce:	731a      	strb	r2, [r3, #12]
 8007cd0:	e008      	b.n	8007ce4 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007cec:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d031      	beq.n	8007d72 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	695a      	ldr	r2, [r3, #20]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f042 0202 	orr.w	r2, r2, #2
 8007d1c:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d004      	beq.n	8007d36 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2203      	movs	r2, #3
 8007d30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007d34:	e003      	b.n	8007d3e <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d4e:	2201      	movs	r2, #1
 8007d50:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
 8007d6a:	e002      	b.n	8007d72 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8007d6c:	bf00      	nop
 8007d6e:	e000      	b.n	8007d72 <HAL_DMA_IRQHandler+0x2ee>
        return;
 8007d70:	bf00      	nop
    }
  }
}
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e02b      	b.n	8007de4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d94:	f023 030f 	bic.w	r3, r3, #15
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da2:	3b50      	subs	r3, #80	; 0x50
 8007da4:	09db      	lsrs	r3, r3, #7
 8007da6:	f003 031f 	and.w	r3, r3, #31
 8007daa:	2201      	movs	r2, #1
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d012      	beq.n	8007de2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f003 0311 	and.w	r3, r3, #17
 8007dc2:	2b11      	cmp	r3, #17
 8007dc4:	d106      	bne.n	8007dd4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	e006      	b.n	8007de2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	401a      	ands	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e04:	0c1b      	lsrs	r3, r3, #16
 8007e06:	041b      	lsls	r3, r3, #16
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	b291      	uxth	r1, r2
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007e1c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8007e44:	f7fe ff6c 	bl	8006d20 <HAL_GetTick>
 8007e48:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0db      	b.n	800800c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a6e      	ldr	r2, [pc, #440]	; (8008014 <HAL_DMAEx_List_Init+0x1d8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	f000 809f 	beq.w	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a6c      	ldr	r2, [pc, #432]	; (8008018 <HAL_DMAEx_List_Init+0x1dc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	f000 8099 	beq.w	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a6a      	ldr	r2, [pc, #424]	; (800801c <HAL_DMAEx_List_Init+0x1e0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	f000 8093 	beq.w	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a68      	ldr	r2, [pc, #416]	; (8008020 <HAL_DMAEx_List_Init+0x1e4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	f000 808d 	beq.w	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a66      	ldr	r2, [pc, #408]	; (8008024 <HAL_DMAEx_List_Init+0x1e8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	f000 8087 	beq.w	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a64      	ldr	r2, [pc, #400]	; (8008028 <HAL_DMAEx_List_Init+0x1ec>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f000 8081 	beq.w	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a62      	ldr	r2, [pc, #392]	; (800802c <HAL_DMAEx_List_Init+0x1f0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d07b      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a61      	ldr	r2, [pc, #388]	; (8008030 <HAL_DMAEx_List_Init+0x1f4>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d076      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a5f      	ldr	r2, [pc, #380]	; (8008034 <HAL_DMAEx_List_Init+0x1f8>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d071      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a5e      	ldr	r2, [pc, #376]	; (8008038 <HAL_DMAEx_List_Init+0x1fc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d06c      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a5c      	ldr	r2, [pc, #368]	; (800803c <HAL_DMAEx_List_Init+0x200>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d067      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a5b      	ldr	r2, [pc, #364]	; (8008040 <HAL_DMAEx_List_Init+0x204>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d062      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a59      	ldr	r2, [pc, #356]	; (8008044 <HAL_DMAEx_List_Init+0x208>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d05d      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a58      	ldr	r2, [pc, #352]	; (8008048 <HAL_DMAEx_List_Init+0x20c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d058      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a56      	ldr	r2, [pc, #344]	; (800804c <HAL_DMAEx_List_Init+0x210>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d053      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a55      	ldr	r2, [pc, #340]	; (8008050 <HAL_DMAEx_List_Init+0x214>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d04e      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a53      	ldr	r2, [pc, #332]	; (8008054 <HAL_DMAEx_List_Init+0x218>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d049      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a52      	ldr	r2, [pc, #328]	; (8008058 <HAL_DMAEx_List_Init+0x21c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d044      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a50      	ldr	r2, [pc, #320]	; (800805c <HAL_DMAEx_List_Init+0x220>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d03f      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a4f      	ldr	r2, [pc, #316]	; (8008060 <HAL_DMAEx_List_Init+0x224>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d03a      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a4d      	ldr	r2, [pc, #308]	; (8008064 <HAL_DMAEx_List_Init+0x228>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d035      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a4c      	ldr	r2, [pc, #304]	; (8008068 <HAL_DMAEx_List_Init+0x22c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d030      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a4a      	ldr	r2, [pc, #296]	; (800806c <HAL_DMAEx_List_Init+0x230>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d02b      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a49      	ldr	r2, [pc, #292]	; (8008070 <HAL_DMAEx_List_Init+0x234>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d026      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a47      	ldr	r2, [pc, #284]	; (8008074 <HAL_DMAEx_List_Init+0x238>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d021      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a46      	ldr	r2, [pc, #280]	; (8008078 <HAL_DMAEx_List_Init+0x23c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d01c      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a44      	ldr	r2, [pc, #272]	; (800807c <HAL_DMAEx_List_Init+0x240>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d017      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a43      	ldr	r2, [pc, #268]	; (8008080 <HAL_DMAEx_List_Init+0x244>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d012      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a41      	ldr	r2, [pc, #260]	; (8008084 <HAL_DMAEx_List_Init+0x248>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00d      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a40      	ldr	r2, [pc, #256]	; (8008088 <HAL_DMAEx_List_Init+0x24c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d008      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a3e      	ldr	r2, [pc, #248]	; (800808c <HAL_DMAEx_List_Init+0x250>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d003      	beq.n	8007f9e <HAL_DMAEx_List_Init+0x162>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a3d      	ldr	r2, [pc, #244]	; (8008090 <HAL_DMAEx_List_Init+0x254>)
 8007f9c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0206 	orr.w	r2, r2, #6
 8007fbc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007fbe:	e00f      	b.n	8007fe0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007fc0:	f7fe feae 	bl	8006d20 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d908      	bls.n	8007fe0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e015      	b.n	800800c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e8      	bne.n	8007fc0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa76 	bl	80084e0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40020050 	.word	0x40020050
 8008018:	50020050 	.word	0x50020050
 800801c:	400200d0 	.word	0x400200d0
 8008020:	500200d0 	.word	0x500200d0
 8008024:	40020150 	.word	0x40020150
 8008028:	50020150 	.word	0x50020150
 800802c:	400201d0 	.word	0x400201d0
 8008030:	500201d0 	.word	0x500201d0
 8008034:	40020250 	.word	0x40020250
 8008038:	50020250 	.word	0x50020250
 800803c:	400202d0 	.word	0x400202d0
 8008040:	500202d0 	.word	0x500202d0
 8008044:	40020350 	.word	0x40020350
 8008048:	50020350 	.word	0x50020350
 800804c:	400203d0 	.word	0x400203d0
 8008050:	500203d0 	.word	0x500203d0
 8008054:	40020450 	.word	0x40020450
 8008058:	50020450 	.word	0x50020450
 800805c:	400204d0 	.word	0x400204d0
 8008060:	500204d0 	.word	0x500204d0
 8008064:	40020550 	.word	0x40020550
 8008068:	50020550 	.word	0x50020550
 800806c:	400205d0 	.word	0x400205d0
 8008070:	500205d0 	.word	0x500205d0
 8008074:	40020650 	.word	0x40020650
 8008078:	50020650 	.word	0x50020650
 800807c:	400206d0 	.word	0x400206d0
 8008080:	500206d0 	.word	0x500206d0
 8008084:	40020750 	.word	0x40020750
 8008088:	50020750 	.word	0x50020750
 800808c:	400207d0 	.word	0x400207d0
 8008090:	500207d0 	.word	0x500207d0

08008094 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_DMAEx_List_Start_IT+0x16>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e082      	b.n	80081b4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80080b4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080c0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d005      	beq.n	80080d4 <HAL_DMAEx_List_Start_IT+0x40>
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d16a      	bne.n	80081a4 <HAL_DMAEx_List_Start_IT+0x110>
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d067      	beq.n	80081a4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d157      	bne.n	8008190 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_DMAEx_List_Start_IT+0x5a>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e062      	b.n	80081b4 <HAL_DMAEx_List_Start_IT+0x120>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008102:	2202      	movs	r2, #2
 8008104:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008110:	2200      	movs	r2, #0
 8008112:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695a      	ldr	r2, [r3, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8008122:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695a      	ldr	r2, [r3, #20]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	2b00      	cmp	r3, #0
 8008142:	d007      	beq.n	8008154 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695a      	ldr	r2, [r3, #20]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008152:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f107 010c 	add.w	r1, r7, #12
 800815e:	2200      	movs	r2, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fcd3 	bl	8008b0c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4619      	mov	r1, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	0c0b      	lsrs	r3, r1, #16
 8008174:	041b      	lsls	r3, r3, #16
 8008176:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008184:	4013      	ands	r3, r2
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	430b      	orrs	r3, r1
 800818e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695a      	ldr	r2, [r3, #20]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	e007      	b.n	80081b4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2240      	movs	r2, #64	; 0x40
 80081a8:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <HAL_DMAEx_List_BuildNode+0x16>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e004      	b.n	80081e0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fad9 	bl	8008790 <DMA_List_BuildNode>

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <HAL_DMAEx_List_InsertNode_Tail+0x16>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e066      	b.n	80082d0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d104      	bne.n	8008214 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2204      	movs	r2, #4
 800820e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e05d      	b.n	80082d0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2200      	movs	r2, #0
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fc09 	bl	8008a34 <DMA_List_CheckNodesBaseAddresses>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2205      	movs	r2, #5
 800822c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e04e      	b.n	80082d0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2200      	movs	r2, #0
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fc2a 	bl	8008a94 <DMA_List_CheckNodesTypes>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2204      	movs	r2, #4
 800824a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e03f      	b.n	80082d0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e02b      	b.n	80082b8 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8008260:	f107 0220 	add.w	r2, r7, #32
 8008264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008268:	4619      	mov	r1, r3
 800826a:	6838      	ldr	r0, [r7, #0]
 800826c:	f000 fc4e 	bl	8008b0c <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8008274:	f107 030c 	add.w	r3, r7, #12
 8008278:	461a      	mov	r2, r3
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fc75 	bl	8008b6c <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	461a      	mov	r2, r3
 8008290:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008294:	4013      	ands	r3, r2
 8008296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	4319      	orrs	r1, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80082a8:	4013      	ands	r3, r2
 80082aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	4610      	mov	r0, r2
 80082b0:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80082b2:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80082b4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3728      	adds	r7, #40	; 0x28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	; 0x28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e05c      	b.n	80083ac <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e053      	b.n	80083ac <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d101      	bne.n	800831a <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e048      	b.n	80083ac <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2204      	movs	r2, #4
 800831e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e043      	b.n	80083ac <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d104      	bne.n	8008336 <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2204      	movs	r2, #4
 8008330:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e03a      	b.n	80083ac <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 8008342:	f107 0220 	add.w	r2, r7, #32
 8008346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800834a:	4619      	mov	r1, r3
 800834c:	6838      	ldr	r0, [r7, #0]
 800834e:	f000 fbdd 	bl	8008b0c <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 8008356:	f107 030c 	add.w	r3, r7, #12
 800835a:	461a      	mov	r2, r3
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fc04 	bl	8008b6c <DMA_List_FindNode>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d11c      	bne.n	80083a4 <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	461a      	mov	r2, r3
 8008370:	2100      	movs	r1, #0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fbfa 	bl	8008b6c <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800837e:	4013      	ands	r3, r2
 8008380:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	4610      	mov	r0, r2
 8008386:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8008388:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800838a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e003      	b.n	80083ac <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2206      	movs	r2, #6
 80083a8:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3728      	adds	r7, #40	; 0x28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_DMAEx_List_LinkQ+0x16>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e072      	b.n	80084b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80083d4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d002      	beq.n	80083e8 <HAL_DMAEx_List_LinkQ+0x34>
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	2b05      	cmp	r3, #5
 80083e6:	d108      	bne.n	80083fa <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2240      	movs	r2, #64	; 0x40
 80083ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e05c      	b.n	80084b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	7b1b      	ldrb	r3, [r3, #12]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d104      	bne.n	800840e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2201      	movs	r2, #1
 8008408:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e052      	b.n	80084b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a2b      	ldr	r2, [pc, #172]	; (80084c0 <HAL_DMAEx_List_LinkQ+0x10c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d022      	beq.n	800845e <HAL_DMAEx_List_LinkQ+0xaa>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a29      	ldr	r2, [pc, #164]	; (80084c4 <HAL_DMAEx_List_LinkQ+0x110>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d01d      	beq.n	800845e <HAL_DMAEx_List_LinkQ+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a28      	ldr	r2, [pc, #160]	; (80084c8 <HAL_DMAEx_List_LinkQ+0x114>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d018      	beq.n	800845e <HAL_DMAEx_List_LinkQ+0xaa>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a26      	ldr	r2, [pc, #152]	; (80084cc <HAL_DMAEx_List_LinkQ+0x118>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <HAL_DMAEx_List_LinkQ+0xaa>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a25      	ldr	r2, [pc, #148]	; (80084d0 <HAL_DMAEx_List_LinkQ+0x11c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00e      	beq.n	800845e <HAL_DMAEx_List_LinkQ+0xaa>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a23      	ldr	r2, [pc, #140]	; (80084d4 <HAL_DMAEx_List_LinkQ+0x120>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d009      	beq.n	800845e <HAL_DMAEx_List_LinkQ+0xaa>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a22      	ldr	r2, [pc, #136]	; (80084d8 <HAL_DMAEx_List_LinkQ+0x124>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d004      	beq.n	800845e <HAL_DMAEx_List_LinkQ+0xaa>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a20      	ldr	r2, [pc, #128]	; (80084dc <HAL_DMAEx_List_LinkQ+0x128>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <HAL_DMAEx_List_LinkQ+0xae>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <HAL_DMAEx_List_LinkQ+0xb0>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10b      	bne.n	8008480 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2203      	movs	r2, #3
 800847a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e019      	b.n	80084b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008484:	2b81      	cmp	r3, #129	; 0x81
 8008486:	d108      	bne.n	800849a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10d      	bne.n	80084ac <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2204      	movs	r2, #4
 8008494:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e00c      	b.n	80084b4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2204      	movs	r2, #4
 80084a6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e003      	b.n	80084b4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	40020650 	.word	0x40020650
 80084c4:	50020650 	.word	0x50020650
 80084c8:	400206d0 	.word	0x400206d0
 80084cc:	500206d0 	.word	0x500206d0
 80084d0:	40020750 	.word	0x40020750
 80084d4:	50020750 	.word	0x50020750
 80084d8:	400207d0 	.word	0x400207d0
 80084dc:	500207d0 	.word	0x500207d0

080084e0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a85      	ldr	r2, [pc, #532]	; (8008710 <DMA_List_Init+0x230>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f000 80a0 	beq.w	8008640 <DMA_List_Init+0x160>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a83      	ldr	r2, [pc, #524]	; (8008714 <DMA_List_Init+0x234>)
 8008506:	4293      	cmp	r3, r2
 8008508:	f000 809a 	beq.w	8008640 <DMA_List_Init+0x160>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a81      	ldr	r2, [pc, #516]	; (8008718 <DMA_List_Init+0x238>)
 8008512:	4293      	cmp	r3, r2
 8008514:	f000 8094 	beq.w	8008640 <DMA_List_Init+0x160>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a7f      	ldr	r2, [pc, #508]	; (800871c <DMA_List_Init+0x23c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	f000 808e 	beq.w	8008640 <DMA_List_Init+0x160>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a7d      	ldr	r2, [pc, #500]	; (8008720 <DMA_List_Init+0x240>)
 800852a:	4293      	cmp	r3, r2
 800852c:	f000 8088 	beq.w	8008640 <DMA_List_Init+0x160>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a7b      	ldr	r2, [pc, #492]	; (8008724 <DMA_List_Init+0x244>)
 8008536:	4293      	cmp	r3, r2
 8008538:	f000 8082 	beq.w	8008640 <DMA_List_Init+0x160>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a79      	ldr	r2, [pc, #484]	; (8008728 <DMA_List_Init+0x248>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d07c      	beq.n	8008640 <DMA_List_Init+0x160>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a78      	ldr	r2, [pc, #480]	; (800872c <DMA_List_Init+0x24c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d077      	beq.n	8008640 <DMA_List_Init+0x160>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a76      	ldr	r2, [pc, #472]	; (8008730 <DMA_List_Init+0x250>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d072      	beq.n	8008640 <DMA_List_Init+0x160>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a75      	ldr	r2, [pc, #468]	; (8008734 <DMA_List_Init+0x254>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d06d      	beq.n	8008640 <DMA_List_Init+0x160>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a73      	ldr	r2, [pc, #460]	; (8008738 <DMA_List_Init+0x258>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d068      	beq.n	8008640 <DMA_List_Init+0x160>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a72      	ldr	r2, [pc, #456]	; (800873c <DMA_List_Init+0x25c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d063      	beq.n	8008640 <DMA_List_Init+0x160>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a70      	ldr	r2, [pc, #448]	; (8008740 <DMA_List_Init+0x260>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d05e      	beq.n	8008640 <DMA_List_Init+0x160>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a6f      	ldr	r2, [pc, #444]	; (8008744 <DMA_List_Init+0x264>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d059      	beq.n	8008640 <DMA_List_Init+0x160>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a6d      	ldr	r2, [pc, #436]	; (8008748 <DMA_List_Init+0x268>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d054      	beq.n	8008640 <DMA_List_Init+0x160>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a6c      	ldr	r2, [pc, #432]	; (800874c <DMA_List_Init+0x26c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d04f      	beq.n	8008640 <DMA_List_Init+0x160>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a6a      	ldr	r2, [pc, #424]	; (8008750 <DMA_List_Init+0x270>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d04a      	beq.n	8008640 <DMA_List_Init+0x160>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a69      	ldr	r2, [pc, #420]	; (8008754 <DMA_List_Init+0x274>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d045      	beq.n	8008640 <DMA_List_Init+0x160>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a67      	ldr	r2, [pc, #412]	; (8008758 <DMA_List_Init+0x278>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d040      	beq.n	8008640 <DMA_List_Init+0x160>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a66      	ldr	r2, [pc, #408]	; (800875c <DMA_List_Init+0x27c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d03b      	beq.n	8008640 <DMA_List_Init+0x160>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a64      	ldr	r2, [pc, #400]	; (8008760 <DMA_List_Init+0x280>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d036      	beq.n	8008640 <DMA_List_Init+0x160>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a63      	ldr	r2, [pc, #396]	; (8008764 <DMA_List_Init+0x284>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d031      	beq.n	8008640 <DMA_List_Init+0x160>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a61      	ldr	r2, [pc, #388]	; (8008768 <DMA_List_Init+0x288>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d02c      	beq.n	8008640 <DMA_List_Init+0x160>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a60      	ldr	r2, [pc, #384]	; (800876c <DMA_List_Init+0x28c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d027      	beq.n	8008640 <DMA_List_Init+0x160>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a5e      	ldr	r2, [pc, #376]	; (8008770 <DMA_List_Init+0x290>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d022      	beq.n	8008640 <DMA_List_Init+0x160>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a5d      	ldr	r2, [pc, #372]	; (8008774 <DMA_List_Init+0x294>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d01d      	beq.n	8008640 <DMA_List_Init+0x160>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a5b      	ldr	r2, [pc, #364]	; (8008778 <DMA_List_Init+0x298>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d018      	beq.n	8008640 <DMA_List_Init+0x160>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a5a      	ldr	r2, [pc, #360]	; (800877c <DMA_List_Init+0x29c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d013      	beq.n	8008640 <DMA_List_Init+0x160>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a58      	ldr	r2, [pc, #352]	; (8008780 <DMA_List_Init+0x2a0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d00e      	beq.n	8008640 <DMA_List_Init+0x160>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a57      	ldr	r2, [pc, #348]	; (8008784 <DMA_List_Init+0x2a4>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d009      	beq.n	8008640 <DMA_List_Init+0x160>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a55      	ldr	r2, [pc, #340]	; (8008788 <DMA_List_Init+0x2a8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d004      	beq.n	8008640 <DMA_List_Init+0x160>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a54      	ldr	r2, [pc, #336]	; (800878c <DMA_List_Init+0x2ac>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d101      	bne.n	8008644 <DMA_List_Init+0x164>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <DMA_List_Init+0x166>
 8008644:	2300      	movs	r3, #0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	430a      	orrs	r2, r1
 8008666:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008678:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2200      	movs	r2, #0
 8008690:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a36      	ldr	r2, [pc, #216]	; (8008770 <DMA_List_Init+0x290>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d022      	beq.n	80086e2 <DMA_List_Init+0x202>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a34      	ldr	r2, [pc, #208]	; (8008774 <DMA_List_Init+0x294>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01d      	beq.n	80086e2 <DMA_List_Init+0x202>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a33      	ldr	r2, [pc, #204]	; (8008778 <DMA_List_Init+0x298>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d018      	beq.n	80086e2 <DMA_List_Init+0x202>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a31      	ldr	r2, [pc, #196]	; (800877c <DMA_List_Init+0x29c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d013      	beq.n	80086e2 <DMA_List_Init+0x202>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a30      	ldr	r2, [pc, #192]	; (8008780 <DMA_List_Init+0x2a0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00e      	beq.n	80086e2 <DMA_List_Init+0x202>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a2e      	ldr	r2, [pc, #184]	; (8008784 <DMA_List_Init+0x2a4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d009      	beq.n	80086e2 <DMA_List_Init+0x202>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a2d      	ldr	r2, [pc, #180]	; (8008788 <DMA_List_Init+0x2a8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d004      	beq.n	80086e2 <DMA_List_Init+0x202>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a2b      	ldr	r2, [pc, #172]	; (800878c <DMA_List_Init+0x2ac>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d101      	bne.n	80086e6 <DMA_List_Init+0x206>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e000      	b.n	80086e8 <DMA_List_Init+0x208>
 80086e6:	2300      	movs	r3, #0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d007      	beq.n	80086fc <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2200      	movs	r2, #0
 80086f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2200      	movs	r2, #0
 80086fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2200      	movs	r2, #0
 8008702:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008704:	bf00      	nop
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	40020050 	.word	0x40020050
 8008714:	50020050 	.word	0x50020050
 8008718:	400200d0 	.word	0x400200d0
 800871c:	500200d0 	.word	0x500200d0
 8008720:	40020150 	.word	0x40020150
 8008724:	50020150 	.word	0x50020150
 8008728:	400201d0 	.word	0x400201d0
 800872c:	500201d0 	.word	0x500201d0
 8008730:	40020250 	.word	0x40020250
 8008734:	50020250 	.word	0x50020250
 8008738:	400202d0 	.word	0x400202d0
 800873c:	500202d0 	.word	0x500202d0
 8008740:	40020350 	.word	0x40020350
 8008744:	50020350 	.word	0x50020350
 8008748:	400203d0 	.word	0x400203d0
 800874c:	500203d0 	.word	0x500203d0
 8008750:	40020450 	.word	0x40020450
 8008754:	50020450 	.word	0x50020450
 8008758:	400204d0 	.word	0x400204d0
 800875c:	500204d0 	.word	0x500204d0
 8008760:	40020550 	.word	0x40020550
 8008764:	50020550 	.word	0x50020550
 8008768:	400205d0 	.word	0x400205d0
 800876c:	500205d0 	.word	0x500205d0
 8008770:	40020650 	.word	0x40020650
 8008774:	50020650 	.word	0x50020650
 8008778:	400206d0 	.word	0x400206d0
 800877c:	500206d0 	.word	0x500206d0
 8008780:	40020750 	.word	0x40020750
 8008784:	50020750 	.word	0x50020750
 8008788:	400207d0 	.word	0x400207d0
 800878c:	500207d0 	.word	0x500207d0

08008790 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80087a2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80087a8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80087ae:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80087b4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d017      	beq.n	80087f6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	3b01      	subs	r3, #1
 80087da:	051b      	lsls	r3, r3, #20
 80087dc:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80087e0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	3b01      	subs	r3, #1
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80087ee:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80087f0:	431a      	orrs	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6859      	ldr	r1, [r3, #4]
 80087fe:	f240 237f 	movw	r3, #639	; 0x27f
 8008802:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8008804:	431a      	orrs	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008812:	d10c      	bne.n	800882e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d011      	beq.n	8008844 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	605a      	str	r2, [r3, #4]
 800882c:	e00a      	b.n	8008844 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008836:	d105      	bne.n	8008844 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00f      	beq.n	800886c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008858:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885e:	041b      	lsls	r3, r3, #16
 8008860:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8008864:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8008866:	431a      	orrs	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008870:	b29a      	uxth	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d04e      	beq.n	8008920 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888a:	3b01      	subs	r3, #1
 800888c:	0419      	lsls	r1, r3, #16
 800888e:	4b67      	ldr	r3, [pc, #412]	; (8008a2c <DMA_List_BuildNode+0x29c>)
 8008890:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8008892:	431a      	orrs	r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889c:	2b00      	cmp	r3, #0
 800889e:	da06      	bge.n	80088ae <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	609a      	str	r2, [r3, #8]
 80088ac:	e005      	b.n	80088ba <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088be:	2b00      	cmp	r3, #0
 80088c0:	da06      	bge.n	80088d0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	609a      	str	r2, [r3, #8]
 80088ce:	e005      	b.n	80088dc <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	da06      	bge.n	80088f2 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	e005      	b.n	80088fe <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008902:	2b00      	cmp	r3, #0
 8008904:	da06      	bge.n	8008914 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	609a      	str	r2, [r3, #8]
 8008912:	e005      	b.n	8008920 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d059      	beq.n	80089f0 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008940:	2b00      	cmp	r3, #0
 8008942:	da09      	bge.n	8008958 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008948:	425b      	negs	r3, r3
 800894a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	615a      	str	r2, [r3, #20]
 8008956:	e005      	b.n	8008964 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008968:	2b00      	cmp	r3, #0
 800896a:	da0d      	bge.n	8008988 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008970:	425b      	negs	r3, r3
 8008972:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	695a      	ldr	r2, [r3, #20]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	0419      	lsls	r1, r3, #16
 800897c:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <DMA_List_BuildNode+0x2a0>)
 800897e:	400b      	ands	r3, r1
 8008980:	431a      	orrs	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	615a      	str	r2, [r3, #20]
 8008986:	e009      	b.n	800899c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008990:	0419      	lsls	r1, r3, #16
 8008992:	4b27      	ldr	r3, [pc, #156]	; (8008a30 <DMA_List_BuildNode+0x2a0>)
 8008994:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008996:	431a      	orrs	r2, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da08      	bge.n	80089b6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a8:	425b      	negs	r3, r3
 80089aa:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	619a      	str	r2, [r3, #24]
 80089b4:	e004      	b.n	80089c0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ba:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da0b      	bge.n	80089e0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089cc:	425b      	negs	r3, r3
 80089ce:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80089d8:	431a      	orrs	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	619a      	str	r2, [r3, #24]
 80089de:	e007      	b.n	80089f0 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80089ea:	431a      	orrs	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d006      	beq.n	8008a12 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8008a10:	e005      	b.n	8008a1e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	621a      	str	r2, [r3, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	07ff0000 	.word	0x07ff0000
 8008a30:	1fff0000 	.word	0x1fff0000

08008a34 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	0c1b      	lsrs	r3, r3, #16
 8008a4c:	041b      	lsls	r3, r3, #16
 8008a4e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	e00a      	b.n	8008a76 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	e004      	b.n	8008a76 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	0c1b      	lsrs	r3, r3, #16
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d001      	beq.n	8008a86 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d004      	beq.n	8008ab4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	e00e      	b.n	8008ad2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	617b      	str	r3, [r7, #20]
 8008ac2:	e006      	b.n	8008ad2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d001      	beq.n	8008ae8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e00b      	b.n	8008b00 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d001      	beq.n	8008afe <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e000      	b.n	8008b00 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	4a0d      	ldr	r2, [pc, #52]	; (8008b64 <DMA_List_GetCLLRNodeInfo+0x58>)
 8008b2e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00f      	beq.n	8008b56 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2207      	movs	r2, #7
 8008b3a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8008b3c:	e00b      	b.n	8008b56 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a08      	ldr	r2, [pc, #32]	; (8008b68 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8008b48:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2205      	movs	r2, #5
 8008b54:	601a      	str	r2, [r3, #0]
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	fe010000 	.word	0xfe010000
 8008b68:	f8010000 	.word	0xf8010000

08008b6c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b089      	sub	sp, #36	; 0x24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d142      	bne.n	8008c16 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8008b90:	e01d      	b.n	8008bce <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d107      	bne.n	8008ba8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	e00f      	b.n	8008bc8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	0c1b      	lsrs	r3, r3, #16
 8008bb2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008bc0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d3dc      	bcc.n	8008b92 <DMA_List_FindNode+0x26>
 8008bd8:	e029      	b.n	8008c2e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d107      	bne.n	8008bf0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008bea:	4013      	ands	r3, r2
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	e00f      	b.n	8008c10 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	0c1b      	lsrs	r3, r3, #16
 8008bfa:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	4413      	add	r3, r2
 8008c00:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008c08:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d206      	bcs.n	8008c2e <DMA_List_FindNode+0xc2>
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008c26:	4013      	ands	r3, r2
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d1d5      	bne.n	8008bda <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d001      	beq.n	8008c46 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e02b      	b.n	8008c9e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	0c1b      	lsrs	r3, r3, #16
 8008c52:	041b      	lsls	r3, r3, #16
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	0c1b      	lsrs	r3, r3, #16
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	461a      	mov	r2, r3
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00f      	beq.n	8008c9c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	461a      	mov	r2, r3
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c88:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008c8c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	0c1b      	lsrs	r3, r3, #16
 8008c94:	041b      	lsls	r3, r3, #16
 8008c96:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3724      	adds	r7, #36	; 0x24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
	...

08008cac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b089      	sub	sp, #36	; 0x24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008cbe:	e1ba      	b.n	8009036 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ccc:	4013      	ands	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 81aa 	beq.w	8009030 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a55      	ldr	r2, [pc, #340]	; (8008e34 <HAL_GPIO_Init+0x188>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d15d      	bne.n	8008da0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8008cea:	2201      	movs	r2, #1
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f003 0201 	and.w	r2, r3, #1
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	fa02 f303 	lsl.w	r3, r2, r3
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8008d14:	4a48      	ldr	r2, [pc, #288]	; (8008e38 <HAL_GPIO_Init+0x18c>)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d1c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008d1e:	4a46      	ldr	r2, [pc, #280]	; (8008e38 <HAL_GPIO_Init+0x18c>)
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	4413      	add	r3, r2
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	08da      	lsrs	r2, r3, #3
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	3208      	adds	r2, #8
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	220f      	movs	r2, #15
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	43db      	mvns	r3, r3
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	220b      	movs	r2, #11
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	08da      	lsrs	r2, r3, #3
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	3208      	adds	r2, #8
 8008d6a:	69f9      	ldr	r1, [r7, #28]
 8008d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	43db      	mvns	r3, r3
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	4013      	ands	r3, r2
 8008d86:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	e067      	b.n	8008e70 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d003      	beq.n	8008db0 <HAL_GPIO_Init+0x104>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	2b12      	cmp	r3, #18
 8008dae:	d145      	bne.n	8008e3c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	08da      	lsrs	r2, r3, #3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3208      	adds	r2, #8
 8008db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f003 0307 	and.w	r3, r3, #7
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	220f      	movs	r2, #15
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f003 020f 	and.w	r2, r3, #15
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	fa02 f303 	lsl.w	r3, r2, r3
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	08da      	lsrs	r2, r3, #3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3208      	adds	r2, #8
 8008df6:	69f9      	ldr	r1, [r7, #28]
 8008df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	2203      	movs	r2, #3
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	4013      	ands	r3, r2
 8008e12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f003 0203 	and.w	r2, r3, #3
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	fa02 f303 	lsl.w	r3, r2, r3
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e01e      	b.n	8008e70 <HAL_GPIO_Init+0x1c4>
 8008e32:	bf00      	nop
 8008e34:	46020000 	.word	0x46020000
 8008e38:	0800d2d4 	.word	0x0800d2d4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	2203      	movs	r2, #3
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	4013      	ands	r3, r2
 8008e52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f003 0203 	and.w	r2, r3, #3
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	fa02 f303 	lsl.w	r3, r2, r3
 8008e64:	69fa      	ldr	r2, [r7, #28]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d00b      	beq.n	8008e90 <HAL_GPIO_Init+0x1e4>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d007      	beq.n	8008e90 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008e84:	2b11      	cmp	r3, #17
 8008e86:	d003      	beq.n	8008e90 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	2b12      	cmp	r3, #18
 8008e8e:	d130      	bne.n	8008ef2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ece:	43db      	mvns	r3, r3
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	091b      	lsrs	r3, r3, #4
 8008edc:	f003 0201 	and.w	r2, r3, #1
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d017      	beq.n	8008f2a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	2203      	movs	r2, #3
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	69fa      	ldr	r2, [r7, #28]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d07c      	beq.n	8009030 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8008f36:	4a47      	ldr	r2, [pc, #284]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	089b      	lsrs	r3, r3, #2
 8008f3c:	3318      	adds	r3, #24
 8008f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f42:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	220f      	movs	r2, #15
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	43db      	mvns	r3, r3
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	4013      	ands	r3, r2
 8008f58:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	0a9a      	lsrs	r2, r3, #10
 8008f5e:	4b3e      	ldr	r3, [pc, #248]	; (8009058 <HAL_GPIO_Init+0x3ac>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	f002 0203 	and.w	r2, r2, #3
 8008f68:	00d2      	lsls	r2, r2, #3
 8008f6a:	4093      	lsls	r3, r2
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8008f72:	4938      	ldr	r1, [pc, #224]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	089b      	lsrs	r3, r3, #2
 8008f78:	3318      	adds	r3, #24
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8008f80:	4b34      	ldr	r3, [pc, #208]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8008fa4:	4a2b      	ldr	r2, [pc, #172]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8008faa:	4b2a      	ldr	r3, [pc, #168]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	43db      	mvns	r3, r3
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8008fce:	4a21      	ldr	r2, [pc, #132]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008fd4:	4b1f      	ldr	r3, [pc, #124]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fda:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	43db      	mvns	r3, r3
 8008fe0:	69fa      	ldr	r2, [r7, #28]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8008ffa:	4a16      	ldr	r2, [pc, #88]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8009002:	4b14      	ldr	r3, [pc, #80]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 8009004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009008:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	43db      	mvns	r3, r3
 800900e:	69fa      	ldr	r2, [r7, #28]
 8009010:	4013      	ands	r3, r2
 8009012:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009020:	69fa      	ldr	r2, [r7, #28]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4313      	orrs	r3, r2
 8009026:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8009028:	4a0a      	ldr	r2, [pc, #40]	; (8009054 <HAL_GPIO_Init+0x3a8>)
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	3301      	adds	r3, #1
 8009034:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	f47f ae3d 	bne.w	8008cc0 <HAL_GPIO_Init+0x14>
  }
}
 8009046:	bf00      	nop
 8009048:	bf00      	nop
 800904a:	3724      	adds	r7, #36	; 0x24
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	46022000 	.word	0x46022000
 8009058:	002f7f7f 	.word	0x002f7f7f

0800905c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800905c:	b480      	push	{r7}
 800905e:	b089      	sub	sp, #36	; 0x24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800906e:	e0bc      	b.n	80091ea <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009070:	2201      	movs	r2, #1
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	fa02 f303 	lsl.w	r3, r2, r3
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	4013      	ands	r3, r2
 800907c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 80ad 	beq.w	80091e4 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a5e      	ldr	r2, [pc, #376]	; (8009208 <HAL_GPIO_DeInit+0x1ac>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d115      	bne.n	80090be <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8009092:	4a5e      	ldr	r2, [pc, #376]	; (800920c <HAL_GPIO_DeInit+0x1b0>)
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800909a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800909c:	4a5b      	ldr	r2, [pc, #364]	; (800920c <HAL_GPIO_DeInit+0x1b0>)
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	4413      	add	r3, r2
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 80090a8:	4b57      	ldr	r3, [pc, #348]	; (8009208 <HAL_GPIO_DeInit+0x1ac>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	2101      	movs	r1, #1
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	fa01 f303 	lsl.w	r3, r1, r3
 80090b4:	43db      	mvns	r3, r3
 80090b6:	4954      	ldr	r1, [pc, #336]	; (8009208 <HAL_GPIO_DeInit+0x1ac>)
 80090b8:	4013      	ands	r3, r2
 80090ba:	600b      	str	r3, [r1, #0]
 80090bc:	e053      	b.n	8009166 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 80090be:	4a54      	ldr	r2, [pc, #336]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	089b      	lsrs	r3, r3, #2
 80090c4:	3318      	adds	r3, #24
 80090c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ca:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	220f      	movs	r2, #15
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4013      	ands	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	0a9a      	lsrs	r2, r3, #10
 80090e4:	4b4b      	ldr	r3, [pc, #300]	; (8009214 <HAL_GPIO_DeInit+0x1b8>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	f002 0203 	and.w	r2, r2, #3
 80090ee:	00d2      	lsls	r2, r2, #3
 80090f0:	4093      	lsls	r3, r2
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d136      	bne.n	8009166 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80090f8:	4b45      	ldr	r3, [pc, #276]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 80090fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	43db      	mvns	r3, r3
 8009102:	4943      	ldr	r1, [pc, #268]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 8009104:	4013      	ands	r3, r2
 8009106:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800910a:	4b41      	ldr	r3, [pc, #260]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 800910c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	43db      	mvns	r3, r3
 8009114:	493e      	ldr	r1, [pc, #248]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 8009116:	4013      	ands	r3, r2
 8009118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800911c:	4b3c      	ldr	r3, [pc, #240]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	43db      	mvns	r3, r3
 8009124:	493a      	ldr	r1, [pc, #232]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 8009126:	4013      	ands	r3, r2
 8009128:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800912a:	4b39      	ldr	r3, [pc, #228]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	43db      	mvns	r3, r3
 8009132:	4937      	ldr	r1, [pc, #220]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 8009134:	4013      	ands	r3, r2
 8009136:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	220f      	movs	r2, #15
 8009142:	fa02 f303 	lsl.w	r3, r2, r3
 8009146:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8009148:	4a31      	ldr	r2, [pc, #196]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	089b      	lsrs	r3, r3, #2
 800914e:	3318      	adds	r3, #24
 8009150:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	43da      	mvns	r2, r3
 8009158:	482d      	ldr	r0, [pc, #180]	; (8009210 <HAL_GPIO_DeInit+0x1b4>)
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	089b      	lsrs	r3, r3, #2
 800915e:	400a      	ands	r2, r1
 8009160:	3318      	adds	r3, #24
 8009162:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	2103      	movs	r1, #3
 8009170:	fa01 f303 	lsl.w	r3, r1, r3
 8009174:	431a      	orrs	r2, r3
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	08da      	lsrs	r2, r3, #3
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3208      	adds	r2, #8
 8009182:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	220f      	movs	r2, #15
 8009190:	fa02 f303 	lsl.w	r3, r2, r3
 8009194:	43db      	mvns	r3, r3
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	08d2      	lsrs	r2, r2, #3
 800919a:	4019      	ands	r1, r3
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	3208      	adds	r2, #8
 80091a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	2103      	movs	r1, #3
 80091ae:	fa01 f303 	lsl.w	r3, r1, r3
 80091b2:	43db      	mvns	r3, r3
 80091b4:	401a      	ands	r2, r3
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	2101      	movs	r1, #1
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	43db      	mvns	r3, r3
 80091c8:	401a      	ands	r2, r3
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	2103      	movs	r1, #3
 80091d8:	fa01 f303 	lsl.w	r3, r1, r3
 80091dc:	43db      	mvns	r3, r3
 80091de:	401a      	ands	r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	3301      	adds	r3, #1
 80091e8:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	fa22 f303 	lsr.w	r3, r2, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f47f af3c 	bne.w	8009070 <HAL_GPIO_DeInit+0x14>
  }
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	3724      	adds	r7, #36	; 0x24
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	46020000 	.word	0x46020000
 800920c:	0800d2d4 	.word	0x0800d2d4
 8009210:	46022000 	.word	0x46022000
 8009214:	002f7f7f 	.word	0x002f7f7f

08009218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691a      	ldr	r2, [r3, #16]
 8009228:	887b      	ldrh	r3, [r7, #2]
 800922a:	4013      	ands	r3, r2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009230:	2301      	movs	r3, #1
 8009232:	73fb      	strb	r3, [r7, #15]
 8009234:	e001      	b.n	800923a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800923a:	7bfb      	ldrb	r3, [r7, #15]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	807b      	strh	r3, [r7, #2]
 8009254:	4613      	mov	r3, r2
 8009256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009258:	787b      	ldrb	r3, [r7, #1]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800925e:	887a      	ldrh	r2, [r7, #2]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8009264:	e002      	b.n	800926c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8009266:	887a      	ldrh	r2, [r7, #2]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	695b      	ldr	r3, [r3, #20]
 8009288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4013      	ands	r3, r2
 8009290:	041a      	lsls	r2, r3, #16
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	43d9      	mvns	r1, r3
 8009296:	887b      	ldrh	r3, [r7, #2]
 8009298:	400b      	ands	r3, r1
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	619a      	str	r2, [r3, #24]
}
 80092a0:	bf00      	nop
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	4013      	ands	r3, r2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d006      	beq.n	80092d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80092c2:	4a0c      	ldr	r2, [pc, #48]	; (80092f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f8 faae 	bl	800182c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80092d0:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	88fb      	ldrh	r3, [r7, #6]
 80092d6:	4013      	ands	r3, r2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d006      	beq.n	80092ea <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80092dc:	4a05      	ldr	r2, [pc, #20]	; (80092f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80092de:	88fb      	ldrh	r3, [r7, #6]
 80092e0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80092e2:	88fb      	ldrh	r3, [r7, #6]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f807 	bl	80092f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	46022000 	.word	0x46022000

080092f8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e081      	b.n	8009424 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f8a8 	bl	800948a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2224      	movs	r2, #36	; 0x24
 800933e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0201 	bic.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800935e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800936e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d107      	bne.n	8009388 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009384:	609a      	str	r2, [r3, #8]
 8009386:	e006      	b.n	8009396 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009394:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	2b02      	cmp	r3, #2
 800939c:	d104      	bne.n	80093a8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	6812      	ldr	r2, [r2, #0]
 80093b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80093b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691a      	ldr	r2, [r3, #16]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69d9      	ldr	r1, [r3, #28]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1a      	ldr	r2, [r3, #32]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e021      	b.n	8009482 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2224      	movs	r2, #36	; 0x24
 8009442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0201 	bic.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f821 	bl	800949e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	4608      	mov	r0, r1
 80094be:	4611      	mov	r1, r2
 80094c0:	461a      	mov	r2, r3
 80094c2:	4603      	mov	r3, r0
 80094c4:	817b      	strh	r3, [r7, #10]
 80094c6:	460b      	mov	r3, r1
 80094c8:	813b      	strh	r3, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	f040 80f9 	bne.w	80096ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <HAL_I2C_Mem_Write+0x34>
 80094e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d105      	bne.n	80094f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e0ed      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_I2C_Mem_Write+0x4e>
 80094fe:	2302      	movs	r3, #2
 8009500:	e0e6      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800950a:	f7fd fc09 	bl	8006d20 <HAL_GetTick>
 800950e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	2319      	movs	r3, #25
 8009516:	2201      	movs	r2, #1
 8009518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 fadd 	bl	8009adc <I2C_WaitOnFlagUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e0d1      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2221      	movs	r2, #33	; 0x21
 8009530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2240      	movs	r2, #64	; 0x40
 8009538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a3a      	ldr	r2, [r7, #32]
 8009546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800954c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009554:	88f8      	ldrh	r0, [r7, #6]
 8009556:	893a      	ldrh	r2, [r7, #8]
 8009558:	8979      	ldrh	r1, [r7, #10]
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	4603      	mov	r3, r0
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 f9ed 	bl	8009944 <I2C_RequestMemoryWrite>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e0a9      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	2bff      	cmp	r3, #255	; 0xff
 8009584:	d90e      	bls.n	80095a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	22ff      	movs	r2, #255	; 0xff
 800958a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009590:	b2da      	uxtb	r2, r3
 8009592:	8979      	ldrh	r1, [r7, #10]
 8009594:	2300      	movs	r3, #0
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fc57 	bl	8009e50 <I2C_TransferConfig>
 80095a2:	e00f      	b.n	80095c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	8979      	ldrh	r1, [r7, #10]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fc46 	bl	8009e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 fad6 	bl	8009b7a <I2C_WaitOnTXISFlagUntilTimeout>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e07b      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d034      	beq.n	800967c <HAL_I2C_Mem_Write+0x1c8>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d130      	bne.n	800967c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	2200      	movs	r2, #0
 8009622:	2180      	movs	r1, #128	; 0x80
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 fa59 	bl	8009adc <I2C_WaitOnFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e04d      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	2bff      	cmp	r3, #255	; 0xff
 800963c:	d90e      	bls.n	800965c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	22ff      	movs	r2, #255	; 0xff
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009648:	b2da      	uxtb	r2, r3
 800964a:	8979      	ldrh	r1, [r7, #10]
 800964c:	2300      	movs	r3, #0
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 fbfb 	bl	8009e50 <I2C_TransferConfig>
 800965a:	e00f      	b.n	800967c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009660:	b29a      	uxth	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966a:	b2da      	uxtb	r2, r3
 800966c:	8979      	ldrh	r1, [r7, #10]
 800966e:	2300      	movs	r3, #0
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 fbea 	bl	8009e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d19e      	bne.n	80095c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 fabc 	bl	8009c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e01a      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2220      	movs	r2, #32
 80096a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6859      	ldr	r1, [r3, #4]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <HAL_I2C_Mem_Write+0x224>)
 80096ae:	400b      	ands	r3, r1
 80096b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e000      	b.n	80096d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80096ce:	2302      	movs	r3, #2
  }
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	fe00e800 	.word	0xfe00e800

080096dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af02      	add	r7, sp, #8
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	4608      	mov	r0, r1
 80096e6:	4611      	mov	r1, r2
 80096e8:	461a      	mov	r2, r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	817b      	strh	r3, [r7, #10]
 80096ee:	460b      	mov	r3, r1
 80096f0:	813b      	strh	r3, [r7, #8]
 80096f2:	4613      	mov	r3, r2
 80096f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b20      	cmp	r3, #32
 8009700:	f040 80fd 	bne.w	80098fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_I2C_Mem_Read+0x34>
 800970a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800970c:	2b00      	cmp	r3, #0
 800970e:	d105      	bne.n	800971c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009716:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0f1      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009722:	2b01      	cmp	r3, #1
 8009724:	d101      	bne.n	800972a <HAL_I2C_Mem_Read+0x4e>
 8009726:	2302      	movs	r3, #2
 8009728:	e0ea      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009732:	f7fd faf5 	bl	8006d20 <HAL_GetTick>
 8009736:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2319      	movs	r3, #25
 800973e:	2201      	movs	r2, #1
 8009740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f9c9 	bl	8009adc <I2C_WaitOnFlagUntilTimeout>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e0d5      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2222      	movs	r2, #34	; 0x22
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2240      	movs	r2, #64	; 0x40
 8009760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a3a      	ldr	r2, [r7, #32]
 800976e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800977c:	88f8      	ldrh	r0, [r7, #6]
 800977e:	893a      	ldrh	r2, [r7, #8]
 8009780:	8979      	ldrh	r1, [r7, #10]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4603      	mov	r3, r0
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f92d 	bl	80099ec <I2C_RequestMemoryRead>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d005      	beq.n	80097a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e0ad      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2bff      	cmp	r3, #255	; 0xff
 80097ac:	d90e      	bls.n	80097cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	22ff      	movs	r2, #255	; 0xff
 80097b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	8979      	ldrh	r1, [r7, #10]
 80097bc:	4b52      	ldr	r3, [pc, #328]	; (8009908 <HAL_I2C_Mem_Read+0x22c>)
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 fb43 	bl	8009e50 <I2C_TransferConfig>
 80097ca:	e00f      	b.n	80097ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	8979      	ldrh	r1, [r7, #10]
 80097de:	4b4a      	ldr	r3, [pc, #296]	; (8009908 <HAL_I2C_Mem_Read+0x22c>)
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fb32 	bl	8009e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	2200      	movs	r2, #0
 80097f4:	2104      	movs	r1, #4
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f970 	bl	8009adc <I2C_WaitOnFlagUntilTimeout>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e07c      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	b2d2      	uxtb	r2, r2
 8009812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009822:	3b01      	subs	r3, #1
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d034      	beq.n	80098ac <HAL_I2C_Mem_Read+0x1d0>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d130      	bne.n	80098ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	2200      	movs	r2, #0
 8009852:	2180      	movs	r1, #128	; 0x80
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 f941 	bl	8009adc <I2C_WaitOnFlagUntilTimeout>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e04d      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009868:	b29b      	uxth	r3, r3
 800986a:	2bff      	cmp	r3, #255	; 0xff
 800986c:	d90e      	bls.n	800988c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	22ff      	movs	r2, #255	; 0xff
 8009872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009878:	b2da      	uxtb	r2, r3
 800987a:	8979      	ldrh	r1, [r7, #10]
 800987c:	2300      	movs	r3, #0
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fae3 	bl	8009e50 <I2C_TransferConfig>
 800988a:	e00f      	b.n	80098ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989a:	b2da      	uxtb	r2, r3
 800989c:	8979      	ldrh	r1, [r7, #10]
 800989e:	2300      	movs	r3, #0
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fad2 	bl	8009e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d19a      	bne.n	80097ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f9a4 	bl	8009c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e01a      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2220      	movs	r2, #32
 80098d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6859      	ldr	r1, [r3, #4]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	4b0b      	ldr	r3, [pc, #44]	; (800990c <HAL_I2C_Mem_Read+0x230>)
 80098de:	400b      	ands	r3, r1
 80098e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e000      	b.n	8009900 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80098fe:	2302      	movs	r3, #2
  }
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	80002400 	.word	0x80002400
 800990c:	fe00e800 	.word	0xfe00e800

08009910 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800991e:	b2db      	uxtb	r3, r3
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af02      	add	r7, sp, #8
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	4608      	mov	r0, r1
 800994e:	4611      	mov	r1, r2
 8009950:	461a      	mov	r2, r3
 8009952:	4603      	mov	r3, r0
 8009954:	817b      	strh	r3, [r7, #10]
 8009956:	460b      	mov	r3, r1
 8009958:	813b      	strh	r3, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800995e:	88fb      	ldrh	r3, [r7, #6]
 8009960:	b2da      	uxtb	r2, r3
 8009962:	8979      	ldrh	r1, [r7, #10]
 8009964:	4b20      	ldr	r3, [pc, #128]	; (80099e8 <I2C_RequestMemoryWrite+0xa4>)
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fa6f 	bl	8009e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	69b9      	ldr	r1, [r7, #24]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f8ff 	bl	8009b7a <I2C_WaitOnTXISFlagUntilTimeout>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e02c      	b.n	80099e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009986:	88fb      	ldrh	r3, [r7, #6]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d105      	bne.n	8009998 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800998c:	893b      	ldrh	r3, [r7, #8]
 800998e:	b2da      	uxtb	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	629a      	str	r2, [r3, #40]	; 0x28
 8009996:	e015      	b.n	80099c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009998:	893b      	ldrh	r3, [r7, #8]
 800999a:	0a1b      	lsrs	r3, r3, #8
 800999c:	b29b      	uxth	r3, r3
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	69b9      	ldr	r1, [r7, #24]
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f8e5 	bl	8009b7a <I2C_WaitOnTXISFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e012      	b.n	80099e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099ba:	893b      	ldrh	r3, [r7, #8]
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2200      	movs	r2, #0
 80099cc:	2180      	movs	r1, #128	; 0x80
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f884 	bl	8009adc <I2C_WaitOnFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	80002000 	.word	0x80002000

080099ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	4608      	mov	r0, r1
 80099f6:	4611      	mov	r1, r2
 80099f8:	461a      	mov	r2, r3
 80099fa:	4603      	mov	r3, r0
 80099fc:	817b      	strh	r3, [r7, #10]
 80099fe:	460b      	mov	r3, r1
 8009a00:	813b      	strh	r3, [r7, #8]
 8009a02:	4613      	mov	r3, r2
 8009a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009a06:	88fb      	ldrh	r3, [r7, #6]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	8979      	ldrh	r1, [r7, #10]
 8009a0c:	4b20      	ldr	r3, [pc, #128]	; (8009a90 <I2C_RequestMemoryRead+0xa4>)
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	2300      	movs	r3, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fa1c 	bl	8009e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	69b9      	ldr	r1, [r7, #24]
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 f8ac 	bl	8009b7a <I2C_WaitOnTXISFlagUntilTimeout>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e02c      	b.n	8009a86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a2c:	88fb      	ldrh	r3, [r7, #6]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d105      	bne.n	8009a3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a32:	893b      	ldrh	r3, [r7, #8]
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a3c:	e015      	b.n	8009a6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a3e:	893b      	ldrh	r3, [r7, #8]
 8009a40:	0a1b      	lsrs	r3, r3, #8
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4c:	69fa      	ldr	r2, [r7, #28]
 8009a4e:	69b9      	ldr	r1, [r7, #24]
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 f892 	bl	8009b7a <I2C_WaitOnTXISFlagUntilTimeout>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e012      	b.n	8009a86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a60:	893b      	ldrh	r3, [r7, #8]
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2200      	movs	r2, #0
 8009a72:	2140      	movs	r1, #64	; 0x40
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f831 	bl	8009adc <I2C_WaitOnFlagUntilTimeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	80002000 	.word	0x80002000

08009a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d103      	bne.n	8009ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d007      	beq.n	8009ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f042 0201 	orr.w	r2, r2, #1
 8009ace:	619a      	str	r2, [r3, #24]
  }
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009aec:	e031      	b.n	8009b52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af4:	d02d      	beq.n	8009b52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af6:	f7fd f913 	bl	8006d20 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d302      	bcc.n	8009b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d122      	bne.n	8009b52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4013      	ands	r3, r2
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2301      	moveq	r3, #1
 8009b1e:	2300      	movne	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d113      	bne.n	8009b52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2e:	f043 0220 	orr.w	r2, r3, #32
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e00f      	b.n	8009b72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	bf0c      	ite	eq
 8009b62:	2301      	moveq	r3, #1
 8009b64:	2300      	movne	r3, #0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	461a      	mov	r2, r3
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d0be      	beq.n	8009aee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b86:	e033      	b.n	8009bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f87f 	bl	8009c90 <I2C_IsErrorOccurred>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e031      	b.n	8009c00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba2:	d025      	beq.n	8009bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ba4:	f7fd f8bc 	bl	8006d20 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d302      	bcc.n	8009bba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d11a      	bne.n	8009bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d013      	beq.n	8009bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bcc:	f043 0220 	orr.w	r2, r3, #32
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e007      	b.n	8009c00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d1c4      	bne.n	8009b88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c14:	e02f      	b.n	8009c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 f838 	bl	8009c90 <I2C_IsErrorOccurred>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e02d      	b.n	8009c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c2a:	f7fd f879 	bl	8006d20 <HAL_GetTick>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d302      	bcc.n	8009c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d11a      	bne.n	8009c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	d013      	beq.n	8009c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c52:	f043 0220 	orr.w	r2, r3, #32
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e007      	b.n	8009c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	d1c8      	bne.n	8009c16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	; 0x28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d068      	beq.n	8009d8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2210      	movs	r2, #16
 8009cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009cc4:	e049      	b.n	8009d5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ccc:	d045      	beq.n	8009d5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009cce:	f7fd f827 	bl	8006d20 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d302      	bcc.n	8009ce4 <I2C_IsErrorOccurred+0x54>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d13a      	bne.n	8009d5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d06:	d121      	bne.n	8009d4c <I2C_IsErrorOccurred+0xbc>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d0e:	d01d      	beq.n	8009d4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009d10:	7cfb      	ldrb	r3, [r7, #19]
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d01a      	beq.n	8009d4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009d26:	f7fc fffb 	bl	8006d20 <HAL_GetTick>
 8009d2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d2c:	e00e      	b.n	8009d4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009d2e:	f7fc fff7 	bl	8006d20 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b19      	cmp	r3, #25
 8009d3a:	d907      	bls.n	8009d4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	f043 0320 	orr.w	r3, r3, #32
 8009d42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009d4a:	e006      	b.n	8009d5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d1e9      	bne.n	8009d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	f003 0320 	and.w	r3, r3, #32
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	d003      	beq.n	8009d70 <I2C_IsErrorOccurred+0xe0>
 8009d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0aa      	beq.n	8009cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	f043 0304 	orr.w	r3, r3, #4
 8009d86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00b      	beq.n	8009dda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	f043 0308 	orr.w	r3, r3, #8
 8009dc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00b      	beq.n	8009dfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	f043 0302 	orr.w	r3, r3, #2
 8009dea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01c      	beq.n	8009e3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fe45 	bl	8009a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6859      	ldr	r1, [r3, #4]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <I2C_IsErrorOccurred+0x1bc>)
 8009e16:	400b      	ands	r3, r1
 8009e18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	431a      	orrs	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3728      	adds	r7, #40	; 0x28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	fe00e800 	.word	0xfe00e800

08009e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	607b      	str	r3, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	817b      	strh	r3, [r7, #10]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e62:	897b      	ldrh	r3, [r7, #10]
 8009e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e68:	7a7b      	ldrb	r3, [r7, #9]
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	0d5b      	lsrs	r3, r3, #21
 8009e8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009e8e:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <I2C_TransferConfig+0x60>)
 8009e90:	430b      	orrs	r3, r1
 8009e92:	43db      	mvns	r3, r3
 8009e94:	ea02 0103 	and.w	r1, r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ea2:	bf00      	nop
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	03ff63ff 	.word	0x03ff63ff

08009eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b20      	cmp	r3, #32
 8009ec8:	d138      	bne.n	8009f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e032      	b.n	8009f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2224      	movs	r2, #36	; 0x24
 8009ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0201 	bic.w	r2, r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6819      	ldr	r1, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 0201 	orr.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e000      	b.n	8009f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f3c:	2302      	movs	r3, #2
  }
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	d139      	bne.n	8009fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d101      	bne.n	8009f6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e033      	b.n	8009fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2224      	movs	r2, #36	; 0x24
 8009f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 0201 	bic.w	r2, r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009f9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	021b      	lsls	r3, r3, #8
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f042 0201 	orr.w	r2, r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e000      	b.n	8009fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009fd4:	2302      	movs	r3, #2
  }
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
	...

08009fe4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	73fb      	strb	r3, [r7, #15]
 800a000:	e007      	b.n	800a012 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800a002:	4b07      	ldr	r3, [pc, #28]	; (800a020 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f023 0204 	bic.w	r2, r3, #4
 800a00a:	4905      	ldr	r1, [pc, #20]	; (800a020 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4313      	orrs	r3, r2
 800a010:	600b      	str	r3, [r1, #0]
  }

  return status;
 800a012:	7bfb      	ldrb	r3, [r7, #15]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	40030400 	.word	0x40030400

0800a024 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800a024:	b480      	push	{r7}
 800a026:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800a028:	4b05      	ldr	r3, [pc, #20]	; (800a040 <HAL_ICACHE_Enable+0x1c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a04      	ldr	r2, [pc, #16]	; (800a040 <HAL_ICACHE_Enable+0x1c>)
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	40030400 	.word	0x40030400

0800a044 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800a04c:	4b39      	ldr	r3, [pc, #228]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a054:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d10b      	bne.n	800a076 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a064:	d905      	bls.n	800a072 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a066:	4b33      	ldr	r3, [pc, #204]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	4a32      	ldr	r2, [pc, #200]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a06c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a070:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	e057      	b.n	800a126 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a07c:	d90a      	bls.n	800a094 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800a07e:	4b2d      	ldr	r3, [pc, #180]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4313      	orrs	r3, r2
 800a08a:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a08c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a090:	60d3      	str	r3, [r2, #12]
 800a092:	e007      	b.n	800a0a4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800a094:	4b27      	ldr	r3, [pc, #156]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a09c:	4925      	ldr	r1, [pc, #148]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a0a4:	4b24      	ldr	r3, [pc, #144]	; (800a138 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a24      	ldr	r2, [pc, #144]	; (800a13c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ae:	099b      	lsrs	r3, r3, #6
 800a0b0:	2232      	movs	r2, #50	; 0x32
 800a0b2:	fb02 f303 	mul.w	r3, r2, r3
 800a0b6:	4a21      	ldr	r2, [pc, #132]	; (800a13c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0bc:	099b      	lsrs	r3, r3, #6
 800a0be:	3301      	adds	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a0c2:	e002      	b.n	800a0ca <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a0ca:	4b1a      	ldr	r3, [pc, #104]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <HAL_PWREx_ControlVoltageScaling+0x98>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f3      	bne.n	800a0c4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01b      	beq.n	800a11a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a15      	ldr	r2, [pc, #84]	; (800a13c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ec:	099b      	lsrs	r3, r3, #6
 800a0ee:	2232      	movs	r2, #50	; 0x32
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	4a11      	ldr	r2, [pc, #68]	; (800a13c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fa:	099b      	lsrs	r3, r3, #6
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a100:	e002      	b.n	800a108 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	3b01      	subs	r3, #1
 800a106:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <HAL_PWREx_ControlVoltageScaling+0xd6>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1f3      	bne.n	800a102 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e000      	b.n	800a126 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	46020800 	.word	0x46020800
 800a138:	20000014 	.word	0x20000014
 800a13c:	10624dd3 	.word	0x10624dd3

0800a140 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800a144:	4b04      	ldr	r3, [pc, #16]	; (800a158 <HAL_PWREx_GetVoltageRange+0x18>)
 800a146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	46020800 	.word	0x46020800

0800a15c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a164:	4b22      	ldr	r3, [pc, #136]	; (800a1f0 <HAL_PWREx_ConfigSupply+0x94>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a22      	ldr	r2, [pc, #136]	; (800a1f4 <HAL_PWREx_ConfigSupply+0x98>)
 800a16a:	fba2 2303 	umull	r2, r3, r2, r3
 800a16e:	099b      	lsrs	r3, r3, #6
 800a170:	2232      	movs	r2, #50	; 0x32
 800a172:	fb02 f303 	mul.w	r3, r2, r3
 800a176:	4a1f      	ldr	r2, [pc, #124]	; (800a1f4 <HAL_PWREx_ConfigSupply+0x98>)
 800a178:	fba2 2303 	umull	r2, r3, r2, r3
 800a17c:	099b      	lsrs	r3, r3, #6
 800a17e:	3301      	adds	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d113      	bne.n	800a1b0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a188:	4b1b      	ldr	r3, [pc, #108]	; (800a1f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	4a1a      	ldr	r2, [pc, #104]	; (800a1f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800a18e:	f023 0302 	bic.w	r3, r3, #2
 800a192:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a194:	e002      	b.n	800a19c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3b01      	subs	r3, #1
 800a19a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a19c:	4b16      	ldr	r3, [pc, #88]	; (800a1f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800a19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d116      	bne.n	800a1d6 <HAL_PWREx_ConfigSupply+0x7a>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1f3      	bne.n	800a196 <HAL_PWREx_ConfigSupply+0x3a>
 800a1ae:	e012      	b.n	800a1d6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a1b0:	4b11      	ldr	r3, [pc, #68]	; (800a1f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	4a10      	ldr	r2, [pc, #64]	; (800a1f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800a1b6:	f043 0302 	orr.w	r3, r3, #2
 800a1ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a1bc:	e002      	b.n	800a1c4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800a1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <HAL_PWREx_ConfigSupply+0x7a>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1f3      	bne.n	800a1be <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e000      	b.n	800a1e2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20000014 	.word	0x20000014
 800a1f4:	10624dd3 	.word	0x10624dd3
 800a1f8:	46020800 	.word	0x46020800

0800a1fc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	4a04      	ldr	r2, [pc, #16]	; (800a218 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a20a:	6113      	str	r3, [r2, #16]
}
 800a20c:	bf00      	nop
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	46020800 	.word	0x46020800

0800a21c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800a220:	4b05      	ldr	r3, [pc, #20]	; (800a238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	4a04      	ldr	r2, [pc, #16]	; (800a238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800a22c:	bf00      	nop
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	46020800 	.word	0x46020800

0800a23c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08e      	sub	sp, #56	; 0x38
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800a244:	2300      	movs	r3, #0
 800a246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	f000 bec8 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a256:	4b99      	ldr	r3, [pc, #612]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	f003 030c 	and.w	r3, r3, #12
 800a25e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a260:	4b96      	ldr	r3, [pc, #600]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	f003 0303 	and.w	r3, r3, #3
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0310 	and.w	r3, r3, #16
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 816c 	beq.w	800a550 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <HAL_RCC_OscConfig+0x52>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	2b0c      	cmp	r3, #12
 800a282:	f040 80de 	bne.w	800a442 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	f040 80da 	bne.w	800a442 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d102      	bne.n	800a29c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	f000 bea5 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2a0:	4b86      	ldr	r3, [pc, #536]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x7a>
 800a2ac:	4b83      	ldr	r3, [pc, #524]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a2b4:	e005      	b.n	800a2c2 <HAL_RCC_OscConfig+0x86>
 800a2b6:	4b81      	ldr	r3, [pc, #516]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a2b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2bc:	041b      	lsls	r3, r3, #16
 800a2be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d255      	bcs.n	800a372 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10a      	bne.n	800a2e2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f001 f9b7 	bl	800b644 <RCC_SetFlashLatencyFromMSIRange>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	f000 be82 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a2e2:	4b76      	ldr	r3, [pc, #472]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	4a75      	ldr	r2, [pc, #468]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a2e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2ec:	6093      	str	r3, [r2, #8]
 800a2ee:	4b73      	ldr	r3, [pc, #460]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	4970      	ldr	r1, [pc, #448]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a308:	d309      	bcc.n	800a31e <HAL_RCC_OscConfig+0xe2>
 800a30a:	4b6c      	ldr	r3, [pc, #432]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f023 021f 	bic.w	r2, r3, #31
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	4969      	ldr	r1, [pc, #420]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	60cb      	str	r3, [r1, #12]
 800a31c:	e07e      	b.n	800a41c <HAL_RCC_OscConfig+0x1e0>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	2b00      	cmp	r3, #0
 800a324:	da0a      	bge.n	800a33c <HAL_RCC_OscConfig+0x100>
 800a326:	4b65      	ldr	r3, [pc, #404]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	015b      	lsls	r3, r3, #5
 800a334:	4961      	ldr	r1, [pc, #388]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a336:	4313      	orrs	r3, r2
 800a338:	60cb      	str	r3, [r1, #12]
 800a33a:	e06f      	b.n	800a41c <HAL_RCC_OscConfig+0x1e0>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a344:	d30a      	bcc.n	800a35c <HAL_RCC_OscConfig+0x120>
 800a346:	4b5d      	ldr	r3, [pc, #372]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	029b      	lsls	r3, r3, #10
 800a354:	4959      	ldr	r1, [pc, #356]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a356:	4313      	orrs	r3, r2
 800a358:	60cb      	str	r3, [r1, #12]
 800a35a:	e05f      	b.n	800a41c <HAL_RCC_OscConfig+0x1e0>
 800a35c:	4b57      	ldr	r3, [pc, #348]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	03db      	lsls	r3, r3, #15
 800a36a:	4954      	ldr	r1, [pc, #336]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	60cb      	str	r3, [r1, #12]
 800a370:	e054      	b.n	800a41c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a372:	4b52      	ldr	r3, [pc, #328]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	4a51      	ldr	r2, [pc, #324]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a37c:	6093      	str	r3, [r2, #8]
 800a37e:	4b4f      	ldr	r3, [pc, #316]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38a:	494c      	ldr	r1, [pc, #304]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a398:	d309      	bcc.n	800a3ae <HAL_RCC_OscConfig+0x172>
 800a39a:	4b48      	ldr	r3, [pc, #288]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f023 021f 	bic.w	r2, r3, #31
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	4945      	ldr	r1, [pc, #276]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	60cb      	str	r3, [r1, #12]
 800a3ac:	e028      	b.n	800a400 <HAL_RCC_OscConfig+0x1c4>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	da0a      	bge.n	800a3cc <HAL_RCC_OscConfig+0x190>
 800a3b6:	4b41      	ldr	r3, [pc, #260]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	015b      	lsls	r3, r3, #5
 800a3c4:	493d      	ldr	r1, [pc, #244]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60cb      	str	r3, [r1, #12]
 800a3ca:	e019      	b.n	800a400 <HAL_RCC_OscConfig+0x1c4>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d4:	d30a      	bcc.n	800a3ec <HAL_RCC_OscConfig+0x1b0>
 800a3d6:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	029b      	lsls	r3, r3, #10
 800a3e4:	4935      	ldr	r1, [pc, #212]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60cb      	str	r3, [r1, #12]
 800a3ea:	e009      	b.n	800a400 <HAL_RCC_OscConfig+0x1c4>
 800a3ec:	4b33      	ldr	r3, [pc, #204]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	03db      	lsls	r3, r3, #15
 800a3fa:	4930      	ldr	r1, [pc, #192]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10a      	bne.n	800a41c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 f91a 	bl	800b644 <RCC_SetFlashLatencyFromMSIRange>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	f000 bde5 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a41c:	f001 f8e4 	bl	800b5e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a420:	4b27      	ldr	r3, [pc, #156]	; (800a4c0 <HAL_RCC_OscConfig+0x284>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4618      	mov	r0, r3
 800a426:	f7fc fc31 	bl	8006c8c <HAL_InitTick>
 800a42a:	4603      	mov	r3, r0
 800a42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800a430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 808a 	beq.w	800a54e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800a43a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43e:	f000 bdd2 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d066      	beq.n	800a518 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a44a:	4b1c      	ldr	r3, [pc, #112]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a1b      	ldr	r2, [pc, #108]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a456:	f7fc fc63 	bl	8006d20 <HAL_GetTick>
 800a45a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a45c:	e009      	b.n	800a472 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a45e:	f7fc fc5f 	bl	8006d20 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d902      	bls.n	800a472 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	f000 bdba 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a472:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0304 	and.w	r3, r3, #4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0ef      	beq.n	800a45e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a47e:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	4a0e      	ldr	r2, [pc, #56]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a488:	6093      	str	r3, [r2, #8]
 800a48a:	4b0c      	ldr	r3, [pc, #48]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	4909      	ldr	r1, [pc, #36]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a4a4:	d30e      	bcc.n	800a4c4 <HAL_RCC_OscConfig+0x288>
 800a4a6:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	f023 021f 	bic.w	r2, r3, #31
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	4902      	ldr	r1, [pc, #8]	; (800a4bc <HAL_RCC_OscConfig+0x280>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60cb      	str	r3, [r1, #12]
 800a4b8:	e04a      	b.n	800a550 <HAL_RCC_OscConfig+0x314>
 800a4ba:	bf00      	nop
 800a4bc:	46020c00 	.word	0x46020c00
 800a4c0:	200000a0 	.word	0x200000a0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	da0a      	bge.n	800a4e2 <HAL_RCC_OscConfig+0x2a6>
 800a4cc:	4b98      	ldr	r3, [pc, #608]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	015b      	lsls	r3, r3, #5
 800a4da:	4995      	ldr	r1, [pc, #596]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	60cb      	str	r3, [r1, #12]
 800a4e0:	e036      	b.n	800a550 <HAL_RCC_OscConfig+0x314>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ea:	d30a      	bcc.n	800a502 <HAL_RCC_OscConfig+0x2c6>
 800a4ec:	4b90      	ldr	r3, [pc, #576]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	029b      	lsls	r3, r3, #10
 800a4fa:	498d      	ldr	r1, [pc, #564]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60cb      	str	r3, [r1, #12]
 800a500:	e026      	b.n	800a550 <HAL_RCC_OscConfig+0x314>
 800a502:	4b8b      	ldr	r3, [pc, #556]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	03db      	lsls	r3, r3, #15
 800a510:	4987      	ldr	r1, [pc, #540]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a512:	4313      	orrs	r3, r2
 800a514:	60cb      	str	r3, [r1, #12]
 800a516:	e01b      	b.n	800a550 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a518:	4b85      	ldr	r3, [pc, #532]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a84      	ldr	r2, [pc, #528]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a51e:	f023 0301 	bic.w	r3, r3, #1
 800a522:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a524:	f7fc fbfc 	bl	8006d20 <HAL_GetTick>
 800a528:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a52a:	e009      	b.n	800a540 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a52c:	f7fc fbf8 	bl	8006d20 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	2b02      	cmp	r3, #2
 800a538:	d902      	bls.n	800a540 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	f000 bd53 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a540:	4b7b      	ldr	r3, [pc, #492]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1ef      	bne.n	800a52c <HAL_RCC_OscConfig+0x2f0>
 800a54c:	e000      	b.n	800a550 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a54e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 808b 	beq.w	800a674 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	2b08      	cmp	r3, #8
 800a562:	d005      	beq.n	800a570 <HAL_RCC_OscConfig+0x334>
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	2b0c      	cmp	r3, #12
 800a568:	d109      	bne.n	800a57e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d106      	bne.n	800a57e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d17d      	bne.n	800a674 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	f000 bd34 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a586:	d106      	bne.n	800a596 <HAL_RCC_OscConfig+0x35a>
 800a588:	4b69      	ldr	r3, [pc, #420]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a68      	ldr	r2, [pc, #416]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a58e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	e041      	b.n	800a61a <HAL_RCC_OscConfig+0x3de>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a59e:	d112      	bne.n	800a5c6 <HAL_RCC_OscConfig+0x38a>
 800a5a0:	4b63      	ldr	r3, [pc, #396]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a62      	ldr	r2, [pc, #392]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5aa:	6013      	str	r3, [r2, #0]
 800a5ac:	4b60      	ldr	r3, [pc, #384]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a5f      	ldr	r2, [pc, #380]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	4b5d      	ldr	r3, [pc, #372]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a5c      	ldr	r2, [pc, #368]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	e029      	b.n	800a61a <HAL_RCC_OscConfig+0x3de>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a5ce:	d112      	bne.n	800a5f6 <HAL_RCC_OscConfig+0x3ba>
 800a5d0:	4b57      	ldr	r3, [pc, #348]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a56      	ldr	r2, [pc, #344]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	4b54      	ldr	r3, [pc, #336]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a53      	ldr	r2, [pc, #332]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	4b51      	ldr	r3, [pc, #324]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a50      	ldr	r2, [pc, #320]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	e011      	b.n	800a61a <HAL_RCC_OscConfig+0x3de>
 800a5f6:	4b4e      	ldr	r3, [pc, #312]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a4d      	ldr	r2, [pc, #308]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a5fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	4b4b      	ldr	r3, [pc, #300]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a4a      	ldr	r2, [pc, #296]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	4b48      	ldr	r3, [pc, #288]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a47      	ldr	r2, [pc, #284]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a614:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a618:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d014      	beq.n	800a64c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a622:	f7fc fb7d 	bl	8006d20 <HAL_GetTick>
 800a626:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a628:	e009      	b.n	800a63e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a62a:	f7fc fb79 	bl	8006d20 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	2b64      	cmp	r3, #100	; 0x64
 800a636:	d902      	bls.n	800a63e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	f000 bcd4 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a63e:	4b3c      	ldr	r3, [pc, #240]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0ef      	beq.n	800a62a <HAL_RCC_OscConfig+0x3ee>
 800a64a:	e013      	b.n	800a674 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a64c:	f7fc fb68 	bl	8006d20 <HAL_GetTick>
 800a650:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a652:	e009      	b.n	800a668 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a654:	f7fc fb64 	bl	8006d20 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b64      	cmp	r3, #100	; 0x64
 800a660:	d902      	bls.n	800a668 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	f000 bcbf 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a668:	4b31      	ldr	r3, [pc, #196]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1ef      	bne.n	800a654 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d05f      	beq.n	800a740 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	2b04      	cmp	r3, #4
 800a684:	d005      	beq.n	800a692 <HAL_RCC_OscConfig+0x456>
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	2b0c      	cmp	r3, #12
 800a68a:	d114      	bne.n	800a6b6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d111      	bne.n	800a6b6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f000 bca3 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a6a0:	4b23      	ldr	r3, [pc, #140]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	041b      	lsls	r3, r3, #16
 800a6ae:	4920      	ldr	r1, [pc, #128]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a6b4:	e044      	b.n	800a740 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d024      	beq.n	800a708 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a6be:	4b1c      	ldr	r3, [pc, #112]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a1b      	ldr	r2, [pc, #108]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a6c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a6ca:	f7fc fb29 	bl	8006d20 <HAL_GetTick>
 800a6ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6d0:	e009      	b.n	800a6e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6d2:	f7fc fb25 	bl	8006d20 <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d902      	bls.n	800a6e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	f000 bc80 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6e6:	4b12      	ldr	r3, [pc, #72]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0ef      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a6f2:	4b0f      	ldr	r3, [pc, #60]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	041b      	lsls	r3, r3, #16
 800a700:	490b      	ldr	r1, [pc, #44]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a702:	4313      	orrs	r3, r2
 800a704:	610b      	str	r3, [r1, #16]
 800a706:	e01b      	b.n	800a740 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a708:	4b09      	ldr	r3, [pc, #36]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a08      	ldr	r2, [pc, #32]	; (800a730 <HAL_RCC_OscConfig+0x4f4>)
 800a70e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a712:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a714:	f7fc fb04 	bl	8006d20 <HAL_GetTick>
 800a718:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a71a:	e00b      	b.n	800a734 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a71c:	f7fc fb00 	bl	8006d20 <HAL_GetTick>
 800a720:	4602      	mov	r2, r0
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	2b02      	cmp	r3, #2
 800a728:	d904      	bls.n	800a734 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800a72a:	2303      	movs	r3, #3
 800a72c:	f000 bc5b 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
 800a730:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a734:	4baf      	ldr	r3, [pc, #700]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1ed      	bne.n	800a71c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0308 	and.w	r3, r3, #8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 80c8 	beq.w	800a8de <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a74e:	2300      	movs	r3, #0
 800a750:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a754:	4ba7      	ldr	r3, [pc, #668]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d111      	bne.n	800a786 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a762:	4ba4      	ldr	r3, [pc, #656]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a768:	4aa2      	ldr	r2, [pc, #648]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a76a:	f043 0304 	orr.w	r3, r3, #4
 800a76e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a772:	4ba0      	ldr	r3, [pc, #640]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	617b      	str	r3, [r7, #20]
 800a77e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a780:	2301      	movs	r3, #1
 800a782:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a786:	4b9c      	ldr	r3, [pc, #624]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d119      	bne.n	800a7c6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a792:	4b99      	ldr	r3, [pc, #612]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a796:	4a98      	ldr	r2, [pc, #608]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a798:	f043 0301 	orr.w	r3, r3, #1
 800a79c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a79e:	f7fc fabf 	bl	8006d20 <HAL_GetTick>
 800a7a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7a4:	e009      	b.n	800a7ba <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7a6:	f7fc fabb 	bl	8006d20 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d902      	bls.n	800a7ba <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	f000 bc16 	b.w	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7ba:	4b8f      	ldr	r3, [pc, #572]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0ef      	beq.n	800a7a6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d05f      	beq.n	800a88e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a7ce:	4b89      	ldr	r3, [pc, #548]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a7d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7d4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699a      	ldr	r2, [r3, #24]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d037      	beq.n	800a854 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d006      	beq.n	800a7fc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e3f4      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d01b      	beq.n	800a83e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a806:	4b7b      	ldr	r3, [pc, #492]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a80c:	4a79      	ldr	r2, [pc, #484]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a80e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a812:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800a816:	f7fc fa83 	bl	8006d20 <HAL_GetTick>
 800a81a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a81c:	e008      	b.n	800a830 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a81e:	f7fc fa7f 	bl	8006d20 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	2b05      	cmp	r3, #5
 800a82a:	d901      	bls.n	800a830 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e3da      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a830:	4b70      	ldr	r3, [pc, #448]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1ef      	bne.n	800a81e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a83e:	4b6d      	ldr	r3, [pc, #436]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a844:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	4969      	ldr	r1, [pc, #420]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a854:	4b67      	ldr	r3, [pc, #412]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a85a:	4a66      	ldr	r2, [pc, #408]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a85c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a860:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a864:	f7fc fa5c 	bl	8006d20 <HAL_GetTick>
 800a868:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a86a:	e008      	b.n	800a87e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a86c:	f7fc fa58 	bl	8006d20 <HAL_GetTick>
 800a870:	4602      	mov	r2, r0
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	2b05      	cmp	r3, #5
 800a878:	d901      	bls.n	800a87e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e3b3      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a87e:	4b5d      	ldr	r3, [pc, #372]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0ef      	beq.n	800a86c <HAL_RCC_OscConfig+0x630>
 800a88c:	e01b      	b.n	800a8c6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a88e:	4b59      	ldr	r3, [pc, #356]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a894:	4a57      	ldr	r2, [pc, #348]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a896:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a89a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a89e:	f7fc fa3f 	bl	8006d20 <HAL_GetTick>
 800a8a2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a8a4:	e008      	b.n	800a8b8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8a6:	f7fc fa3b 	bl	8006d20 <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b05      	cmp	r3, #5
 800a8b2:	d901      	bls.n	800a8b8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e396      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a8b8:	4b4e      	ldr	r3, [pc, #312]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a8ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1ef      	bne.n	800a8a6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a8c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d107      	bne.n	800a8de <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8ce:	4b49      	ldr	r3, [pc, #292]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a8d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8d4:	4a47      	ldr	r2, [pc, #284]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a8d6:	f023 0304 	bic.w	r3, r3, #4
 800a8da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0304 	and.w	r3, r3, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 8111 	beq.w	800ab0e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8f2:	4b40      	ldr	r3, [pc, #256]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a8f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d111      	bne.n	800a924 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a900:	4b3c      	ldr	r3, [pc, #240]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a906:	4a3b      	ldr	r2, [pc, #236]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a908:	f043 0304 	orr.w	r3, r3, #4
 800a90c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a910:	4b38      	ldr	r3, [pc, #224]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a916:	f003 0304 	and.w	r3, r3, #4
 800a91a:	613b      	str	r3, [r7, #16]
 800a91c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a91e:	2301      	movs	r3, #1
 800a920:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a924:	4b34      	ldr	r3, [pc, #208]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d118      	bne.n	800a962 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a930:	4b31      	ldr	r3, [pc, #196]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a934:	4a30      	ldr	r2, [pc, #192]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a936:	f043 0301 	orr.w	r3, r3, #1
 800a93a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a93c:	f7fc f9f0 	bl	8006d20 <HAL_GetTick>
 800a940:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a942:	e008      	b.n	800a956 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a944:	f7fc f9ec 	bl	8006d20 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d901      	bls.n	800a956 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e347      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a956:	4b28      	ldr	r3, [pc, #160]	; (800a9f8 <HAL_RCC_OscConfig+0x7bc>)
 800a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0f0      	beq.n	800a944 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d01f      	beq.n	800a9ae <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f003 0304 	and.w	r3, r3, #4
 800a976:	2b00      	cmp	r3, #0
 800a978:	d010      	beq.n	800a99c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a97a:	4b1e      	ldr	r3, [pc, #120]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a97c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a980:	4a1c      	ldr	r2, [pc, #112]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a982:	f043 0304 	orr.w	r3, r3, #4
 800a986:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a98a:	4b1a      	ldr	r3, [pc, #104]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a98c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a990:	4a18      	ldr	r2, [pc, #96]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a992:	f043 0301 	orr.w	r3, r3, #1
 800a996:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a99a:	e018      	b.n	800a9ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a99c:	4b15      	ldr	r3, [pc, #84]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a99e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9a2:	4a14      	ldr	r2, [pc, #80]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a9a4:	f043 0301 	orr.w	r3, r3, #1
 800a9a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a9ac:	e00f      	b.n	800a9ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9ae:	4b11      	ldr	r3, [pc, #68]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a9b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9b4:	4a0f      	ldr	r2, [pc, #60]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a9b6:	f023 0301 	bic.w	r3, r3, #1
 800a9ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a9be:	4b0d      	ldr	r3, [pc, #52]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a9c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9c4:	4a0b      	ldr	r2, [pc, #44]	; (800a9f4 <HAL_RCC_OscConfig+0x7b8>)
 800a9c6:	f023 0304 	bic.w	r3, r3, #4
 800a9ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d057      	beq.n	800aa86 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a9d6:	f7fc f9a3 	bl	8006d20 <HAL_GetTick>
 800a9da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9dc:	e00e      	b.n	800a9fc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9de:	f7fc f99f 	bl	8006d20 <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d905      	bls.n	800a9fc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e2f8      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
 800a9f4:	46020c00 	.word	0x46020c00
 800a9f8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9fc:	4b9c      	ldr	r3, [pc, #624]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800a9fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0e9      	beq.n	800a9de <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d01b      	beq.n	800aa4e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800aa16:	4b96      	ldr	r3, [pc, #600]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aa18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa1c:	4a94      	ldr	r2, [pc, #592]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aa1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800aa26:	e00a      	b.n	800aa3e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa28:	f7fc f97a 	bl	8006d20 <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e2d3      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800aa3e:	4b8c      	ldr	r3, [pc, #560]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aa40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0ed      	beq.n	800aa28 <HAL_RCC_OscConfig+0x7ec>
 800aa4c:	e053      	b.n	800aaf6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800aa4e:	4b88      	ldr	r3, [pc, #544]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aa50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa54:	4a86      	ldr	r2, [pc, #536]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aa56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800aa5e:	e00a      	b.n	800aa76 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa60:	f7fc f95e 	bl	8006d20 <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e2b7      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800aa76:	4b7e      	ldr	r3, [pc, #504]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aa78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1ed      	bne.n	800aa60 <HAL_RCC_OscConfig+0x824>
 800aa84:	e037      	b.n	800aaf6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800aa86:	f7fc f94b 	bl	8006d20 <HAL_GetTick>
 800aa8a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa8c:	e00a      	b.n	800aaa4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa8e:	f7fc f947 	bl	8006d20 <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d901      	bls.n	800aaa4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e2a0      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aaa4:	4b72      	ldr	r3, [pc, #456]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aaa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1ed      	bne.n	800aa8e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800aab2:	4b6f      	ldr	r3, [pc, #444]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01a      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800aac0:	4b6b      	ldr	r3, [pc, #428]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aac6:	4a6a      	ldr	r2, [pc, #424]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aacc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800aad0:	e00a      	b.n	800aae8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aad2:	f7fc f925 	bl	8006d20 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d901      	bls.n	800aae8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e27e      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800aae8:	4b61      	ldr	r3, [pc, #388]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aaea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aaee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1ed      	bne.n	800aad2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aaf6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d107      	bne.n	800ab0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aafe:	4b5c      	ldr	r3, [pc, #368]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab04:	4a5a      	ldr	r2, [pc, #360]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab06:	f023 0304 	bic.w	r3, r3, #4
 800ab0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d036      	beq.n	800ab88 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d019      	beq.n	800ab56 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800ab22:	4b53      	ldr	r3, [pc, #332]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a52      	ldr	r2, [pc, #328]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab2c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ab2e:	f7fc f8f7 	bl	8006d20 <HAL_GetTick>
 800ab32:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ab34:	e008      	b.n	800ab48 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab36:	f7fc f8f3 	bl	8006d20 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e24e      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ab48:	4b49      	ldr	r3, [pc, #292]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0f0      	beq.n	800ab36 <HAL_RCC_OscConfig+0x8fa>
 800ab54:	e018      	b.n	800ab88 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800ab56:	4b46      	ldr	r3, [pc, #280]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a45      	ldr	r2, [pc, #276]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab60:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ab62:	f7fc f8dd 	bl	8006d20 <HAL_GetTick>
 800ab66:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ab68:	e008      	b.n	800ab7c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab6a:	f7fc f8d9 	bl	8006d20 <HAL_GetTick>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d901      	bls.n	800ab7c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e234      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ab7c:	4b3c      	ldr	r3, [pc, #240]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1f0      	bne.n	800ab6a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d036      	beq.n	800ac02 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d019      	beq.n	800abd0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800ab9c:	4b34      	ldr	r3, [pc, #208]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a33      	ldr	r2, [pc, #204]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800aba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aba6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aba8:	f7fc f8ba 	bl	8006d20 <HAL_GetTick>
 800abac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800abae:	e008      	b.n	800abc2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800abb0:	f7fc f8b6 	bl	8006d20 <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e211      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800abc2:	4b2b      	ldr	r3, [pc, #172]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0f0      	beq.n	800abb0 <HAL_RCC_OscConfig+0x974>
 800abce:	e018      	b.n	800ac02 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800abd0:	4b27      	ldr	r3, [pc, #156]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a26      	ldr	r2, [pc, #152]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800abd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800abdc:	f7fc f8a0 	bl	8006d20 <HAL_GetTick>
 800abe0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800abe4:	f7fc f89c 	bl	8006d20 <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e1f7      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800abf6:	4b1e      	ldr	r3, [pc, #120]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f0      	bne.n	800abe4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d07f      	beq.n	800ad0e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d062      	beq.n	800acdc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800ac16:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	4a15      	ldr	r2, [pc, #84]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac20:	6093      	str	r3, [r2, #8]
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2e:	4910      	ldr	r1, [pc, #64]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ac3c:	d309      	bcc.n	800ac52 <HAL_RCC_OscConfig+0xa16>
 800ac3e:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	f023 021f 	bic.w	r2, r3, #31
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	4909      	ldr	r1, [pc, #36]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60cb      	str	r3, [r1, #12]
 800ac50:	e02a      	b.n	800aca8 <HAL_RCC_OscConfig+0xa6c>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	da0c      	bge.n	800ac74 <HAL_RCC_OscConfig+0xa38>
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	015b      	lsls	r3, r3, #5
 800ac68:	4901      	ldr	r1, [pc, #4]	; (800ac70 <HAL_RCC_OscConfig+0xa34>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60cb      	str	r3, [r1, #12]
 800ac6e:	e01b      	b.n	800aca8 <HAL_RCC_OscConfig+0xa6c>
 800ac70:	46020c00 	.word	0x46020c00
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac7c:	d30a      	bcc.n	800ac94 <HAL_RCC_OscConfig+0xa58>
 800ac7e:	4ba1      	ldr	r3, [pc, #644]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	029b      	lsls	r3, r3, #10
 800ac8c:	499d      	ldr	r1, [pc, #628]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	60cb      	str	r3, [r1, #12]
 800ac92:	e009      	b.n	800aca8 <HAL_RCC_OscConfig+0xa6c>
 800ac94:	4b9b      	ldr	r3, [pc, #620]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	03db      	lsls	r3, r3, #15
 800aca2:	4998      	ldr	r1, [pc, #608]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800aca8:	4b96      	ldr	r3, [pc, #600]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a95      	ldr	r2, [pc, #596]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800acae:	f043 0310 	orr.w	r3, r3, #16
 800acb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800acb4:	f7fc f834 	bl	8006d20 <HAL_GetTick>
 800acb8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800acbc:	f7fc f830 	bl	8006d20 <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e18b      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800acce:	4b8d      	ldr	r3, [pc, #564]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0320 	and.w	r3, r3, #32
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0f0      	beq.n	800acbc <HAL_RCC_OscConfig+0xa80>
 800acda:	e018      	b.n	800ad0e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800acdc:	4b89      	ldr	r3, [pc, #548]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a88      	ldr	r2, [pc, #544]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ace2:	f023 0310 	bic.w	r3, r3, #16
 800ace6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ace8:	f7fc f81a 	bl	8006d20 <HAL_GetTick>
 800acec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800acee:	e008      	b.n	800ad02 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800acf0:	f7fc f816 	bl	8006d20 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e171      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800ad02:	4b80      	ldr	r3, [pc, #512]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0320 	and.w	r3, r3, #32
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1f0      	bne.n	800acf0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 8166 	beq.w	800afe4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad1e:	4b79      	ldr	r3, [pc, #484]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	f003 030c 	and.w	r3, r3, #12
 800ad26:	2b0c      	cmp	r3, #12
 800ad28:	f000 80f2 	beq.w	800af10 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	f040 80c5 	bne.w	800aec0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ad36:	4b73      	ldr	r3, [pc, #460]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a72      	ldr	r2, [pc, #456]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ad42:	f7fb ffed 	bl	8006d20 <HAL_GetTick>
 800ad46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ad48:	e008      	b.n	800ad5c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad4a:	f7fb ffe9 	bl	8006d20 <HAL_GetTick>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d901      	bls.n	800ad5c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e144      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ad5c:	4b69      	ldr	r3, [pc, #420]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1f0      	bne.n	800ad4a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad68:	4b66      	ldr	r3, [pc, #408]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad6e:	f003 0304 	and.w	r3, r3, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d111      	bne.n	800ad9a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800ad76:	4b63      	ldr	r3, [pc, #396]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad7c:	4a61      	ldr	r2, [pc, #388]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad7e:	f043 0304 	orr.w	r3, r3, #4
 800ad82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ad86:	4b5f      	ldr	r3, [pc, #380]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ad88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800ad9a:	4b5b      	ldr	r3, [pc, #364]	; (800af08 <HAL_RCC_OscConfig+0xccc>)
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ada2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ada6:	d102      	bne.n	800adae <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800adae:	4b56      	ldr	r3, [pc, #344]	; (800af08 <HAL_RCC_OscConfig+0xccc>)
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	4a55      	ldr	r2, [pc, #340]	; (800af08 <HAL_RCC_OscConfig+0xccc>)
 800adb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adb8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800adba:	4b52      	ldr	r3, [pc, #328]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800adbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adc2:	f023 0303 	bic.w	r3, r3, #3
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800adce:	3a01      	subs	r2, #1
 800add0:	0212      	lsls	r2, r2, #8
 800add2:	4311      	orrs	r1, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800add8:	430a      	orrs	r2, r1
 800adda:	494a      	ldr	r1, [pc, #296]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800addc:	4313      	orrs	r3, r2
 800adde:	628b      	str	r3, [r1, #40]	; 0x28
 800ade0:	4b48      	ldr	r3, [pc, #288]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ade2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ade4:	4b49      	ldr	r3, [pc, #292]	; (800af0c <HAL_RCC_OscConfig+0xcd0>)
 800ade6:	4013      	ands	r3, r2
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800adec:	3a01      	subs	r2, #1
 800adee:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800adf6:	3a01      	subs	r2, #1
 800adf8:	0252      	lsls	r2, r2, #9
 800adfa:	b292      	uxth	r2, r2
 800adfc:	4311      	orrs	r1, r2
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae02:	3a01      	subs	r2, #1
 800ae04:	0412      	lsls	r2, r2, #16
 800ae06:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ae0a:	4311      	orrs	r1, r2
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ae10:	3a01      	subs	r2, #1
 800ae12:	0612      	lsls	r2, r2, #24
 800ae14:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	493a      	ldr	r1, [pc, #232]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800ae20:	4b38      	ldr	r3, [pc, #224]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae24:	4a37      	ldr	r2, [pc, #220]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae26:	f023 0310 	bic.w	r3, r3, #16
 800ae2a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae30:	4a34      	ldr	r2, [pc, #208]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ae36:	4b33      	ldr	r3, [pc, #204]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3a:	4a32      	ldr	r2, [pc, #200]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae3c:	f043 0310 	orr.w	r3, r3, #16
 800ae40:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800ae42:	4b30      	ldr	r3, [pc, #192]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae46:	f023 020c 	bic.w	r2, r3, #12
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4e:	492d      	ldr	r1, [pc, #180]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae50:	4313      	orrs	r3, r2
 800ae52:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800ae54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d105      	bne.n	800ae68 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ae5c:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <HAL_RCC_OscConfig+0xccc>)
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	4a29      	ldr	r2, [pc, #164]	; (800af08 <HAL_RCC_OscConfig+0xccc>)
 800ae62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae66:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800ae68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d107      	bne.n	800ae80 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800ae70:	4b24      	ldr	r3, [pc, #144]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae76:	4a23      	ldr	r2, [pc, #140]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae78:	f023 0304 	bic.w	r3, r3, #4
 800ae7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ae80:	4b20      	ldr	r3, [pc, #128]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae84:	4a1f      	ldr	r2, [pc, #124]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae8a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800ae8c:	4b1d      	ldr	r3, [pc, #116]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a1c      	ldr	r2, [pc, #112]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800ae92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ae98:	f7fb ff42 	bl	8006d20 <HAL_GetTick>
 800ae9c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ae9e:	e008      	b.n	800aeb2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aea0:	f7fb ff3e 	bl	8006d20 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d901      	bls.n	800aeb2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e099      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aeb2:	4b14      	ldr	r3, [pc, #80]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0f0      	beq.n	800aea0 <HAL_RCC_OscConfig+0xc64>
 800aebe:	e091      	b.n	800afe4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800aec0:	4b10      	ldr	r3, [pc, #64]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a0f      	ldr	r2, [pc, #60]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800aec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aecc:	f7fb ff28 	bl	8006d20 <HAL_GetTick>
 800aed0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aed2:	e008      	b.n	800aee6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aed4:	f7fb ff24 	bl	8006d20 <HAL_GetTick>
 800aed8:	4602      	mov	r2, r0
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d901      	bls.n	800aee6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e07f      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aee6:	4b07      	ldr	r3, [pc, #28]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f0      	bne.n	800aed4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800aef2:	4b04      	ldr	r3, [pc, #16]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800aef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef6:	4a03      	ldr	r2, [pc, #12]	; (800af04 <HAL_RCC_OscConfig+0xcc8>)
 800aef8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800aefc:	f023 0303 	bic.w	r3, r3, #3
 800af00:	6293      	str	r3, [r2, #40]	; 0x28
 800af02:	e06f      	b.n	800afe4 <HAL_RCC_OscConfig+0xda8>
 800af04:	46020c00 	.word	0x46020c00
 800af08:	46020800 	.word	0x46020800
 800af0c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800af10:	4b37      	ldr	r3, [pc, #220]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af16:	4b36      	ldr	r3, [pc, #216]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800af18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af1a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af20:	2b01      	cmp	r3, #1
 800af22:	d039      	beq.n	800af98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f003 0203 	and.w	r2, r3, #3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af2e:	429a      	cmp	r2, r3
 800af30:	d132      	bne.n	800af98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	0a1b      	lsrs	r3, r3, #8
 800af36:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800af40:	429a      	cmp	r2, r3
 800af42:	d129      	bne.n	800af98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800af4e:	429a      	cmp	r2, r3
 800af50:	d122      	bne.n	800af98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af5c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800af5e:	429a      	cmp	r2, r3
 800af60:	d11a      	bne.n	800af98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	0a5b      	lsrs	r3, r3, #9
 800af66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af70:	429a      	cmp	r2, r3
 800af72:	d111      	bne.n	800af98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	0c1b      	lsrs	r3, r3, #16
 800af78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af80:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af82:	429a      	cmp	r2, r3
 800af84:	d108      	bne.n	800af98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	0e1b      	lsrs	r3, r3, #24
 800af8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af92:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af94:	429a      	cmp	r2, r3
 800af96:	d001      	beq.n	800af9c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	e024      	b.n	800afe6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800af9c:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa0:	08db      	lsrs	r3, r3, #3
 800afa2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800afaa:	429a      	cmp	r2, r3
 800afac:	d01a      	beq.n	800afe4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800afae:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800afb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb2:	4a0f      	ldr	r2, [pc, #60]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800afb4:	f023 0310 	bic.w	r3, r3, #16
 800afb8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afba:	f7fb feb1 	bl	8006d20 <HAL_GetTick>
 800afbe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800afc0:	bf00      	nop
 800afc2:	f7fb fead 	bl	8006d20 <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	4293      	cmp	r3, r2
 800afcc:	d0f9      	beq.n	800afc2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd2:	4a07      	ldr	r2, [pc, #28]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800afd8:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800afda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afdc:	4a04      	ldr	r2, [pc, #16]	; (800aff0 <HAL_RCC_OscConfig+0xdb4>)
 800afde:	f043 0310 	orr.w	r3, r3, #16
 800afe2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3738      	adds	r7, #56	; 0x38
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	46020c00 	.word	0x46020c00

0800aff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e1d9      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b008:	4b9b      	ldr	r3, [pc, #620]	; (800b278 <HAL_RCC_ClockConfig+0x284>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 030f 	and.w	r3, r3, #15
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	429a      	cmp	r2, r3
 800b014:	d910      	bls.n	800b038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b016:	4b98      	ldr	r3, [pc, #608]	; (800b278 <HAL_RCC_ClockConfig+0x284>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f023 020f 	bic.w	r2, r3, #15
 800b01e:	4996      	ldr	r1, [pc, #600]	; (800b278 <HAL_RCC_ClockConfig+0x284>)
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	4313      	orrs	r3, r2
 800b024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b026:	4b94      	ldr	r3, [pc, #592]	; (800b278 <HAL_RCC_ClockConfig+0x284>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 030f 	and.w	r3, r3, #15
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d001      	beq.n	800b038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e1c1      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	d010      	beq.n	800b066 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	695a      	ldr	r2, [r3, #20]
 800b048:	4b8c      	ldr	r3, [pc, #560]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b050:	429a      	cmp	r2, r3
 800b052:	d908      	bls.n	800b066 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800b054:	4b89      	ldr	r3, [pc, #548]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	4986      	ldr	r1, [pc, #536]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b062:	4313      	orrs	r3, r2
 800b064:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d012      	beq.n	800b098 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	4b81      	ldr	r3, [pc, #516]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	091b      	lsrs	r3, r3, #4
 800b07c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b080:	429a      	cmp	r2, r3
 800b082:	d909      	bls.n	800b098 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b084:	4b7d      	ldr	r3, [pc, #500]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	497a      	ldr	r1, [pc, #488]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b094:	4313      	orrs	r3, r2
 800b096:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d010      	beq.n	800b0c6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	4b74      	ldr	r3, [pc, #464]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d908      	bls.n	800b0c6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b0b4:	4b71      	ldr	r3, [pc, #452]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	496e      	ldr	r1, [pc, #440]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d010      	beq.n	800b0f4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	4b69      	ldr	r3, [pc, #420]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	f003 030f 	and.w	r3, r3, #15
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d908      	bls.n	800b0f4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b0e2:	4b66      	ldr	r3, [pc, #408]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	f023 020f 	bic.w	r2, r3, #15
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	4963      	ldr	r1, [pc, #396]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f000 80d2 	beq.w	800b2a6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800b102:	2300      	movs	r3, #0
 800b104:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d143      	bne.n	800b196 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b10e:	4b5b      	ldr	r3, [pc, #364]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d110      	bne.n	800b13e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b11c:	4b57      	ldr	r3, [pc, #348]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b11e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b122:	4a56      	ldr	r2, [pc, #344]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b124:	f043 0304 	orr.w	r3, r3, #4
 800b128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b12c:	4b53      	ldr	r3, [pc, #332]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b12e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b132:	f003 0304 	and.w	r3, r3, #4
 800b136:	60bb      	str	r3, [r7, #8]
 800b138:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800b13a:	2301      	movs	r3, #1
 800b13c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800b13e:	f7fb fdef 	bl	8006d20 <HAL_GetTick>
 800b142:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800b144:	4b4e      	ldr	r3, [pc, #312]	; (800b280 <HAL_RCC_ClockConfig+0x28c>)
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00f      	beq.n	800b170 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b150:	e008      	b.n	800b164 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800b152:	f7fb fde5 	bl	8006d20 <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d901      	bls.n	800b164 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e12b      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b164:	4b46      	ldr	r3, [pc, #280]	; (800b280 <HAL_RCC_ClockConfig+0x28c>)
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0f0      	beq.n	800b152 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b170:	7dfb      	ldrb	r3, [r7, #23]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d107      	bne.n	800b186 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b176:	4b41      	ldr	r3, [pc, #260]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b17c:	4a3f      	ldr	r2, [pc, #252]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b17e:	f023 0304 	bic.w	r3, r3, #4
 800b182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b186:	4b3d      	ldr	r3, [pc, #244]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d121      	bne.n	800b1d6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e112      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d107      	bne.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b19e:	4b37      	ldr	r3, [pc, #220]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d115      	bne.n	800b1d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e106      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d107      	bne.n	800b1c6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b1b6:	4b31      	ldr	r3, [pc, #196]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 0304 	and.w	r3, r3, #4
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d109      	bne.n	800b1d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e0fa      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1c6:	4b2d      	ldr	r3, [pc, #180]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e0f2      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800b1d6:	4b29      	ldr	r3, [pc, #164]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	f023 0203 	bic.w	r2, r3, #3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	4926      	ldr	r1, [pc, #152]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800b1e8:	f7fb fd9a 	bl	8006d20 <HAL_GetTick>
 800b1ec:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d112      	bne.n	800b21c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b1f6:	e00a      	b.n	800b20e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1f8:	f7fb fd92 	bl	8006d20 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	f241 3288 	movw	r2, #5000	; 0x1388
 800b206:	4293      	cmp	r3, r2
 800b208:	d901      	bls.n	800b20e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e0d6      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b20e:	4b1b      	ldr	r3, [pc, #108]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	f003 030c 	and.w	r3, r3, #12
 800b216:	2b0c      	cmp	r3, #12
 800b218:	d1ee      	bne.n	800b1f8 <HAL_RCC_ClockConfig+0x204>
 800b21a:	e044      	b.n	800b2a6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	2b02      	cmp	r3, #2
 800b222:	d112      	bne.n	800b24a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b224:	e00a      	b.n	800b23c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b226:	f7fb fd7b 	bl	8006d20 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	f241 3288 	movw	r2, #5000	; 0x1388
 800b234:	4293      	cmp	r3, r2
 800b236:	d901      	bls.n	800b23c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e0bf      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b23c:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	f003 030c 	and.w	r3, r3, #12
 800b244:	2b08      	cmp	r3, #8
 800b246:	d1ee      	bne.n	800b226 <HAL_RCC_ClockConfig+0x232>
 800b248:	e02d      	b.n	800b2a6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d123      	bne.n	800b29a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b252:	e00a      	b.n	800b26a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b254:	f7fb fd64 	bl	8006d20 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b262:	4293      	cmp	r3, r2
 800b264:	d901      	bls.n	800b26a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e0a8      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b26a:	4b04      	ldr	r3, [pc, #16]	; (800b27c <HAL_RCC_ClockConfig+0x288>)
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f003 030c 	and.w	r3, r3, #12
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1ee      	bne.n	800b254 <HAL_RCC_ClockConfig+0x260>
 800b276:	e016      	b.n	800b2a6 <HAL_RCC_ClockConfig+0x2b2>
 800b278:	40022000 	.word	0x40022000
 800b27c:	46020c00 	.word	0x46020c00
 800b280:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b284:	f7fb fd4c 	bl	8006d20 <HAL_GetTick>
 800b288:	4602      	mov	r2, r0
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b292:	4293      	cmp	r3, r2
 800b294:	d901      	bls.n	800b29a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e090      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b29a:	4b4a      	ldr	r3, [pc, #296]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	f003 030c 	and.w	r3, r3, #12
 800b2a2:	2b04      	cmp	r3, #4
 800b2a4:	d1ee      	bne.n	800b284 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d010      	beq.n	800b2d4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	4b43      	ldr	r3, [pc, #268]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	f003 030f 	and.w	r3, r3, #15
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d208      	bcs.n	800b2d4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b2c2:	4b40      	ldr	r3, [pc, #256]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f023 020f 	bic.w	r2, r3, #15
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	493d      	ldr	r1, [pc, #244]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2d4:	4b3c      	ldr	r3, [pc, #240]	; (800b3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 030f 	and.w	r3, r3, #15
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d210      	bcs.n	800b304 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2e2:	4b39      	ldr	r3, [pc, #228]	; (800b3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f023 020f 	bic.w	r2, r3, #15
 800b2ea:	4937      	ldr	r1, [pc, #220]	; (800b3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2f2:	4b35      	ldr	r3, [pc, #212]	; (800b3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 030f 	and.w	r3, r3, #15
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d001      	beq.n	800b304 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e05b      	b.n	800b3bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d010      	beq.n	800b332 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	4b2b      	ldr	r3, [pc, #172]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d208      	bcs.n	800b332 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b320:	4b28      	ldr	r3, [pc, #160]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	4925      	ldr	r1, [pc, #148]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d012      	beq.n	800b364 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691a      	ldr	r2, [r3, #16]
 800b342:	4b20      	ldr	r3, [pc, #128]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	091b      	lsrs	r3, r3, #4
 800b348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d209      	bcs.n	800b364 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b350:	4b1c      	ldr	r3, [pc, #112]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	011b      	lsls	r3, r3, #4
 800b35e:	4919      	ldr	r1, [pc, #100]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b360:	4313      	orrs	r3, r2
 800b362:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 0310 	and.w	r3, r3, #16
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d010      	beq.n	800b392 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695a      	ldr	r2, [r3, #20]
 800b374:	4b13      	ldr	r3, [pc, #76]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d208      	bcs.n	800b392 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b380:	4b10      	ldr	r3, [pc, #64]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	490d      	ldr	r1, [pc, #52]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b38e:	4313      	orrs	r3, r2
 800b390:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b392:	f000 f821 	bl	800b3d8 <HAL_RCC_GetSysClockFreq>
 800b396:	4602      	mov	r2, r0
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800b39a:	6a1b      	ldr	r3, [r3, #32]
 800b39c:	f003 030f 	and.w	r3, r3, #15
 800b3a0:	490a      	ldr	r1, [pc, #40]	; (800b3cc <HAL_RCC_ClockConfig+0x3d8>)
 800b3a2:	5ccb      	ldrb	r3, [r1, r3]
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	4a09      	ldr	r2, [pc, #36]	; (800b3d0 <HAL_RCC_ClockConfig+0x3dc>)
 800b3aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b3ac:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <HAL_RCC_ClockConfig+0x3e0>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fb fc6b 	bl	8006c8c <HAL_InitTick>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]

  return status;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	46020c00 	.word	0x46020c00
 800b3c8:	40022000 	.word	0x40022000
 800b3cc:	0800cd4c 	.word	0x0800cd4c
 800b3d0:	20000014 	.word	0x20000014
 800b3d4:	200000a0 	.word	0x200000a0

0800b3d8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b08b      	sub	sp, #44	; 0x2c
 800b3dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3e6:	4b7b      	ldr	r3, [pc, #492]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	f003 030c 	and.w	r3, r3, #12
 800b3ee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b3f0:	4b78      	ldr	r3, [pc, #480]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	f003 0303 	and.w	r3, r3, #3
 800b3f8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d005      	beq.n	800b40c <HAL_RCC_GetSysClockFreq+0x34>
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	2b0c      	cmp	r3, #12
 800b404:	d121      	bne.n	800b44a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d11e      	bne.n	800b44a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b40c:	4b71      	ldr	r3, [pc, #452]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d107      	bne.n	800b428 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b418:	4b6e      	ldr	r3, [pc, #440]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b41a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b41e:	0b1b      	lsrs	r3, r3, #12
 800b420:	f003 030f 	and.w	r3, r3, #15
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
 800b426:	e005      	b.n	800b434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b428:	4b6a      	ldr	r3, [pc, #424]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	0f1b      	lsrs	r3, r3, #28
 800b42e:	f003 030f 	and.w	r3, r3, #15
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b434:	4a68      	ldr	r2, [pc, #416]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d110      	bne.n	800b466 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b446:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b448:	e00d      	b.n	800b466 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b44a:	4b62      	ldr	r3, [pc, #392]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	f003 030c 	and.w	r3, r3, #12
 800b452:	2b04      	cmp	r3, #4
 800b454:	d102      	bne.n	800b45c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b456:	4b61      	ldr	r3, [pc, #388]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x204>)
 800b458:	623b      	str	r3, [r7, #32]
 800b45a:	e004      	b.n	800b466 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	2b08      	cmp	r3, #8
 800b460:	d101      	bne.n	800b466 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b462:	4b5e      	ldr	r3, [pc, #376]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x204>)
 800b464:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	2b0c      	cmp	r3, #12
 800b46a:	f040 80ac 	bne.w	800b5c6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b46e:	4b59      	ldr	r3, [pc, #356]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b478:	4b56      	ldr	r3, [pc, #344]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47c:	0a1b      	lsrs	r3, r3, #8
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	3301      	adds	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b486:	4b53      	ldr	r3, [pc, #332]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48a:	091b      	lsrs	r3, r3, #4
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b492:	4b50      	ldr	r3, [pc, #320]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b496:	08db      	lsrs	r3, r3, #3
 800b498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	fb02 f303 	mul.w	r3, r2, r3
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4aa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 8086 	beq.w	800b5c2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d003      	beq.n	800b4c4 <HAL_RCC_GetSysClockFreq+0xec>
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d022      	beq.n	800b508 <HAL_RCC_GetSysClockFreq+0x130>
 800b4c2:	e043      	b.n	800b54c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ce:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b5e0 <HAL_RCC_GetSysClockFreq+0x208>
 800b4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d6:	4b3f      	ldr	r3, [pc, #252]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4de:	ee07 3a90 	vmov	s15, r3
 800b4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b4e6:	ed97 6a01 	vldr	s12, [r7, #4]
 800b4ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b5e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800b4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b502:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b506:	e046      	b.n	800b596 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b512:	eddf 6a33 	vldr	s13, [pc, #204]	; 800b5e0 <HAL_RCC_GetSysClockFreq+0x208>
 800b516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51a:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b52a:	ed97 6a01 	vldr	s12, [r7, #4]
 800b52e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800b5e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800b532:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b536:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b53a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b546:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b54a:	e024      	b.n	800b596 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	ee07 3a90 	vmov	s15, r3
 800b552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b564:	4b1b      	ldr	r3, [pc, #108]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b574:	ed97 6a01 	vldr	s12, [r7, #4]
 800b578:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800b5e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800b57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b580:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b588:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b590:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b594:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b596:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59a:	0e1b      	lsrs	r3, r3, #24
 800b59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ba:	ee17 3a90 	vmov	r3, s15
 800b5be:	623b      	str	r3, [r7, #32]
 800b5c0:	e001      	b.n	800b5c6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	372c      	adds	r7, #44	; 0x2c
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	46020c00 	.word	0x46020c00
 800b5d8:	0800cd64 	.word	0x0800cd64
 800b5dc:	00f42400 	.word	0x00f42400
 800b5e0:	4b742400 	.word	0x4b742400
 800b5e4:	46000000 	.word	0x46000000

0800b5e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b5ec:	f7ff fef4 	bl	800b3d8 <HAL_RCC_GetSysClockFreq>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	4b07      	ldr	r3, [pc, #28]	; (800b610 <HAL_RCC_GetHCLKFreq+0x28>)
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	f003 030f 	and.w	r3, r3, #15
 800b5fa:	4906      	ldr	r1, [pc, #24]	; (800b614 <HAL_RCC_GetHCLKFreq+0x2c>)
 800b5fc:	5ccb      	ldrb	r3, [r1, r3]
 800b5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b602:	4a05      	ldr	r2, [pc, #20]	; (800b618 <HAL_RCC_GetHCLKFreq+0x30>)
 800b604:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b606:	4b04      	ldr	r3, [pc, #16]	; (800b618 <HAL_RCC_GetHCLKFreq+0x30>)
 800b608:	681b      	ldr	r3, [r3, #0]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	46020c00 	.word	0x46020c00
 800b614:	0800cd4c 	.word	0x0800cd4c
 800b618:	20000014 	.word	0x20000014

0800b61c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b620:	f7ff ffe2 	bl	800b5e8 <HAL_RCC_GetHCLKFreq>
 800b624:	4602      	mov	r2, r0
 800b626:	4b05      	ldr	r3, [pc, #20]	; (800b63c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	091b      	lsrs	r3, r3, #4
 800b62c:	f003 0307 	and.w	r3, r3, #7
 800b630:	4903      	ldr	r1, [pc, #12]	; (800b640 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b632:	5ccb      	ldrb	r3, [r1, r3]
 800b634:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b638:	4618      	mov	r0, r3
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	46020c00 	.word	0x46020c00
 800b640:	0800cd5c 	.word	0x0800cd5c

0800b644 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b64c:	4b3e      	ldr	r3, [pc, #248]	; (800b748 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b652:	f003 0304 	and.w	r3, r3, #4
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b65a:	f7fe fd71 	bl	800a140 <HAL_PWREx_GetVoltageRange>
 800b65e:	6178      	str	r0, [r7, #20]
 800b660:	e019      	b.n	800b696 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b662:	4b39      	ldr	r3, [pc, #228]	; (800b748 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b668:	4a37      	ldr	r2, [pc, #220]	; (800b748 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b66a:	f043 0304 	orr.w	r3, r3, #4
 800b66e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b672:	4b35      	ldr	r3, [pc, #212]	; (800b748 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b678:	f003 0304 	and.w	r3, r3, #4
 800b67c:	60fb      	str	r3, [r7, #12]
 800b67e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b680:	f7fe fd5e 	bl	800a140 <HAL_PWREx_GetVoltageRange>
 800b684:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b686:	4b30      	ldr	r3, [pc, #192]	; (800b748 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b68c:	4a2e      	ldr	r2, [pc, #184]	; (800b748 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b68e:	f023 0304 	bic.w	r3, r3, #4
 800b692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b69c:	d003      	beq.n	800b6a6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6a4:	d109      	bne.n	800b6ba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ac:	d202      	bcs.n	800b6b4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b6b2:	e033      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b6b8:	e030      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6c0:	d208      	bcs.n	800b6d4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c8:	d102      	bne.n	800b6d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	613b      	str	r3, [r7, #16]
 800b6ce:	e025      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e035      	b.n	800b740 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6da:	d90f      	bls.n	800b6fc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d109      	bne.n	800b6f6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6e8:	d902      	bls.n	800b6f0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	613b      	str	r3, [r7, #16]
 800b6ee:	e015      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	613b      	str	r3, [r7, #16]
 800b6f4:	e012      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
 800b6fa:	e00f      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b702:	d109      	bne.n	800b718 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b70a:	d102      	bne.n	800b712 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b70c:	2301      	movs	r3, #1
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	e004      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b712:	2302      	movs	r3, #2
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	e001      	b.n	800b71c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b718:	2301      	movs	r3, #1
 800b71a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b71c:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f023 020f 	bic.w	r2, r3, #15
 800b724:	4909      	ldr	r1, [pc, #36]	; (800b74c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	4313      	orrs	r3, r2
 800b72a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b72c:	4b07      	ldr	r3, [pc, #28]	; (800b74c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 030f 	and.w	r3, r3, #15
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	429a      	cmp	r2, r3
 800b738:	d001      	beq.n	800b73e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e000      	b.n	800b740 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	46020c00 	.word	0x46020c00
 800b74c:	40022000 	.word	0x40022000

0800b750 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e03e      	b.n	800b7e4 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f7f6 fcb0 	bl	80020e0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3308      	adds	r3, #8
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f000 f85c 	bl	800b848 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6818      	ldr	r0, [r3, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	461a      	mov	r2, r3
 800b79a:	68b9      	ldr	r1, [r7, #8]
 800b79c:	f000 f97f 	bl	800ba9e <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6858      	ldr	r0, [r3, #4]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	689a      	ldr	r2, [r3, #8]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	f000 f9c8 	bl	800bb42 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	6892      	ldr	r2, [r2, #8]
 800b7ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	6892      	ldr	r2, [r2, #8]
 800b7c6:	f041 0101 	orr.w	r1, r1, #1
 800b7ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b7ce:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <HAL_SRAM_Init+0x9c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a06      	ldr	r2, [pc, #24]	; (800b7ec <HAL_SRAM_Init+0x9c>)
 800b7d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7d8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	420d0400 	.word	0x420d0400

0800b7f0 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7f6 fcaf 	bl	800215c <HAL_SRAM_MspDeInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */

  /* Configure the SRAM registers with their reset values */
  (void)FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6818      	ldr	r0, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6859      	ldr	r1, [r3, #4]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	461a      	mov	r2, r3
 800b80c:	f000 f8ea 	bl	800b9e4 <FMC_NORSRAM_DeInit>

  /* Reset the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_RESET;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hsram);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(const SRAM_HandleTypeDef *hsram)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  return hsram->State;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b838:	b2db      	uxtb	r3, r3
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
	...

0800b848 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	6812      	ldr	r2, [r2, #0]
 800b860:	f023 0101 	bic.w	r1, r3, #1
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	2b08      	cmp	r3, #8
 800b870:	d102      	bne.n	800b878 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b872:	2340      	movs	r3, #64	; 0x40
 800b874:	617b      	str	r3, [r7, #20]
 800b876:	e001      	b.n	800b87c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b878:	2300      	movs	r3, #0
 800b87a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b888:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b88e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b894:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b89a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b8a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b8a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b8ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b8b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b8b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800b8ea:	4b3d      	ldr	r3, [pc, #244]	; (800b9e0 <FMC_NORSRAM_Init+0x198>)
 800b8ec:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8f4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8fc:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800b904:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b90c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	43db      	mvns	r3, r3
 800b91c:	ea02 0103 	and.w	r1, r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	4319      	orrs	r1, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b936:	d10c      	bne.n	800b952 <FMC_NORSRAM_Init+0x10a>
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d008      	beq.n	800b952 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94c:	431a      	orrs	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d006      	beq.n	800b968 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d12f      	bne.n	800b9d2 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a1b      	ldr	r3, [r3, #32]
 800b976:	0c1b      	lsrs	r3, r3, #16
 800b978:	041b      	lsls	r3, r3, #16
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b04      	cmp	r3, #4
 800b98a:	d014      	beq.n	800b9b6 <FMC_NORSRAM_Init+0x16e>
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d819      	bhi.n	800b9c4 <FMC_NORSRAM_Init+0x17c>
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <FMC_NORSRAM_Init+0x152>
 800b994:	2b02      	cmp	r3, #2
 800b996:	d007      	beq.n	800b9a8 <FMC_NORSRAM_Init+0x160>
 800b998:	e014      	b.n	800b9c4 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	621a      	str	r2, [r3, #32]
        break;
 800b9a6:	e014      	b.n	800b9d2 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	621a      	str	r2, [r3, #32]
        break;
 800b9b4:	e00d      	b.n	800b9d2 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	621a      	str	r2, [r3, #32]
        break;
 800b9c2:	e006      	b.n	800b9d2 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a1b      	ldr	r3, [r3, #32]
 800b9c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	621a      	str	r2, [r3, #32]
        break;
 800b9d0:	bf00      	nop
    }
  }

  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	371c      	adds	r7, #28
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	0008fb7f 	.word	0x0008fb7f

0800b9e4 <FMC_NORSRAM_DeInit>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_DeInit(FMC_NORSRAM_TypeDef *Device,
                                     FMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable the FMC_NORSRAM device */
  __FMC_NORSRAM_DISABLE(Device, Bank);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f8:	f023 0101 	bic.w	r1, r3, #1
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* De-initialize the FMC_NORSRAM device */
  /* FMC_NORSRAM_BANK1 */
  if (Bank == FMC_NORSRAM_BANK1)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d106      	bne.n	800ba18 <FMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	f243 01db 	movw	r1, #12507	; 0x30db
 800ba12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ba16:	e005      	b.n	800ba24 <FMC_NORSRAM_DeInit+0x40>
  }
  /* FMC_NORSRAM_BANK2, FMC_NORSRAM_BANK3 or FMC_NORSRAM_BANK4 */
  else
  {
    Device->BTCR[Bank] = 0x000030D2U;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	f243 01d2 	movw	r1, #12498	; 0x30d2
 800ba20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	1c5a      	adds	r2, r3, #1
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ba2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]   = 0x0FFFFFFFU;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ba3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* De-initialize PSRAM chip select counter */
  switch (Bank)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d017      	beq.n	800ba74 <FMC_NORSRAM_DeInit+0x90>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	d81b      	bhi.n	800ba82 <FMC_NORSRAM_DeInit+0x9e>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <FMC_NORSRAM_DeInit+0x74>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d007      	beq.n	800ba66 <FMC_NORSRAM_DeInit+0x82>
 800ba56:	e014      	b.n	800ba82 <FMC_NORSRAM_DeInit+0x9e>
  {
    case FMC_NORSRAM_BANK1 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6a1b      	ldr	r3, [r3, #32]
 800ba5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	621a      	str	r2, [r3, #32]
      break;
 800ba64:	e014      	b.n	800ba90 <FMC_NORSRAM_DeInit+0xac>

    case FMC_NORSRAM_BANK2 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	621a      	str	r2, [r3, #32]
      break;
 800ba72:	e00d      	b.n	800ba90 <FMC_NORSRAM_DeInit+0xac>

    case FMC_NORSRAM_BANK3 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	621a      	str	r2, [r3, #32]
      break;
 800ba80:	e006      	b.n	800ba90 <FMC_NORSRAM_DeInit+0xac>

    default :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	621a      	str	r2, [r3, #32]
      break;
 800ba8e:	bf00      	nop
  }

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b087      	sub	sp, #28
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	60b9      	str	r1, [r7, #8]
 800baa8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	011b      	lsls	r3, r3, #4
 800babe:	431a      	orrs	r2, r3
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	431a      	orrs	r2, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	079b      	lsls	r3, r3, #30
 800bace:	431a      	orrs	r2, r3
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	041b      	lsls	r3, r3, #16
 800bad6:	431a      	orrs	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	3b01      	subs	r3, #1
 800bade:	051b      	lsls	r3, r3, #20
 800bae0:	431a      	orrs	r2, r3
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	3b02      	subs	r3, #2
 800bae8:	061b      	lsls	r3, r3, #24
 800baea:	ea42 0103 	orr.w	r1, r2, r3
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	3201      	adds	r2, #1
 800baf6:	4319      	orrs	r1, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb0a:	d113      	bne.n	800bb34 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb14:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	051b      	lsls	r3, r3, #20
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	607a      	str	r2, [r7, #4]
 800bb4e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb56:	d121      	bne.n	800bb9c <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb60:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6819      	ldr	r1, [r3, #0]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	4319      	orrs	r1, r3
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	4319      	orrs	r1, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	079b      	lsls	r3, r3, #30
 800bb7e:	4319      	orrs	r1, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	4319      	orrs	r1, r3
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	ea42 0103 	orr.w	r1, r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb9a:	e005      	b.n	800bba8 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <memset>:
 800bbb6:	4402      	add	r2, r0
 800bbb8:	4603      	mov	r3, r0
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d100      	bne.n	800bbc0 <memset+0xa>
 800bbbe:	4770      	bx	lr
 800bbc0:	f803 1b01 	strb.w	r1, [r3], #1
 800bbc4:	e7f9      	b.n	800bbba <memset+0x4>
	...

0800bbc8 <__libc_init_array>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	4d0d      	ldr	r5, [pc, #52]	; (800bc00 <__libc_init_array+0x38>)
 800bbcc:	2600      	movs	r6, #0
 800bbce:	4c0d      	ldr	r4, [pc, #52]	; (800bc04 <__libc_init_array+0x3c>)
 800bbd0:	1b64      	subs	r4, r4, r5
 800bbd2:	10a4      	asrs	r4, r4, #2
 800bbd4:	42a6      	cmp	r6, r4
 800bbd6:	d109      	bne.n	800bbec <__libc_init_array+0x24>
 800bbd8:	4d0b      	ldr	r5, [pc, #44]	; (800bc08 <__libc_init_array+0x40>)
 800bbda:	2600      	movs	r6, #0
 800bbdc:	4c0b      	ldr	r4, [pc, #44]	; (800bc0c <__libc_init_array+0x44>)
 800bbde:	f000 f817 	bl	800bc10 <_init>
 800bbe2:	1b64      	subs	r4, r4, r5
 800bbe4:	10a4      	asrs	r4, r4, #2
 800bbe6:	42a6      	cmp	r6, r4
 800bbe8:	d105      	bne.n	800bbf6 <__libc_init_array+0x2e>
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
 800bbec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	4798      	blx	r3
 800bbf4:	e7ee      	b.n	800bbd4 <__libc_init_array+0xc>
 800bbf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbfa:	3601      	adds	r6, #1
 800bbfc:	4798      	blx	r3
 800bbfe:	e7f2      	b.n	800bbe6 <__libc_init_array+0x1e>
 800bc00:	0800d354 	.word	0x0800d354
 800bc04:	0800d354 	.word	0x0800d354
 800bc08:	0800d354 	.word	0x0800d354
 800bc0c:	0800d358 	.word	0x0800d358

0800bc10 <_init>:
 800bc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc12:	bf00      	nop
 800bc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc16:	bc08      	pop	{r3}
 800bc18:	469e      	mov	lr, r3
 800bc1a:	4770      	bx	lr

0800bc1c <_fini>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	bf00      	nop
 800bc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc22:	bc08      	pop	{r3}
 800bc24:	469e      	mov	lr, r3
 800bc26:	4770      	bx	lr
